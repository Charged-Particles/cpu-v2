{"id":"d0f38f35764a5535ba3fe658037fe246","_format":"hh-sol-build-info-1","solcVersion":"0.8.13","solcLongVersion":"0.8.13+commit.abaa5c0e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ERC712A.sol":{"content":"pragma solidity 0.8.13;\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\ncontract Azuki is ERC721A {\n    constructor() ERC721A(\"Azuki\", \"AZUKI\") {}\n\n    function mint(uint256 quantity) external payable {\n        // `_mint`'s second argument now takes in a `quantity`, not a `tokenId`.\n        _mint(msg.sender, quantity);\n    }\n}"},"contracts/ERC721All.sol":{"content":"// SPDX-License-Identifier: MIT\n// Written by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity 0.8.13;\n\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../node_modules/solady/src/auth/Ownable.sol\";\n\n// import \"./lib/ERC721.sol\";\nimport \"./lib/ERC721Solady.sol\";\n\n/**\n * @dev todo...\n */\ncontract ERC721All is Ownable, ERC721 {\n  mapping(uint256 => bool) internal _activeTokens;\n\n  /// @dev ERC721 Base Token URI\n  string internal _baseTokenURI;\n  string internal _name;\n  string internal _symbol;\n\n  constructor(\n    string memory name,\n    string memory symbol,\n    string memory baseUri\n  ) ERC721() Ownable() {\n    _baseTokenURI = baseUri;\n    _symbol = symbol;\n    _name = name;\n  }\n\n  function name() public view override returns (string memory) {\n    return _name;\n  }\n\n  function symbol() public view override returns (string memory) {\n    return _symbol;\n  }\n\n  // function balanceOf(address owner) public view override returns (uint256) {\n  //   require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n  //   if (_balances[owner] == 0 && _hasOwnToken(owner)) {\n  //     return 1;\n  //   }\n  //   return _balances[owner];\n  // }\n\n  // function ownerOf(uint256 tokenId) public view override returns (address) {\n  //   require(_isTokenActive(tokenId), \"ERC721: invalid token ID\");\n\n  //   // If token has been transfered then _owners will be populated,\n  //   // otherwise the token ID represents the initial owner\n  //   address owner = _owners[tokenId];\n  //   if (owner == address(0)) {\n  //     owner = address(uint160(tokenId));\n  //   }\n  //   return owner;\n  // }\n\n  function mint() public {\n    _mint(msg.sender, uint256(uint160(msg.sender)));\n  }\n\n  // function _mint(address receiver) internal {\n  //   // Token ID == Minter Address\n  //   uint256 tokenId = uint256(uint160(receiver));\n\n  //   require(receiver != address(0), \"ERC721: mint to the zero address\");\n  //   require(!_isTokenActive(tokenId), \"ERC721: token already minted\");\n\n  //   // Mark Token as Active\n  //   _activeTokens[tokenId] = true;\n\n  //   // Fire Transfer Event\n  //   emit Transfer(address(0), receiver, tokenId);\n  // }\n\n  // function _hasOwnToken(address owner) internal view returns (bool) {\n  //   uint256 ownerTokenId = uint256(uint160(owner));\n  //   address currentOwner = _owners[ownerTokenId];\n  //   return (_isTokenActive(ownerTokenId) && (currentOwner == owner || currentOwner == address(0)));\n  // }\n\n  function tokenURI(uint256 id) public view override returns (string memory) {\n    return _baseTokenURI;\n  }\n}\n"},"contracts/ERC721i.sol":{"content":"// SPDX-License-Identifier: MIT\n// Written by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./lib/ERC721iEnumerable.sol\";\n\n/**\n * @dev This implements a Pre-Mint version of {ERC721} that adds the ability to Pre-Mint\n * all the token ids in the contract as assign an initial owner for each token id.\n *\n * On-chain state for Pre-Mint does not need to be initially stored if Max-Supply is known.\n * Minting is a simple matter of assigning a balance to the pre-mint receiver,\n * and modifying the \"read\" methods to account for the pre-mint receiver as owner.\n * We use the Consecutive Transfer Method as defined in EIP-2309 to signal inital ownership.\n * Almost everything else remains standard.\n * We also default to the contract \"owner\" as the pre-mint receiver, but this can be changed.\n */\ncontract ERC721i is\n  Ownable,\n  ERC721iEnumerable\n{\n  /// @dev EIP-2309: https://eips.ethereum.org/EIPS/eip-2309\n  event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\n\n  /// @dev ERC721 Base Token URI\n  string internal _baseTokenURI;\n\n  /**\n    * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection,\n    * as well as a `minter` and a `maxSupply` for pre-minting the collection.\n    */\n  constructor(\n    string memory name,\n    string memory symbol,\n    string memory baseUri,\n    address minter,\n    uint256 maxSupply\n  )\n    ERC721(name, symbol)\n    Ownable()\n  {\n    _baseTokenURI = baseUri;\n    // Set vars defined in ERC721iEnumerable.sol\n    _maxSupply = maxSupply;\n    _preMintReceiver = minter;\n  }\n\n  /**\n    * @dev Pre-mint the max-supply of token IDs to the minter account.\n    * Token IDs are in base-1 sequential order.\n    */\n  function _preMint() internal {\n    // Update balance for initial owner, defined in ERC721.sol\n    _balances[_preMintReceiver] = _maxSupply;\n\n    // Emit the Consecutive Transfer Event\n    emit ConsecutiveTransfer(1, _maxSupply, address(0), _preMintReceiver);\n  }\n\n  function preMint() external onlyOwner {\n    _preMint();\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return _baseTokenURI;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    _requireMinted(tokenId);\n\n    return _baseURI();\n  }\n}\n"},"contracts/lib/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n// Modified by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n *\n * NOTE:\n *  The only changes made here are:\n *    - change scope of \"_owners\" from private to internal\n *    - change scope of \"_balances\" from private to internal\n *    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) internal _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) internal _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\n        _owners[tokenId] = _NULL_ADDRESS;\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"contracts/lib/ERC721iEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// Modified from: OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n// Modified by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n *\n * @dev This implementation also includes support for pre-minting a max-supply of tokens up-front.\n *\n * Note on pre-mint:\n *  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.\n *  For this reason, the \"allTokens\" state vars are unneccesary and have been removed.\n *  Also defines 2 light-weight state vars: \"_preMintReceiver\" & \"_maxSupply\"\n *  Overrides \"ownerOf\" & \"_exists\"\n */\nabstract contract ERC721iEnumerable is ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Tracking for the Pre-Mint Receiver\n  address internal _preMintReceiver;\n\n  // Max-Supply for Pre-Mint\n  uint256 internal _maxSupply;\n\n  /**\n    * @dev See {IERC165-supportsInterface}.\n    *\n    * Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable\n    */\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n    return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n    * note: Fix contributed by surfer77\n    */\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n    require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n    if (owner == address(_preMintReceiver)) {\n      uint256 supply = totalSupply();\n      uint256 matched = 0;\n      for (uint256 i = 1; i < supply; i++) {\n        if (ownerOf(i) == address(_preMintReceiver)) {\n          matched += 1;\n          if (matched - 1 == index) {\n            return i;\n          }\n        }\n      }\n    }\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-totalSupply}.\n    */\n  function totalSupply() public view virtual override returns (uint256) {\n    // The Total Supply is simply the Max Supply\n    return _maxSupply;\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-tokenByIndex}.\n    */\n  function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n    require(index < _maxSupply, \"ERC721Enumerable: global index out of bounds\");\n    // Array index is 0-based, whereas Token ID is 1-based (sequential).\n    return index + 1;\n  }\n\n  /**\n    * @dev Override the ERC721 \"ownerOf\" function to account for the Pre-Mint Receiver.\n    */\n  function ownerOf(uint256 tokenId) public view virtual override(IERC721, ERC721) returns (address) {\n    // Anything beyond the Pre-Minted supply will use the standard \"ownerOf\"\n    if (tokenId > _maxSupply) {\n      return super.ownerOf(tokenId);\n    }\n\n    // Since we have Pre-Minted the Max-Supply to the \"Pre-Mint Receiver\" account, we know:\n    //  - if the \"_owners\" mapping has not been assigned, then the owner is the Pre-Mint Receiver.\n    //  - after the NFT is transferred, the \"_owners\" mapping will be updated with the new owner.\n    address owner_ = _owners[tokenId];\n    if (owner_ == address(0)) {\n      owner_ = _preMintReceiver;\n    }\n    return owner_;\n  }\n\n  /**\n    * @dev Override the ERC721 \"_exists\" function to account for the Pre-Minted Max-Supply.\n    */\n  function _exists(uint256 tokenId) internal view virtual override(ERC721) returns (bool) {\n    // Anything beyond the Pre-Minted supply will use the standard \"_exists\"\n    if (tokenId > _maxSupply) {\n      return super._exists(tokenId);\n    }\n\n    // We know the Max-Supply has been Pre-Minted with Sequential Token IDs\n    return (tokenId > 0 && tokenId <= _maxSupply);\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-_beforeTokenTransfer}.\n    */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override {\n    super._beforeTokenTransfer(from, to, tokenId);\n\n    if (from != to) {\n      _removeTokenFromOwnerEnumeration(from, tokenId);\n      _addTokenToOwnerEnumeration(to, tokenId);\n    }\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-_addTokenToOwnerEnumeration}.\n    */\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n    uint256 length = ERC721.balanceOf(to);\n    _ownedTokens[to][length] = tokenId;\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n    * @dev See {IERC721Enumerable-_removeTokenFromOwnerEnumeration}.\n    */\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n    // then delete the last slot (swap and pop).\n\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n    // When the token to delete is the last token, the swap operation is unnecessary\n    if (tokenIndex != lastTokenIndex) {\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n    }\n\n    // This also deletes the contents at the last position of the array\n    delete _ownedTokensIndex[tokenId];\n    delete _ownedTokens[from][lastTokenIndex];\n  }\n}\n"},"contracts/lib/ERC721Solady.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple ERC721 implementation with storage hitchhiking.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\n///\n/// @dev Note:\n/// - The ERC721 standard allows for self-approvals.\n///   For performance, this implementation WILL NOT revert for such actions.\n///   Please add any checks with overrides if desired.\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\n/// - The `safeTransfer` functions use the identity precompile (0x4)\n///   to copy memory internally.\n///\n/// If you are overriding:\n/// - NEVER violate the ERC721 invariant:\n///   the balance of an owner MUST always be equal to their number of ownership slots.\n///   The transfer functions do not have an underflow guard for user token balances.\n/// - Make sure all variables written to storage are properly cleaned\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\n/// - Check that the overridden function is actually used in the function you want to\n///   change the behavior of. Much of the code has been manually inlined for performance.\nabstract contract ERC721 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev An account can hold up to 4294967295 tokens.\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Only the token owner or an approved account can manage the token.\n    error NotOwnerNorApproved();\n\n    /// @dev The token does not exist.\n    error TokenDoesNotExist();\n\n    /// @dev The token already exists.\n    error TokenAlreadyExists();\n\n    /// @dev Cannot query the balance for the zero address.\n    error BalanceQueryForZeroAddress();\n\n    /// @dev Cannot mint or transfer to the zero address.\n    error TransferToZeroAddress();\n\n    /// @dev The token must be owned by `from`.\n    error TransferFromIncorrectOwner();\n\n    /// @dev The recipient's balance has overflowed.\n    error AccountBalanceOverflow();\n\n    /// @dev Cannot safely transfer to a contract that does not implement\n    /// the ERC721Receiver interface.\n    error TransferToNonERC721ReceiverImplementer();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\n\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\n\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership data slot of `id` is given by:\n    /// ```\n    ///     mstore(0x00, id)\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n    /// ```\n    /// Bits Layout:\n    /// - [0..159]   `addr`\n    /// - [160..255] `extraData`\n    ///\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\n    ///\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\n    ///\n    /// The balance slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n    ///     mstore(0x00, owner)\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\n    /// ```\n    /// Bits Layout:\n    /// - [0..31]   `balance`\n    /// - [32..255] `aux`\n    ///\n    /// The `operator` approval slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\n    ///     mstore(0x00, owner)\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\n    /// ```\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\n\n    /// @dev Pre-shifted and pre-masked constant.\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC721 METADATA                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the token collection name.\n    function name() public view virtual returns (string memory);\n\n    /// @dev Returns the token collection symbol.\n    function symbol() public view virtual returns (string memory);\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    // function ownerOf(uint256 id) public view virtual returns (address result)\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           ERC721                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function ownerOf(uint256 id) public view virtual returns (address result) {\n        result = _ownerOf(id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(result) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns the number of tokens owned by `owner`.\n    ///\n    /// Requirements:\n    /// - `owner` must not be the zero address.\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Revert if the `owner` is the zero address.\n            if iszero(owner) {\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\n        }\n    }\n\n    /// @dev Returns the account approved to manage token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function getApproved(uint256 id) public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            if iszero(shl(96, sload(ownershipSlot))) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            result := sload(add(1, ownershipSlot))\n        }\n    }\n\n    /// @dev Sets `account` as the approved account to manage token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    /// - The caller must be the owner of the token,\n    ///   or an approved operator for the token owner.\n    ///\n    /// Emits an {Approval} event.\n    function approve(address account, uint256 id) public payable virtual {\n        _approve(msg.sender, account, id);\n    }\n\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, operator)\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\n            mstore(0x00, owner)\n            result := sload(keccak256(0x0c, 0x30))\n        }\n    }\n\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\n    ///\n    /// Emits an {ApprovalForAll} event.\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`msg.sender`, `operator`).\n            mstore(0x1c, operator)\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x30), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            // forgefmt: disable-next-item\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\n        }\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\n        _beforeTokenTransfer(from, to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            from := and(bitmaskAddress, from)\n            to := and(bitmaskAddress, to)\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            let owner := and(bitmaskAddress, ownershipPacked)\n            // Revert if `from` is not the owner, or does not exist.\n            if iszero(mul(owner, eq(owner, from))) {\n                if iszero(owner) {\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                    revert(0x1c, 0x04)\n                }\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\n                revert(0x1c, 0x04)\n            }\n            // Revert if `to` is the zero address.\n            if iszero(to) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // Load, check, and update the token approval.\n            {\n                mstore(0x00, from)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // Revert if the caller is not the owner, nor approved.\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Update with the new owner.\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\n            // Decrement the balance of `from`.\n            {\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\n            }\n            // Increment the balance of `to`.\n            {\n                mstore(0x00, to)\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\n        }\n        _afterTokenTransfer(from, to, id);\n    }\n\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \"\")`.\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\n        transferFrom(from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\n        public\n        payable\n        virtual\n    {\n        transferFrom(from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\n    /// See: https://eips.ethereum.org/EIPS/eip-165\n    /// This function call must use less than 30000 gas.\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let s := shr(224, interfaceId)\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL QUERY FUNCTIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns if token `id` exists.\n    function _exists(uint256 id) internal view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\n        }\n    }\n\n    /// @dev Returns the owner of token `id`.\n    /// Returns the zero address instead of reverting if the token does not exist.\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\n        address tokenId = address(uint160(id));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, tokenId)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // For performance, no events are emitted for the hitchhiking setters.\n    // Please emit your own events if required.\n\n    /// @dev Returns the auxiliary data for `owner`.\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\n        }\n    }\n\n    /// @dev Set the auxiliary data for `owner` to `value`.\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\n    function _setAux(address owner, uint224 value) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            let balanceSlot := keccak256(0x0c, 0x1c)\n            let packed := sload(balanceSlot)\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\n        }\n    }\n\n    /// @dev Returns the extra data for token `id`.\n    /// Minting, transferring, burning a token will not change the extra data.\n    /// The extra data can be set on a non-existent token.\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\n        }\n    }\n\n    /// @dev Sets the extra data for token `id` to `value`.\n    /// Minting, transferring, burning a token will not change the extra data.\n    /// The extra data can be set on a non-existent token.\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let packed := sload(ownershipSlot)\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL MINT FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Mints token `id` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must not exist.\n    /// - `to` cannot be the zero address.\n    ///\n    /// Emits a {Transfer} event.\n    function _mint(address to, uint256 id) internal virtual {\n        _beforeTokenTransfer(address(0), to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            to := shr(96, shl(96, to))\n            // Revert if `to` is the zero address.\n            if iszero(to) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            // Revert if the token already exists.\n            if shl(96, ownershipPacked) {\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\n                revert(0x1c, 0x04)\n            }\n            // Update with the owner.\n            sstore(ownershipSlot, or(ownershipPacked, to))\n            // Increment the balance of the owner.\n            {\n                mstore(0x00, to)\n                let balanceSlot := keccak256(0x0c, 0x1c)\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\n                if iszero(and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(balanceSlot, balanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\n        }\n        _afterTokenTransfer(address(0), to, id);\n    }\n\n    /// @dev Equivalent to `_safeMint(to, id, \"\")`.\n    function _safeMint(address to, uint256 id) internal virtual {\n        _safeMint(to, id, \"\");\n    }\n\n    /// @dev Mints token `id` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must not exist.\n    /// - `to` cannot be the zero address.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL BURN FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_burn(address(0), id)`.\n    function _burn(uint256 id) internal virtual {\n        _burn(address(0), id);\n    }\n\n    /// @dev Destroys token `id`, using `by`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function _burn(address by, uint256 id) internal virtual {\n        address owner = ownerOf(id);\n        _beforeTokenTransfer(owner, address(0), id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            by := shr(96, shl(96, by))\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\n            owner := shr(96, shl(96, ownershipPacked))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // Load and check the token approval.\n            {\n                mstore(0x00, owner)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // If `by` is not the zero address, do the authorization check.\n                // Revert if the `by` is not the owner, nor approved.\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Clear the owner.\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\n            // Decrement the balance of `owner`.\n            {\n                let balanceSlot := keccak256(0x0c, 0x1c)\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\n        }\n        _afterTokenTransfer(owner, address(0), id);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function _isApprovedOrOwner(address account, uint256 id)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            // Clear the upper 96 bits.\n            account := shr(96, shl(96, account))\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // Check if `account` is the `owner`.\n            if iszero(eq(account, owner)) {\n                mstore(0x00, owner)\n                // Check if `account` is approved to manage the token.\n                if iszero(sload(keccak256(0x0c, 0x30))) {\n                    result := eq(account, sload(add(1, ownershipSlot)))\n                }\n            }\n        }\n    }\n\n    /// @dev Returns the account approved to manage token `id`.\n    /// Returns the zero address instead of reverting if the token does not exist.\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\n        }\n    }\n\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\n    function _approve(address account, uint256 id) internal virtual {\n        _approve(address(0), account, id);\n    }\n\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    /// - If `by` is not the zero address, `by` must be the owner\n    ///   or an approved operator for the token owner.\n    ///\n    /// Emits a {Transfer} event.\n    function _approve(address by, address account, uint256 id) internal virtual {\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            account := and(bitmaskAddress, account)\n            by := and(bitmaskAddress, by)\n            // Load the owner of the token.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // If `by` is not the zero address, do the authorization check.\n            // Revert if `by` is not the owner, nor approved.\n            if iszero(or(iszero(by), eq(by, owner))) {\n                mstore(0x00, owner)\n                if iszero(sload(keccak256(0x0c, 0x30))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Sets `account` as the approved account to manage `id`.\n            sstore(add(1, ownershipSlot), account)\n            // Emit the {Approval} event.\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\n        }\n    }\n\n    /// @dev Approve or remove the `operator` as an operator for `by`,\n    /// without authorization checks.\n    ///\n    /// Emits an {ApprovalForAll} event.\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            by := shr(96, shl(96, by))\n            operator := shr(96, shl(96, operator))\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`by`, `operator`).\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\n            mstore(0x00, by)\n            sstore(keccak256(0x0c, 0x30), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\n    function _transfer(address from, address to, uint256 id) internal virtual {\n        _transfer(address(0), from, to, id);\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\n        _beforeTokenTransfer(from, to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            from := and(bitmaskAddress, from)\n            to := and(bitmaskAddress, to)\n            by := and(bitmaskAddress, by)\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            let owner := and(bitmaskAddress, ownershipPacked)\n            // Revert if `from` is not the owner, or does not exist.\n            if iszero(mul(owner, eq(owner, from))) {\n                if iszero(owner) {\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                    revert(0x1c, 0x04)\n                }\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\n                revert(0x1c, 0x04)\n            }\n            // Revert if `to` is the zero address.\n            if iszero(to) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // Load, check, and update the token approval.\n            {\n                mstore(0x00, from)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // If `by` is not the zero address, do the authorization check.\n                // Revert if the `by` is not the owner, nor approved.\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Update with the new owner.\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\n            // Decrement the balance of `from`.\n            {\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\n            }\n            // Increment the balance of `to`.\n            {\n                mstore(0x00, to)\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\n        }\n        _afterTokenTransfer(from, to, id);\n    }\n\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \"\")`.\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\n        _safeTransfer(from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\n        internal\n        virtual\n    {\n        _transfer(address(0), from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \"\")`.\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\n        _safeTransfer(by, from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\n        internal\n        virtual\n    {\n        _transfer(by, from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    HOOKS FOR OVERRIDING                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Hook that is called before any token transfers, including minting and burning.\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\n\n    /// @dev Hook that is called after any token transfers, including minting and burning.\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PRIVATE HELPERS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns if `a` has bytecode of non-zero length.\n    function _hasCode(address a) private view returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := extcodesize(a) // Can handle dirty upper bits.\n        }\n    }\n\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\n    /// Reverts if the target does not support the function correctly.\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\n        private\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the calldata.\n            let m := mload(0x40)\n            let onERC721ReceivedSelector := 0x150b7a02\n            mstore(m, onERC721ReceivedSelector)\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\n            mstore(add(m, 0x60), id)\n            mstore(add(m, 0x80), 0x80)\n            let n := mload(data)\n            mstore(add(m, 0xa0), n)\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\n            // Revert if the call reverts.\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\n                if returndatasize() {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n            // Load the returndata and compare it.\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"},"erc721a/contracts/ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"},"erc721a/contracts/IERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"},"solady/src/auth/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n///\n/// @dev Note:\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\n///\n/// While the ownable portion follows\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\nabstract contract Ownable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The caller is not authorized to call the function.\n    error Unauthorized();\n\n    /// @dev The `newOwner` cannot be the zero address.\n    error NewOwnerIsZeroAddress();\n\n    /// @dev The `pendingOwner` does not have a valid handover request.\n    error NoHandoverRequest();\n\n    /// @dev Cannot double-initialize.\n    error AlreadyInitialized();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n    /// despite it not being as lightweight as a single argument event.\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /// @dev An ownership handover to `pendingOwner` has been requested.\n    event OwnershipHandoverRequested(address indexed pendingOwner);\n\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\n\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The owner slot is given by:\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\n    /// It is intentionally chosen to be a high value\n    /// to avoid collision with lower slots.\n    /// The choice of manual storage layout is to enable compatibility\n    /// with both regular and upgradeable contracts.\n    bytes32 internal constant _OWNER_SLOT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\n\n    /// The ownership handover slot of `newOwner` is given by:\n    /// ```\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n    ///     let handoverSlot := keccak256(0x00, 0x20)\n    /// ```\n    /// It stores the expiry timestamp of the two-step ownership handover.\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     INTERNAL FUNCTIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\n\n    /// @dev Initializes the owner directly without authorization guard.\n    /// This function must be called upon initialization,\n    /// regardless of whether the contract is upgradeable or not.\n    /// This is to enable generalization to both regular and upgradeable contracts,\n    /// and to save gas in case the initial owner is not the caller.\n    /// For performance reasons, this function will not check if there\n    /// is an existing owner.\n    function _initializeOwner(address newOwner) internal virtual {\n        if (_guardInitializeOwner()) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                if sload(ownerSlot) {\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\n                    revert(0x1c, 0x04)\n                }\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Store the new value.\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n            }\n        } else {\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Store the new value.\n                sstore(_OWNER_SLOT, newOwner)\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n            }\n        }\n    }\n\n    /// @dev Sets the owner directly without authorization guard.\n    function _setOwner(address newOwner) internal virtual {\n        if (_guardInitializeOwner()) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n                // Store the new value.\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\n            }\n        } else {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n                // Store the new value.\n                sstore(ownerSlot, newOwner)\n            }\n        }\n    }\n\n    /// @dev Throws if the sender is not the owner.\n    function _checkOwner() internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the caller is not the stored owner, revert.\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\n    /// Override to return a different value if needed.\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\n        return 48 * 3600;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(shl(96, newOwner)) {\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _setOwner(newOwner);\n    }\n\n    /// @dev Allows the owner to renounce their ownership.\n    function renounceOwnership() public payable virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /// @dev Request a two-step ownership handover to the caller.\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\n    function requestOwnershipHandover() public payable virtual {\n        unchecked {\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Compute and set the handover slot to `expires`.\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\n                mstore(0x00, caller())\n                sstore(keccak256(0x0c, 0x20), expires)\n                // Emit the {OwnershipHandoverRequested} event.\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\n            }\n        }\n    }\n\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\n    function cancelOwnershipHandover() public payable virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x20), 0)\n            // Emit the {OwnershipHandoverCanceled} event.\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\n        }\n    }\n\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            let handoverSlot := keccak256(0x0c, 0x20)\n            // If the handover does not exist, or has expired.\n            if gt(timestamp(), sload(handoverSlot)) {\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\n                revert(0x1c, 0x04)\n            }\n            // Set the handover slot to 0.\n            sstore(handoverSlot, 0)\n        }\n        _setOwner(pendingOwner);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   PUBLIC READ FUNCTIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of the contract.\n    function owner() public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := sload(_OWNER_SLOT)\n        }\n    }\n\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\n    function ownershipHandoverExpiresAt(address pendingOwner)\n        public\n        view\n        virtual\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the handover slot.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            // Load the handover slot.\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         MODIFIERS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Marks a function as only callable by the owner.\n    modifier onlyOwner() virtual {\n        _checkOwner();\n        _;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ERC712A.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/ERC712A.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/ERC721All.sol:26:5:\n   |\n26 |     string memory name,\n   |     ^^^^^^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/ERC721All.sol:35:3:\n   |\n35 |   function name() public view override returns (string memory) {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":924,"file":"contracts/ERC721All.sol","message":"The shadowed declaration is here:","start":840}],"severity":"warning","sourceLocation":{"end":685,"file":"contracts/ERC721All.sol","start":667},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/ERC721All.sol:27:5:\n   |\n27 |     string memory symbol,\n   |     ^^^^^^^^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/ERC721All.sol:39:3:\n   |\n39 |   function symbol() public view override returns (string memory) {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":1016,"file":"contracts/ERC721All.sol","message":"The shadowed declaration is here:","start":928}],"severity":"warning","sourceLocation":{"end":711,"file":"contracts/ERC721All.sol","start":691},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721All.sol:87:21:\n   |\n87 |   function tokenURI(uint256 id) public view override returns (string memory) {\n   |                     ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2606,"file":"contracts/ERC721All.sol","start":2596},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[656],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":657,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":656,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,656],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[921],"IERC721":[228]},"id":229,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":229,"sourceUnit":922,"src":"133:47:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":117,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":921,"src":"271:7:1"},"id":118,"nodeType":"InheritanceSpecifier","src":"271:7:1"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"182:67:1","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":228,"linearizedBaseContracts":[228,921],"name":"IERC721","nameLocation":"260:7:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"285:88:1","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":127,"name":"Transfer","nameLocation":"384:8:1","nodeType":"EventDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:1","nodeType":"VariableDeclaration","scope":127,"src":"393:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":123,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:1","nodeType":"VariableDeclaration","scope":127,"src":"415:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":125,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:1","nodeType":"VariableDeclaration","scope":127,"src":"435:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:1"},"src":"378:82:1"},{"anonymous":false,"documentation":{"id":128,"nodeType":"StructuredDocumentation","src":"466:94:1","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":136,"name":"Approval","nameLocation":"571:8:1","nodeType":"EventDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:1","nodeType":"VariableDeclaration","scope":136,"src":"580:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":132,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:1","nodeType":"VariableDeclaration","scope":136,"src":"603:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":134,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:1","nodeType":"VariableDeclaration","scope":136,"src":"629:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:1"},"src":"565:89:1"},{"anonymous":false,"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"660:117:1","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":145,"name":"ApprovalForAll","nameLocation":"788:14:1","nodeType":"EventDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:1","nodeType":"VariableDeclaration","scope":145,"src":"803:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:1","nodeType":"VariableDeclaration","scope":145,"src":"826:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":143,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:1","nodeType":"VariableDeclaration","scope":145,"src":"852:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":142,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:1"},"src":"782:85:1"},{"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"873:76:1","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":153,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:1","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"owner","nameLocation":"981:5:1","nodeType":"VariableDeclaration","scope":153,"src":"973:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:1"},"returnParameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"balance","nameLocation":"1019:7:1","nodeType":"VariableDeclaration","scope":153,"src":"1011:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":150,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:1"},"scope":228,"src":"954:74:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"1034:131:1","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":161,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:1","nodeType":"VariableDeclaration","scope":161,"src":"1187:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:1"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"owner","nameLocation":"1235:5:1","nodeType":"VariableDeclaration","scope":161,"src":"1227:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:1"},"scope":228,"src":"1170:72:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"1248:556:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":173,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:1","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"from","nameLocation":"1843:4:1","nodeType":"VariableDeclaration","scope":173,"src":"1835:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"to","nameLocation":"1857:2:1","nodeType":"VariableDeclaration","scope":173,"src":"1849:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:1","nodeType":"VariableDeclaration","scope":173,"src":"1861:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"data","nameLocation":"1893:4:1","nodeType":"VariableDeclaration","scope":173,"src":"1878:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":169,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[],"src":"1907:0:1"},"scope":228,"src":"1809:99:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":174,"nodeType":"StructuredDocumentation","src":"1914:687:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":183,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:1","nodeType":"FunctionDefinition","parameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"from","nameLocation":"2640:4:1","nodeType":"VariableDeclaration","scope":183,"src":"2632:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"to","nameLocation":"2654:2:1","nodeType":"VariableDeclaration","scope":183,"src":"2646:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:1","nodeType":"VariableDeclaration","scope":183,"src":"2658:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:1"},"returnParameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"2683:0:1"},"scope":228,"src":"2606:78:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"2690:732:1","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:1","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"from","nameLocation":"3457:4:1","nodeType":"VariableDeclaration","scope":193,"src":"3449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"to","nameLocation":"3471:2:1","nodeType":"VariableDeclaration","scope":193,"src":"3463:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:1","nodeType":"VariableDeclaration","scope":193,"src":"3475:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:1"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"3500:0:1"},"scope":228,"src":"3427:74:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"3507:452:1","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":201,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:1","nodeType":"FunctionDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"to","nameLocation":"3989:2:1","nodeType":"VariableDeclaration","scope":201,"src":"3981:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":198,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:1","nodeType":"VariableDeclaration","scope":201,"src":"3993:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:1"},"returnParameters":{"id":200,"nodeType":"ParameterList","parameters":[],"src":"4018:0:1"},"scope":228,"src":"3964:55:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"4025:309:1","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":209,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:1","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"operator","nameLocation":"4374:8:1","nodeType":"VariableDeclaration","scope":209,"src":"4366:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"approved","nameLocation":"4389:8:1","nodeType":"VariableDeclaration","scope":209,"src":"4384:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":205,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:1"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"4407:0:1"},"scope":228,"src":"4339:69:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"4414:139:1","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":217,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:1","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:1","nodeType":"VariableDeclaration","scope":217,"src":"4579:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:1"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"operator","nameLocation":"4627:8:1","nodeType":"VariableDeclaration","scope":217,"src":"4619:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:1"},"scope":228,"src":"4558:79:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"4643:138:1","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:1","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"owner","nameLocation":"4820:5:1","nodeType":"VariableDeclaration","scope":227,"src":"4812:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"operator","nameLocation":"4835:8:1","nodeType":"VariableDeclaration","scope":227,"src":"4827:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:1"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"4868:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:1"},"scope":228,"src":"4786:88:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":229,"src":"250:4626:1","usedErrors":[]}],"src":"108:4769:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[246]},"id":247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":230,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"141:152:2","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":246,"linearizedBaseContracts":[246],"name":"IERC721Receiver","nameLocation":"304:15:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"326:493:2","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":245,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:2","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"operator","nameLocation":"867:8:2","nodeType":"VariableDeclaration","scope":245,"src":"859:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":236,"mutability":"mutable","name":"from","nameLocation":"893:4:2","nodeType":"VariableDeclaration","scope":245,"src":"885:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":235,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:2","nodeType":"VariableDeclaration","scope":245,"src":"907:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"data","nameLocation":"947:4:2","nodeType":"VariableDeclaration","scope":245,"src":"932:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:2"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"976:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":242,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:2"},"scope":246,"src":"824:160:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":247,"src":"294:692:2","usedErrors":[]}],"src":"116:871:2"},"id":2},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","exportedSymbols":{"IERC165":[921],"IERC721":[228],"IERC721Enumerable":[277]},"id":278,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"129:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":278,"sourceUnit":229,"src":"154:24:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":251,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"348:7:3"},"id":252,"nodeType":"InheritanceSpecifier","src":"348:7:3"}],"canonicalName":"IERC721Enumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"180:136:3","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":277,"linearizedBaseContracts":[277,228,921],"name":"IERC721Enumerable","nameLocation":"327:17:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"362:82:3","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":258,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"458:11:3","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"469:2:3"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"495:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"495:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"494:9:3"},"scope":277,"src":"449:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"510:171:3","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":268,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"695:19:3","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"owner","nameLocation":"723:5:3","nodeType":"VariableDeclaration","scope":268,"src":"715:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"715:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":263,"mutability":"mutable","name":"index","nameLocation":"738:5:3","nodeType":"VariableDeclaration","scope":268,"src":"730:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"714:30:3"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"768:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:9:3"},"scope":277,"src":"686:91:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"783:164:3","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"961:12:3","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"index","nameLocation":"982:5:3","nodeType":"VariableDeclaration","scope":276,"src":"974:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"973:15:3"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":276,"src":"1012:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1011:9:3"},"scope":277,"src":"952:69:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":278,"src":"317:706:3","usedErrors":[]}],"src":"129:895:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[921],"IERC721":[228],"IERC721Metadata":[304]},"id":305,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":279,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":280,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":305,"sourceUnit":229,"src":"137:24:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":282,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"326:7:4"},"id":283,"nodeType":"InheritanceSpecifier","src":"326:7:4"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"163:133:4","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":304,"linearizedBaseContracts":[304,228,921],"name":"IERC721Metadata","nameLocation":"307:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"340:58:4","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":289,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:4","nodeType":"FunctionDefinition","parameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"416:2:4"},"returnParameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":289,"src":"442:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":286,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:4"},"scope":304,"src":"403:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"463:60:4","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":295,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:4","nodeType":"FunctionDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[],"src":"543:2:4"},"returnParameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":295,"src":"569:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":292,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:4"},"scope":304,"src":"528:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":296,"nodeType":"StructuredDocumentation","src":"590:90:4","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":303,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:4","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:4","nodeType":"VariableDeclaration","scope":303,"src":"703:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:4"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":303,"src":"743:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":300,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:4"},"scope":304,"src":"685:73:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":305,"src":"297:463:4","usedErrors":[]}],"src":"112:649:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[634]},"id":635,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":306,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":634,"linearizedBaseContracts":[634],"name":"Address","nameLocation":"202:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":321,"nodeType":"Block","src":"1478:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":315,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1702:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1702:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1702:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":314,"id":320,"nodeType":"Return","src":"1695:30:5"}]},"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"216:1191:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":322,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:5","nodeType":"FunctionDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"account","nameLocation":"1440:7:5","nodeType":"VariableDeclaration","scope":322,"src":"1432:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:5"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":322,"src":"1472:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":312,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:5"},"scope":634,"src":"1412:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":355,"nodeType":"Block","src":"2718:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":333,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$634","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$634","typeString":"library Address"}],"id":332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:5","typeDescriptions":{}}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2736:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":336,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2761:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":330,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":340,"nodeType":"ExpressionStatement","src":"2728:73:5"},{"assignments":[342,null],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"success","nameLocation":"2818:7:5","nodeType":"VariableDeclaration","scope":355,"src":"2813:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":341,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":349,"initialValue":{"arguments":[{"hexValue":"","id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":343,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"2831:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2831:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":345,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2853:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2831:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:5"},{"expression":{"arguments":[{"id":351,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"2882:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2874:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"ExpressionStatement","src":"2874:78:5"}]},"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"1738:904:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":356,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:5","nodeType":"FunctionDefinition","parameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:5","nodeType":"VariableDeclaration","scope":356,"src":"2666:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"amount","nameLocation":"2701:6:5","nodeType":"VariableDeclaration","scope":356,"src":"2693:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:5"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[],"src":"2718:0:5"},"scope":634,"src":"2647:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":373,"nodeType":"Block","src":"3790:96:5","statements":[{"expression":{"arguments":[{"id":367,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"3829:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":368,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"3837:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":366,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[414,458],"referencedDeclaration":458,"src":"3807:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3807:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":365,"id":372,"nodeType":"Return","src":"3800:79:5"}]},"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"2965:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":374,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:5","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"target","nameLocation":"3731:6:5","nodeType":"VariableDeclaration","scope":374,"src":"3723:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"data","nameLocation":"3752:4:5","nodeType":"VariableDeclaration","scope":374,"src":"3739:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":360,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:5"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":374,"src":"3776:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":363,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:5"},"scope":634,"src":"3701:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":393,"nodeType":"Block","src":"4255:76:5","statements":[{"expression":{"arguments":[{"id":387,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"4294:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":388,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"4302:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":390,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"4311:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":386,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[414,458],"referencedDeclaration":458,"src":"4272:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":385,"id":392,"nodeType":"Return","src":"4265:59:5"}]},"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"3892:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":394,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:5","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"target","nameLocation":"4147:6:5","nodeType":"VariableDeclaration","scope":394,"src":"4139:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"data","nameLocation":"4176:4:5","nodeType":"VariableDeclaration","scope":394,"src":"4163:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":378,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:5","nodeType":"VariableDeclaration","scope":394,"src":"4190:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":380,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:5"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":394,"src":"4241:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":383,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:5"},"scope":634,"src":"4108:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":413,"nodeType":"Block","src":"4806:111:5","statements":[{"expression":{"arguments":[{"id":407,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"4845:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":408,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"4853:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"4859:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":406,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[414,458],"referencedDeclaration":458,"src":"4823:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":405,"id":412,"nodeType":"Return","src":"4816:94:5"}]},"documentation":{"id":395,"nodeType":"StructuredDocumentation","src":"4337:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":414,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:5","nodeType":"FunctionDefinition","parameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"target","nameLocation":"4732:6:5","nodeType":"VariableDeclaration","scope":414,"src":"4724:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":396,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":399,"mutability":"mutable","name":"data","nameLocation":"4753:4:5","nodeType":"VariableDeclaration","scope":414,"src":"4740:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":398,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":401,"mutability":"mutable","name":"value","nameLocation":"4767:5:5","nodeType":"VariableDeclaration","scope":414,"src":"4759:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:5"},"returnParameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":414,"src":"4792:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:5"},"scope":634,"src":"4693:224:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":457,"nodeType":"Block","src":"5344:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":431,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$634","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$634","typeString":"library Address"}],"id":430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:5","typeDescriptions":{}}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5362:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5362:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5387:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":428,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5354:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":438,"nodeType":"ExpressionStatement","src":"5354:81:5"},{"assignments":[440,442],"declarations":[{"constant":false,"id":440,"mutability":"mutable","name":"success","nameLocation":"5451:7:5","nodeType":"VariableDeclaration","scope":457,"src":"5446:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":442,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:5","nodeType":"VariableDeclaration","scope":457,"src":"5460:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":441,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":449,"initialValue":{"arguments":[{"id":447,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"5513:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":443,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"5487:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5487:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5506:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5487:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:5"},{"expression":{"arguments":[{"id":451,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"5562:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":452,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"5570:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":453,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"5579:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":454,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"5591:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":450,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5535:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5535:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":427,"id":456,"nodeType":"Return","src":"5528:76:5"}]},"documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"4923:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":458,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:5","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"target","nameLocation":"5213:6:5","nodeType":"VariableDeclaration","scope":458,"src":"5205:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"data","nameLocation":"5242:4:5","nodeType":"VariableDeclaration","scope":458,"src":"5229:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":418,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"value","nameLocation":"5264:5:5","nodeType":"VariableDeclaration","scope":458,"src":"5256:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":420,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":423,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:5","nodeType":"VariableDeclaration","scope":458,"src":"5279:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":422,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:5"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":458,"src":"5330:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":425,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:5"},"scope":634,"src":"5165:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":474,"nodeType":"Block","src":"5888:97:5","statements":[{"expression":{"arguments":[{"id":469,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"5924:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":470,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"5932:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":468,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[475,504],"referencedDeclaration":504,"src":"5905:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5905:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":467,"id":473,"nodeType":"Return","src":"5898:80:5"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"5617:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":475,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:5","nodeType":"FunctionDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"target","nameLocation":"5824:6:5","nodeType":"VariableDeclaration","scope":475,"src":"5816:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"data","nameLocation":"5845:4:5","nodeType":"VariableDeclaration","scope":475,"src":"5832:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":462,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:5"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"5874:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":465,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:5"},"scope":634,"src":"5788:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":503,"nodeType":"Block","src":"6327:168:5","statements":[{"assignments":[488,490],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"success","nameLocation":"6343:7:5","nodeType":"VariableDeclaration","scope":503,"src":"6338:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":487,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:5","nodeType":"VariableDeclaration","scope":503,"src":"6352:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":489,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[{"id":493,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6397:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":491,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"6379:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6379:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:5"},{"expression":{"arguments":[{"id":497,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"6446:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":498,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"6454:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":499,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6463:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":500,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"6475:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":496,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"6419:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":486,"id":502,"nodeType":"Return","src":"6412:76:5"}]},"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"5991:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":504,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:5","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"target","nameLocation":"6214:6:5","nodeType":"VariableDeclaration","scope":504,"src":"6206:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":477,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"data","nameLocation":"6243:4:5","nodeType":"VariableDeclaration","scope":504,"src":"6230:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":479,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:5","nodeType":"VariableDeclaration","scope":504,"src":"6257:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":481,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:5"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"6313:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":484,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:5"},"scope":634,"src":"6169:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":520,"nodeType":"Block","src":"6771:101:5","statements":[{"expression":{"arguments":[{"id":515,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6809:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":516,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"6817:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":514,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[521,550],"referencedDeclaration":550,"src":"6788:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6788:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":513,"id":519,"nodeType":"Return","src":"6781:84:5"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"6501:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":521,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:5","nodeType":"FunctionDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"target","nameLocation":"6712:6:5","nodeType":"VariableDeclaration","scope":521,"src":"6704:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"data","nameLocation":"6733:4:5","nodeType":"VariableDeclaration","scope":521,"src":"6720:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":508,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:5"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":521,"src":"6757:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":511,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:5"},"scope":634,"src":"6674:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":549,"nodeType":"Block","src":"7213:170:5","statements":[{"assignments":[534,536],"declarations":[{"constant":false,"id":534,"mutability":"mutable","name":"success","nameLocation":"7229:7:5","nodeType":"VariableDeclaration","scope":549,"src":"7224:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":533,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:5","nodeType":"VariableDeclaration","scope":549,"src":"7238:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":535,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":541,"initialValue":{"arguments":[{"id":539,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"7285:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":537,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7265:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7265:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:5"},{"expression":{"arguments":[{"id":543,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7334:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":544,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"7342:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":545,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"7351:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":546,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"7363:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":542,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7307:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7307:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":532,"id":548,"nodeType":"Return","src":"7300:76:5"}]},"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"6878:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":550,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:5","nodeType":"FunctionDefinition","parameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"target","nameLocation":"7105:6:5","nodeType":"VariableDeclaration","scope":550,"src":"7097:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"data","nameLocation":"7134:4:5","nodeType":"VariableDeclaration","scope":550,"src":"7121:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":525,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:5","nodeType":"VariableDeclaration","scope":550,"src":"7148:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":527,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:5"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":550,"src":"7199:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:5"},"scope":634,"src":"7058:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":588,"nodeType":"Block","src":"7865:434:5","statements":[{"condition":{"id":564,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"7879:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":586,"nodeType":"Block","src":"8235:58:5","statements":[{"expression":{"arguments":[{"id":582,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8257:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":583,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"8269:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":581,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"8249:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8249:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":585,"nodeType":"ExpressionStatement","src":"8249:33:5"}]},"id":587,"nodeType":"IfStatement","src":"7875:418:5","trueBody":{"id":580,"nodeType":"Block","src":"7888:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":565,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"7906:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7906:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":577,"nodeType":"IfStatement","src":"7902:286:5","trueBody":{"id":576,"nodeType":"Block","src":"7930:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":571,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"8132:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":570,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"8121:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8121:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8113:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":575,"nodeType":"ExpressionStatement","src":"8113:60:5"}]}},{"expression":{"id":578,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8208:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":563,"id":579,"nodeType":"Return","src":"8201:17:5"}]}}]},"documentation":{"id":551,"nodeType":"StructuredDocumentation","src":"7389:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":589,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:5","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"target","nameLocation":"7724:6:5","nodeType":"VariableDeclaration","scope":589,"src":"7716:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":555,"mutability":"mutable","name":"success","nameLocation":"7745:7:5","nodeType":"VariableDeclaration","scope":589,"src":"7740:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":554,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":557,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:5","nodeType":"VariableDeclaration","scope":589,"src":"7762:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":556,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:5","nodeType":"VariableDeclaration","scope":589,"src":"7795:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":558,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:5"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":589,"src":"7851:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":561,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:5"},"scope":634,"src":"7671:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":612,"nodeType":"Block","src":"8680:135:5","statements":[{"condition":{"id":601,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"8694:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":610,"nodeType":"Block","src":"8751:58:5","statements":[{"expression":{"arguments":[{"id":606,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"8773:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":607,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"8785:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":605,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"8765:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"8765:33:5"}]},"id":611,"nodeType":"IfStatement","src":"8690:119:5","trueBody":{"id":604,"nodeType":"Block","src":"8703:42:5","statements":[{"expression":{"id":602,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"8724:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":600,"id":603,"nodeType":"Return","src":"8717:17:5"}]}}]},"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"8305:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:5","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"mutability":"mutable","name":"success","nameLocation":"8560:7:5","nodeType":"VariableDeclaration","scope":613,"src":"8555:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":591,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:5","nodeType":"VariableDeclaration","scope":613,"src":"8577:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":593,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:5","nodeType":"VariableDeclaration","scope":613,"src":"8610:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":595,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:5"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"8666:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":598,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:5"},"scope":634,"src":"8520:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"8904:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":620,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"8980:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8980:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":630,"nodeType":"Block","src":"9310:45:5","statements":[{"expression":{"arguments":[{"id":627,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"9331:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":626,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":629,"nodeType":"ExpressionStatement","src":"9324:20:5"}]},"id":631,"nodeType":"IfStatement","src":"8976:379:5","trueBody":{"id":625,"nodeType":"Block","src":"9003:301:5","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:5"},"nodeType":"YulFunctionCall","src":"9202:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:5"},"nodeType":"YulFunctionCall","src":"9243:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:5"},"nodeType":"YulFunctionCall","src":"9236:44:5"},"nodeType":"YulExpressionStatement","src":"9236:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":615,"isOffset":false,"isSlot":false,"src":"9208:10:5","valueSize":1},{"declaration":615,"isOffset":false,"isSlot":false,"src":"9251:10:5","valueSize":1}],"id":624,"nodeType":"InlineAssembly","src":"9152:142:5"}]}}]},"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:5","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:5","nodeType":"VariableDeclaration","scope":633,"src":"8838:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":614,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":617,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:5","nodeType":"VariableDeclaration","scope":633,"src":"8863:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":616,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:5"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[],"src":"8904:0:5"},"scope":634,"src":"8821:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":635,"src":"194:9169:5","usedErrors":[]}],"src":"101:9263:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[656]},"id":657,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":636,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"111:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":656,"linearizedBaseContracts":[656],"name":"Context","nameLocation":"626:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":645,"nodeType":"Block","src":"702:34:6","statements":[{"expression":{"expression":{"id":642,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":641,"id":644,"nodeType":"Return","src":"712:17:6"}]},"id":646,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:6","nodeType":"FunctionDefinition","parameters":{"id":638,"nodeType":"ParameterList","parameters":[],"src":"659:2:6"},"returnParameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"693:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":639,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:6"},"scope":656,"src":"640:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":654,"nodeType":"Block","src":"809:32:6","statements":[{"expression":{"expression":{"id":651,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":650,"id":653,"nodeType":"Return","src":"819:15:6"}]},"id":655,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:6","nodeType":"FunctionDefinition","parameters":{"id":647,"nodeType":"ParameterList","parameters":[],"src":"759:2:6"},"returnParameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":655,"src":"793:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":648,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:6"},"scope":656,"src":"742:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":657,"src":"608:235:6","usedErrors":[]}],"src":"86:758:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1787],"SignedMath":[1892],"Strings":[885]},"id":886,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":658,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":659,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":886,"sourceUnit":1788,"src":"126:25:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":660,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":886,"sourceUnit":1893,"src":"152:31:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"185:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":885,"linearizedBaseContracts":[885],"name":"Strings","nameLocation":"228:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":664,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:7","nodeType":"VariableDeclaration","scope":885,"src":"242:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":662,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":667,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:7","nodeType":"VariableDeclaration","scope":885,"src":"302:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":665,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":714,"nodeType":"Block","src":"518:625:7","statements":[{"id":713,"nodeType":"UncheckedBlock","src":"528:609:7","statements":[{"assignments":[676],"declarations":[{"constant":false,"id":676,"mutability":"mutable","name":"length","nameLocation":"560:6:7","nodeType":"VariableDeclaration","scope":713,"src":"552:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":683,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"580:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":677,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"569:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1787_$","typeString":"type(library Math)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1624,"src":"569:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"569:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:7"},{"assignments":[685],"declarations":[{"constant":false,"id":685,"mutability":"mutable","name":"buffer","nameLocation":"618:6:7","nodeType":"VariableDeclaration","scope":713,"src":"604:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":684,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":690,"initialValue":{"arguments":[{"id":688,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"638:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":686,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"627:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:7"},{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"ptr","nameLocation":"667:3:7","nodeType":"VariableDeclaration","scope":713,"src":"659:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":693,"nodeType":"VariableDeclarationStatement","src":"659:11:7"},{"AST":{"nodeType":"YulBlock","src":"740:67:7","statements":[{"nodeType":"YulAssignment","src":"758:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:7"},"nodeType":"YulFunctionCall","src":"777:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:7"},"nodeType":"YulFunctionCall","src":"765:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":685,"isOffset":false,"isSlot":false,"src":"769:6:7","valueSize":1},{"declaration":676,"isOffset":false,"isSlot":false,"src":"785:6:7","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"758:3:7","valueSize":1}],"id":694,"nodeType":"InlineAssembly","src":"731:76:7"},{"body":{"id":709,"nodeType":"Block","src":"833:267:7","statements":[{"expression":{"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:7","subExpression":{"id":696,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"851:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":698,"nodeType":"ExpressionStatement","src":"851:5:7"},{"AST":{"nodeType":"YulBlock","src":"934:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:7"},"nodeType":"YulFunctionCall","src":"974:14:7"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:7"},"nodeType":"YulFunctionCall","src":"969:30:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:7"},"nodeType":"YulFunctionCall","src":"956:44:7"},"nodeType":"YulExpressionStatement","src":"956:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":664,"isOffset":false,"isSlot":false,"src":"990:8:7","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"964:3:7","valueSize":1},{"declaration":670,"isOffset":false,"isSlot":false,"src":"978:5:7","valueSize":1}],"id":699,"nodeType":"InlineAssembly","src":"925:93:7"},{"expression":{"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":700,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"1035:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":703,"nodeType":"ExpressionStatement","src":"1035:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"1068:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":708,"nodeType":"IfStatement","src":"1064:21:7","trueBody":{"id":707,"nodeType":"Break","src":"1080:5:7"}}]},"condition":{"hexValue":"74727565","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":710,"nodeType":"WhileStatement","src":"820:280:7"},{"expression":{"id":711,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1120:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":674,"id":712,"nodeType":"Return","src":"1113:13:7"}]}]},"documentation":{"id":668,"nodeType":"StructuredDocumentation","src":"352:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:7","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":670,"mutability":"mutable","name":"value","nameLocation":"473:5:7","nodeType":"VariableDeclaration","scope":715,"src":"465:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:7"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":715,"src":"503:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":672,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:7"},"scope":885,"src":"447:696:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":742,"nodeType":"Block","src":"1313:103:7","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"1354:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:7","trueExpression":{"hexValue":"2d","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"1400:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":734,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"1385:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1892_$","typeString":"type(library SignedMath)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1891,"src":"1385:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1385:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":733,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[715,743],"referencedDeclaration":715,"src":"1376:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1376:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":725,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1337:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":723,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:7","typeDescriptions":{}}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1330:79:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":722,"id":741,"nodeType":"Return","src":"1323:86:7"}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"1149:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":743,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:7","nodeType":"FunctionDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"value","nameLocation":"1268:5:7","nodeType":"VariableDeclaration","scope":743,"src":"1261:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":717,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:7"},"returnParameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":743,"src":"1298:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":720,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:7"},"scope":885,"src":"1243:173:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":762,"nodeType":"Block","src":"1595:100:7","statements":[{"id":761,"nodeType":"UncheckedBlock","src":"1605:84:7","statements":[{"expression":{"arguments":[{"id":752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"1648:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"1667:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":753,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"1655:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1787_$","typeString":"type(library Math)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1747,"src":"1655:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1655:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":751,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[763,839,859],"referencedDeclaration":839,"src":"1636:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1636:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":750,"id":760,"nodeType":"Return","src":"1629:49:7"}]}]},"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"1422:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":763,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:7","nodeType":"FunctionDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"value","nameLocation":"1550:5:7","nodeType":"VariableDeclaration","scope":763,"src":"1542:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:7"},"returnParameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":763,"src":"1580:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":748,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:7"},"scope":885,"src":"1521:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":838,"nodeType":"Block","src":"1908:347:7","statements":[{"assignments":[774],"declarations":[{"constant":false,"id":774,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:7","nodeType":"VariableDeclaration","scope":838,"src":"1918:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":783,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":778,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"1954:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":775,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1940:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:7"},{"expression":{"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":784,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"1975:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":786,"indexExpression":{"hexValue":"30","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":789,"nodeType":"ExpressionStatement","src":"1975:15:7"},{"expression":{"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":790,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2000:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":792,"indexExpression":{"hexValue":"31","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":795,"nodeType":"ExpressionStatement","src":"2000:15:7"},{"body":{"id":824,"nodeType":"Block","src":"2070:83:7","statements":[{"expression":{"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":810,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2084:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":812,"indexExpression":{"id":811,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"2091:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":813,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2096:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":817,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2105:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":819,"nodeType":"ExpressionStatement","src":"2084:33:7"},{"expression":{"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2131:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":823,"nodeType":"ExpressionStatement","src":"2131:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":804,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"2058:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":825,"initializationExpression":{"assignments":[797],"declarations":[{"constant":false,"id":797,"mutability":"mutable","name":"i","nameLocation":"2038:1:7","nodeType":"VariableDeclaration","scope":825,"src":"2030:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":803,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":799,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"2046:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:7"},"loopExpression":{"expression":{"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:7","subExpression":{"id":807,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"2067:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":809,"nodeType":"ExpressionStatement","src":"2065:3:7"},"nodeType":"ForStatement","src":"2025:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2170:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":826,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2162:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"2162:55:7"},{"expression":{"arguments":[{"id":835,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2241:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":833,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:7","typeDescriptions":{}}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2234:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":772,"id":837,"nodeType":"Return","src":"2227:21:7"}]},"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"1701:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":839,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:7","nodeType":"FunctionDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"value","nameLocation":"1847:5:7","nodeType":"VariableDeclaration","scope":839,"src":"1839:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"length","nameLocation":"1862:6:7","nodeType":"VariableDeclaration","scope":839,"src":"1854:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:7"},"returnParameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":839,"src":"1893:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":770,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:7"},"scope":885,"src":"1818:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":858,"nodeType":"Block","src":"2480:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":852,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"2525:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":850,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:7","typeDescriptions":{}}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:7","typeDescriptions":{}}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":855,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"2533:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":847,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[763,839,859],"referencedDeclaration":839,"src":"2497:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2497:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":846,"id":857,"nodeType":"Return","src":"2490:59:7"}]},"documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"2261:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":859,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:7","nodeType":"FunctionDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"mutability":"mutable","name":"addr","nameLocation":"2436:4:7","nodeType":"VariableDeclaration","scope":859,"src":"2428:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:7"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":859,"src":"2465:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":844,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:7"},"scope":885,"src":"2407:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":883,"nodeType":"Block","src":"2711:66:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":872,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"2744:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":870,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:7","typeDescriptions":{}}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2738:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":869,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":878,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"2767:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":876,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:7","typeDescriptions":{}}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2761:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":875,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2751:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":868,"id":882,"nodeType":"Return","src":"2721:49:7"}]},"documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"2562:66:7","text":" @dev Returns true if the two strings are equal."},"id":884,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:7","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"a","nameLocation":"2662:1:7","nodeType":"VariableDeclaration","scope":884,"src":"2648:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":861,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"b","nameLocation":"2679:1:7","nodeType":"VariableDeclaration","scope":884,"src":"2665:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":863,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:7"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":884,"src":"2705:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":866,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:7"},"scope":885,"src":"2633:144:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":886,"src":"220:2559:7","usedErrors":[]}],"src":"101:2679:7"},"id":7},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[909],"IERC165":[921]},"id":910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":887,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":888,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":922,"src":"124:23:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":890,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":921,"src":"754:7:8"},"id":891,"nodeType":"InheritanceSpecifier","src":"754:7:8"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"149:576:8","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":909,"linearizedBaseContracts":[909,921],"name":"ERC165","nameLocation":"744:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[920],"body":{"id":907,"nodeType":"Block","src":"920:64:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"937:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":902,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"957:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$921_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$921_$","typeString":"type(contract IERC165)"}],"id":901,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$921","typeString":"type(contract IERC165)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":899,"id":906,"nodeType":"Return","src":"930:47:8"}]},"documentation":{"id":892,"nodeType":"StructuredDocumentation","src":"768:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":908,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:8","nodeType":"FunctionDefinition","overrides":{"id":896,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:8"},"parameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":894,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:8","nodeType":"VariableDeclaration","scope":908,"src":"856:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":893,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:8"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":908,"src":"914:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":897,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:8"},"scope":909,"src":"829:155:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":910,"src":"726:260:8","usedErrors":[]}],"src":"99:888:8"},"id":8},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[921]},"id":922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":911,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"125:279:9","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":921,"linearizedBaseContracts":[921],"name":"IERC165","nameLocation":"415:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"429:340:9","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":920,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:9","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":915,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:9","nodeType":"VariableDeclaration","scope":920,"src":"801:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":914,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:9"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"844:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:9"},"scope":921,"src":"774:76:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":922,"src":"405:447:9","usedErrors":[]}],"src":"100:753:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1787]},"id":1788,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":923,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1787,"linearizedBaseContracts":[1787],"name":"Math","nameLocation":"210:4:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":928,"members":[{"id":925,"name":"Down","nameLocation":"245:4:10","nodeType":"EnumValue","src":"245:4:10"},{"id":926,"name":"Up","nameLocation":"287:2:10","nodeType":"EnumValue","src":"287:2:10"},{"id":927,"name":"Zero","nameLocation":"318:4:10","nodeType":"EnumValue","src":"318:4:10"}],"name":"Rounding","nameLocation":"226:8:10","nodeType":"EnumDefinition","src":"221:122:10"},{"body":{"id":945,"nodeType":"Block","src":"480:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"497:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":939,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"501:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":942,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"509:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:10","trueExpression":{"id":941,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"505:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":937,"id":944,"nodeType":"Return","src":"490:20:10"}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"349:59:10","text":" @dev Returns the largest of two numbers."},"id":946,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:10","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"a","nameLocation":"434:1:10","nodeType":"VariableDeclaration","scope":946,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"b","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":946,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":946,"src":"471:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:10"},"scope":1787,"src":"413:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":963,"nodeType":"Block","src":"655:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"672:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":957,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"676:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":960,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"684:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:10","trueExpression":{"id":959,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"680:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":955,"id":962,"nodeType":"Return","src":"665:20:10"}]},"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"523:60:10","text":" @dev Returns the smallest of two numbers."},"id":964,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:10","nodeType":"FunctionDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":949,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":964,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":964,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"646:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:10"},"scope":1787,"src":"588:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"876:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"931:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":975,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"935:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":977,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":978,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":979,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"945:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":981,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":973,"id":985,"nodeType":"Return","src":"923:28:10"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"698:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:10","nodeType":"FunctionDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"a","nameLocation":"830:1:10","nodeType":"VariableDeclaration","scope":987,"src":"822:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"b","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":987,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":968,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:10"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":987,"src":"867:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":971,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:10"},"scope":1787,"src":"805:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1011,"nodeType":"Block","src":"1228:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1316:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1001,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1330:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1005,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"1339:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:10","trueExpression":{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":996,"id":1010,"nodeType":"Return","src":"1309:35:10"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"964:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1012,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:10","nodeType":"FunctionDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"a","nameLocation":"1182:1:10","nodeType":"VariableDeclaration","scope":1012,"src":"1174:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":989,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"b","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1012,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:10"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1012,"src":"1219:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:10"},"scope":1787,"src":"1157:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"1765:4115:10","statements":[{"id":1133,"nodeType":"UncheckedBlock","src":"1775:4099:10","statements":[{"assignments":[1025],"declarations":[{"constant":false,"id":1025,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:10","nodeType":"VariableDeclaration","scope":1133,"src":"2096:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1024,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1026,"nodeType":"VariableDeclarationStatement","src":"2096:13:10"},{"assignments":[1028],"declarations":[{"constant":false,"id":1028,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:10","nodeType":"VariableDeclaration","scope":1133,"src":"2168:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1029,"nodeType":"VariableDeclarationStatement","src":"2168:13:10"},{"AST":{"nodeType":"YulBlock","src":"2248:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:10"},"nodeType":"YulFunctionCall","src":"2289:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:10"},"nodeType":"YulFunctionCall","src":"2276:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:10"},"nodeType":"YulFunctionCall","src":"2322:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:10"}]},{"nodeType":"YulAssignment","src":"2348:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:10"},"nodeType":"YulFunctionCall","src":"2361:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:10"},"nodeType":"YulFunctionCall","src":"2377:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:10"},"nodeType":"YulFunctionCall","src":"2357:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1025,"isOffset":false,"isSlot":false,"src":"2313:5:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"2369:5:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"2384:5:10","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"2348:5:10","valueSize":1},{"declaration":1015,"isOffset":false,"isSlot":false,"src":"2283:1:10","valueSize":1},{"declaration":1015,"isOffset":false,"isSlot":false,"src":"2326:1:10","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"2286:1:10","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"2329:1:10","valueSize":1}],"id":1030,"nodeType":"InlineAssembly","src":"2239:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1031,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"2486:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"IfStatement","src":"2482:368:10","trueBody":{"id":1038,"nodeType":"Block","src":"2498:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1034,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"2816:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"2824:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1023,"id":1037,"nodeType":"Return","src":"2809:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1041,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"2960:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1042,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"2974:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1046,"nodeType":"ExpressionStatement","src":"2952:53:10"},{"assignments":[1048],"declarations":[{"constant":false,"id":1048,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:10","nodeType":"VariableDeclaration","scope":1133,"src":"3261:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1049,"nodeType":"VariableDeclarationStatement","src":"3261:17:10"},{"AST":{"nodeType":"YulBlock","src":"3301:291:10","statements":[{"nodeType":"YulAssignment","src":"3370:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:10"},"nodeType":"YulFunctionCall","src":"3383:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:10"}]},{"nodeType":"YulAssignment","src":"3490:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:10"},"nodeType":"YulFunctionCall","src":"3510:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:10"},"nodeType":"YulFunctionCall","src":"3499:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:10"}]},{"nodeType":"YulAssignment","src":"3548:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:10"},"nodeType":"YulFunctionCall","src":"3557:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1019,"isOffset":false,"isSlot":false,"src":"3396:11:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"3524:5:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"3548:5:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"3561:5:10","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"3490:5:10","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"3503:5:10","valueSize":1},{"declaration":1048,"isOffset":false,"isSlot":false,"src":"3370:9:10","valueSize":1},{"declaration":1048,"isOffset":false,"isSlot":false,"src":"3513:9:10","valueSize":1},{"declaration":1048,"isOffset":false,"isSlot":false,"src":"3568:9:10","valueSize":1},{"declaration":1015,"isOffset":false,"isSlot":false,"src":"3390:1:10","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"3393:1:10","valueSize":1}],"id":1050,"nodeType":"InlineAssembly","src":"3292:300:10"},{"assignments":[1052],"declarations":[{"constant":false,"id":1052,"mutability":"mutable","name":"twos","nameLocation":"3907:4:10","nodeType":"VariableDeclaration","scope":1133,"src":"3899:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1060,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1053,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"3914:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:10","subExpression":{"id":1054,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"3930:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:10"},{"AST":{"nodeType":"YulBlock","src":"3969:362:10","statements":[{"nodeType":"YulAssignment","src":"4034:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:10"},"nodeType":"YulFunctionCall","src":"4049:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:10"}]},{"nodeType":"YulAssignment","src":"4138:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:10"},"nodeType":"YulFunctionCall","src":"4147:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:10"}]},{"nodeType":"YulAssignment","src":"4278:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:10"},"nodeType":"YulFunctionCall","src":"4294:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:10"},"nodeType":"YulFunctionCall","src":"4290:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:10"},"nodeType":"YulFunctionCall","src":"4286:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:10"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1019,"isOffset":false,"isSlot":false,"src":"4034:11:10","valueSize":1},{"declaration":1019,"isOffset":false,"isSlot":false,"src":"4053:11:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"4138:5:10","valueSize":1},{"declaration":1025,"isOffset":false,"isSlot":false,"src":"4151:5:10","valueSize":1},{"declaration":1052,"isOffset":false,"isSlot":false,"src":"4066:4:10","valueSize":1},{"declaration":1052,"isOffset":false,"isSlot":false,"src":"4158:4:10","valueSize":1},{"declaration":1052,"isOffset":false,"isSlot":false,"src":"4278:4:10","valueSize":1},{"declaration":1052,"isOffset":false,"isSlot":false,"src":"4301:4:10","valueSize":1},{"declaration":1052,"isOffset":false,"isSlot":false,"src":"4308:4:10","valueSize":1}],"id":1061,"nodeType":"InlineAssembly","src":"3960:371:10"},{"expression":{"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"4397:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1063,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"4406:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1064,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"4414:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1067,"nodeType":"ExpressionStatement","src":"4397:21:10"},{"assignments":[1069],"declarations":[{"constant":false,"id":1069,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:10","nodeType":"VariableDeclaration","scope":1133,"src":"4736:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1068,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1076,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1071,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4759:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:10"},{"expression":{"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1077,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"4992:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1079,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5007:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1080,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5021:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1084,"nodeType":"ExpressionStatement","src":"4992:36:10"},{"expression":{"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1085,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1087,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5076:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1088,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5090:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1092,"nodeType":"ExpressionStatement","src":"5061:36:10"},{"expression":{"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1093,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5131:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1095,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5146:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1096,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5160:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1100,"nodeType":"ExpressionStatement","src":"5131:36:10"},{"expression":{"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1101,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5201:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1103,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5216:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1104,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5230:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1108,"nodeType":"ExpressionStatement","src":"5201:36:10"},{"expression":{"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1109,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5271:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1111,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5286:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1112,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5300:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1116,"nodeType":"ExpressionStatement","src":"5271:36:10"},{"expression":{"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1117,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5342:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1119,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5357:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1120,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5371:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1124,"nodeType":"ExpressionStatement","src":"5342:36:10"},{"expression":{"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"5812:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1126,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"5821:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1127,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"5829:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1130,"nodeType":"ExpressionStatement","src":"5812:24:10"},{"expression":{"id":1131,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"5857:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1023,"id":1132,"nodeType":"Return","src":"5850:13:10"}]}]},"documentation":{"id":1013,"nodeType":"StructuredDocumentation","src":"1357:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:10","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"x","nameLocation":"1691:1:10","nodeType":"VariableDeclaration","scope":1135,"src":"1683:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1017,"mutability":"mutable","name":"y","nameLocation":"1702:1:10","nodeType":"VariableDeclaration","scope":1135,"src":"1694:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:10","nodeType":"VariableDeclaration","scope":1135,"src":"1705:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1018,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:10"},"returnParameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"result","nameLocation":"1757:6:10","nodeType":"VariableDeclaration","scope":1135,"src":"1749:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1021,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:10"},"scope":1787,"src":"1667:4213:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1178,"nodeType":"Block","src":"6122:189:10","statements":[{"assignments":[1151],"declarations":[{"constant":false,"id":1151,"mutability":"mutable","name":"result","nameLocation":"6140:6:10","nodeType":"VariableDeclaration","scope":1178,"src":"6132:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1150,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1157,"initialValue":{"arguments":[{"id":1153,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"6156:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1154,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"6159:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1155,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6162:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1152,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1135,1179],"referencedDeclaration":1135,"src":"6149:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6149:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1158,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"6188:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1159,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"6200:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$928_$","typeString":"type(enum Math.Rounding)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":926,"src":"6200:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"src":"6188:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1163,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"6222:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1164,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"6225:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1165,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6228:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1162,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6215:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1175,"nodeType":"IfStatement","src":"6184:98:10","trueBody":{"id":1174,"nodeType":"Block","src":"6246:36:10","statements":[{"expression":{"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"6260:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1173,"nodeType":"ExpressionStatement","src":"6260:11:10"}]}},{"expression":{"id":1176,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"6298:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1149,"id":1177,"nodeType":"Return","src":"6291:13:10"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"5886:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1179,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:10","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"x","nameLocation":"6036:1:10","nodeType":"VariableDeclaration","scope":1179,"src":"6028:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"y","nameLocation":"6047:1:10","nodeType":"VariableDeclaration","scope":1179,"src":"6039:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:10","nodeType":"VariableDeclaration","scope":1179,"src":"6050:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1141,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:10","nodeType":"VariableDeclaration","scope":1179,"src":"6071:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"typeName":{"id":1144,"nodeType":"UserDefinedTypeName","pathNode":{"id":1143,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":928,"src":"6071:8:10"},"referencedDeclaration":928,"src":"6071:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:10"},"returnParameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1179,"src":"6113:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:10"},"scope":1787,"src":"6012:299:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1290,"nodeType":"Block","src":"6587:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"6601:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1193,"nodeType":"IfStatement","src":"6597:45:10","trueBody":{"id":1192,"nodeType":"Block","src":"6609:33:10","statements":[{"expression":{"hexValue":"30","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1186,"id":1191,"nodeType":"Return","src":"6623:8:10"}]}},{"assignments":[1195],"declarations":[{"constant":false,"id":1195,"mutability":"mutable","name":"result","nameLocation":"7329:6:10","nodeType":"VariableDeclaration","scope":1290,"src":"7321:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1204,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1198,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7349:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1197,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1459,1495],"referencedDeclaration":1459,"src":"7344:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:10"},{"id":1289,"nodeType":"UncheckedBlock","src":"7758:408:10","statements":[{"expression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7782:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1206,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7792:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1207,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7801:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7805:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1215,"nodeType":"ExpressionStatement","src":"7782:35:10"},{"expression":{"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7831:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1217,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7841:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1218,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7850:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7854:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1226,"nodeType":"ExpressionStatement","src":"7831:35:10"},{"expression":{"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7880:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1228,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7890:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1229,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7899:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1230,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7903:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1233,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1237,"nodeType":"ExpressionStatement","src":"7880:35:10"},{"expression":{"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7929:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1239,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7939:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1240,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7948:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7952:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1244,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1248,"nodeType":"ExpressionStatement","src":"7929:35:10"},{"expression":{"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7978:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7988:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"7997:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1252,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8001:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1259,"nodeType":"ExpressionStatement","src":"7978:35:10"},{"expression":{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1260,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8027:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8037:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"8046:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1263,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8050:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1266,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"nodeType":"ExpressionStatement","src":"8027:35:10"},{"expression":{"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8076:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8086:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"8095:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1274,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8099:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1277,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1281,"nodeType":"ExpressionStatement","src":"8076:35:10"},{"expression":{"arguments":[{"id":1283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8136:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1284,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"8144:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"8148:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1282,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"8132:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1186,"id":1288,"nodeType":"Return","src":"8125:30:10"}]}]},"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"6317:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1291,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:10","nodeType":"FunctionDefinition","parameters":{"id":1183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"a","nameLocation":"6552:1:10","nodeType":"VariableDeclaration","scope":1291,"src":"6544:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:10"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1291,"src":"6578:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:10"},"scope":1787,"src":"6530:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1326,"nodeType":"Block","src":"8348:161:10","statements":[{"id":1325,"nodeType":"UncheckedBlock","src":"8358:145:10","statements":[{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"result","nameLocation":"8390:6:10","nodeType":"VariableDeclaration","scope":1325,"src":"8382:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1307,"initialValue":{"arguments":[{"id":1305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"8404:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1304,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1291,1327],"referencedDeclaration":1291,"src":"8399:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"8427:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"8437:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1310,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"8449:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$928_$","typeString":"type(enum Math.Rounding)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":926,"src":"8449:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"src":"8437:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"8464:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"8473:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1316,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"8482:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:10","trueExpression":{"hexValue":"31","id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1301,"id":1324,"nodeType":"Return","src":"8420:72:10"}]}]},"documentation":{"id":1292,"nodeType":"StructuredDocumentation","src":"8178:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1327,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:10","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"a","nameLocation":"8294:1:10","nodeType":"VariableDeclaration","scope":1327,"src":"8286:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:10","nodeType":"VariableDeclaration","scope":1327,"src":"8297:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"typeName":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":928,"src":"8297:8:10"},"referencedDeclaration":928,"src":"8297:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:10"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1327,"src":"8339:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:10"},"scope":1787,"src":"8272:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1458,"nodeType":"Block","src":"8694:922:10","statements":[{"assignments":[1336],"declarations":[{"constant":false,"id":1336,"mutability":"mutable","name":"result","nameLocation":"8712:6:10","nodeType":"VariableDeclaration","scope":1458,"src":"8704:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1338,"initialValue":{"hexValue":"30","id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:10"},{"id":1455,"nodeType":"UncheckedBlock","src":"8732:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"8760:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1353,"nodeType":"IfStatement","src":"8756:99:10","trueBody":{"id":1352,"nodeType":"Block","src":"8778:77:10","statements":[{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"8796:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1347,"nodeType":"ExpressionStatement","src":"8796:13:10"},{"expression":{"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"8827:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1351,"nodeType":"ExpressionStatement","src":"8827:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"8872:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"8868:96:10","trueBody":{"id":1367,"nodeType":"Block","src":"8889:75:10","statements":[{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"8907:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"8907:12:10"},{"expression":{"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1363,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"8937:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1366,"nodeType":"ExpressionStatement","src":"8937:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"8981:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1383,"nodeType":"IfStatement","src":"8977:96:10","trueBody":{"id":1382,"nodeType":"Block","src":"8998:75:10","statements":[{"expression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9016:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1377,"nodeType":"ExpressionStatement","src":"9016:12:10"},{"expression":{"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9046:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1381,"nodeType":"ExpressionStatement","src":"9046:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9090:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1398,"nodeType":"IfStatement","src":"9086:96:10","trueBody":{"id":1397,"nodeType":"Block","src":"9107:75:10","statements":[{"expression":{"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9125:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1392,"nodeType":"ExpressionStatement","src":"9125:12:10"},{"expression":{"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9155:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1396,"nodeType":"ExpressionStatement","src":"9155:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9199:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1413,"nodeType":"IfStatement","src":"9195:93:10","trueBody":{"id":1412,"nodeType":"Block","src":"9215:73:10","statements":[{"expression":{"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9233:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1407,"nodeType":"ExpressionStatement","src":"9233:11:10"},{"expression":{"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1408,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9262:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1411,"nodeType":"ExpressionStatement","src":"9262:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9305:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1428,"nodeType":"IfStatement","src":"9301:93:10","trueBody":{"id":1427,"nodeType":"Block","src":"9321:73:10","statements":[{"expression":{"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9339:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1422,"nodeType":"ExpressionStatement","src":"9339:11:10"},{"expression":{"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9368:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1426,"nodeType":"ExpressionStatement","src":"9368:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9411:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1443,"nodeType":"IfStatement","src":"9407:93:10","trueBody":{"id":1442,"nodeType":"Block","src":"9427:73:10","statements":[{"expression":{"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9445:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1437,"nodeType":"ExpressionStatement","src":"9445:11:10"},{"expression":{"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9474:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1441,"nodeType":"ExpressionStatement","src":"9474:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"9517:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"IfStatement","src":"9513:64:10","trueBody":{"id":1453,"nodeType":"Block","src":"9533:44:10","statements":[{"expression":{"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9551:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1452,"nodeType":"ExpressionStatement","src":"9551:11:10"}]}}]},{"expression":{"id":1456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"9603:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1334,"id":1457,"nodeType":"Return","src":"9596:13:10"}]},"documentation":{"id":1328,"nodeType":"StructuredDocumentation","src":"8515:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1459,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:10","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"value","nameLocation":"8655:5:10","nodeType":"VariableDeclaration","scope":1459,"src":"8647:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1329,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:10"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1459,"src":"8685:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:10"},"scope":1787,"src":"8633:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1494,"nodeType":"Block","src":"9849:165:10","statements":[{"id":1493,"nodeType":"UncheckedBlock","src":"9859:149:10","statements":[{"assignments":[1471],"declarations":[{"constant":false,"id":1471,"mutability":"mutable","name":"result","nameLocation":"9891:6:10","nodeType":"VariableDeclaration","scope":1493,"src":"9883:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1470,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1475,"initialValue":{"arguments":[{"id":1473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"9905:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1472,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1459,1495],"referencedDeclaration":1459,"src":"9900:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9900:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1476,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"9932:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1477,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"9942:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1478,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"9954:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$928_$","typeString":"type(enum Math.Rounding)"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":926,"src":"9954:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"src":"9942:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"9974:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"9983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:10","trueExpression":{"hexValue":"31","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1469,"id":1492,"nodeType":"Return","src":"9925:72:10"}]}]},"documentation":{"id":1460,"nodeType":"StructuredDocumentation","src":"9622:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1495,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:10","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"value","nameLocation":"9791:5:10","nodeType":"VariableDeclaration","scope":1495,"src":"9783:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1465,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:10","nodeType":"VariableDeclaration","scope":1495,"src":"9798:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"typeName":{"id":1464,"nodeType":"UserDefinedTypeName","pathNode":{"id":1463,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":928,"src":"9798:8:10"},"referencedDeclaration":928,"src":"9798:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:10"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1495,"src":"9840:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:10"},"scope":1787,"src":"9769:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1623,"nodeType":"Block","src":"10201:854:10","statements":[{"assignments":[1504],"declarations":[{"constant":false,"id":1504,"mutability":"mutable","name":"result","nameLocation":"10219:6:10","nodeType":"VariableDeclaration","scope":1623,"src":"10211:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1506,"initialValue":{"hexValue":"30","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:10"},{"id":1620,"nodeType":"UncheckedBlock","src":"10239:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10267:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1523,"nodeType":"IfStatement","src":"10263:103:10","trueBody":{"id":1522,"nodeType":"Block","src":"10286:80:10","statements":[{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10304:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1517,"nodeType":"ExpressionStatement","src":"10304:17:10"},{"expression":{"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1518,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10339:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1521,"nodeType":"ExpressionStatement","src":"10339:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1524,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10383:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1540,"nodeType":"IfStatement","src":"10379:103:10","trueBody":{"id":1539,"nodeType":"Block","src":"10402:80:10","statements":[{"expression":{"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10420:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1534,"nodeType":"ExpressionStatement","src":"10420:17:10"},{"expression":{"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10455:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1538,"nodeType":"ExpressionStatement","src":"10455:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10499:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1557,"nodeType":"IfStatement","src":"10495:103:10","trueBody":{"id":1556,"nodeType":"Block","src":"10518:80:10","statements":[{"expression":{"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10536:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1551,"nodeType":"ExpressionStatement","src":"10536:17:10"},{"expression":{"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10571:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1555,"nodeType":"ExpressionStatement","src":"10571:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10615:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1574,"nodeType":"IfStatement","src":"10611:100:10","trueBody":{"id":1573,"nodeType":"Block","src":"10633:78:10","statements":[{"expression":{"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10651:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1568,"nodeType":"ExpressionStatement","src":"10651:16:10"},{"expression":{"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1569,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10685:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1572,"nodeType":"ExpressionStatement","src":"10685:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10728:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1591,"nodeType":"IfStatement","src":"10724:100:10","trueBody":{"id":1590,"nodeType":"Block","src":"10746:78:10","statements":[{"expression":{"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10764:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1585,"nodeType":"ExpressionStatement","src":"10764:16:10"},{"expression":{"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1586,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10798:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1589,"nodeType":"ExpressionStatement","src":"10798:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10841:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1608,"nodeType":"IfStatement","src":"10837:100:10","trueBody":{"id":1607,"nodeType":"Block","src":"10859:78:10","statements":[{"expression":{"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10877:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1602,"nodeType":"ExpressionStatement","src":"10877:16:10"},{"expression":{"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10911:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1606,"nodeType":"ExpressionStatement","src":"10911:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"10954:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1619,"nodeType":"IfStatement","src":"10950:66:10","trueBody":{"id":1618,"nodeType":"Block","src":"10972:44:10","statements":[{"expression":{"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"10990:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1617,"nodeType":"ExpressionStatement","src":"10990:11:10"}]}}]},{"expression":{"id":1621,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"11042:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1502,"id":1622,"nodeType":"Return","src":"11035:13:10"}]},"documentation":{"id":1496,"nodeType":"StructuredDocumentation","src":"10020:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1624,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:10","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"value","nameLocation":"10162:5:10","nodeType":"VariableDeclaration","scope":1624,"src":"10154:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:10"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1624,"src":"10192:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:10"},"scope":1787,"src":"10139:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1659,"nodeType":"Block","src":"11290:167:10","statements":[{"id":1658,"nodeType":"UncheckedBlock","src":"11300:151:10","statements":[{"assignments":[1636],"declarations":[{"constant":false,"id":1636,"mutability":"mutable","name":"result","nameLocation":"11332:6:10","nodeType":"VariableDeclaration","scope":1658,"src":"11324:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1640,"initialValue":{"arguments":[{"id":1638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"11347:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1637,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1624,1660],"referencedDeclaration":1624,"src":"11341:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11341:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1641,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"11374:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1642,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"11384:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1643,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"11396:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$928_$","typeString":"type(enum Math.Rounding)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":926,"src":"11396:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"src":"11384:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"11417:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"11426:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:10","trueExpression":{"hexValue":"31","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1634,"id":1657,"nodeType":"Return","src":"11367:73:10"}]}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"11061:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:10","nodeType":"FunctionDefinition","parameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"value","nameLocation":"11232:5:10","nodeType":"VariableDeclaration","scope":1660,"src":"11224:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1630,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:10","nodeType":"VariableDeclaration","scope":1660,"src":"11239:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"typeName":{"id":1629,"nodeType":"UserDefinedTypeName","pathNode":{"id":1628,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":928,"src":"11239:8:10"},"referencedDeclaration":928,"src":"11239:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:10"},"returnParameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"11281:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:10"},"scope":1787,"src":"11209:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1746,"nodeType":"Block","src":"11771:600:10","statements":[{"assignments":[1669],"declarations":[{"constant":false,"id":1669,"mutability":"mutable","name":"result","nameLocation":"11789:6:10","nodeType":"VariableDeclaration","scope":1746,"src":"11781:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1671,"initialValue":{"hexValue":"30","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:10"},{"id":1743,"nodeType":"UncheckedBlock","src":"11809:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1672,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"11837:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1686,"nodeType":"IfStatement","src":"11833:98:10","trueBody":{"id":1685,"nodeType":"Block","src":"11855:76:10","statements":[{"expression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"11873:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1680,"nodeType":"ExpressionStatement","src":"11873:13:10"},{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"11904:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1684,"nodeType":"ExpressionStatement","src":"11904:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"11948:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1701,"nodeType":"IfStatement","src":"11944:95:10","trueBody":{"id":1700,"nodeType":"Block","src":"11965:74:10","statements":[{"expression":{"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"11983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1695,"nodeType":"ExpressionStatement","src":"11983:12:10"},{"expression":{"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12013:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1699,"nodeType":"ExpressionStatement","src":"12013:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12056:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1716,"nodeType":"IfStatement","src":"12052:95:10","trueBody":{"id":1715,"nodeType":"Block","src":"12073:74:10","statements":[{"expression":{"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12091:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1710,"nodeType":"ExpressionStatement","src":"12091:12:10"},{"expression":{"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12121:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1714,"nodeType":"ExpressionStatement","src":"12121:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1731,"nodeType":"IfStatement","src":"12160:95:10","trueBody":{"id":1730,"nodeType":"Block","src":"12181:74:10","statements":[{"expression":{"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12199:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1725,"nodeType":"ExpressionStatement","src":"12199:12:10"},{"expression":{"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12229:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1729,"nodeType":"ExpressionStatement","src":"12229:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12272:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1742,"nodeType":"IfStatement","src":"12268:64:10","trueBody":{"id":1741,"nodeType":"Block","src":"12288:44:10","statements":[{"expression":{"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12306:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1740,"nodeType":"ExpressionStatement","src":"12306:11:10"}]}}]},{"expression":{"id":1744,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12358:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1667,"id":1745,"nodeType":"Return","src":"12351:13:10"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"11463:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1747,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:10","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"value","nameLocation":"11732:5:10","nodeType":"VariableDeclaration","scope":1747,"src":"11724:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:10"},"returnParameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1747,"src":"11762:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1665,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:10"},"scope":1787,"src":"11708:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"12608:174:10","statements":[{"id":1784,"nodeType":"UncheckedBlock","src":"12618:158:10","statements":[{"assignments":[1759],"declarations":[{"constant":false,"id":1759,"mutability":"mutable","name":"result","nameLocation":"12650:6:10","nodeType":"VariableDeclaration","scope":1784,"src":"12642:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1763,"initialValue":{"arguments":[{"id":1761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"12666:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1760,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1747,1786],"referencedDeclaration":1747,"src":"12659:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12659:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1764,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"12693:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1765,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"12703:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1766,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"12715:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$928_$","typeString":"type(enum Math.Rounding)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":926,"src":"12715:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"src":"12703:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"12736:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1773,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"12751:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:10","trueExpression":{"hexValue":"31","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1781,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1757,"id":1783,"nodeType":"Return","src":"12686:79:10"}]}]},"documentation":{"id":1748,"nodeType":"StructuredDocumentation","src":"12377:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:10","nodeType":"FunctionDefinition","parameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1750,"mutability":"mutable","name":"value","nameLocation":"12550:5:10","nodeType":"VariableDeclaration","scope":1786,"src":"12542:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1749,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1753,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:10","nodeType":"VariableDeclaration","scope":1786,"src":"12557:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"},"typeName":{"id":1752,"nodeType":"UserDefinedTypeName","pathNode":{"id":1751,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":928,"src":"12557:8:10"},"referencedDeclaration":928,"src":"12557:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$928","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:10"},"returnParameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1786,"src":"12599:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:10"},"scope":1787,"src":"12526:256:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1788,"src":"202:12582:10","usedErrors":[]}],"src":"103:12682:10"},"id":10},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1892]},"id":1893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1789,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"134:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1892,"linearizedBaseContracts":[1892],"name":"SignedMath","nameLocation":"223:10:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1807,"nodeType":"Block","src":"375:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1800,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"392:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1801,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"396:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1804,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"404:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:11","trueExpression":{"id":1803,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"400:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1799,"id":1806,"nodeType":"Return","src":"385:20:11"}]},"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"240:66:11","text":" @dev Returns the largest of two signed numbers."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:11","nodeType":"FunctionDefinition","parameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"a","nameLocation":"331:1:11","nodeType":"VariableDeclaration","scope":1808,"src":"324:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1792,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1795,"mutability":"mutable","name":"b","nameLocation":"341:1:11","nodeType":"VariableDeclaration","scope":1808,"src":"334:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1794,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:11"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"367:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1797,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:11"},"scope":1892,"src":"311:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1825,"nodeType":"Block","src":"554:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1818,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"571:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1819,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"575:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1822,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"583:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:11","trueExpression":{"id":1821,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"579:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1817,"id":1824,"nodeType":"Return","src":"564:20:11"}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"418:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:11","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"a","nameLocation":"510:1:11","nodeType":"VariableDeclaration","scope":1826,"src":"503:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1810,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"b","nameLocation":"520:1:11","nodeType":"VariableDeclaration","scope":1826,"src":"513:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1812,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:11"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1826,"src":"546:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1815,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:11"},"scope":1892,"src":"490:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1869,"nodeType":"Block","src":"796:162:11","statements":[{"assignments":[1837],"declarations":[{"constant":false,"id":1837,"mutability":"mutable","name":"x","nameLocation":"865:1:11","nodeType":"VariableDeclaration","scope":1869,"src":"858:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1836,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1850,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1838,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"870:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1839,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"874:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"881:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1843,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"885:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1845,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1848,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1851,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"910:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1856,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"930:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:11","typeDescriptions":{}}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"922:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1852,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:11","typeDescriptions":{}}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"944:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1862,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"948:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1866,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1835,"id":1868,"nodeType":"Return","src":"903:48:11"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"597:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1870,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:11","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"a","nameLocation":"752:1:11","nodeType":"VariableDeclaration","scope":1870,"src":"745:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1828,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"b","nameLocation":"762:1:11","nodeType":"VariableDeclaration","scope":1870,"src":"755:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1830,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:11"},"returnParameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1870,"src":"788:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1833,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:11"},"scope":1892,"src":"728:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1890,"nodeType":"Block","src":"1102:158:11","statements":[{"id":1889,"nodeType":"UncheckedBlock","src":"1112:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1880,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"1227:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:11","subExpression":{"id":1884,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"1241:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:11","trueExpression":{"id":1883,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"1236:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:11","typeDescriptions":{}}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1219:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1877,"id":1888,"nodeType":"Return","src":"1212:31:11"}]}]},"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"964:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1891,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:11","nodeType":"FunctionDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"n","nameLocation":"1067:1:11","nodeType":"VariableDeclaration","scope":1891,"src":"1060:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1872,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:11"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1891,"src":"1093:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:11"},"scope":1892,"src":"1047:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1893,"src":"215:1047:11","usedErrors":[]}],"src":"109:1154:11"},"id":11},"contracts/ERC712A.sol":{"ast":{"absolutePath":"contracts/ERC712A.sol","exportedSymbols":{"Azuki":[1918],"ERC721A":[5695],"ERC721A__IERC721Receiver":[4090],"IERC721A":[5901]},"id":1919,"nodeType":"SourceUnit","nodes":[{"id":1894,"literals":["solidity","0.8",".13"],"nodeType":"PragmaDirective","src":"0:23:12"},{"absolutePath":"erc721a/contracts/ERC721A.sol","file":"erc721a/contracts/ERC721A.sol","id":1895,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1919,"sourceUnit":5696,"src":"25:39:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1896,"name":"ERC721A","nodeType":"IdentifierPath","referencedDeclaration":5695,"src":"84:7:12"},"id":1897,"nodeType":"InheritanceSpecifier","src":"84:7:12"}],"canonicalName":"Azuki","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1918,"linearizedBaseContracts":[1918,5695,5901],"name":"Azuki","nameLocation":"75:5:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1904,"nodeType":"Block","src":"138:2:12","statements":[]},"id":1905,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"417a756b69","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"120:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8259708f963947d28484bf669e6cdd15ac12e7d813de008356896f65b003a79b","typeString":"literal_string \"Azuki\""},"value":"Azuki"},{"hexValue":"415a554b49","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"129:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_184a09271b0532717108cdd656088ca8d5a200eb75d6eb742b2d77961d97dd73","typeString":"literal_string \"AZUKI\""},"value":"AZUKI"}],"id":1902,"kind":"baseConstructorSpecifier","modifierName":{"id":1899,"name":"ERC721A","nodeType":"IdentifierPath","referencedDeclaration":5695,"src":"112:7:12"},"nodeType":"ModifierInvocation","src":"112:25:12"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1898,"nodeType":"ParameterList","parameters":[],"src":"109:2:12"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[],"src":"138:0:12"},"scope":1918,"src":"98:42:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1916,"nodeType":"Block","src":"195:125:12","statements":[{"expression":{"arguments":[{"expression":{"id":1911,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"292:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"292:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1913,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"304:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1910,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"286:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"286:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1915,"nodeType":"ExpressionStatement","src":"286:27:12"}]},"functionSelector":"a0712d68","id":1917,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"155:4:12","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1907,"mutability":"mutable","name":"quantity","nameLocation":"168:8:12","nodeType":"VariableDeclaration","scope":1917,"src":"160:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"160:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"159:18:12"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[],"src":"195:0:12"},"scope":1918,"src":"146:174:12","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1919,"src":"66:256:12","usedErrors":[5701,5704,5707,5710,5713,5716,5719,5722,5725,5728,5731,5734,5737]}],"src":"0:322:12"},"id":12},"contracts/ERC721All.sol":{"ast":{"absolutePath":"contracts/ERC721All.sol","exportedSymbols":{"ERC721":[3713],"ERC721All":[2011],"Ownable":[6289]},"id":2012,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1920,"literals":["solidity","0.8",".13"],"nodeType":"PragmaDirective","src":"213:23:13"},{"absolutePath":"node_modules/solady/src/auth/Ownable.sol","file":"../node_modules/solady/src/auth/Ownable.sol","id":1921,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2012,"sourceUnit":6290,"src":"294:53:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/ERC721Solady.sol","file":"./lib/ERC721Solady.sol","id":1922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2012,"sourceUnit":3714,"src":"379:32:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1924,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":6289,"src":"459:7:13"},"id":1925,"nodeType":"InheritanceSpecifier","src":"459:7:13"},{"baseName":{"id":1926,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":3713,"src":"468:6:13"},"id":1927,"nodeType":"InheritanceSpecifier","src":"468:6:13"}],"canonicalName":"ERC721All","contractDependencies":[],"contractKind":"contract","documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"413:23:13","text":" @dev todo..."},"fullyImplemented":true,"id":2011,"linearizedBaseContracts":[2011,3713,6289],"name":"ERC721All","nameLocation":"446:9:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1931,"mutability":"mutable","name":"_activeTokens","nameLocation":"513:13:13","nodeType":"VariableDeclaration","scope":2011,"src":"479:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":1930,"keyType":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"479:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":1929,"name":"bool","nodeType":"ElementaryTypeName","src":"498:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"documentation":{"id":1932,"nodeType":"StructuredDocumentation","src":"531:30:13","text":"@dev ERC721 Base Token URI"},"id":1934,"mutability":"mutable","name":"_baseTokenURI","nameLocation":"580:13:13","nodeType":"VariableDeclaration","scope":2011,"src":"564:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1933,"name":"string","nodeType":"ElementaryTypeName","src":"564:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"_name","nameLocation":"613:5:13","nodeType":"VariableDeclaration","scope":2011,"src":"597:21:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1935,"name":"string","nodeType":"ElementaryTypeName","src":"597:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1938,"mutability":"mutable","name":"_symbol","nameLocation":"638:7:13","nodeType":"VariableDeclaration","scope":2011,"src":"622:23:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1937,"name":"string","nodeType":"ElementaryTypeName","src":"622:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"body":{"id":1963,"nodeType":"Block","src":"762:74:13","statements":[{"expression":{"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1951,"name":"_baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"768:13:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1952,"name":"baseUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"784:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"768:23:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1954,"nodeType":"ExpressionStatement","src":"768:23:13"},{"expression":{"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1955,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"797:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1956,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"807:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"797:16:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1958,"nodeType":"ExpressionStatement","src":"797:16:13"},{"expression":{"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1959,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"819:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1960,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"827:4:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"819:12:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1962,"nodeType":"ExpressionStatement","src":"819:12:13"}]},"id":1964,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[],"id":1947,"kind":"baseConstructorSpecifier","modifierName":{"id":1946,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":3713,"src":"743:6:13"},"nodeType":"ModifierInvocation","src":"743:8:13"},{"arguments":[],"id":1949,"kind":"baseConstructorSpecifier","modifierName":{"id":1948,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":6289,"src":"752:7:13"},"nodeType":"ModifierInvocation","src":"752:9:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"name","nameLocation":"681:4:13","nodeType":"VariableDeclaration","scope":1964,"src":"667:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1939,"name":"string","nodeType":"ElementaryTypeName","src":"667:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1942,"mutability":"mutable","name":"symbol","nameLocation":"705:6:13","nodeType":"VariableDeclaration","scope":1964,"src":"691:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"691:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1944,"mutability":"mutable","name":"baseUri","nameLocation":"731:7:13","nodeType":"VariableDeclaration","scope":1964,"src":"717:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1943,"name":"string","nodeType":"ElementaryTypeName","src":"717:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"661:81:13"},"returnParameters":{"id":1950,"nodeType":"ParameterList","parameters":[],"src":"762:0:13"},"scope":2011,"src":"650:186:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3077],"body":{"id":1972,"nodeType":"Block","src":"901:23:13","statements":[{"expression":{"id":1970,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"914:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1969,"id":1971,"nodeType":"Return","src":"907:12:13"}]},"functionSelector":"06fdde03","id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"849:4:13","nodeType":"FunctionDefinition","overrides":{"id":1966,"nodeType":"OverrideSpecifier","overrides":[],"src":"868:8:13"},"parameters":{"id":1965,"nodeType":"ParameterList","parameters":[],"src":"853:2:13"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1973,"src":"886:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1967,"name":"string","nodeType":"ElementaryTypeName","src":"886:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"885:15:13"},"scope":2011,"src":"840:84:13","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3083],"body":{"id":1981,"nodeType":"Block","src":"991:25:13","statements":[{"expression":{"id":1979,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"1004:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1978,"id":1980,"nodeType":"Return","src":"997:14:13"}]},"functionSelector":"95d89b41","id":1982,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"937:6:13","nodeType":"FunctionDefinition","overrides":{"id":1975,"nodeType":"OverrideSpecifier","overrides":[],"src":"958:8:13"},"parameters":{"id":1974,"nodeType":"ParameterList","parameters":[],"src":"943:2:13"},"returnParameters":{"id":1978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1982,"src":"976:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1976,"name":"string","nodeType":"ElementaryTypeName","src":"976:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"975:15:13"},"scope":2011,"src":"928:88:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1998,"nodeType":"Block","src":"1772:58:13","statements":[{"expression":{"arguments":[{"expression":{"id":1986,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1784:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1784:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"expression":{"id":1992,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1812:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1812:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1804:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1990,"name":"uint160","nodeType":"ElementaryTypeName","src":"1804:7:13","typeDescriptions":{}}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1804:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1796:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"1796:7:13","typeDescriptions":{}}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1796:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1985,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"1778:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1997,"nodeType":"ExpressionStatement","src":"1778:47:13"}]},"functionSelector":"1249c58b","id":1999,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1758:4:13","nodeType":"FunctionDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[],"src":"1762:2:13"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[],"src":"1772:0:13"},"scope":2011,"src":"1749:81:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3091],"body":{"id":2009,"nodeType":"Block","src":"2653:31:13","statements":[{"expression":{"id":2007,"name":"_baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"2666:13:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2006,"id":2008,"nodeType":"Return","src":"2659:20:13"}]},"functionSelector":"c87b56dd","id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2587:8:13","nodeType":"FunctionDefinition","overrides":{"id":2003,"nodeType":"OverrideSpecifier","overrides":[],"src":"2620:8:13"},"parameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"id","nameLocation":"2604:2:13","nodeType":"VariableDeclaration","scope":2010,"src":"2596:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"2596:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2595:12:13"},"returnParameters":{"id":2006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2010,"src":"2638:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2004,"name":"string","nodeType":"ElementaryTypeName","src":"2638:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2637:15:13"},"scope":2011,"src":"2578:106:13","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2012,"src":"437:2249:13","usedErrors":[3001,3004,3007,3010,3013,3016,3019,3022,6101,6104,6107,6110]}],"src":"213:2474:13"},"id":13},"contracts/ERC721i.sol":{"ast":{"absolutePath":"contracts/ERC721i.sol","exportedSymbols":{"Address":[634],"Context":[656],"ERC165":[909],"ERC721":[2991],"ERC721i":[2123],"ERC721iEnumerable":[4072],"IERC165":[921],"IERC721":[228],"IERC721Enumerable":[277],"IERC721Metadata":[304],"IERC721Receiver":[246],"Math":[1787],"Ownable":[112],"SignedMath":[1892],"Strings":[885]},"id":2124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2013,"literals":["solidity","0.8",".13"],"nodeType":"PragmaDirective","src":"213:23:14"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2014,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2124,"sourceUnit":113,"src":"238:52:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/ERC721iEnumerable.sol","file":"./lib/ERC721iEnumerable.sol","id":2015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2124,"sourceUnit":4073,"src":"291:37:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2017,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"1020:7:14"},"id":2018,"nodeType":"InheritanceSpecifier","src":"1020:7:14"},{"baseName":{"id":2019,"name":"ERC721iEnumerable","nodeType":"IdentifierPath","referencedDeclaration":4072,"src":"1031:17:14"},"id":2020,"nodeType":"InheritanceSpecifier","src":"1031:17:14"}],"canonicalName":"ERC721i","contractDependencies":[],"contractKind":"contract","documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"330:667:14","text":" @dev This implements a Pre-Mint version of {ERC721} that adds the ability to Pre-Mint\n all the token ids in the contract as assign an initial owner for each token id.\n On-chain state for Pre-Mint does not need to be initially stored if Max-Supply is known.\n Minting is a simple matter of assigning a balance to the pre-mint receiver,\n and modifying the \"read\" methods to account for the pre-mint receiver as owner.\n We use the Consecutive Transfer Method as defined in EIP-2309 to signal inital ownership.\n Almost everything else remains standard.\n We also default to the contract \"owner\" as the pre-mint receiver, but this can be changed."},"fullyImplemented":true,"id":2123,"linearizedBaseContracts":[2123,4072,277,2991,304,228,909,921,112,656],"name":"ERC721i","nameLocation":"1007:7:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"1053:58:14","text":"@dev EIP-2309: https://eips.ethereum.org/EIPS/eip-2309"},"eventSelector":"deaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d","id":2031,"name":"ConsecutiveTransfer","nameLocation":"1120:19:14","nodeType":"EventDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"indexed":true,"mutability":"mutable","name":"fromTokenId","nameLocation":"1156:11:14","nodeType":"VariableDeclaration","scope":2031,"src":"1140:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"1140:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2025,"indexed":false,"mutability":"mutable","name":"toTokenId","nameLocation":"1177:9:14","nodeType":"VariableDeclaration","scope":2031,"src":"1169:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2027,"indexed":true,"mutability":"mutable","name":"fromAddress","nameLocation":"1204:11:14","nodeType":"VariableDeclaration","scope":2031,"src":"1188:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2026,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2029,"indexed":true,"mutability":"mutable","name":"toAddress","nameLocation":"1233:9:14","nodeType":"VariableDeclaration","scope":2031,"src":"1217:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2028,"name":"address","nodeType":"ElementaryTypeName","src":"1217:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1139:104:14"},"src":"1114:130:14"},{"constant":false,"documentation":{"id":2032,"nodeType":"StructuredDocumentation","src":"1248:30:14","text":"@dev ERC721 Base Token URI"},"id":2034,"mutability":"mutable","name":"_baseTokenURI","nameLocation":"1297:13:14","nodeType":"VariableDeclaration","scope":2123,"src":"1281:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2033,"name":"string","nodeType":"ElementaryTypeName","src":"1281:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"body":{"id":2066,"nodeType":"Block","src":"1679:142:14","statements":[{"expression":{"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2054,"name":"_baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"1685:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2055,"name":"baseUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"1701:7:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1685:23:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2057,"nodeType":"ExpressionStatement","src":"1685:23:14"},{"expression":{"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2058,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"1763:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2059,"name":"maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"1776:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1763:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2061,"nodeType":"ExpressionStatement","src":"1763:22:14"},{"expression":{"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2062,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"1791:16:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2063,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"1810:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1791:25:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2065,"nodeType":"ExpressionStatement","src":"1791:25:14"}]},"documentation":{"id":2035,"nodeType":"StructuredDocumentation","src":"1315:184:14","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection,\n as well as a `minter` and a `maxSupply` for pre-minting the collection."},"id":2067,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2048,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"1649:4:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2049,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"1655:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":2050,"kind":"baseConstructorSpecifier","modifierName":{"id":2047,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"1642:6:14"},"nodeType":"ModifierInvocation","src":"1642:20:14"},{"arguments":[],"id":2052,"kind":"baseConstructorSpecifier","modifierName":{"id":2051,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"1667:7:14"},"nodeType":"ModifierInvocation","src":"1667:9:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"name","nameLocation":"1533:4:14","nodeType":"VariableDeclaration","scope":2067,"src":"1519:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2036,"name":"string","nodeType":"ElementaryTypeName","src":"1519:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"symbol","nameLocation":"1557:6:14","nodeType":"VariableDeclaration","scope":2067,"src":"1543:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2038,"name":"string","nodeType":"ElementaryTypeName","src":"1543:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2041,"mutability":"mutable","name":"baseUri","nameLocation":"1583:7:14","nodeType":"VariableDeclaration","scope":2067,"src":"1569:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2040,"name":"string","nodeType":"ElementaryTypeName","src":"1569:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2043,"mutability":"mutable","name":"minter","nameLocation":"1604:6:14","nodeType":"VariableDeclaration","scope":2067,"src":"1596:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"1596:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"maxSupply","nameLocation":"1624:9:14","nodeType":"VariableDeclaration","scope":2067,"src":"1616:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"1616:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1513:124:14"},"returnParameters":{"id":2053,"nodeType":"ParameterList","parameters":[],"src":"1679:0:14"},"scope":2123,"src":"1502:319:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2087,"nodeType":"Block","src":"1986:233:14","statements":[{"expression":{"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2071,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"2055:9:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2073,"indexExpression":{"id":2072,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"2065:16:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2055:27:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2074,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"2085:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2055:40:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2076,"nodeType":"ExpressionStatement","src":"2055:40:14"},{"eventCall":{"arguments":[{"hexValue":"31","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2170:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"id":2079,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"2173:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2193:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2185:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"2185:7:14","typeDescriptions":{}}},"id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2185:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2084,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"2197:16:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2077,"name":"ConsecutiveTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"2150:19:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address,address)"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2150:64:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"EmitStatement","src":"2145:69:14"}]},"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"1825:129:14","text":" @dev Pre-mint the max-supply of token IDs to the minter account.\n Token IDs are in base-1 sequential order."},"id":2088,"implemented":true,"kind":"function","modifiers":[],"name":"_preMint","nameLocation":"1966:8:14","nodeType":"FunctionDefinition","parameters":{"id":2069,"nodeType":"ParameterList","parameters":[],"src":"1974:2:14"},"returnParameters":{"id":2070,"nodeType":"ParameterList","parameters":[],"src":"1986:0:14"},"scope":2123,"src":"1957:262:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2096,"nodeType":"Block","src":"2261:21:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2093,"name":"_preMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"2267:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2267:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2095,"nodeType":"ExpressionStatement","src":"2267:10:14"}]},"functionSelector":"3cd29ac8","id":2097,"implemented":true,"kind":"function","modifiers":[{"id":2091,"kind":"modifierInvocation","modifierName":{"id":2090,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2251:9:14"},"nodeType":"ModifierInvocation","src":"2251:9:14"}],"name":"preMint","nameLocation":"2232:7:14","nodeType":"FunctionDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[],"src":"2239:2:14"},"returnParameters":{"id":2092,"nodeType":"ParameterList","parameters":[],"src":"2261:0:14"},"scope":2123,"src":"2223:59:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2340],"body":{"id":2105,"nodeType":"Block","src":"2361:31:14","statements":[{"expression":{"id":2103,"name":"_baseTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"2374:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2102,"id":2104,"nodeType":"Return","src":"2367:20:14"}]},"id":2106,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"2295:8:14","nodeType":"FunctionDefinition","overrides":{"id":2099,"nodeType":"OverrideSpecifier","overrides":[],"src":"2328:8:14"},"parameters":{"id":2098,"nodeType":"ParameterList","parameters":[],"src":"2303:2:14"},"returnParameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2106,"src":"2346:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2100,"name":"string","nodeType":"ElementaryTypeName","src":"2346:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2345:15:14"},"scope":2123,"src":"2286:106:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2331],"body":{"id":2121,"nodeType":"Block","src":"2484:58:14","statements":[{"expression":{"arguments":[{"id":2115,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"2505:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2114,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"2490:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2490:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2117,"nodeType":"ExpressionStatement","src":"2490:23:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2118,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[2106],"referencedDeclaration":2106,"src":"2527:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2527:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2113,"id":2120,"nodeType":"Return","src":"2520:17:14"}]},"functionSelector":"c87b56dd","id":2122,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2405:8:14","nodeType":"FunctionDefinition","overrides":{"id":2110,"nodeType":"OverrideSpecifier","overrides":[],"src":"2451:8:14"},"parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"tokenId","nameLocation":"2422:7:14","nodeType":"VariableDeclaration","scope":2122,"src":"2414:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"2414:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2413:17:14"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2122,"src":"2469:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2111,"name":"string","nodeType":"ElementaryTypeName","src":"2469:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2468:15:14"},"scope":2123,"src":"2396:146:14","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2124,"src":"998:1546:14","usedErrors":[]}],"src":"213:2332:14"},"id":14},"contracts/lib/ERC721.sol":{"ast":{"absolutePath":"contracts/lib/ERC721.sol","exportedSymbols":{"Address":[634],"Context":[656],"ERC165":[909],"ERC721":[2991],"IERC165":[921],"IERC721":[228],"IERC721Metadata":[304],"IERC721Receiver":[246],"Math":[1787],"SignedMath":[1892],"Strings":[885]},"id":2992,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2125,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"302:23:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":2126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":229,"src":"327:58:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","id":2127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":247,"src":"386:66:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","id":2128,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":305,"src":"453:77:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":635,"src":"531:51:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2130,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":657,"src":"583:51:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":886,"src":"635:51:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":2132,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":910,"src":"687:64:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2134,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":656,"src":"1401:7:15"},"id":2135,"nodeType":"InheritanceSpecifier","src":"1401:7:15"},{"baseName":{"id":2136,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1410:6:15"},"id":2137,"nodeType":"InheritanceSpecifier","src":"1410:6:15"},{"baseName":{"id":2138,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"1418:7:15"},"id":2139,"nodeType":"InheritanceSpecifier","src":"1418:7:15"},{"baseName":{"id":2140,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":304,"src":"1427:15:15"},"id":2141,"nodeType":"InheritanceSpecifier","src":"1427:15:15"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":2133,"nodeType":"StructuredDocumentation","src":"753:628:15","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}.\n NOTE:\n  The only changes made here are:\n    - change scope of \"_owners\" from private to internal\n    - change scope of \"_balances\" from private to internal\n    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"\n    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)"},"fullyImplemented":true,"id":2991,"linearizedBaseContracts":[2991,304,228,909,921,656],"name":"ERC721","nameLocation":"1391:6:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2144,"libraryName":{"id":2142,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":634,"src":"1455:7:15"},"nodeType":"UsingForDirective","src":"1449:26:15","typeName":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"1467:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2147,"libraryName":{"id":2145,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":885,"src":"1486:7:15"},"nodeType":"UsingForDirective","src":"1480:26:15","typeName":{"id":2146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":2150,"mutability":"constant","name":"_NULL_ADDRESS","nameLocation":"1538:13:15","nodeType":"VariableDeclaration","scope":2991,"src":"1512:84:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2148,"name":"address","nodeType":"ElementaryTypeName","src":"1512:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303064456144","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1554:42:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x000000000000000000000000000000000000dEaD"},"visibility":"internal"},{"constant":false,"id":2152,"mutability":"mutable","name":"_name","nameLocation":"1636:5:15","nodeType":"VariableDeclaration","scope":2991,"src":"1621:20:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2151,"name":"string","nodeType":"ElementaryTypeName","src":"1621:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2154,"mutability":"mutable","name":"_symbol","nameLocation":"1683:7:15","nodeType":"VariableDeclaration","scope":2991,"src":"1668:22:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2153,"name":"string","nodeType":"ElementaryTypeName","src":"1668:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2158,"mutability":"mutable","name":"_owners","nameLocation":"1780:7:15","nodeType":"VariableDeclaration","scope":2991,"src":"1743:44:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2157,"keyType":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1751:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1743:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2156,"name":"address","nodeType":"ElementaryTypeName","src":"1762:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2162,"mutability":"mutable","name":"_balances","nameLocation":"1875:9:15","nodeType":"VariableDeclaration","scope":2991,"src":"1838:46:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2161,"keyType":{"id":2159,"name":"address","nodeType":"ElementaryTypeName","src":"1846:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1838:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1857:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2166,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1976:15:15","nodeType":"VariableDeclaration","scope":2991,"src":"1940:51:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2165,"keyType":{"id":2163,"name":"uint256","nodeType":"ElementaryTypeName","src":"1948:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1940:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2164,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2172,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"2099:18:15","nodeType":"VariableDeclaration","scope":2991,"src":"2046:71:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":2171,"keyType":{"id":2167,"name":"address","nodeType":"ElementaryTypeName","src":"2054:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2046:44:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":2170,"keyType":{"id":2168,"name":"address","nodeType":"ElementaryTypeName","src":"2073:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2065:24:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2169,"name":"bool","nodeType":"ElementaryTypeName","src":"2084:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":2188,"nodeType":"Block","src":"2293:57:15","statements":[{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2303:5:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2181,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2311:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2303:13:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2183,"nodeType":"ExpressionStatement","src":"2303:13:15"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"2326:7:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2185,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"2336:7:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2326:17:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2187,"nodeType":"ExpressionStatement","src":"2326:17:15"}]},"documentation":{"id":2173,"nodeType":"StructuredDocumentation","src":"2124:108:15","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":2189,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"name_","nameLocation":"2263:5:15","nodeType":"VariableDeclaration","scope":2189,"src":"2249:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2174,"name":"string","nodeType":"ElementaryTypeName","src":"2249:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2177,"mutability":"mutable","name":"symbol_","nameLocation":"2284:7:15","nodeType":"VariableDeclaration","scope":2189,"src":"2270:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2176,"name":"string","nodeType":"ElementaryTypeName","src":"2270:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2248:44:15"},"returnParameters":{"id":2179,"nodeType":"ParameterList","parameters":[],"src":"2293:0:15"},"scope":2991,"src":"2237:113:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[908,920],"body":{"id":2219,"nodeType":"Block","src":"2525:192:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"2554:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2202,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"2574:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$228_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$228_$","typeString":"type(contract IERC721)"}],"id":2201,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2569:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2569:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$228","typeString":"type(contract IERC721)"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2569:25:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2554:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"2610:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2208,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"2630:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$304_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$304_$","typeString":"type(contract IERC721Metadata)"}],"id":2207,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2625:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2625:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$304","typeString":"type(contract IERC721Metadata)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2625:33:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2610:48:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2554:104:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2215,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"2698:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2213,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2674:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2991_$","typeString":"type(contract super ERC721)"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":908,"src":"2674:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2674:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2554:156:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2199,"id":2218,"nodeType":"Return","src":"2535:175:15"}]},"documentation":{"id":2190,"nodeType":"StructuredDocumentation","src":"2356:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2220,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2426:17:15","nodeType":"FunctionDefinition","overrides":{"id":2196,"nodeType":"OverrideSpecifier","overrides":[{"id":2194,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2493:6:15"},{"id":2195,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":921,"src":"2501:7:15"}],"src":"2484:25:15"},"parameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"interfaceId","nameLocation":"2451:11:15","nodeType":"VariableDeclaration","scope":2220,"src":"2444:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2191,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2444:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2443:20:15"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2220,"src":"2519:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2197,"name":"bool","nodeType":"ElementaryTypeName","src":"2519:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2518:6:15"},"scope":2991,"src":"2417:300:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[153],"body":{"id":2243,"nodeType":"Block","src":"2857:123:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2230,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2875:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2892:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2884:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2231,"name":"address","nodeType":"ElementaryTypeName","src":"2884:7:15","typeDescriptions":{}}},"id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2884:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2875:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2896:43:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":2229,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2867:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2867:73:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2238,"nodeType":"ExpressionStatement","src":"2867:73:15"},{"expression":{"baseExpression":{"id":2239,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"2957:9:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2241,"indexExpression":{"id":2240,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2967:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2957:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2228,"id":2242,"nodeType":"Return","src":"2950:23:15"}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"2723:48:15","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":2244,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2785:9:15","nodeType":"FunctionDefinition","overrides":{"id":2225,"nodeType":"OverrideSpecifier","overrides":[],"src":"2830:8:15"},"parameters":{"id":2224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"owner","nameLocation":"2803:5:15","nodeType":"VariableDeclaration","scope":2244,"src":"2795:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2222,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2794:15:15"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2244,"src":"2848:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"2848:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2847:9:15"},"scope":2991,"src":"2776:204:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[161],"body":{"id":2271,"nodeType":"Block","src":"3118:137:15","statements":[{"assignments":[2254],"declarations":[{"constant":false,"id":2254,"mutability":"mutable","name":"owner","nameLocation":"3136:5:15","nodeType":"VariableDeclaration","scope":2271,"src":"3128:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2253,"name":"address","nodeType":"ElementaryTypeName","src":"3128:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2258,"initialValue":{"baseExpression":{"id":2255,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3144:7:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2257,"indexExpression":{"id":2256,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"3152:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3144:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3128:32:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2260,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"3178:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3195:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3187:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"3187:7:15","typeDescriptions":{}}},"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3187:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3178:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3199:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2259,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3170:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3170:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2268,"nodeType":"ExpressionStatement","src":"3170:56:15"},{"expression":{"id":2269,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"3243:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2252,"id":2270,"nodeType":"Return","src":"3236:12:15"}]},"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"2986:46:15","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":2272,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3046:7:15","nodeType":"FunctionDefinition","overrides":{"id":2249,"nodeType":"OverrideSpecifier","overrides":[],"src":"3091:8:15"},"parameters":{"id":2248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2247,"mutability":"mutable","name":"tokenId","nameLocation":"3062:7:15","nodeType":"VariableDeclaration","scope":2272,"src":"3054:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2246,"name":"uint256","nodeType":"ElementaryTypeName","src":"3054:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3053:17:15"},"returnParameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2272,"src":"3109:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2250,"name":"address","nodeType":"ElementaryTypeName","src":"3109:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3108:9:15"},"scope":2991,"src":"3037:218:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[289],"body":{"id":2281,"nodeType":"Block","src":"3386:29:15","statements":[{"expression":{"id":2279,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"3403:5:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2278,"id":2280,"nodeType":"Return","src":"3396:12:15"}]},"documentation":{"id":2273,"nodeType":"StructuredDocumentation","src":"3261:51:15","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":2282,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"3326:4:15","nodeType":"FunctionDefinition","overrides":{"id":2275,"nodeType":"OverrideSpecifier","overrides":[],"src":"3353:8:15"},"parameters":{"id":2274,"nodeType":"ParameterList","parameters":[],"src":"3330:2:15"},"returnParameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2282,"src":"3371:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2276,"name":"string","nodeType":"ElementaryTypeName","src":"3371:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3370:15:15"},"scope":2991,"src":"3317:98:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[295],"body":{"id":2291,"nodeType":"Block","src":"3550:31:15","statements":[{"expression":{"id":2289,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"3567:7:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2288,"id":2290,"nodeType":"Return","src":"3560:14:15"}]},"documentation":{"id":2283,"nodeType":"StructuredDocumentation","src":"3421:53:15","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":2292,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3488:6:15","nodeType":"FunctionDefinition","overrides":{"id":2285,"nodeType":"OverrideSpecifier","overrides":[],"src":"3517:8:15"},"parameters":{"id":2284,"nodeType":"ParameterList","parameters":[],"src":"3494:2:15"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2292,"src":"3535:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2286,"name":"string","nodeType":"ElementaryTypeName","src":"3535:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3534:15:15"},"scope":2991,"src":"3479:102:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[303],"body":{"id":2330,"nodeType":"Block","src":"3735:188:15","statements":[{"expression":{"arguments":[{"id":2302,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"3760:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2301,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"3745:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3745:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2304,"nodeType":"ExpressionStatement","src":"3745:23:15"},{"assignments":[2306],"declarations":[{"constant":false,"id":2306,"mutability":"mutable","name":"baseURI","nameLocation":"3793:7:15","nodeType":"VariableDeclaration","scope":2330,"src":"3779:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2305,"name":"string","nodeType":"ElementaryTypeName","src":"3779:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2309,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2307,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"3803:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3803:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3779:34:15"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2312,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"3836:7:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3830:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2310,"name":"bytes","nodeType":"ElementaryTypeName","src":"3830:5:15","typeDescriptions":{}}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3830:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3830:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3830:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3914:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3830:86:15","trueExpression":{"arguments":[{"arguments":[{"id":2321,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"3882:7:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2322,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"3891:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":715,"src":"3891:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3891:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2319,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3865:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3865:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3865:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3858:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2317,"name":"string","nodeType":"ElementaryTypeName","src":"3858:6:15","typeDescriptions":{}}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3858:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2300,"id":2329,"nodeType":"Return","src":"3823:93:15"}]},"documentation":{"id":2293,"nodeType":"StructuredDocumentation","src":"3587:55:15","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3656:8:15","nodeType":"FunctionDefinition","overrides":{"id":2297,"nodeType":"OverrideSpecifier","overrides":[],"src":"3702:8:15"},"parameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"mutability":"mutable","name":"tokenId","nameLocation":"3673:7:15","nodeType":"VariableDeclaration","scope":2331,"src":"3665:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"3665:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3664:17:15"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"3720:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2298,"name":"string","nodeType":"ElementaryTypeName","src":"3720:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3719:15:15"},"scope":2991,"src":"3647:276:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2339,"nodeType":"Block","src":"4231:26:15","statements":[{"expression":{"hexValue":"","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4248:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2336,"id":2338,"nodeType":"Return","src":"4241:9:15"}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"3929:231:15","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"4174:8:15","nodeType":"FunctionDefinition","parameters":{"id":2333,"nodeType":"ParameterList","parameters":[],"src":"4182:2:15"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"4216:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2334,"name":"string","nodeType":"ElementaryTypeName","src":"4216:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4215:15:15"},"scope":2991,"src":"4165:92:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[201],"body":{"id":2381,"nodeType":"Block","src":"4384:330:15","statements":[{"assignments":[2350],"declarations":[{"constant":false,"id":2350,"mutability":"mutable","name":"owner","nameLocation":"4402:5:15","nodeType":"VariableDeclaration","scope":2381,"src":"4394:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"4394:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2354,"initialValue":{"arguments":[{"id":2352,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"4418:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2351,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"4410:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4410:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4394:32:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2356,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"4444:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2357,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"4450:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4444:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4457:35:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":2355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4436:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4436:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2361,"nodeType":"ExpressionStatement","src":"4436:57:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2363,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"4525:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4525:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2365,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"4541:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4525:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2368,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"4567:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2369,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"4574:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4574:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2367,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"4550:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4550:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4525:62:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4601:64:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","typeString":"literal_string \"ERC721: approve caller is not token owner nor approved for all\""},"value":"ERC721: approve caller is not token owner nor approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","typeString":"literal_string \"ERC721: approve caller is not token owner nor approved for all\""}],"id":2362,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4504:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4504:171:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2375,"nodeType":"ExpressionStatement","src":"4504:171:15"},{"expression":{"arguments":[{"id":2377,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"4695:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2378,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"4699:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2376,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"4686:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4686:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2380,"nodeType":"ExpressionStatement","src":"4686:21:15"}]},"documentation":{"id":2341,"nodeType":"StructuredDocumentation","src":"4263:46:15","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":2382,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4323:7:15","nodeType":"FunctionDefinition","overrides":{"id":2347,"nodeType":"OverrideSpecifier","overrides":[],"src":"4375:8:15"},"parameters":{"id":2346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2343,"mutability":"mutable","name":"to","nameLocation":"4339:2:15","nodeType":"VariableDeclaration","scope":2382,"src":"4331:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2342,"name":"address","nodeType":"ElementaryTypeName","src":"4331:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2345,"mutability":"mutable","name":"tokenId","nameLocation":"4351:7:15","nodeType":"VariableDeclaration","scope":2382,"src":"4343:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2344,"name":"uint256","nodeType":"ElementaryTypeName","src":"4343:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4330:29:15"},"returnParameters":{"id":2348,"nodeType":"ParameterList","parameters":[],"src":"4384:0:15"},"scope":2991,"src":"4314:400:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[217],"body":{"id":2399,"nodeType":"Block","src":"4860:82:15","statements":[{"expression":{"arguments":[{"id":2392,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"4885:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2391,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"4870:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4870:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2394,"nodeType":"ExpressionStatement","src":"4870:23:15"},{"expression":{"baseExpression":{"id":2395,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"4911:15:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2397,"indexExpression":{"id":2396,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"4927:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4911:24:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2390,"id":2398,"nodeType":"Return","src":"4904:31:15"}]},"documentation":{"id":2383,"nodeType":"StructuredDocumentation","src":"4720:50:15","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":2400,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4784:11:15","nodeType":"FunctionDefinition","overrides":{"id":2387,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:15"},"parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"tokenId","nameLocation":"4804:7:15","nodeType":"VariableDeclaration","scope":2400,"src":"4796:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4796:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4795:17:15"},"returnParameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2400,"src":"4851:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4850:9:15"},"scope":2991,"src":"4775:167:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[209],"body":{"id":2416,"nodeType":"Block","src":"5093:69:15","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2410,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"5122:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5122:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2412,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"5136:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2413,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"5146:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2409,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"5103:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5103:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2415,"nodeType":"ExpressionStatement","src":"5103:52:15"}]},"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"4948:56:15","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":2417,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5018:17:15","nodeType":"FunctionDefinition","overrides":{"id":2407,"nodeType":"OverrideSpecifier","overrides":[],"src":"5084:8:15"},"parameters":{"id":2406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2403,"mutability":"mutable","name":"operator","nameLocation":"5044:8:15","nodeType":"VariableDeclaration","scope":2417,"src":"5036:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2402,"name":"address","nodeType":"ElementaryTypeName","src":"5036:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2405,"mutability":"mutable","name":"approved","nameLocation":"5059:8:15","nodeType":"VariableDeclaration","scope":2417,"src":"5054:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2404,"name":"bool","nodeType":"ElementaryTypeName","src":"5054:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5035:33:15"},"returnParameters":{"id":2408,"nodeType":"ParameterList","parameters":[],"src":"5093:0:15"},"scope":2991,"src":"5009:153:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[227],"body":{"id":2434,"nodeType":"Block","src":"5331:59:15","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2428,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"5348:18:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2430,"indexExpression":{"id":2429,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"5367:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5348:25:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2432,"indexExpression":{"id":2431,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"5374:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5348:35:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2427,"id":2433,"nodeType":"Return","src":"5341:42:15"}]},"documentation":{"id":2418,"nodeType":"StructuredDocumentation","src":"5168:55:15","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":2435,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5237:16:15","nodeType":"FunctionDefinition","overrides":{"id":2424,"nodeType":"OverrideSpecifier","overrides":[],"src":"5307:8:15"},"parameters":{"id":2423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2420,"mutability":"mutable","name":"owner","nameLocation":"5262:5:15","nodeType":"VariableDeclaration","scope":2435,"src":"5254:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2419,"name":"address","nodeType":"ElementaryTypeName","src":"5254:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2422,"mutability":"mutable","name":"operator","nameLocation":"5277:8:15","nodeType":"VariableDeclaration","scope":2435,"src":"5269:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2421,"name":"address","nodeType":"ElementaryTypeName","src":"5269:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5253:33:15"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2435,"src":"5325:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2425,"name":"bool","nodeType":"ElementaryTypeName","src":"5325:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5324:6:15"},"scope":2991,"src":"5228:162:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[193],"body":{"id":2461,"nodeType":"Block","src":"5571:208:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2448,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"5660:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5660:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2450,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5674:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2447,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"5641:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5641:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5684:48:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""},"value":"ERC721: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""}],"id":2446,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5633:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5633:100:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2454,"nodeType":"ExpressionStatement","src":"5633:100:15"},{"expression":{"arguments":[{"id":2456,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"5754:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2457,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"5760:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2458,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5764:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2455,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"5744:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5744:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2460,"nodeType":"ExpressionStatement","src":"5744:28:15"}]},"documentation":{"id":2436,"nodeType":"StructuredDocumentation","src":"5396:51:15","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":2462,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5461:12:15","nodeType":"FunctionDefinition","overrides":{"id":2444,"nodeType":"OverrideSpecifier","overrides":[],"src":"5562:8:15"},"parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2438,"mutability":"mutable","name":"from","nameLocation":"5491:4:15","nodeType":"VariableDeclaration","scope":2462,"src":"5483:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2437,"name":"address","nodeType":"ElementaryTypeName","src":"5483:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"to","nameLocation":"5513:2:15","nodeType":"VariableDeclaration","scope":2462,"src":"5505:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"5505:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"tokenId","nameLocation":"5533:7:15","nodeType":"VariableDeclaration","scope":2462,"src":"5525:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"5525:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5473:73:15"},"returnParameters":{"id":2445,"nodeType":"ParameterList","parameters":[],"src":"5571:0:15"},"scope":2991,"src":"5452:327:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[183],"body":{"id":2480,"nodeType":"Block","src":"5968:56:15","statements":[{"expression":{"arguments":[{"id":2474,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"5995:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2475,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"6001:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2476,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"6005:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6014:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2473,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2481,2511],"referencedDeclaration":2511,"src":"5978:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5978:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2479,"nodeType":"ExpressionStatement","src":"5978:39:15"}]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"5785:55:15","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":2481,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5854:16:15","nodeType":"FunctionDefinition","overrides":{"id":2471,"nodeType":"OverrideSpecifier","overrides":[],"src":"5959:8:15"},"parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"mutability":"mutable","name":"from","nameLocation":"5888:4:15","nodeType":"VariableDeclaration","scope":2481,"src":"5880:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2464,"name":"address","nodeType":"ElementaryTypeName","src":"5880:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"to","nameLocation":"5910:2:15","nodeType":"VariableDeclaration","scope":2481,"src":"5902:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2466,"name":"address","nodeType":"ElementaryTypeName","src":"5902:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"tokenId","nameLocation":"5930:7:15","nodeType":"VariableDeclaration","scope":2481,"src":"5922:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"5922:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5870:73:15"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[],"src":"5968:0:15"},"scope":2991,"src":"5845:179:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[173],"body":{"id":2510,"nodeType":"Block","src":"6240:165:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2496,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"6277:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6277:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2498,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"6291:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2495,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"6258:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6258:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6301:48:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""},"value":"ERC721: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""}],"id":2494,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6250:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6250:100:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2502,"nodeType":"ExpressionStatement","src":"6250:100:15"},{"expression":{"arguments":[{"id":2504,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"6374:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2505,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"6380:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2506,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"6384:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2507,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6393:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2503,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2540,"src":"6360:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6360:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2509,"nodeType":"ExpressionStatement","src":"6360:38:15"}]},"documentation":{"id":2482,"nodeType":"StructuredDocumentation","src":"6030:55:15","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":2511,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6099:16:15","nodeType":"FunctionDefinition","overrides":{"id":2492,"nodeType":"OverrideSpecifier","overrides":[],"src":"6231:8:15"},"parameters":{"id":2491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"from","nameLocation":"6133:4:15","nodeType":"VariableDeclaration","scope":2511,"src":"6125:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2483,"name":"address","nodeType":"ElementaryTypeName","src":"6125:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"to","nameLocation":"6155:2:15","nodeType":"VariableDeclaration","scope":2511,"src":"6147:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2485,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2488,"mutability":"mutable","name":"tokenId","nameLocation":"6175:7:15","nodeType":"VariableDeclaration","scope":2511,"src":"6167:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2487,"name":"uint256","nodeType":"ElementaryTypeName","src":"6167:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2490,"mutability":"mutable","name":"data","nameLocation":"6205:4:15","nodeType":"VariableDeclaration","scope":2511,"src":"6192:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2489,"name":"bytes","nodeType":"ElementaryTypeName","src":"6192:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6115:100:15"},"returnParameters":{"id":2493,"nodeType":"ParameterList","parameters":[],"src":"6240:0:15"},"scope":2991,"src":"6090:315:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2539,"nodeType":"Block","src":"7406:165:15","statements":[{"expression":{"arguments":[{"id":2524,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"7426:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2525,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"7432:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"7436:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2523,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"7416:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7416:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2528,"nodeType":"ExpressionStatement","src":"7416:28:15"},{"expression":{"arguments":[{"arguments":[{"id":2531,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"7485:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2532,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"7491:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2533,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"7495:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2534,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"7504:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2530,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"7462:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7462:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7511:52:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7454:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7454:110:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2538,"nodeType":"ExpressionStatement","src":"7454:110:15"}]},"documentation":{"id":2512,"nodeType":"StructuredDocumentation","src":"6411:850:15","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2540,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"7275:13:15","nodeType":"FunctionDefinition","parameters":{"id":2521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"from","nameLocation":"7306:4:15","nodeType":"VariableDeclaration","scope":2540,"src":"7298:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"7298:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"to","nameLocation":"7328:2:15","nodeType":"VariableDeclaration","scope":2540,"src":"7320:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2515,"name":"address","nodeType":"ElementaryTypeName","src":"7320:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2518,"mutability":"mutable","name":"tokenId","nameLocation":"7348:7:15","nodeType":"VariableDeclaration","scope":2540,"src":"7340:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"7340:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"data","nameLocation":"7378:4:15","nodeType":"VariableDeclaration","scope":2540,"src":"7365:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2519,"name":"bytes","nodeType":"ElementaryTypeName","src":"7365:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7288:100:15"},"returnParameters":{"id":2522,"nodeType":"ParameterList","parameters":[],"src":"7406:0:15"},"scope":2991,"src":"7266:305:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2557,"nodeType":"Block","src":"7945:54:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2548,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"7962:7:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2550,"indexExpression":{"id":2549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"7970:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7962:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7990:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7982:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2551,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:15","typeDescriptions":{}}},"id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7982:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7962:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2547,"id":2556,"nodeType":"Return","src":"7955:37:15"}]},"documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"7577:292:15","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":2558,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7883:7:15","nodeType":"FunctionDefinition","parameters":{"id":2544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2543,"mutability":"mutable","name":"tokenId","nameLocation":"7899:7:15","nodeType":"VariableDeclaration","scope":2558,"src":"7891:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2542,"name":"uint256","nodeType":"ElementaryTypeName","src":"7891:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7890:17:15"},"returnParameters":{"id":2547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2558,"src":"7939:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2545,"name":"bool","nodeType":"ElementaryTypeName","src":"7939:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7938:6:15"},"scope":2991,"src":"7874:125:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2590,"nodeType":"Block","src":"8256:155:15","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"owner","nameLocation":"8274:5:15","nodeType":"VariableDeclaration","scope":2590,"src":"8266:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"8266:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2573,"initialValue":{"arguments":[{"id":2571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"8290:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2570,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"8282:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8282:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8266:32:15"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"8316:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2575,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"8327:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8316:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2578,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"8353:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2579,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"8360:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2577,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"8336:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8336:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8316:52:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2583,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"8384:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2582,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"8372:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8372:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2585,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"8396:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8372:31:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8316:87:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8315:89:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2567,"id":2589,"nodeType":"Return","src":"8308:96:15"}]},"documentation":{"id":2559,"nodeType":"StructuredDocumentation","src":"8005:147:15","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2591,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"8166:18:15","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2561,"mutability":"mutable","name":"spender","nameLocation":"8193:7:15","nodeType":"VariableDeclaration","scope":2591,"src":"8185:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2560,"name":"address","nodeType":"ElementaryTypeName","src":"8185:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2563,"mutability":"mutable","name":"tokenId","nameLocation":"8210:7:15","nodeType":"VariableDeclaration","scope":2591,"src":"8202:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2562,"name":"uint256","nodeType":"ElementaryTypeName","src":"8202:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8184:34:15"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2591,"src":"8250:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2565,"name":"bool","nodeType":"ElementaryTypeName","src":"8250:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8249:6:15"},"scope":2991,"src":"8157:254:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2605,"nodeType":"Block","src":"8806:43:15","statements":[{"expression":{"arguments":[{"id":2600,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2594,"src":"8826:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2601,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"8830:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8839:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2599,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2606,2635],"referencedDeclaration":2635,"src":"8816:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8816:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"ExpressionStatement","src":"8816:26:15"}]},"documentation":{"id":2592,"nodeType":"StructuredDocumentation","src":"8417:319:15","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2606,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8750:9:15","nodeType":"FunctionDefinition","parameters":{"id":2597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2594,"mutability":"mutable","name":"to","nameLocation":"8768:2:15","nodeType":"VariableDeclaration","scope":2606,"src":"8760:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2593,"name":"address","nodeType":"ElementaryTypeName","src":"8760:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2596,"mutability":"mutable","name":"tokenId","nameLocation":"8780:7:15","nodeType":"VariableDeclaration","scope":2606,"src":"8772:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"8772:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8759:29:15"},"returnParameters":{"id":2598,"nodeType":"ParameterList","parameters":[],"src":"8806:0:15"},"scope":2991,"src":"8741:108:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2634,"nodeType":"Block","src":"9184:195:15","statements":[{"expression":{"arguments":[{"id":2617,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9200:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2618,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"9204:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2616,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"9194:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9194:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2620,"nodeType":"ExpressionStatement","src":"9194:18:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9274:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9266:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2623,"name":"address","nodeType":"ElementaryTypeName","src":"9266:7:15","typeDescriptions":{}}},"id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9266:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2627,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9278:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2628,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"9282:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2629,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"9291:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2622,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"9243:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9243:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9310:52:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2621,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9222:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9222:150:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2633,"nodeType":"ExpressionStatement","src":"9222:150:15"}]},"documentation":{"id":2607,"nodeType":"StructuredDocumentation","src":"8855:210:15","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2635,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"9079:9:15","nodeType":"FunctionDefinition","parameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"to","nameLocation":"9106:2:15","nodeType":"VariableDeclaration","scope":2635,"src":"9098:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"9098:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:15","nodeType":"VariableDeclaration","scope":2635,"src":"9118:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"data","nameLocation":"9156:4:15","nodeType":"VariableDeclaration","scope":2635,"src":"9143:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2612,"name":"bytes","nodeType":"ElementaryTypeName","src":"9143:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9088:78:15"},"returnParameters":{"id":2615,"nodeType":"ParameterList","parameters":[],"src":"9184:0:15"},"scope":2991,"src":"9070:309:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2700,"nodeType":"Block","src":"9762:366:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2644,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"9780:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9794:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9786:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2645,"name":"address","nodeType":"ElementaryTypeName","src":"9786:7:15","typeDescriptions":{}}},"id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9786:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9780:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9798:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9772:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9772:61:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2652,"nodeType":"ExpressionStatement","src":"9772:61:15"},{"expression":{"arguments":[{"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9851:17:15","subExpression":{"arguments":[{"id":2655,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9860:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2654,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"9852:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9852:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9870:30:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9843:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9843:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2660,"nodeType":"ExpressionStatement","src":"9843:58:15"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9941:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9933:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2662,"name":"address","nodeType":"ElementaryTypeName","src":"9933:7:15","typeDescriptions":{}}},"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9933:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2666,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"9945:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2667,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"9949:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2661,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"9912:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9912:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2669,"nodeType":"ExpressionStatement","src":"9912:45:15"},{"expression":{"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2670,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"9968:9:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2672,"indexExpression":{"id":2671,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"9978:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9968:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9968:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2675,"nodeType":"ExpressionStatement","src":"9968:18:15"},{"expression":{"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2676,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"9996:7:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2678,"indexExpression":{"id":2677,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"10004:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9996:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2679,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"10015:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9996:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2681,"nodeType":"ExpressionStatement","src":"9996:21:15"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10050:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10042:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2683,"name":"address","nodeType":"ElementaryTypeName","src":"10042:7:15","typeDescriptions":{}}},"id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10042:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2687,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"10054:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"10058:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2682,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"10033:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10033:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"EmitStatement","src":"10028:38:15"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10105:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10097:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2692,"name":"address","nodeType":"ElementaryTypeName","src":"10097:7:15","typeDescriptions":{}}},"id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10097:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2696,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"10109:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2697,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"10113:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2691,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"10077:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10077:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2699,"nodeType":"ExpressionStatement","src":"10077:44:15"}]},"documentation":{"id":2636,"nodeType":"StructuredDocumentation","src":"9385:311:15","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2701,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9710:5:15","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2638,"mutability":"mutable","name":"to","nameLocation":"9724:2:15","nodeType":"VariableDeclaration","scope":2701,"src":"9716:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2637,"name":"address","nodeType":"ElementaryTypeName","src":"9716:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2640,"mutability":"mutable","name":"tokenId","nameLocation":"9736:7:15","nodeType":"VariableDeclaration","scope":2701,"src":"9728:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"9728:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9715:29:15"},"returnParameters":{"id":2642,"nodeType":"ParameterList","parameters":[],"src":"9762:0:15"},"scope":2991,"src":"9701:427:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2760,"nodeType":"Block","src":"10394:431:15","statements":[{"assignments":[2708],"declarations":[{"constant":false,"id":2708,"mutability":"mutable","name":"owner","nameLocation":"10412:5:15","nodeType":"VariableDeclaration","scope":2760,"src":"10404:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2707,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2712,"initialValue":{"arguments":[{"id":2710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10428:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2709,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"10420:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10420:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10404:32:15"},{"expression":{"arguments":[{"id":2714,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"10468:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10483:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10475:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2715,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:15","typeDescriptions":{}}},"id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10475:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2719,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10487:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2713,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10447:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10447:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"ExpressionStatement","src":"10447:48:15"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10542:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"10542:7:15","typeDescriptions":{}}},"id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10542:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2727,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10554:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2722,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"10533:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10533:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2729,"nodeType":"ExpressionStatement","src":"10533:29:15"},{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2730,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"10573:9:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2732,"indexExpression":{"id":2731,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"10583:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10573:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10593:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10573:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2735,"nodeType":"ExpressionStatement","src":"10573:21:15"},{"expression":{"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2736,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"10676:7:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2738,"indexExpression":{"id":2737,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10684:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10676:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2739,"name":"_NULL_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"10695:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10676:32:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2741,"nodeType":"ExpressionStatement","src":"10676:32:15"},{"eventCall":{"arguments":[{"id":2743,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"10733:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10740:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"10740:7:15","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10740:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2748,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10752:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2742,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"10724:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10724:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2750,"nodeType":"EmitStatement","src":"10719:41:15"},{"expression":{"arguments":[{"id":2752,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"10791:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10806:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10798:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2753,"name":"address","nodeType":"ElementaryTypeName","src":"10798:7:15","typeDescriptions":{}}},"id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10798:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2757,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"10810:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2751,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"10771:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10771:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2759,"nodeType":"ExpressionStatement","src":"10771:47:15"}]},"documentation":{"id":2702,"nodeType":"StructuredDocumentation","src":"10134:206:15","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2761,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10354:5:15","nodeType":"FunctionDefinition","parameters":{"id":2705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2704,"mutability":"mutable","name":"tokenId","nameLocation":"10368:7:15","nodeType":"VariableDeclaration","scope":2761,"src":"10360:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"10360:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10359:17:15"},"returnParameters":{"id":2706,"nodeType":"ParameterList","parameters":[],"src":"10394:0:15"},"scope":2991,"src":"10345:480:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2834,"nodeType":"Block","src":"11258:489:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2773,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11284:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2772,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"11276:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11276:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2775,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"11296:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11276:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11302:39:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2771,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11268:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11268:74:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2779,"nodeType":"ExpressionStatement","src":"11268:74:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2781,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11360:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11374:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11366:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2782,"name":"address","nodeType":"ElementaryTypeName","src":"11366:7:15","typeDescriptions":{}}},"id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11366:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11360:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11378:38:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2780,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11352:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11352:65:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2789,"nodeType":"ExpressionStatement","src":"11352:65:15"},{"expression":{"arguments":[{"id":2791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"11449:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2792,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11455:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11459:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2790,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"11428:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11428:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"ExpressionStatement","src":"11428:39:15"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11546:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11538:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"11538:7:15","typeDescriptions":{}}},"id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11538:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2801,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11550:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2796,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"11529:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11529:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2803,"nodeType":"ExpressionStatement","src":"11529:29:15"},{"expression":{"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2804,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"11569:9:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2806,"indexExpression":{"id":2805,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"11579:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11569:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11588:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11569:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2809,"nodeType":"ExpressionStatement","src":"11569:20:15"},{"expression":{"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2810,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"11599:9:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2812,"indexExpression":{"id":2811,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11609:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11599:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11599:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2815,"nodeType":"ExpressionStatement","src":"11599:18:15"},{"expression":{"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2816,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"11627:7:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2818,"indexExpression":{"id":2817,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11635:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11627:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2819,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11646:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11627:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2821,"nodeType":"ExpressionStatement","src":"11627:21:15"},{"eventCall":{"arguments":[{"id":2823,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"11673:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2824,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11679:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2825,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11683:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2822,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"11664:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11664:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2827,"nodeType":"EmitStatement","src":"11659:32:15"},{"expression":{"arguments":[{"id":2829,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"11722:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2830,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"11728:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2831,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11732:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2828,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"11702:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11702:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2833,"nodeType":"ExpressionStatement","src":"11702:38:15"}]},"documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"10831:313:15","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2835,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11158:9:15","nodeType":"FunctionDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"from","nameLocation":"11185:4:15","nodeType":"VariableDeclaration","scope":2835,"src":"11177:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2763,"name":"address","nodeType":"ElementaryTypeName","src":"11177:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2766,"mutability":"mutable","name":"to","nameLocation":"11207:2:15","nodeType":"VariableDeclaration","scope":2835,"src":"11199:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2765,"name":"address","nodeType":"ElementaryTypeName","src":"11199:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"tokenId","nameLocation":"11227:7:15","nodeType":"VariableDeclaration","scope":2835,"src":"11219:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2767,"name":"uint256","nodeType":"ElementaryTypeName","src":"11219:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11167:73:15"},"returnParameters":{"id":2770,"nodeType":"ParameterList","parameters":[],"src":"11258:0:15"},"scope":2991,"src":"11149:598:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2857,"nodeType":"Block","src":"11923:100:15","statements":[{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2843,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"11933:15:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2845,"indexExpression":{"id":2844,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"11949:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11933:24:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2846,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11960:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11933:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2848,"nodeType":"ExpressionStatement","src":"11933:29:15"},{"eventCall":{"arguments":[{"arguments":[{"id":2851,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"11994:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2850,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"11986:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11986:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12004:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"12008:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2849,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"11977:8:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11977:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2856,"nodeType":"EmitStatement","src":"11972:44:15"}]},"documentation":{"id":2836,"nodeType":"StructuredDocumentation","src":"11753:101:15","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":2858,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"11868:8:15","nodeType":"FunctionDefinition","parameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"to","nameLocation":"11885:2:15","nodeType":"VariableDeclaration","scope":2858,"src":"11877:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2837,"name":"address","nodeType":"ElementaryTypeName","src":"11877:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2840,"mutability":"mutable","name":"tokenId","nameLocation":"11897:7:15","nodeType":"VariableDeclaration","scope":2858,"src":"11889:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2839,"name":"uint256","nodeType":"ElementaryTypeName","src":"11889:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11876:29:15"},"returnParameters":{"id":2842,"nodeType":"ParameterList","parameters":[],"src":"11923:0:15"},"scope":2991,"src":"11859:164:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2889,"nodeType":"Block","src":"12282:184:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2869,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"12300:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2870,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"12309:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12300:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12319:27:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":2868,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12292:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12292:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2874,"nodeType":"ExpressionStatement","src":"12292:55:15"},{"expression":{"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2875,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"12357:18:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2878,"indexExpression":{"id":2876,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"12376:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12357:25:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2879,"indexExpression":{"id":2877,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"12383:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12357:35:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2880,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"12395:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12357:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2882,"nodeType":"ExpressionStatement","src":"12357:46:15"},{"eventCall":{"arguments":[{"id":2884,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"12433:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2885,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"12440:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2886,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"12450:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2883,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"12418:14:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12418:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2888,"nodeType":"EmitStatement","src":"12413:46:15"}]},"documentation":{"id":2859,"nodeType":"StructuredDocumentation","src":"12029:125:15","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":2890,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12168:18:15","nodeType":"FunctionDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"owner","nameLocation":"12204:5:15","nodeType":"VariableDeclaration","scope":2890,"src":"12196:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2860,"name":"address","nodeType":"ElementaryTypeName","src":"12196:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2863,"mutability":"mutable","name":"operator","nameLocation":"12227:8:15","nodeType":"VariableDeclaration","scope":2890,"src":"12219:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2862,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"approved","nameLocation":"12250:8:15","nodeType":"VariableDeclaration","scope":2890,"src":"12245:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2864,"name":"bool","nodeType":"ElementaryTypeName","src":"12245:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12186:78:15"},"returnParameters":{"id":2867,"nodeType":"ParameterList","parameters":[],"src":"12282:0:15"},"scope":2991,"src":"12159:307:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2903,"nodeType":"Block","src":"12613:70:15","statements":[{"expression":{"arguments":[{"arguments":[{"id":2898,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"12639:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2897,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"12631:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12631:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12649:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2896,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12623:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12623:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"ExpressionStatement","src":"12623:53:15"}]},"documentation":{"id":2891,"nodeType":"StructuredDocumentation","src":"12472:73:15","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":2904,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"12559:14:15","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"tokenId","nameLocation":"12582:7:15","nodeType":"VariableDeclaration","scope":2904,"src":"12574:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"12574:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12573:17:15"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[],"src":"12613:0:15"},"scope":2991,"src":"12550:133:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2967,"nodeType":"Block","src":"13390:679:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2918,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"13404:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"13404:7:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13404:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13421:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13404:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2965,"nodeType":"Block","src":"14027:36:15","statements":[{"expression":{"hexValue":"74727565","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14048:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2917,"id":2964,"nodeType":"Return","src":"14041:11:15"}]},"id":2966,"nodeType":"IfStatement","src":"13400:663:15","trueBody":{"id":2962,"nodeType":"Block","src":"13424:597:15","statements":[{"clauses":[{"block":{"id":2942,"nodeType":"Block","src":"13538:91:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2936,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"13563:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2937,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"13573:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$246_$","typeString":"type(contract IERC721Receiver)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":245,"src":"13573:32:15","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"13573:41:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"13563:51:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2917,"id":2941,"nodeType":"Return","src":"13556:58:15"}]},"errorName":"","id":2943,"nodeType":"TryCatchClause","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"retval","nameLocation":"13530:6:15","nodeType":"VariableDeclaration","scope":2943,"src":"13523:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2933,"name":"bytes4","nodeType":"ElementaryTypeName","src":"13523:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"13522:15:15"},"src":"13514:115:15"},{"block":{"id":2959,"nodeType":"Block","src":"13658:353:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2947,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13680:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13680:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13697:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13680:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2957,"nodeType":"Block","src":"13807:190:15","statements":[{"AST":{"nodeType":"YulBlock","src":"13893:86:15","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13930:2:15","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"13934:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13926:3:15"},"nodeType":"YulFunctionCall","src":"13926:15:15"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"13949:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13943:5:15"},"nodeType":"YulFunctionCall","src":"13943:13:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13919:6:15"},"nodeType":"YulFunctionCall","src":"13919:38:15"},"nodeType":"YulExpressionStatement","src":"13919:38:15"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2945,"isOffset":false,"isSlot":false,"src":"13934:6:15","valueSize":1},{"declaration":2945,"isOffset":false,"isSlot":false,"src":"13949:6:15","valueSize":1}],"id":2956,"nodeType":"InlineAssembly","src":"13884:95:15"}]},"id":2958,"nodeType":"IfStatement","src":"13676:321:15","trueBody":{"id":2955,"nodeType":"Block","src":"13700:101:15","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13729:52:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2951,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"13722:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13722:60:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2954,"nodeType":"ExpressionStatement","src":"13722:60:15"}]}}]},"errorName":"","id":2960,"nodeType":"TryCatchClause","parameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"reason","nameLocation":"13650:6:15","nodeType":"VariableDeclaration","scope":2960,"src":"13637:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2944,"name":"bytes","nodeType":"ElementaryTypeName","src":"13637:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13636:21:15"},"src":"13630:381:15"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2927,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"13479:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13479:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2929,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"13493:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2930,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"13499:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2931,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"13508:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2924,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"13458:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2923,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"13442:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$246_$","typeString":"type(contract IERC721Receiver)"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13442:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$246","typeString":"contract IERC721Receiver"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":245,"src":"13442:36:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13442:71:15","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2961,"nodeType":"TryStatement","src":"13438:573:15"}]}}]},"documentation":{"id":2905,"nodeType":"StructuredDocumentation","src":"12689:541:15","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13244:22:15","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"from","nameLocation":"13284:4:15","nodeType":"VariableDeclaration","scope":2968,"src":"13276:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2906,"name":"address","nodeType":"ElementaryTypeName","src":"13276:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2909,"mutability":"mutable","name":"to","nameLocation":"13306:2:15","nodeType":"VariableDeclaration","scope":2968,"src":"13298:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2908,"name":"address","nodeType":"ElementaryTypeName","src":"13298:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"tokenId","nameLocation":"13326:7:15","nodeType":"VariableDeclaration","scope":2968,"src":"13318:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2910,"name":"uint256","nodeType":"ElementaryTypeName","src":"13318:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"data","nameLocation":"13356:4:15","nodeType":"VariableDeclaration","scope":2968,"src":"13343:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2912,"name":"bytes","nodeType":"ElementaryTypeName","src":"13343:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13266:100:15"},"returnParameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2968,"src":"13384:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2915,"name":"bool","nodeType":"ElementaryTypeName","src":"13384:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13383:6:15"},"scope":2991,"src":"13235:834:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2978,"nodeType":"Block","src":"14745:2:15","statements":[]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"14075:545:15","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2979,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14634:20:15","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"from","nameLocation":"14672:4:15","nodeType":"VariableDeclaration","scope":2979,"src":"14664:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"14664:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"to","nameLocation":"14694:2:15","nodeType":"VariableDeclaration","scope":2979,"src":"14686:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2972,"name":"address","nodeType":"ElementaryTypeName","src":"14686:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"tokenId","nameLocation":"14714:7:15","nodeType":"VariableDeclaration","scope":2979,"src":"14706:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2974,"name":"uint256","nodeType":"ElementaryTypeName","src":"14706:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14654:73:15"},"returnParameters":{"id":2977,"nodeType":"ParameterList","parameters":[],"src":"14745:0:15"},"scope":2991,"src":"14625:122:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2989,"nodeType":"Block","src":"15238:2:15","statements":[]},"documentation":{"id":2980,"nodeType":"StructuredDocumentation","src":"14753:361:15","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2990,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15128:19:15","nodeType":"FunctionDefinition","parameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"from","nameLocation":"15165:4:15","nodeType":"VariableDeclaration","scope":2990,"src":"15157:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"15157:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"to","nameLocation":"15187:2:15","nodeType":"VariableDeclaration","scope":2990,"src":"15179:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2983,"name":"address","nodeType":"ElementaryTypeName","src":"15179:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"tokenId","nameLocation":"15207:7:15","nodeType":"VariableDeclaration","scope":2990,"src":"15199:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"15199:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15147:73:15"},"returnParameters":{"id":2988,"nodeType":"ParameterList","parameters":[],"src":"15238:0:15"},"scope":2991,"src":"15119:121:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2992,"src":"1382:13860:15","usedErrors":[]}],"src":"302:14941:15"},"id":15},"contracts/lib/ERC721Solady.sol":{"ast":{"absolutePath":"contracts/lib/ERC721Solady.sol","exportedSymbols":{"ERC721":[3713]},"id":3714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2993,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:16"},{"abstract":true,"baseContracts":[],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":2994,"nodeType":"StructuredDocumentation","src":"1265:176:16","text":"- Check that the overridden function is actually used in the function you want to\n   change the behavior of. Much of the code has been manually inlined for performance."},"fullyImplemented":false,"id":3713,"linearizedBaseContracts":[3713],"name":"ERC721","nameLocation":"1459:6:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2995,"nodeType":"StructuredDocumentation","src":"1755:53:16","text":"@dev An account can hold up to 4294967295 tokens."},"id":2998,"mutability":"constant","name":"_MAX_ACCOUNT_BALANCE","nameLocation":"1839:20:16","nodeType":"VariableDeclaration","scope":3713,"src":"1813:59:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2996,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786666666666666666","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1862:10:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"documentation":{"id":2999,"nodeType":"StructuredDocumentation","src":"2162:74:16","text":"@dev Only the token owner or an approved account can manage the token."},"errorSelector":"4b6e7f18","id":3001,"name":"NotOwnerNorApproved","nameLocation":"2247:19:16","nodeType":"ErrorDefinition","parameters":{"id":3000,"nodeType":"ParameterList","parameters":[],"src":"2266:2:16"},"src":"2241:28:16"},{"documentation":{"id":3002,"nodeType":"StructuredDocumentation","src":"2275:34:16","text":"@dev The token does not exist."},"errorSelector":"ceea21b6","id":3004,"name":"TokenDoesNotExist","nameLocation":"2320:17:16","nodeType":"ErrorDefinition","parameters":{"id":3003,"nodeType":"ParameterList","parameters":[],"src":"2337:2:16"},"src":"2314:26:16"},{"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"2346:34:16","text":"@dev The token already exists."},"errorSelector":"c991cbb1","id":3007,"name":"TokenAlreadyExists","nameLocation":"2391:18:16","nodeType":"ErrorDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"2409:2:16"},"src":"2385:27:16"},{"documentation":{"id":3008,"nodeType":"StructuredDocumentation","src":"2418:55:16","text":"@dev Cannot query the balance for the zero address."},"errorSelector":"8f4eb604","id":3010,"name":"BalanceQueryForZeroAddress","nameLocation":"2484:26:16","nodeType":"ErrorDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[],"src":"2510:2:16"},"src":"2478:35:16"},{"documentation":{"id":3011,"nodeType":"StructuredDocumentation","src":"2519:53:16","text":"@dev Cannot mint or transfer to the zero address."},"errorSelector":"ea553b34","id":3013,"name":"TransferToZeroAddress","nameLocation":"2583:21:16","nodeType":"ErrorDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[],"src":"2604:2:16"},"src":"2577:30:16"},{"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"2613:43:16","text":"@dev The token must be owned by `from`."},"errorSelector":"a1148100","id":3016,"name":"TransferFromIncorrectOwner","nameLocation":"2667:26:16","nodeType":"ErrorDefinition","parameters":{"id":3015,"nodeType":"ParameterList","parameters":[],"src":"2693:2:16"},"src":"2661:35:16"},{"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"2702:48:16","text":"@dev The recipient's balance has overflowed."},"errorSelector":"01336cea","id":3019,"name":"AccountBalanceOverflow","nameLocation":"2761:22:16","nodeType":"ErrorDefinition","parameters":{"id":3018,"nodeType":"ParameterList","parameters":[],"src":"2783:2:16"},"src":"2755:31:16"},{"documentation":{"id":3020,"nodeType":"StructuredDocumentation","src":"2792:107:16","text":"@dev Cannot safely transfer to a contract that does not implement\n the ERC721Receiver interface."},"errorSelector":"d1a57ed6","id":3022,"name":"TransferToNonERC721ReceiverImplementer","nameLocation":"2910:38:16","nodeType":"ErrorDefinition","parameters":{"id":3021,"nodeType":"ParameterList","parameters":[],"src":"2948:2:16"},"src":"2904:47:16"},{"anonymous":false,"documentation":{"id":3023,"nodeType":"StructuredDocumentation","src":"3240:68:16","text":"@dev Emitted when token `id` is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3031,"name":"Transfer","nameLocation":"3319:8:16","nodeType":"EventDefinition","parameters":{"id":3030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3025,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"3344:4:16","nodeType":"VariableDeclaration","scope":3031,"src":"3328:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3024,"name":"address","nodeType":"ElementaryTypeName","src":"3328:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3027,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"3366:2:16","nodeType":"VariableDeclaration","scope":3031,"src":"3350:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"3350:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3029,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"3386:2:16","nodeType":"VariableDeclaration","scope":3031,"src":"3370:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3370:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3327:62:16"},"src":"3313:77:16"},{"anonymous":false,"documentation":{"id":3032,"nodeType":"StructuredDocumentation","src":"3396:73:16","text":"@dev Emitted when `owner` enables `account` to manage the `id` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3040,"name":"Approval","nameLocation":"3480:8:16","nodeType":"EventDefinition","parameters":{"id":3039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3034,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3505:5:16","nodeType":"VariableDeclaration","scope":3040,"src":"3489:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3033,"name":"address","nodeType":"ElementaryTypeName","src":"3489:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3036,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"3528:7:16","nodeType":"VariableDeclaration","scope":3040,"src":"3512:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3035,"name":"address","nodeType":"ElementaryTypeName","src":"3512:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3038,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"3553:2:16","nodeType":"VariableDeclaration","scope":3040,"src":"3537:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3037,"name":"uint256","nodeType":"ElementaryTypeName","src":"3537:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3488:68:16"},"src":"3474:83:16"},{"anonymous":false,"documentation":{"id":3041,"nodeType":"StructuredDocumentation","src":"3563:91:16","text":"@dev Emitted when `owner` enables or disables `operator` to manage all of their tokens."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3049,"name":"ApprovalForAll","nameLocation":"3665:14:16","nodeType":"EventDefinition","parameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3696:5:16","nodeType":"VariableDeclaration","scope":3049,"src":"3680:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3042,"name":"address","nodeType":"ElementaryTypeName","src":"3680:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3045,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"3719:8:16","nodeType":"VariableDeclaration","scope":3049,"src":"3703:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3044,"name":"address","nodeType":"ElementaryTypeName","src":"3703:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3047,"indexed":false,"mutability":"mutable","name":"isApproved","nameLocation":"3734:10:16","nodeType":"VariableDeclaration","scope":3049,"src":"3729:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3046,"name":"bool","nodeType":"ElementaryTypeName","src":"3729:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3679:66:16"},"src":"3659:87:16"},{"constant":true,"documentation":{"id":3050,"nodeType":"StructuredDocumentation","src":"3752:65:16","text":"@dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`."},"id":3053,"mutability":"constant","name":"_TRANSFER_EVENT_SIGNATURE","nameLocation":"3847:25:16","nodeType":"VariableDeclaration","scope":3713,"src":"3822:127:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3051,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864646632353261643162653263383962363963326230363866633337386461613935326261376631363363346131313632386635356134646635323362336566","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3883:66:16","typeDescriptions":{"typeIdentifier":"t_rational_100389287136786176327247604509743168900146139575972864366142685224231313322991_by_1","typeString":"int_const 1003...(70 digits omitted)...2991"},"value":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"},"visibility":"private"},{"constant":true,"documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"3956:65:16","text":"@dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`."},"id":3057,"mutability":"constant","name":"_APPROVAL_EVENT_SIGNATURE","nameLocation":"4051:25:16","nodeType":"VariableDeclaration","scope":3713,"src":"4026:127:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"4026:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307838633562653165356562656337643562643134663731343237643165383466336464303331346330663762323239316535623230306163386337633362393235","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4087:66:16","typeDescriptions":{"typeIdentifier":"t_rational_63486140976153616755203102783360879283472101686154884697241723088393386309925_by_1","typeString":"int_const 6348...(69 digits omitted)...9925"},"value":"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"},"visibility":"private"},{"constant":true,"documentation":{"id":3058,"nodeType":"StructuredDocumentation","src":"4160:68:16","text":"@dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`."},"id":3061,"mutability":"constant","name":"_APPROVAL_FOR_ALL_EVENT_SIGNATURE","nameLocation":"4258:33:16","nodeType":"VariableDeclaration","scope":3713,"src":"4233:135:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"4233:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307831373330376561623339616236313037653838393938343561643364353962643936353366323030663232303932303438396361326235393337363936633331","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:16","typeDescriptions":{"typeIdentifier":"t_rational_10488878412788366941768124514102328501031624832915735463117339209566108871729_by_1","typeString":"int_const 1048...(69 digits omitted)...1729"},"value":"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"},"visibility":"private"},{"constant":true,"documentation":{"id":3062,"nodeType":"StructuredDocumentation","src":"4658:1014:16","text":"@dev The ownership data slot of `id` is given by:\n ```\n     mstore(0x00, id)\n     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n ```\n Bits Layout:\n - [0..159]   `addr`\n - [160..255] `extraData`\n The approved address slot is given by: `add(1, ownershipSlot)`.\n See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\n The balance slot of `owner` is given by:\n ```\n     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n     mstore(0x00, owner)\n     let balanceSlot := keccak256(0x0c, 0x1c)\n ```\n Bits Layout:\n - [0..31]   `balance`\n - [32..255] `aux`\n The `operator` approval slot of `owner` is given by:\n ```\n     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\n     mstore(0x00, owner)\n     let operatorApprovalSlot := keccak256(0x0c, 0x30)\n ```"},"id":3067,"mutability":"constant","name":"_ERC721_MASTER_SLOT_SEED","nameLocation":"5702:24:16","nodeType":"VariableDeclaration","scope":3713,"src":"5677:77:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"5677:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_56779654877098784894033833160858981098869911147275929510173318722286648295424_by_1","typeString":"int_const 5677...(69 digits omitted)...5424"},"id":3066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"307837643838323535333061356132653761","id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5729:18:16","typeDescriptions":{"typeIdentifier":"t_rational_9045520890159836794_by_1","typeString":"int_const 9045520890159836794"},"value":"0x7d8825530a5a2e7a"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5751:3:16","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"5729:25:16","typeDescriptions":{"typeIdentifier":"t_rational_56779654877098784894033833160858981098869911147275929510173318722286648295424_by_1","typeString":"int_const 5677...(69 digits omitted)...5424"}},"visibility":"private"},{"constant":true,"documentation":{"id":3068,"nodeType":"StructuredDocumentation","src":"5761:45:16","text":"@dev Pre-shifted and pre-masked constant."},"id":3071,"mutability":"constant","name":"_ERC721_MASTER_SLOT_SEED_MASKED","nameLocation":"5836:31:16","nodeType":"VariableDeclaration","scope":3713,"src":"5811:77:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3069,"name":"uint256","nodeType":"ElementaryTypeName","src":"5811:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830613561326537613030303030303030","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5870:18:16","typeDescriptions":{"typeIdentifier":"t_rational_745959789804126208_by_1","typeString":"int_const 745959789804126208"},"value":"0x0a5a2e7a00000000"},"visibility":"private"},{"documentation":{"id":3072,"nodeType":"StructuredDocumentation","src":"6178:43:16","text":"@dev Returns the token collection name."},"functionSelector":"06fdde03","id":3077,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"6235:4:16","nodeType":"FunctionDefinition","parameters":{"id":3073,"nodeType":"ParameterList","parameters":[],"src":"6239:2:16"},"returnParameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3077,"src":"6271:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3074,"name":"string","nodeType":"ElementaryTypeName","src":"6271:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6270:15:16"},"scope":3713,"src":"6226:60:16","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":3078,"nodeType":"StructuredDocumentation","src":"6292:45:16","text":"@dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":3083,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"6351:6:16","nodeType":"FunctionDefinition","parameters":{"id":3079,"nodeType":"ParameterList","parameters":[],"src":"6357:2:16"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3083,"src":"6389:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3080,"name":"string","nodeType":"ElementaryTypeName","src":"6389:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6388:15:16"},"scope":3713,"src":"6342:62:16","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":3084,"nodeType":"StructuredDocumentation","src":"6410:70:16","text":"@dev Returns the Uniform Resource Identifier (URI) for token `id`."},"functionSelector":"c87b56dd","id":3091,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"6494:8:16","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3086,"mutability":"mutable","name":"id","nameLocation":"6511:2:16","nodeType":"VariableDeclaration","scope":3091,"src":"6503:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"6503:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6502:12:16"},"returnParameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3091,"src":"6544:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3088,"name":"string","nodeType":"ElementaryTypeName","src":"6544:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6543:15:16"},"scope":3713,"src":"6485:74:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3106,"nodeType":"Block","src":"7113:258:16","statements":[{"expression":{"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"7123:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3101,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"7141:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3100,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"7132:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7132:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7123:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3104,"nodeType":"ExpressionStatement","src":"7123:21:16"},{"AST":{"nodeType":"YulBlock","src":"7206:159:16","statements":[{"body":{"nodeType":"YulBlock","src":"7238:117:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7263:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7269:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7256:6:16"},"nodeType":"YulFunctionCall","src":"7256:24:16"},"nodeType":"YulExpressionStatement","src":"7256:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7330:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"7336:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7323:6:16"},"nodeType":"YulFunctionCall","src":"7323:18:16"},"nodeType":"YulExpressionStatement","src":"7323:18:16"}]},"condition":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"7230:6:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7223:6:16"},"nodeType":"YulFunctionCall","src":"7223:14:16"},"nodeType":"YulIf","src":"7220:135:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3097,"isOffset":false,"isSlot":false,"src":"7230:6:16","valueSize":1}],"id":3105,"nodeType":"InlineAssembly","src":"7197:168:16"}]},"documentation":{"id":3092,"nodeType":"StructuredDocumentation","src":"6930:104:16","text":"@dev Returns the owner of token `id`.\n Requirements:\n - Token `id` must exist."},"functionSelector":"6352211e","id":3107,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"7048:7:16","nodeType":"FunctionDefinition","parameters":{"id":3095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3094,"mutability":"mutable","name":"id","nameLocation":"7064:2:16","nodeType":"VariableDeclaration","scope":3107,"src":"7056:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3093,"name":"uint256","nodeType":"ElementaryTypeName","src":"7056:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7055:12:16"},"returnParameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3097,"mutability":"mutable","name":"result","nameLocation":"7105:6:16","nodeType":"VariableDeclaration","scope":3107,"src":"7097:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3096,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7096:16:16"},"scope":3713,"src":"7039:332:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3116,"nodeType":"Block","src":"7594:454:16","statements":[{"AST":{"nodeType":"YulBlock","src":"7656:386:16","statements":[{"body":{"nodeType":"YulBlock","src":"7745:126:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7770:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7776:10:16","type":"","value":"0x8f4eb604"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7763:6:16"},"nodeType":"YulFunctionCall","src":"7763:24:16"},"nodeType":"YulExpressionStatement","src":"7763:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7846:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"7852:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7839:6:16"},"nodeType":"YulFunctionCall","src":"7839:18:16"},"nodeType":"YulExpressionStatement","src":"7839:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"7738:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7731:6:16"},"nodeType":"YulFunctionCall","src":"7731:13:16"},"nodeType":"YulIf","src":"7728:143:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7891:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"7897:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7884:6:16"},"nodeType":"YulFunctionCall","src":"7884:38:16"},"nodeType":"YulExpressionStatement","src":"7884:38:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7942:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"7948:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7935:6:16"},"nodeType":"YulFunctionCall","src":"7935:19:16"},"nodeType":"YulExpressionStatement","src":"7935:19:16"},{"nodeType":"YulAssignment","src":"7967:65:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7997:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"8003:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7987:9:16"},"nodeType":"YulFunctionCall","src":"7987:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7981:5:16"},"nodeType":"YulFunctionCall","src":"7981:28:16"},{"name":"_MAX_ACCOUNT_BALANCE","nodeType":"YulIdentifier","src":"8011:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7977:3:16"},"nodeType":"YulFunctionCall","src":"7977:55:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7967:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"7897:24:16","valueSize":1},{"declaration":2998,"isOffset":false,"isSlot":false,"src":"8011:20:16","valueSize":1},{"declaration":3110,"isOffset":false,"isSlot":false,"src":"7738:5:16","valueSize":1},{"declaration":3110,"isOffset":false,"isSlot":false,"src":"7948:5:16","valueSize":1},{"declaration":3113,"isOffset":false,"isSlot":false,"src":"7967:6:16","valueSize":1}],"id":3115,"nodeType":"InlineAssembly","src":"7647:395:16"}]},"documentation":{"id":3108,"nodeType":"StructuredDocumentation","src":"7377:133:16","text":"@dev Returns the number of tokens owned by `owner`.\n Requirements:\n - `owner` must not be the zero address."},"functionSelector":"70a08231","id":3117,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"7524:9:16","nodeType":"FunctionDefinition","parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"owner","nameLocation":"7542:5:16","nodeType":"VariableDeclaration","scope":3117,"src":"7534:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"7534:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7533:15:16"},"returnParameters":{"id":3114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"mutability":"mutable","name":"result","nameLocation":"7586:6:16","nodeType":"VariableDeclaration","scope":3117,"src":"7578:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7577:16:16"},"scope":3713,"src":"7515:533:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3126,"nodeType":"Block","src":"8259:454:16","statements":[{"AST":{"nodeType":"YulBlock","src":"8321:386:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8342:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"8348:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8335:6:16"},"nodeType":"YulFunctionCall","src":"8335:16:16"},"nodeType":"YulExpressionStatement","src":"8335:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8371:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"8377:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8364:6:16"},"nodeType":"YulFunctionCall","src":"8364:38:16"},"nodeType":"YulExpressionStatement","src":"8364:38:16"},{"nodeType":"YulVariableDeclaration","src":"8415:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"8440:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"8448:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8462:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8468:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8452:9:16"},"nodeType":"YulFunctionCall","src":"8452:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8444:3:16"},"nodeType":"YulFunctionCall","src":"8444:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8436:3:16"},"nodeType":"YulFunctionCall","src":"8436:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"8419:13:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8529:117:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8554:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8560:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8547:6:16"},"nodeType":"YulFunctionCall","src":"8547:24:16"},"nodeType":"YulExpressionStatement","src":"8547:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8621:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"8627:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8614:6:16"},"nodeType":"YulFunctionCall","src":"8614:18:16"},"nodeType":"YulExpressionStatement","src":"8614:18:16"}]},"condition":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8502:2:16","type":"","value":"96"},{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"8512:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8506:5:16"},"nodeType":"YulFunctionCall","src":"8506:20:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8498:3:16"},"nodeType":"YulFunctionCall","src":"8498:29:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8491:6:16"},"nodeType":"YulFunctionCall","src":"8491:37:16"},"nodeType":"YulIf","src":"8488:158:16"},{"nodeType":"YulAssignment","src":"8659:38:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8679:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"8682:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8675:3:16"},"nodeType":"YulFunctionCall","src":"8675:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8669:5:16"},"nodeType":"YulFunctionCall","src":"8669:28:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8659:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"8377:24:16","valueSize":1},{"declaration":3120,"isOffset":false,"isSlot":false,"src":"8348:2:16","valueSize":1},{"declaration":3120,"isOffset":false,"isSlot":false,"src":"8440:2:16","valueSize":1},{"declaration":3120,"isOffset":false,"isSlot":false,"src":"8448:2:16","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"8659:6:16","valueSize":1}],"id":3125,"nodeType":"InlineAssembly","src":"8312:395:16"}]},"documentation":{"id":3118,"nodeType":"StructuredDocumentation","src":"8054:122:16","text":"@dev Returns the account approved to manage token `id`.\n Requirements:\n - Token `id` must exist."},"functionSelector":"081812fc","id":3127,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"8190:11:16","nodeType":"FunctionDefinition","parameters":{"id":3121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"mutability":"mutable","name":"id","nameLocation":"8210:2:16","nodeType":"VariableDeclaration","scope":3127,"src":"8202:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3119,"name":"uint256","nodeType":"ElementaryTypeName","src":"8202:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8201:12:16"},"returnParameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3123,"mutability":"mutable","name":"result","nameLocation":"8251:6:16","nodeType":"VariableDeclaration","scope":3127,"src":"8243:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3122,"name":"address","nodeType":"ElementaryTypeName","src":"8243:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8242:16:16"},"scope":3713,"src":"8181:532:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3142,"nodeType":"Block","src":"9076:50:16","statements":[{"expression":{"arguments":[{"expression":{"id":3136,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9095:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9095:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3138,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"9107:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3139,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"9116:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3135,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3489,3501],"referencedDeclaration":3501,"src":"9086:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9086:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3141,"nodeType":"ExpressionStatement","src":"9086:33:16"}]},"documentation":{"id":3128,"nodeType":"StructuredDocumentation","src":"8719:283:16","text":"@dev Sets `account` as the approved account to manage token `id`.\n Requirements:\n - Token `id` must exist.\n - The caller must be the owner of the token,\n   or an approved operator for the token owner.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3143,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"9016:7:16","nodeType":"FunctionDefinition","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3130,"mutability":"mutable","name":"account","nameLocation":"9032:7:16","nodeType":"VariableDeclaration","scope":3143,"src":"9024:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3129,"name":"address","nodeType":"ElementaryTypeName","src":"9024:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"id","nameLocation":"9049:2:16","nodeType":"VariableDeclaration","scope":3143,"src":"9041:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"9041:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9023:29:16"},"returnParameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"9076:0:16"},"scope":3713,"src":"9007:119:16","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":3154,"nodeType":"Block","src":"9354:255:16","statements":[{"AST":{"nodeType":"YulBlock","src":"9416:187:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9437:4:16","type":"","value":"0x1c"},{"name":"operator","nodeType":"YulIdentifier","src":"9443:8:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9430:6:16"},"nodeType":"YulFunctionCall","src":"9430:22:16"},"nodeType":"YulExpressionStatement","src":"9430:22:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9472:4:16","type":"","value":"0x08"},{"name":"_ERC721_MASTER_SLOT_SEED_MASKED","nodeType":"YulIdentifier","src":"9478:31:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9465:6:16"},"nodeType":"YulFunctionCall","src":"9465:45:16"},"nodeType":"YulExpressionStatement","src":"9465:45:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9530:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"9536:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9523:6:16"},"nodeType":"YulFunctionCall","src":"9523:19:16"},"nodeType":"YulExpressionStatement","src":"9523:19:16"},{"nodeType":"YulAssignment","src":"9555:38:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9581:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"9587:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9571:9:16"},"nodeType":"YulFunctionCall","src":"9571:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"9565:5:16"},"nodeType":"YulFunctionCall","src":"9565:28:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9555:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3071,"isOffset":false,"isSlot":false,"src":"9478:31:16","valueSize":1},{"declaration":3148,"isOffset":false,"isSlot":false,"src":"9443:8:16","valueSize":1},{"declaration":3146,"isOffset":false,"isSlot":false,"src":"9536:5:16","valueSize":1},{"declaration":3151,"isOffset":false,"isSlot":false,"src":"9555:6:16","valueSize":1}],"id":3153,"nodeType":"InlineAssembly","src":"9407:196:16"}]},"documentation":{"id":3144,"nodeType":"StructuredDocumentation","src":"9132:80:16","text":"@dev Returns whether `operator` is approved to manage the tokens of `owner`."},"functionSelector":"e985e9c5","id":3155,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"9226:16:16","nodeType":"FunctionDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3146,"mutability":"mutable","name":"owner","nameLocation":"9251:5:16","nodeType":"VariableDeclaration","scope":3155,"src":"9243:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3145,"name":"address","nodeType":"ElementaryTypeName","src":"9243:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3148,"mutability":"mutable","name":"operator","nameLocation":"9266:8:16","nodeType":"VariableDeclaration","scope":3155,"src":"9258:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"9258:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9242:33:16"},"returnParameters":{"id":3152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"result","nameLocation":"9342:6:16","nodeType":"VariableDeclaration","scope":3155,"src":"9337:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3150,"name":"bool","nodeType":"ElementaryTypeName","src":"9337:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9336:13:16"},"scope":3713,"src":"9217:392:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3164,"nodeType":"Block","src":"9826:649:16","statements":[{"AST":{"nodeType":"YulBlock","src":"9888:581:16","statements":[{"nodeType":"YulAssignment","src":"9936:40:16","value":{"arguments":[{"arguments":[{"name":"isApproved","nodeType":"YulIdentifier","src":"9964:10:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9957:6:16"},"nodeType":"YulFunctionCall","src":"9957:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9950:6:16"},"nodeType":"YulFunctionCall","src":"9950:26:16"},"variableNames":[{"name":"isApproved","nodeType":"YulIdentifier","src":"9936:10:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10067:4:16","type":"","value":"0x1c"},{"name":"operator","nodeType":"YulIdentifier","src":"10073:8:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10060:6:16"},"nodeType":"YulFunctionCall","src":"10060:22:16"},"nodeType":"YulExpressionStatement","src":"10060:22:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10102:4:16","type":"","value":"0x08"},{"name":"_ERC721_MASTER_SLOT_SEED_MASKED","nodeType":"YulIdentifier","src":"10108:31:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10095:6:16"},"nodeType":"YulFunctionCall","src":"10095:45:16"},"nodeType":"YulExpressionStatement","src":"10095:45:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10160:4:16","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"10166:6:16"},"nodeType":"YulFunctionCall","src":"10166:8:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10153:6:16"},"nodeType":"YulFunctionCall","src":"10153:22:16"},"nodeType":"YulExpressionStatement","src":"10153:22:16"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10205:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"10211:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10195:9:16"},"nodeType":"YulFunctionCall","src":"10195:21:16"},{"name":"isApproved","nodeType":"YulIdentifier","src":"10218:10:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10188:6:16"},"nodeType":"YulFunctionCall","src":"10188:41:16"},"nodeType":"YulExpressionStatement","src":"10188:41:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10297:4:16","type":"","value":"0x00"},{"name":"isApproved","nodeType":"YulIdentifier","src":"10303:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10290:6:16"},"nodeType":"YulFunctionCall","src":"10290:24:16"},"nodeType":"YulExpressionStatement","src":"10290:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10375:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10381:4:16","type":"","value":"0x20"},{"name":"_APPROVAL_FOR_ALL_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"10387:33:16"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"10422:6:16"},"nodeType":"YulFunctionCall","src":"10422:8:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10436:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10444:2:16","type":"","value":"96"},{"name":"operator","nodeType":"YulIdentifier","src":"10448:8:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10440:3:16"},"nodeType":"YulFunctionCall","src":"10440:17:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10432:3:16"},"nodeType":"YulFunctionCall","src":"10432:26:16"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"10370:4:16"},"nodeType":"YulFunctionCall","src":"10370:89:16"},"nodeType":"YulExpressionStatement","src":"10370:89:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3061,"isOffset":false,"isSlot":false,"src":"10387:33:16","valueSize":1},{"declaration":3071,"isOffset":false,"isSlot":false,"src":"10108:31:16","valueSize":1},{"declaration":3160,"isOffset":false,"isSlot":false,"src":"10218:10:16","valueSize":1},{"declaration":3160,"isOffset":false,"isSlot":false,"src":"10303:10:16","valueSize":1},{"declaration":3160,"isOffset":false,"isSlot":false,"src":"9936:10:16","valueSize":1},{"declaration":3160,"isOffset":false,"isSlot":false,"src":"9964:10:16","valueSize":1},{"declaration":3158,"isOffset":false,"isSlot":false,"src":"10073:8:16","valueSize":1},{"declaration":3158,"isOffset":false,"isSlot":false,"src":"10448:8:16","valueSize":1}],"id":3163,"nodeType":"InlineAssembly","src":"9879:590:16"}]},"documentation":{"id":3156,"nodeType":"StructuredDocumentation","src":"9615:129:16","text":"@dev Sets whether `operator` is approved to manage the tokens of the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":3165,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"9758:17:16","nodeType":"FunctionDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3158,"mutability":"mutable","name":"operator","nameLocation":"9784:8:16","nodeType":"VariableDeclaration","scope":3165,"src":"9776:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3157,"name":"address","nodeType":"ElementaryTypeName","src":"9776:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"isApproved","nameLocation":"9799:10:16","nodeType":"VariableDeclaration","scope":3165,"src":"9794:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3159,"name":"bool","nodeType":"ElementaryTypeName","src":"9794:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9775:35:16"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[],"src":"9826:0:16"},"scope":3713,"src":"9749:726:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3188,"nodeType":"Block","src":"10913:2918:16","statements":[{"expression":{"arguments":[{"id":3176,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"10944:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3177,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"10950:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3178,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"10954:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3175,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"10923:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10923:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3180,"nodeType":"ExpressionStatement","src":"10923:34:16"},{"AST":{"nodeType":"YulBlock","src":"11019:2763:16","statements":[{"nodeType":"YulVariableDeclaration","src":"11073:37:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11099:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11107:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11103:3:16"},"nodeType":"YulFunctionCall","src":"11103:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11095:3:16"},"nodeType":"YulFunctionCall","src":"11095:15:16"},"variables":[{"name":"bitmaskAddress","nodeType":"YulTypedName","src":"11077:14:16","type":""}]},{"nodeType":"YulAssignment","src":"11123:33:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"11135:14:16"},{"name":"from","nodeType":"YulIdentifier","src":"11151:4:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11131:3:16"},"nodeType":"YulFunctionCall","src":"11131:25:16"},"variableNames":[{"name":"from","nodeType":"YulIdentifier","src":"11123:4:16"}]},{"nodeType":"YulAssignment","src":"11169:29:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"11179:14:16"},{"name":"to","nodeType":"YulIdentifier","src":"11195:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11175:3:16"},"nodeType":"YulFunctionCall","src":"11175:23:16"},"variableNames":[{"name":"to","nodeType":"YulIdentifier","src":"11169:2:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11258:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"11264:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11251:6:16"},"nodeType":"YulFunctionCall","src":"11251:16:16"},"nodeType":"YulExpressionStatement","src":"11251:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11287:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"11296:24:16"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"11322:6:16"},"nodeType":"YulFunctionCall","src":"11322:8:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11293:2:16"},"nodeType":"YulFunctionCall","src":"11293:38:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11280:6:16"},"nodeType":"YulFunctionCall","src":"11280:52:16"},"nodeType":"YulExpressionStatement","src":"11280:52:16"},{"nodeType":"YulVariableDeclaration","src":"11345:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"11370:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"11378:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11392:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11398:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"11382:9:16"},"nodeType":"YulFunctionCall","src":"11382:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11374:3:16"},"nodeType":"YulFunctionCall","src":"11374:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11366:3:16"},"nodeType":"YulFunctionCall","src":"11366:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"11349:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11418:43:16","value":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"11447:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"11441:5:16"},"nodeType":"YulFunctionCall","src":"11441:20:16"},"variables":[{"name":"ownershipPacked","nodeType":"YulTypedName","src":"11422:15:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11474:49:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"11491:14:16"},{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"11507:15:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11487:3:16"},"nodeType":"YulFunctionCall","src":"11487:36:16"},"variables":[{"name":"owner","nodeType":"YulTypedName","src":"11478:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"11644:289:16","statements":[{"body":{"nodeType":"YulBlock","src":"11679:129:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11708:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11714:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11701:6:16"},"nodeType":"YulFunctionCall","src":"11701:24:16"},"nodeType":"YulExpressionStatement","src":"11701:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11779:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"11785:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11772:6:16"},"nodeType":"YulFunctionCall","src":"11772:18:16"},"nodeType":"YulExpressionStatement","src":"11772:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"11672:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11665:6:16"},"nodeType":"YulFunctionCall","src":"11665:13:16"},"nodeType":"YulIf","src":"11662:146:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11832:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11838:10:16","type":"","value":"0xa1148100"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11825:6:16"},"nodeType":"YulFunctionCall","src":"11825:24:16"},"nodeType":"YulExpressionStatement","src":"11825:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11908:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"11914:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11901:6:16"},"nodeType":"YulFunctionCall","src":"11901:18:16"},"nodeType":"YulExpressionStatement","src":"11901:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"11619:5:16"},{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"11629:5:16"},{"name":"from","nodeType":"YulIdentifier","src":"11636:4:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11626:2:16"},"nodeType":"YulFunctionCall","src":"11626:15:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11615:3:16"},"nodeType":"YulFunctionCall","src":"11615:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11608:6:16"},"nodeType":"YulFunctionCall","src":"11608:35:16"},"nodeType":"YulIf","src":"11605:328:16"},{"body":{"nodeType":"YulBlock","src":"12011:121:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12036:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"12042:10:16","type":"","value":"0xea553b34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12029:6:16"},"nodeType":"YulFunctionCall","src":"12029:24:16"},"nodeType":"YulExpressionStatement","src":"12029:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12107:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"12113:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12100:6:16"},"nodeType":"YulFunctionCall","src":"12100:18:16"},"nodeType":"YulExpressionStatement","src":"12100:18:16"}]},"condition":{"arguments":[{"name":"to","nodeType":"YulIdentifier","src":"12007:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12000:6:16"},"nodeType":"YulFunctionCall","src":"12000:10:16"},"nodeType":"YulIf","src":"11997:135:16"},{"nodeType":"YulBlock","src":"12204:622:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12229:4:16","type":"","value":"0x00"},{"name":"from","nodeType":"YulIdentifier","src":"12235:4:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12222:6:16"},"nodeType":"YulFunctionCall","src":"12222:18:16"},"nodeType":"YulExpressionStatement","src":"12222:18:16"},{"nodeType":"YulVariableDeclaration","src":"12257:51:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12290:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"12293:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12286:3:16"},"nodeType":"YulFunctionCall","src":"12286:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12280:5:16"},"nodeType":"YulFunctionCall","src":"12280:28:16"},"variables":[{"name":"approvedAddress","nodeType":"YulTypedName","src":"12261:15:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"12462:223:16","statements":[{"body":{"nodeType":"YulBlock","src":"12524:143:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12557:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"12563:10:16","type":"","value":"0x4b6e7f18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12550:6:16"},"nodeType":"YulFunctionCall","src":"12550:24:16"},"nodeType":"YulExpressionStatement","src":"12550:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12634:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"12640:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12627:6:16"},"nodeType":"YulFunctionCall","src":"12627:18:16"},"nodeType":"YulExpressionStatement","src":"12627:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12510:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"12516:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12500:9:16"},"nodeType":"YulFunctionCall","src":"12500:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12494:5:16"},"nodeType":"YulFunctionCall","src":"12494:28:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12487:6:16"},"nodeType":"YulFunctionCall","src":"12487:36:16"},"nodeType":"YulIf","src":"12484:183:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"12413:6:16"},"nodeType":"YulFunctionCall","src":"12413:8:16"},{"name":"from","nodeType":"YulIdentifier","src":"12423:4:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12410:2:16"},"nodeType":"YulFunctionCall","src":"12410:18:16"},{"arguments":[{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"12433:6:16"},"nodeType":"YulFunctionCall","src":"12433:8:16"},{"name":"approvedAddress","nodeType":"YulIdentifier","src":"12443:15:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12430:2:16"},"nodeType":"YulFunctionCall","src":"12430:29:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12407:2:16"},"nodeType":"YulFunctionCall","src":"12407:53:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12400:6:16"},"nodeType":"YulFunctionCall","src":"12400:61:16"},"nodeType":"YulIf","src":"12397:288:16"},{"body":{"nodeType":"YulBlock","src":"12776:36:16","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12789:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"12792:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12785:3:16"},"nodeType":"YulFunctionCall","src":"12785:21:16"},{"kind":"number","nodeType":"YulLiteral","src":"12808:1:16","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12778:6:16"},"nodeType":"YulFunctionCall","src":"12778:32:16"},"nodeType":"YulExpressionStatement","src":"12778:32:16"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"12760:15:16"},"nodeType":"YulIf","src":"12757:55:16"}]},{"expression":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"12888:13:16"},{"arguments":[{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"12907:15:16"},{"arguments":[{"name":"from","nodeType":"YulIdentifier","src":"12928:4:16"},{"name":"to","nodeType":"YulIdentifier","src":"12934:2:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"12924:3:16"},"nodeType":"YulFunctionCall","src":"12924:13:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"12903:3:16"},"nodeType":"YulFunctionCall","src":"12903:35:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12881:6:16"},"nodeType":"YulFunctionCall","src":"12881:58:16"},"nodeType":"YulExpressionStatement","src":"12881:58:16"},{"nodeType":"YulBlock","src":"13000:148:16","statements":[{"nodeType":"YulVariableDeclaration","src":"13018:44:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13051:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"13057:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"13041:9:16"},"nodeType":"YulFunctionCall","src":"13041:21:16"},"variables":[{"name":"fromBalanceSlot","nodeType":"YulTypedName","src":"13022:15:16","type":""}]},{"expression":{"arguments":[{"name":"fromBalanceSlot","nodeType":"YulIdentifier","src":"13086:15:16"},{"arguments":[{"arguments":[{"name":"fromBalanceSlot","nodeType":"YulIdentifier","src":"13113:15:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13107:5:16"},"nodeType":"YulFunctionCall","src":"13107:22:16"},{"kind":"number","nodeType":"YulLiteral","src":"13131:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13103:3:16"},"nodeType":"YulFunctionCall","src":"13103:30:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13079:6:16"},"nodeType":"YulFunctionCall","src":"13079:55:16"},"nodeType":"YulExpressionStatement","src":"13079:55:16"}]},{"nodeType":"YulBlock","src":"13207:447:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13232:4:16","type":"","value":"0x00"},{"name":"to","nodeType":"YulIdentifier","src":"13238:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13225:6:16"},"nodeType":"YulFunctionCall","src":"13225:16:16"},"nodeType":"YulExpressionStatement","src":"13225:16:16"},{"nodeType":"YulVariableDeclaration","src":"13258:42:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13289:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"13295:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"13279:9:16"},"nodeType":"YulFunctionCall","src":"13279:21:16"},"variables":[{"name":"toBalanceSlot","nodeType":"YulTypedName","src":"13262:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13317:55:16","value":{"arguments":[{"arguments":[{"name":"toBalanceSlot","nodeType":"YulIdentifier","src":"13354:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13348:5:16"},"nodeType":"YulFunctionCall","src":"13348:20:16"},{"kind":"number","nodeType":"YulLiteral","src":"13370:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13344:3:16"},"nodeType":"YulFunctionCall","src":"13344:28:16"},"variables":[{"name":"toBalanceSlotPacked","nodeType":"YulTypedName","src":"13321:19:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"13447:134:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13476:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"13482:10:16","type":"","value":"0x01336cea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13469:6:16"},"nodeType":"YulFunctionCall","src":"13469:24:16"},"nodeType":"YulExpressionStatement","src":"13469:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13552:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"13558:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13545:6:16"},"nodeType":"YulFunctionCall","src":"13545:18:16"},"nodeType":"YulExpressionStatement","src":"13545:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"toBalanceSlotPacked","nodeType":"YulIdentifier","src":"13403:19:16"},{"name":"_MAX_ACCOUNT_BALANCE","nodeType":"YulIdentifier","src":"13424:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13399:3:16"},"nodeType":"YulFunctionCall","src":"13399:46:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13392:6:16"},"nodeType":"YulFunctionCall","src":"13392:54:16"},"nodeType":"YulIf","src":"13389:192:16"},{"expression":{"arguments":[{"name":"toBalanceSlot","nodeType":"YulIdentifier","src":"13605:13:16"},{"name":"toBalanceSlotPacked","nodeType":"YulIdentifier","src":"13620:19:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13598:6:16"},"nodeType":"YulFunctionCall","src":"13598:42:16"},"nodeType":"YulExpressionStatement","src":"13598:42:16"}]},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"codesize","nodeType":"YulIdentifier","src":"13714:8:16"},"nodeType":"YulFunctionCall","src":"13714:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"13726:4:16","type":"","value":"0x00"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"13732:25:16"},{"name":"from","nodeType":"YulIdentifier","src":"13759:4:16"},{"name":"to","nodeType":"YulIdentifier","src":"13765:2:16"},{"name":"id","nodeType":"YulIdentifier","src":"13769:2:16"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"13709:4:16"},"nodeType":"YulFunctionCall","src":"13709:63:16"},"nodeType":"YulExpressionStatement","src":"13709:63:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"11296:24:16","valueSize":1},{"declaration":2998,"isOffset":false,"isSlot":false,"src":"13424:20:16","valueSize":1},{"declaration":3053,"isOffset":false,"isSlot":false,"src":"13732:25:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"11123:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"11151:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"11636:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"12235:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"12423:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"12928:4:16","valueSize":1},{"declaration":3168,"isOffset":false,"isSlot":false,"src":"13759:4:16","valueSize":1},{"declaration":3172,"isOffset":false,"isSlot":false,"src":"11264:2:16","valueSize":1},{"declaration":3172,"isOffset":false,"isSlot":false,"src":"11370:2:16","valueSize":1},{"declaration":3172,"isOffset":false,"isSlot":false,"src":"11378:2:16","valueSize":1},{"declaration":3172,"isOffset":false,"isSlot":false,"src":"13769:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"11169:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"11195:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"12007:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"12934:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"13238:2:16","valueSize":1},{"declaration":3170,"isOffset":false,"isSlot":false,"src":"13765:2:16","valueSize":1}],"id":3181,"nodeType":"InlineAssembly","src":"11010:2772:16"},{"expression":{"arguments":[{"id":3183,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"13811:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3184,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"13817:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3185,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"13821:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3182,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"13791:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13791:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3187,"nodeType":"ExpressionStatement","src":"13791:33:16"}]},"documentation":{"id":3166,"nodeType":"StructuredDocumentation","src":"10481:344:16","text":"@dev Transfers token `id` from `from` to `to`.\n Requirements:\n - Token `id` must exist.\n - `from` must be the owner of the token.\n - `to` cannot be the zero address.\n - The caller must be the owner of the token, or be approved to manage the token.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3189,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"10839:12:16","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3168,"mutability":"mutable","name":"from","nameLocation":"10860:4:16","nodeType":"VariableDeclaration","scope":3189,"src":"10852:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3167,"name":"address","nodeType":"ElementaryTypeName","src":"10852:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3170,"mutability":"mutable","name":"to","nameLocation":"10874:2:16","nodeType":"VariableDeclaration","scope":3189,"src":"10866:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"10866:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"id","nameLocation":"10886:2:16","nodeType":"VariableDeclaration","scope":3189,"src":"10878:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"10878:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10851:38:16"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"10913:0:16"},"scope":3713,"src":"10830:3001:16","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":3216,"nodeType":"Block","src":"13989:111:16","statements":[{"expression":{"arguments":[{"id":3200,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"14012:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3201,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"14018:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3202,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"14022:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3199,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"13999:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13999:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3204,"nodeType":"ExpressionStatement","src":"13999:26:16"},{"condition":{"arguments":[{"id":3206,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"14048:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3205,"name":"_hasCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"14039:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14039:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3215,"nodeType":"IfStatement","src":"14035:58:16","trueBody":{"expression":{"arguments":[{"id":3209,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"14076:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3210,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"14082:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3211,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"14086:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14090:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3208,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"14053:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14053:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3214,"nodeType":"ExpressionStatement","src":"14053:40:16"}}]},"documentation":{"id":3190,"nodeType":"StructuredDocumentation","src":"13837:60:16","text":"@dev Equivalent to `safeTransferFrom(from, to, id, \"\")`."},"functionSelector":"42842e0e","id":3217,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"13911:16:16","nodeType":"FunctionDefinition","parameters":{"id":3197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3192,"mutability":"mutable","name":"from","nameLocation":"13936:4:16","nodeType":"VariableDeclaration","scope":3217,"src":"13928:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3191,"name":"address","nodeType":"ElementaryTypeName","src":"13928:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3194,"mutability":"mutable","name":"to","nameLocation":"13950:2:16","nodeType":"VariableDeclaration","scope":3217,"src":"13942:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3193,"name":"address","nodeType":"ElementaryTypeName","src":"13942:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3196,"mutability":"mutable","name":"id","nameLocation":"13962:2:16","nodeType":"VariableDeclaration","scope":3217,"src":"13954:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3195,"name":"uint256","nodeType":"ElementaryTypeName","src":"13954:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13927:38:16"},"returnParameters":{"id":3198,"nodeType":"ParameterList","parameters":[],"src":"13989:0:16"},"scope":3713,"src":"13902:198:16","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":3246,"nodeType":"Block","src":"14739:113:16","statements":[{"expression":{"arguments":[{"id":3230,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"14762:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3231,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"14768:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3232,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"14772:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3229,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"14749:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14749:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3234,"nodeType":"ExpressionStatement","src":"14749:26:16"},{"condition":{"arguments":[{"id":3236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"14798:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3235,"name":"_hasCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"14789:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14789:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3245,"nodeType":"IfStatement","src":"14785:60:16","trueBody":{"expression":{"arguments":[{"id":3239,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"14826:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"14832:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3241,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"14836:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3242,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"14840:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3238,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"14803:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14803:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3244,"nodeType":"ExpressionStatement","src":"14803:42:16"}}]},"documentation":{"id":3218,"nodeType":"StructuredDocumentation","src":"14106:492:16","text":"@dev Transfers token `id` from `from` to `to`.\n Requirements:\n - Token `id` must exist.\n - `from` must be the owner of the token.\n - `to` cannot be the zero address.\n - The caller must be the owner of the token, or be approved to manage the token.\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":3247,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"14612:16:16","nodeType":"FunctionDefinition","parameters":{"id":3227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"from","nameLocation":"14637:4:16","nodeType":"VariableDeclaration","scope":3247,"src":"14629:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"14629:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3222,"mutability":"mutable","name":"to","nameLocation":"14651:2:16","nodeType":"VariableDeclaration","scope":3247,"src":"14643:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3221,"name":"address","nodeType":"ElementaryTypeName","src":"14643:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3224,"mutability":"mutable","name":"id","nameLocation":"14663:2:16","nodeType":"VariableDeclaration","scope":3247,"src":"14655:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3223,"name":"uint256","nodeType":"ElementaryTypeName","src":"14655:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3226,"mutability":"mutable","name":"data","nameLocation":"14682:4:16","nodeType":"VariableDeclaration","scope":3247,"src":"14667:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3225,"name":"bytes","nodeType":"ElementaryTypeName","src":"14667:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14628:59:16"},"returnParameters":{"id":3228,"nodeType":"ParameterList","parameters":[],"src":"14739:0:16"},"scope":3713,"src":"14603:249:16","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":3256,"nodeType":"Block","src":"15150:291:16","statements":[{"AST":{"nodeType":"YulBlock","src":"15212:223:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15226:30:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15239:3:16","type":"","value":"224"},{"name":"interfaceId","nodeType":"YulIdentifier","src":"15244:11:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15235:3:16"},"nodeType":"YulFunctionCall","src":"15235:21:16"},"variables":[{"name":"s","nodeType":"YulTypedName","src":"15230:1:16","type":""}]},{"nodeType":"YulAssignment","src":"15352:73:16","value":{"arguments":[{"arguments":[{"arguments":[{"name":"s","nodeType":"YulIdentifier","src":"15371:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"15374:10:16","type":"","value":"0x01ffc9a7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15368:2:16"},"nodeType":"YulFunctionCall","src":"15368:17:16"},{"arguments":[{"name":"s","nodeType":"YulIdentifier","src":"15390:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"15393:10:16","type":"","value":"0x80ac58cd"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15387:2:16"},"nodeType":"YulFunctionCall","src":"15387:17:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15365:2:16"},"nodeType":"YulFunctionCall","src":"15365:40:16"},{"arguments":[{"name":"s","nodeType":"YulIdentifier","src":"15410:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"15413:10:16","type":"","value":"0x5b5e139f"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15407:2:16"},"nodeType":"YulFunctionCall","src":"15407:17:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15362:2:16"},"nodeType":"YulFunctionCall","src":"15362:63:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15352:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3250,"isOffset":false,"isSlot":false,"src":"15244:11:16","valueSize":1},{"declaration":3253,"isOffset":false,"isSlot":false,"src":"15352:6:16","valueSize":1}],"id":3255,"nodeType":"InlineAssembly","src":"15203:232:16"}]},"documentation":{"id":3248,"nodeType":"StructuredDocumentation","src":"14858:198:16","text":"@dev Returns true if this contract implements the interface defined by `interfaceId`.\n See: https://eips.ethereum.org/EIPS/eip-165\n This function call must use less than 30000 gas."},"functionSelector":"01ffc9a7","id":3257,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"15070:17:16","nodeType":"FunctionDefinition","parameters":{"id":3251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3250,"mutability":"mutable","name":"interfaceId","nameLocation":"15095:11:16","nodeType":"VariableDeclaration","scope":3257,"src":"15088:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3249,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15088:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15087:20:16"},"returnParameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"result","nameLocation":"15142:6:16","nodeType":"VariableDeclaration","scope":3257,"src":"15137:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3252,"name":"bool","nodeType":"ElementaryTypeName","src":"15137:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15136:13:16"},"scope":3713,"src":"15061:380:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3266,"nodeType":"Block","src":"15846:253:16","statements":[{"AST":{"nodeType":"YulBlock","src":"15908:185:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15929:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"15935:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15922:6:16"},"nodeType":"YulFunctionCall","src":"15922:16:16"},"nodeType":"YulExpressionStatement","src":"15922:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15958:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"15964:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15951:6:16"},"nodeType":"YulFunctionCall","src":"15951:38:16"},"nodeType":"YulExpressionStatement","src":"15951:38:16"},{"nodeType":"YulAssignment","src":"16002:81:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16030:2:16","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"16044:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"16052:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16066:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"16072:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"16056:9:16"},"nodeType":"YulFunctionCall","src":"16056:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16048:3:16"},"nodeType":"YulFunctionCall","src":"16048:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16040:3:16"},"nodeType":"YulFunctionCall","src":"16040:39:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16034:5:16"},"nodeType":"YulFunctionCall","src":"16034:46:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16026:3:16"},"nodeType":"YulFunctionCall","src":"16026:55:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16019:6:16"},"nodeType":"YulFunctionCall","src":"16019:63:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16012:6:16"},"nodeType":"YulFunctionCall","src":"16012:71:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"16002:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"15964:24:16","valueSize":1},{"declaration":3260,"isOffset":false,"isSlot":false,"src":"15935:2:16","valueSize":1},{"declaration":3260,"isOffset":false,"isSlot":false,"src":"16044:2:16","valueSize":1},{"declaration":3260,"isOffset":false,"isSlot":false,"src":"16052:2:16","valueSize":1},{"declaration":3263,"isOffset":false,"isSlot":false,"src":"16002:6:16","valueSize":1}],"id":3265,"nodeType":"InlineAssembly","src":"15899:194:16"}]},"documentation":{"id":3258,"nodeType":"StructuredDocumentation","src":"15730:38:16","text":"@dev Returns if token `id` exists."},"id":3267,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"15782:7:16","nodeType":"FunctionDefinition","parameters":{"id":3261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3260,"mutability":"mutable","name":"id","nameLocation":"15798:2:16","nodeType":"VariableDeclaration","scope":3267,"src":"15790:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3259,"name":"uint256","nodeType":"ElementaryTypeName","src":"15790:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15789:12:16"},"returnParameters":{"id":3264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3263,"mutability":"mutable","name":"result","nameLocation":"15838:6:16","nodeType":"VariableDeclaration","scope":3267,"src":"15833:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3262,"name":"bool","nodeType":"ElementaryTypeName","src":"15833:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15832:13:16"},"scope":3713,"src":"15773:326:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3286,"nodeType":"Block","src":"16311:300:16","statements":[{"assignments":[3276],"declarations":[{"constant":false,"id":3276,"mutability":"mutable","name":"tokenId","nameLocation":"16329:7:16","nodeType":"VariableDeclaration","scope":3286,"src":"16321:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3275,"name":"address","nodeType":"ElementaryTypeName","src":"16321:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3284,"initialValue":{"arguments":[{"arguments":[{"id":3281,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"16355:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16347:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3279,"name":"uint160","nodeType":"ElementaryTypeName","src":"16347:7:16","typeDescriptions":{}}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16347:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16339:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"16339:7:16","typeDescriptions":{}}},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16339:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16321:38:16"},{"AST":{"nodeType":"YulBlock","src":"16422:183:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16443:4:16","type":"","value":"0x00"},{"name":"tokenId","nodeType":"YulIdentifier","src":"16449:7:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16436:6:16"},"nodeType":"YulFunctionCall","src":"16436:21:16"},"nodeType":"YulExpressionStatement","src":"16436:21:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16477:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"16483:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16470:6:16"},"nodeType":"YulFunctionCall","src":"16470:38:16"},"nodeType":"YulExpressionStatement","src":"16470:38:16"},{"nodeType":"YulAssignment","src":"16521:74:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16535:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16543:2:16","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"16557:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"16565:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16579:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"16585:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"16569:9:16"},"nodeType":"YulFunctionCall","src":"16569:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16561:3:16"},"nodeType":"YulFunctionCall","src":"16561:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16553:3:16"},"nodeType":"YulFunctionCall","src":"16553:39:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16547:5:16"},"nodeType":"YulFunctionCall","src":"16547:46:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16539:3:16"},"nodeType":"YulFunctionCall","src":"16539:55:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16531:3:16"},"nodeType":"YulFunctionCall","src":"16531:64:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"16521:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"16483:24:16","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"16557:2:16","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"16565:2:16","valueSize":1},{"declaration":3273,"isOffset":false,"isSlot":false,"src":"16521:6:16","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"16449:7:16","valueSize":1}],"id":3285,"nodeType":"InlineAssembly","src":"16413:192:16"}]},"documentation":{"id":3268,"nodeType":"StructuredDocumentation","src":"16105:124:16","text":"@dev Returns the owner of token `id`.\n Returns the zero address instead of reverting if the token does not exist."},"id":3287,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"16243:8:16","nodeType":"FunctionDefinition","parameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"id","nameLocation":"16260:2:16","nodeType":"VariableDeclaration","scope":3287,"src":"16252:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"16252:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16251:12:16"},"returnParameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"result","nameLocation":"16303:6:16","nodeType":"VariableDeclaration","scope":3287,"src":"16295:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"16295:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16294:16:16"},"scope":3713,"src":"16234:377:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3296,"nodeType":"Block","src":"17341:222:16","statements":[{"AST":{"nodeType":"YulBlock","src":"17403:154:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17424:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"17430:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17417:6:16"},"nodeType":"YulFunctionCall","src":"17417:38:16"},"nodeType":"YulExpressionStatement","src":"17417:38:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17475:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"17481:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17468:6:16"},"nodeType":"YulFunctionCall","src":"17468:19:16"},"nodeType":"YulExpressionStatement","src":"17468:19:16"},{"nodeType":"YulAssignment","src":"17500:47:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17514:2:16","type":"","value":"32"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17534:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"17540:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17524:9:16"},"nodeType":"YulFunctionCall","src":"17524:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"17518:5:16"},"nodeType":"YulFunctionCall","src":"17518:28:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17510:3:16"},"nodeType":"YulFunctionCall","src":"17510:37:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"17500:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"17430:24:16","valueSize":1},{"declaration":3290,"isOffset":false,"isSlot":false,"src":"17481:5:16","valueSize":1},{"declaration":3293,"isOffset":false,"isSlot":false,"src":"17500:6:16","valueSize":1}],"id":3295,"nodeType":"InlineAssembly","src":"17394:163:16"}]},"documentation":{"id":3288,"nodeType":"StructuredDocumentation","src":"17024:233:16","text":"@dev Returns the auxiliary data for `owner`.\n Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n Auxiliary data can be set for any address, even if it does not have any tokens."},"id":3297,"implemented":true,"kind":"function","modifiers":[],"name":"_getAux","nameLocation":"17271:7:16","nodeType":"FunctionDefinition","parameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"owner","nameLocation":"17287:5:16","nodeType":"VariableDeclaration","scope":3297,"src":"17279:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3289,"name":"address","nodeType":"ElementaryTypeName","src":"17279:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17278:15:16"},"returnParameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3293,"mutability":"mutable","name":"result","nameLocation":"17333:6:16","nodeType":"VariableDeclaration","scope":3297,"src":"17325:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3292,"name":"uint224","nodeType":"ElementaryTypeName","src":"17325:7:16","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"17324:16:16"},"scope":3713,"src":"17262:301:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3306,"nodeType":"Block","src":"17878:343:16","statements":[{"AST":{"nodeType":"YulBlock","src":"17940:275:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17961:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"17967:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17954:6:16"},"nodeType":"YulFunctionCall","src":"17954:38:16"},"nodeType":"YulExpressionStatement","src":"17954:38:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18012:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"18018:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18005:6:16"},"nodeType":"YulFunctionCall","src":"18005:19:16"},"nodeType":"YulExpressionStatement","src":"18005:19:16"},{"nodeType":"YulVariableDeclaration","src":"18037:40:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18066:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"18072:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"18056:9:16"},"nodeType":"YulFunctionCall","src":"18056:21:16"},"variables":[{"name":"balanceSlot","nodeType":"YulTypedName","src":"18041:11:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18090:32:16","value":{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"18110:11:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18104:5:16"},"nodeType":"YulFunctionCall","src":"18104:18:16"},"variables":[{"name":"packed","nodeType":"YulTypedName","src":"18094:6:16","type":""}]},{"expression":{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"18142:11:16"},{"arguments":[{"name":"packed","nodeType":"YulIdentifier","src":"18159:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18171:2:16","type":"","value":"32"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18179:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18190:2:16","type":"","value":"32"},{"name":"packed","nodeType":"YulIdentifier","src":"18194:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18186:3:16"},"nodeType":"YulFunctionCall","src":"18186:15:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"18175:3:16"},"nodeType":"YulFunctionCall","src":"18175:27:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18167:3:16"},"nodeType":"YulFunctionCall","src":"18167:36:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"18155:3:16"},"nodeType":"YulFunctionCall","src":"18155:49:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18135:6:16"},"nodeType":"YulFunctionCall","src":"18135:70:16"},"nodeType":"YulExpressionStatement","src":"18135:70:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"17967:24:16","valueSize":1},{"declaration":3300,"isOffset":false,"isSlot":false,"src":"18018:5:16","valueSize":1},{"declaration":3302,"isOffset":false,"isSlot":false,"src":"18179:5:16","valueSize":1}],"id":3305,"nodeType":"InlineAssembly","src":"17931:284:16"}]},"documentation":{"id":3298,"nodeType":"StructuredDocumentation","src":"17569:240:16","text":"@dev Set the auxiliary data for `owner` to `value`.\n Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n Auxiliary data can be set for any address, even if it does not have any tokens."},"id":3307,"implemented":true,"kind":"function","modifiers":[],"name":"_setAux","nameLocation":"17823:7:16","nodeType":"FunctionDefinition","parameters":{"id":3303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"owner","nameLocation":"17839:5:16","nodeType":"VariableDeclaration","scope":3307,"src":"17831:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3299,"name":"address","nodeType":"ElementaryTypeName","src":"17831:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3302,"mutability":"mutable","name":"value","nameLocation":"17854:5:16","nodeType":"VariableDeclaration","scope":3307,"src":"17846:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3301,"name":"uint224","nodeType":"ElementaryTypeName","src":"17846:7:16","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"17830:30:16"},"returnParameters":{"id":3304,"nodeType":"ParameterList","parameters":[],"src":"17878:0:16"},"scope":3713,"src":"17814:407:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3316,"nodeType":"Block","src":"18498:238:16","statements":[{"AST":{"nodeType":"YulBlock","src":"18560:170:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18581:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"18587:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18574:6:16"},"nodeType":"YulFunctionCall","src":"18574:16:16"},"nodeType":"YulExpressionStatement","src":"18574:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18610:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"18616:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18603:6:16"},"nodeType":"YulFunctionCall","src":"18603:38:16"},"nodeType":"YulExpressionStatement","src":"18603:38:16"},{"nodeType":"YulAssignment","src":"18654:66:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18668:3:16","type":"","value":"160"},{"arguments":[{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"18683:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"18691:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18705:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"18711:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"18695:9:16"},"nodeType":"YulFunctionCall","src":"18695:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18687:3:16"},"nodeType":"YulFunctionCall","src":"18687:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18679:3:16"},"nodeType":"YulFunctionCall","src":"18679:39:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18673:5:16"},"nodeType":"YulFunctionCall","src":"18673:46:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18664:3:16"},"nodeType":"YulFunctionCall","src":"18664:56:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18654:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"18616:24:16","valueSize":1},{"declaration":3310,"isOffset":false,"isSlot":false,"src":"18587:2:16","valueSize":1},{"declaration":3310,"isOffset":false,"isSlot":false,"src":"18683:2:16","valueSize":1},{"declaration":3310,"isOffset":false,"isSlot":false,"src":"18691:2:16","valueSize":1},{"declaration":3313,"isOffset":false,"isSlot":false,"src":"18654:6:16","valueSize":1}],"id":3315,"nodeType":"InlineAssembly","src":"18551:179:16"}]},"documentation":{"id":3308,"nodeType":"StructuredDocumentation","src":"18227:185:16","text":"@dev Returns the extra data for token `id`.\n Minting, transferring, burning a token will not change the extra data.\n The extra data can be set on a non-existent token."},"id":3317,"implemented":true,"kind":"function","modifiers":[],"name":"_getExtraData","nameLocation":"18426:13:16","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"mutability":"mutable","name":"id","nameLocation":"18448:2:16","nodeType":"VariableDeclaration","scope":3317,"src":"18440:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"18440:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18439:12:16"},"returnParameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"result","nameLocation":"18490:6:16","nodeType":"VariableDeclaration","scope":3317,"src":"18483:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3312,"name":"uint96","nodeType":"ElementaryTypeName","src":"18483:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"18482:15:16"},"scope":3713,"src":"18417:319:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3326,"nodeType":"Block","src":"19006:366:16","statements":[{"AST":{"nodeType":"YulBlock","src":"19068:298:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19089:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"19095:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19082:6:16"},"nodeType":"YulFunctionCall","src":"19082:16:16"},"nodeType":"YulExpressionStatement","src":"19082:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19118:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"19124:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19111:6:16"},"nodeType":"YulFunctionCall","src":"19111:38:16"},"nodeType":"YulExpressionStatement","src":"19111:38:16"},{"nodeType":"YulVariableDeclaration","src":"19162:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"19187:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"19195:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19209:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"19215:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19199:9:16"},"nodeType":"YulFunctionCall","src":"19199:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19191:3:16"},"nodeType":"YulFunctionCall","src":"19191:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19183:3:16"},"nodeType":"YulFunctionCall","src":"19183:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"19166:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19235:34:16","value":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"19255:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"19249:5:16"},"nodeType":"YulFunctionCall","src":"19249:20:16"},"variables":[{"name":"packed","nodeType":"YulTypedName","src":"19239:6:16","type":""}]},{"expression":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"19289:13:16"},{"arguments":[{"name":"packed","nodeType":"YulIdentifier","src":"19308:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19320:3:16","type":"","value":"160"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19329:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19340:3:16","type":"","value":"160"},{"name":"packed","nodeType":"YulIdentifier","src":"19345:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19336:3:16"},"nodeType":"YulFunctionCall","src":"19336:16:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"19325:3:16"},"nodeType":"YulFunctionCall","src":"19325:28:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19316:3:16"},"nodeType":"YulFunctionCall","src":"19316:38:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"19304:3:16"},"nodeType":"YulFunctionCall","src":"19304:51:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19282:6:16"},"nodeType":"YulFunctionCall","src":"19282:74:16"},"nodeType":"YulExpressionStatement","src":"19282:74:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"19124:24:16","valueSize":1},{"declaration":3320,"isOffset":false,"isSlot":false,"src":"19095:2:16","valueSize":1},{"declaration":3320,"isOffset":false,"isSlot":false,"src":"19187:2:16","valueSize":1},{"declaration":3320,"isOffset":false,"isSlot":false,"src":"19195:2:16","valueSize":1},{"declaration":3322,"isOffset":false,"isSlot":false,"src":"19329:5:16","valueSize":1}],"id":3325,"nodeType":"InlineAssembly","src":"19059:307:16"}]},"documentation":{"id":3318,"nodeType":"StructuredDocumentation","src":"18742:193:16","text":"@dev Sets the extra data for token `id` to `value`.\n Minting, transferring, burning a token will not change the extra data.\n The extra data can be set on a non-existent token."},"id":3327,"implemented":true,"kind":"function","modifiers":[],"name":"_setExtraData","nameLocation":"18949:13:16","nodeType":"FunctionDefinition","parameters":{"id":3323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3320,"mutability":"mutable","name":"id","nameLocation":"18971:2:16","nodeType":"VariableDeclaration","scope":3327,"src":"18963:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3319,"name":"uint256","nodeType":"ElementaryTypeName","src":"18963:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3322,"mutability":"mutable","name":"value","nameLocation":"18982:5:16","nodeType":"VariableDeclaration","scope":3327,"src":"18975:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3321,"name":"uint96","nodeType":"ElementaryTypeName","src":"18975:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"18962:26:16"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[],"src":"19006:0:16"},"scope":3713,"src":"18940:432:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3354,"nodeType":"Block","src":"19916:1626:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19955:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19947:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3336,"name":"address","nodeType":"ElementaryTypeName","src":"19947:7:16","typeDescriptions":{}}},"id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19947:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3340,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"19959:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3341,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"19963:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3335,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"19926:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19926:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3343,"nodeType":"ExpressionStatement","src":"19926:40:16"},{"AST":{"nodeType":"YulBlock","src":"20028:1459:16","statements":[{"nodeType":"YulAssignment","src":"20082:26:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20092:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20100:2:16","type":"","value":"96"},{"name":"to","nodeType":"YulIdentifier","src":"20104:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20096:3:16"},"nodeType":"YulFunctionCall","src":"20096:11:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"20088:3:16"},"nodeType":"YulFunctionCall","src":"20088:20:16"},"variableNames":[{"name":"to","nodeType":"YulIdentifier","src":"20082:2:16"}]},{"body":{"nodeType":"YulBlock","src":"20186:121:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20211:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"20217:10:16","type":"","value":"0xea553b34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20204:6:16"},"nodeType":"YulFunctionCall","src":"20204:24:16"},"nodeType":"YulExpressionStatement","src":"20204:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20282:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"20288:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20275:6:16"},"nodeType":"YulFunctionCall","src":"20275:18:16"},"nodeType":"YulExpressionStatement","src":"20275:18:16"}]},"condition":{"arguments":[{"name":"to","nodeType":"YulIdentifier","src":"20182:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20175:6:16"},"nodeType":"YulFunctionCall","src":"20175:10:16"},"nodeType":"YulIf","src":"20172:135:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20367:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"20373:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20360:6:16"},"nodeType":"YulFunctionCall","src":"20360:16:16"},"nodeType":"YulExpressionStatement","src":"20360:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20396:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"20402:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20389:6:16"},"nodeType":"YulFunctionCall","src":"20389:38:16"},"nodeType":"YulExpressionStatement","src":"20389:38:16"},{"nodeType":"YulVariableDeclaration","src":"20440:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"20465:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"20473:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20487:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"20493:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"20477:9:16"},"nodeType":"YulFunctionCall","src":"20477:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20469:3:16"},"nodeType":"YulFunctionCall","src":"20469:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20461:3:16"},"nodeType":"YulFunctionCall","src":"20461:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"20444:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20513:43:16","value":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"20542:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"20536:5:16"},"nodeType":"YulFunctionCall","src":"20536:20:16"},"variables":[{"name":"ownershipPacked","nodeType":"YulTypedName","src":"20517:15:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"20648:118:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20673:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"20679:10:16","type":"","value":"0xc991cbb1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20666:6:16"},"nodeType":"YulFunctionCall","src":"20666:24:16"},"nodeType":"YulExpressionStatement","src":"20666:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20741:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"20747:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20734:6:16"},"nodeType":"YulFunctionCall","src":"20734:18:16"},"nodeType":"YulExpressionStatement","src":"20734:18:16"}]},"condition":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20627:2:16","type":"","value":"96"},{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"20631:15:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20623:3:16"},"nodeType":"YulFunctionCall","src":"20623:24:16"},"nodeType":"YulIf","src":"20620:146:16"},{"expression":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"20824:13:16"},{"arguments":[{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"20842:15:16"},{"name":"to","nodeType":"YulIdentifier","src":"20859:2:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"20839:2:16"},"nodeType":"YulFunctionCall","src":"20839:23:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20817:6:16"},"nodeType":"YulFunctionCall","src":"20817:46:16"},"nodeType":"YulExpressionStatement","src":"20817:46:16"},{"nodeType":"YulBlock","src":"20927:435:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20952:4:16","type":"","value":"0x00"},{"name":"to","nodeType":"YulIdentifier","src":"20958:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20945:6:16"},"nodeType":"YulFunctionCall","src":"20945:16:16"},"nodeType":"YulExpressionStatement","src":"20945:16:16"},{"nodeType":"YulVariableDeclaration","src":"20978:40:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21007:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"21013:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"20997:9:16"},"nodeType":"YulFunctionCall","src":"20997:21:16"},"variables":[{"name":"balanceSlot","nodeType":"YulTypedName","src":"20982:11:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21035:51:16","value":{"arguments":[{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"21070:11:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"21064:5:16"},"nodeType":"YulFunctionCall","src":"21064:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"21084:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21060:3:16"},"nodeType":"YulFunctionCall","src":"21060:26:16"},"variables":[{"name":"balanceSlotPacked","nodeType":"YulTypedName","src":"21039:17:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"21159:134:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21188:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"21194:10:16","type":"","value":"0x01336cea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21181:6:16"},"nodeType":"YulFunctionCall","src":"21181:24:16"},"nodeType":"YulExpressionStatement","src":"21181:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21264:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"21270:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21257:6:16"},"nodeType":"YulFunctionCall","src":"21257:18:16"},"nodeType":"YulExpressionStatement","src":"21257:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"balanceSlotPacked","nodeType":"YulIdentifier","src":"21117:17:16"},{"name":"_MAX_ACCOUNT_BALANCE","nodeType":"YulIdentifier","src":"21136:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21113:3:16"},"nodeType":"YulFunctionCall","src":"21113:44:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21106:6:16"},"nodeType":"YulFunctionCall","src":"21106:52:16"},"nodeType":"YulIf","src":"21103:190:16"},{"expression":{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"21317:11:16"},{"name":"balanceSlotPacked","nodeType":"YulIdentifier","src":"21330:17:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"21310:6:16"},"nodeType":"YulFunctionCall","src":"21310:38:16"},"nodeType":"YulExpressionStatement","src":"21310:38:16"}]},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"codesize","nodeType":"YulIdentifier","src":"21422:8:16"},"nodeType":"YulFunctionCall","src":"21422:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"21434:4:16","type":"","value":"0x00"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"21440:25:16"},{"kind":"number","nodeType":"YulLiteral","src":"21467:1:16","type":"","value":"0"},{"name":"to","nodeType":"YulIdentifier","src":"21470:2:16"},{"name":"id","nodeType":"YulIdentifier","src":"21474:2:16"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"21417:4:16"},"nodeType":"YulFunctionCall","src":"21417:60:16"},"nodeType":"YulExpressionStatement","src":"21417:60:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"20402:24:16","valueSize":1},{"declaration":2998,"isOffset":false,"isSlot":false,"src":"21136:20:16","valueSize":1},{"declaration":3053,"isOffset":false,"isSlot":false,"src":"21440:25:16","valueSize":1},{"declaration":3332,"isOffset":false,"isSlot":false,"src":"20373:2:16","valueSize":1},{"declaration":3332,"isOffset":false,"isSlot":false,"src":"20465:2:16","valueSize":1},{"declaration":3332,"isOffset":false,"isSlot":false,"src":"20473:2:16","valueSize":1},{"declaration":3332,"isOffset":false,"isSlot":false,"src":"21474:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"20082:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"20104:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"20182:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"20859:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"20958:2:16","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"21470:2:16","valueSize":1}],"id":3344,"nodeType":"InlineAssembly","src":"20019:1468:16"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21524:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21516:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3346,"name":"address","nodeType":"ElementaryTypeName","src":"21516:7:16","typeDescriptions":{}}},"id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21516:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3350,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"21528:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3351,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"21532:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3345,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"21496:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21496:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3353,"nodeType":"ExpressionStatement","src":"21496:39:16"}]},"documentation":{"id":3328,"nodeType":"StructuredDocumentation","src":"19661:194:16","text":"@dev Mints token `id` to `to`.\n Requirements:\n - Token `id` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"19869:5:16","nodeType":"FunctionDefinition","parameters":{"id":3333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3330,"mutability":"mutable","name":"to","nameLocation":"19883:2:16","nodeType":"VariableDeclaration","scope":3355,"src":"19875:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3329,"name":"address","nodeType":"ElementaryTypeName","src":"19875:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3332,"mutability":"mutable","name":"id","nameLocation":"19895:2:16","nodeType":"VariableDeclaration","scope":3355,"src":"19887:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"19887:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19874:24:16"},"returnParameters":{"id":3334,"nodeType":"ParameterList","parameters":[],"src":"19916:0:16"},"scope":3713,"src":"19860:1682:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3369,"nodeType":"Block","src":"21660:38:16","statements":[{"expression":{"arguments":[{"id":3364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"21680:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3365,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"21684:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21688:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3363,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[3370,3400],"referencedDeclaration":3400,"src":"21670:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21670:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3368,"nodeType":"ExpressionStatement","src":"21670:21:16"}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"21548:47:16","text":"@dev Equivalent to `_safeMint(to, id, \"\")`."},"id":3370,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"21609:9:16","nodeType":"FunctionDefinition","parameters":{"id":3361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"to","nameLocation":"21627:2:16","nodeType":"VariableDeclaration","scope":3370,"src":"21619:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3357,"name":"address","nodeType":"ElementaryTypeName","src":"21619:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"id","nameLocation":"21639:2:16","nodeType":"VariableDeclaration","scope":3370,"src":"21631:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3359,"name":"uint256","nodeType":"ElementaryTypeName","src":"21631:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21618:24:16"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[],"src":"21660:0:16"},"scope":3713,"src":"21600:98:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3399,"nodeType":"Block","src":"22130:106:16","statements":[{"expression":{"arguments":[{"id":3381,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"22146:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3382,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"22150:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3380,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"22140:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22140:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3384,"nodeType":"ExpressionStatement","src":"22140:13:16"},{"condition":{"arguments":[{"id":3386,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"22176:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3385,"name":"_hasCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"22167:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22167:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3398,"nodeType":"IfStatement","src":"22163:66:16","trueBody":{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22212:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22204:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3389,"name":"address","nodeType":"ElementaryTypeName","src":"22204:7:16","typeDescriptions":{}}},"id":3392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22204:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3393,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"22216:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3394,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"22220:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3395,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"22224:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3388,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"22181:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22181:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3397,"nodeType":"ExpressionStatement","src":"22181:48:16"}}]},"documentation":{"id":3371,"nodeType":"StructuredDocumentation","src":"21704:342:16","text":"@dev Mints token `id` to `to`.\n Requirements:\n - Token `id` must not exist.\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3400,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"22060:9:16","nodeType":"FunctionDefinition","parameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"to","nameLocation":"22078:2:16","nodeType":"VariableDeclaration","scope":3400,"src":"22070:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3372,"name":"address","nodeType":"ElementaryTypeName","src":"22070:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3375,"mutability":"mutable","name":"id","nameLocation":"22090:2:16","nodeType":"VariableDeclaration","scope":3400,"src":"22082:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"22082:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"data","nameLocation":"22107:4:16","nodeType":"VariableDeclaration","scope":3400,"src":"22094:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3376,"name":"bytes","nodeType":"ElementaryTypeName","src":"22094:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22069:43:16"},"returnParameters":{"id":3379,"nodeType":"ParameterList","parameters":[],"src":"22130:0:16"},"scope":3713,"src":"22051:185:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3414,"nodeType":"Block","src":"22621:38:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22645:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22637:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3407,"name":"address","nodeType":"ElementaryTypeName","src":"22637:7:16","typeDescriptions":{}}},"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22637:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3411,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"22649:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3406,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[3415,3449],"referencedDeclaration":3449,"src":"22631:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22631:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3413,"nodeType":"ExpressionStatement","src":"22631:21:16"}]},"documentation":{"id":3401,"nodeType":"StructuredDocumentation","src":"22525:47:16","text":"@dev Equivalent to `_burn(address(0), id)`."},"id":3415,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"22586:5:16","nodeType":"FunctionDefinition","parameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"id","nameLocation":"22600:2:16","nodeType":"VariableDeclaration","scope":3415,"src":"22592:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"22592:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22591:12:16"},"returnParameters":{"id":3405,"nodeType":"ParameterList","parameters":[],"src":"22621:0:16"},"scope":3713,"src":"22577:82:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3448,"nodeType":"Block","src":"23004:2071:16","statements":[{"assignments":[3424],"declarations":[{"constant":false,"id":3424,"mutability":"mutable","name":"owner","nameLocation":"23022:5:16","nodeType":"VariableDeclaration","scope":3448,"src":"23014:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"23014:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3428,"initialValue":{"arguments":[{"id":3426,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"23038:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3425,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"23030:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23030:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"23014:27:16"},{"expression":{"arguments":[{"id":3430,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"23072:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23087:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23079:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3431,"name":"address","nodeType":"ElementaryTypeName","src":"23079:7:16","typeDescriptions":{}}},"id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23079:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3435,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"23091:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3429,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"23051:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23051:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3437,"nodeType":"ExpressionStatement","src":"23051:43:16"},{"AST":{"nodeType":"YulBlock","src":"23156:1861:16","statements":[{"nodeType":"YulAssignment","src":"23210:26:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23220:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23228:2:16","type":"","value":"96"},{"name":"by","nodeType":"YulIdentifier","src":"23232:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23224:3:16"},"nodeType":"YulFunctionCall","src":"23224:11:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23216:3:16"},"nodeType":"YulFunctionCall","src":"23216:20:16"},"variableNames":[{"name":"by","nodeType":"YulIdentifier","src":"23210:2:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23296:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"23302:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23289:6:16"},"nodeType":"YulFunctionCall","src":"23289:16:16"},"nodeType":"YulExpressionStatement","src":"23289:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23325:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"23334:24:16"},{"name":"by","nodeType":"YulIdentifier","src":"23360:2:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"23331:2:16"},"nodeType":"YulFunctionCall","src":"23331:32:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23318:6:16"},"nodeType":"YulFunctionCall","src":"23318:46:16"},"nodeType":"YulExpressionStatement","src":"23318:46:16"},{"nodeType":"YulVariableDeclaration","src":"23377:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"23402:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"23410:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23424:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"23430:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"23414:9:16"},"nodeType":"YulFunctionCall","src":"23414:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23406:3:16"},"nodeType":"YulFunctionCall","src":"23406:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23398:3:16"},"nodeType":"YulFunctionCall","src":"23398:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"23381:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23450:43:16","value":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"23479:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"23473:5:16"},"nodeType":"YulFunctionCall","src":"23473:20:16"},"variables":[{"name":"ownershipPacked","nodeType":"YulTypedName","src":"23454:15:16","type":""}]},{"nodeType":"YulAssignment","src":"23587:42:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23600:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23608:2:16","type":"","value":"96"},{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"23612:15:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23604:3:16"},"nodeType":"YulFunctionCall","src":"23604:24:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23596:3:16"},"nodeType":"YulFunctionCall","src":"23596:33:16"},"variableNames":[{"name":"owner","nodeType":"YulIdentifier","src":"23587:5:16"}]},{"body":{"nodeType":"YulBlock","src":"23710:117:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23735:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"23741:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23728:6:16"},"nodeType":"YulFunctionCall","src":"23728:24:16"},"nodeType":"YulExpressionStatement","src":"23728:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23802:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"23808:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23795:6:16"},"nodeType":"YulFunctionCall","src":"23795:18:16"},"nodeType":"YulExpressionStatement","src":"23795:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"23703:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23696:6:16"},"nodeType":"YulFunctionCall","src":"23696:13:16"},"nodeType":"YulIf","src":"23693:134:16"},{"nodeType":"YulBlock","src":"23890:706:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23915:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"23921:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23908:6:16"},"nodeType":"YulFunctionCall","src":"23908:19:16"},"nodeType":"YulExpressionStatement","src":"23908:19:16"},{"nodeType":"YulVariableDeclaration","src":"23944:51:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23977:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"23980:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23973:3:16"},"nodeType":"YulFunctionCall","src":"23973:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"23967:5:16"},"nodeType":"YulFunctionCall","src":"23967:28:16"},"variables":[{"name":"approvedAddress","nodeType":"YulTypedName","src":"23948:15:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"24232:223:16","statements":[{"body":{"nodeType":"YulBlock","src":"24294:143:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24327:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"24333:10:16","type":"","value":"0x4b6e7f18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24320:6:16"},"nodeType":"YulFunctionCall","src":"24320:24:16"},"nodeType":"YulExpressionStatement","src":"24320:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24404:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"24410:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24397:6:16"},"nodeType":"YulFunctionCall","src":"24397:18:16"},"nodeType":"YulExpressionStatement","src":"24397:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24280:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"24286:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"24270:9:16"},"nodeType":"YulFunctionCall","src":"24270:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"24264:5:16"},"nodeType":"YulFunctionCall","src":"24264:28:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24257:6:16"},"nodeType":"YulFunctionCall","src":"24257:36:16"},"nodeType":"YulIf","src":"24254:183:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"24182:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24175:6:16"},"nodeType":"YulFunctionCall","src":"24175:10:16"},{"arguments":[{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"24193:2:16"},{"name":"owner","nodeType":"YulIdentifier","src":"24197:5:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24190:2:16"},"nodeType":"YulFunctionCall","src":"24190:13:16"},{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"24208:2:16"},{"name":"approvedAddress","nodeType":"YulIdentifier","src":"24212:15:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24205:2:16"},"nodeType":"YulFunctionCall","src":"24205:23:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24187:2:16"},"nodeType":"YulFunctionCall","src":"24187:42:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24172:2:16"},"nodeType":"YulFunctionCall","src":"24172:58:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24165:6:16"},"nodeType":"YulFunctionCall","src":"24165:66:16"},"nodeType":"YulIf","src":"24162:293:16"},{"body":{"nodeType":"YulBlock","src":"24546:36:16","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24559:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"24562:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24555:3:16"},"nodeType":"YulFunctionCall","src":"24555:21:16"},{"kind":"number","nodeType":"YulLiteral","src":"24578:1:16","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24548:6:16"},"nodeType":"YulFunctionCall","src":"24548:32:16"},"nodeType":"YulExpressionStatement","src":"24548:32:16"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"24530:15:16"},"nodeType":"YulIf","src":"24527:55:16"}]},{"expression":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"24648:13:16"},{"arguments":[{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"24667:15:16"},{"name":"owner","nodeType":"YulIdentifier","src":"24684:5:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"24663:3:16"},"nodeType":"YulFunctionCall","src":"24663:27:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24641:6:16"},"nodeType":"YulFunctionCall","src":"24641:50:16"},"nodeType":"YulExpressionStatement","src":"24641:50:16"},{"nodeType":"YulBlock","src":"24753:136:16","statements":[{"nodeType":"YulVariableDeclaration","src":"24771:40:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24800:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"24806:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"24790:9:16"},"nodeType":"YulFunctionCall","src":"24790:21:16"},"variables":[{"name":"balanceSlot","nodeType":"YulTypedName","src":"24775:11:16","type":""}]},{"expression":{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"24835:11:16"},{"arguments":[{"arguments":[{"name":"balanceSlot","nodeType":"YulIdentifier","src":"24858:11:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"24852:5:16"},"nodeType":"YulFunctionCall","src":"24852:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"24872:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24848:3:16"},"nodeType":"YulFunctionCall","src":"24848:26:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24828:6:16"},"nodeType":"YulFunctionCall","src":"24828:47:16"},"nodeType":"YulExpressionStatement","src":"24828:47:16"}]},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"codesize","nodeType":"YulIdentifier","src":"24949:8:16"},"nodeType":"YulFunctionCall","src":"24949:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"24961:4:16","type":"","value":"0x00"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"24967:25:16"},{"name":"owner","nodeType":"YulIdentifier","src":"24994:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"25001:1:16","type":"","value":"0"},{"name":"id","nodeType":"YulIdentifier","src":"25004:2:16"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"24944:4:16"},"nodeType":"YulFunctionCall","src":"24944:63:16"},"nodeType":"YulExpressionStatement","src":"24944:63:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"23334:24:16","valueSize":1},{"declaration":3053,"isOffset":false,"isSlot":false,"src":"24967:25:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"23210:2:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"23232:2:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"23360:2:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"24182:2:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"24193:2:16","valueSize":1},{"declaration":3418,"isOffset":false,"isSlot":false,"src":"24208:2:16","valueSize":1},{"declaration":3420,"isOffset":false,"isSlot":false,"src":"23302:2:16","valueSize":1},{"declaration":3420,"isOffset":false,"isSlot":false,"src":"23402:2:16","valueSize":1},{"declaration":3420,"isOffset":false,"isSlot":false,"src":"23410:2:16","valueSize":1},{"declaration":3420,"isOffset":false,"isSlot":false,"src":"25004:2:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"23587:5:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"23703:5:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"23921:5:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"24197:5:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"24684:5:16","valueSize":1},{"declaration":3424,"isOffset":false,"isSlot":false,"src":"24994:5:16","valueSize":1}],"id":3438,"nodeType":"InlineAssembly","src":"23147:1870:16"},{"expression":{"arguments":[{"id":3440,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"25046:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25061:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25053:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3441,"name":"address","nodeType":"ElementaryTypeName","src":"25053:7:16","typeDescriptions":{}}},"id":3444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25053:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3445,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"25065:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3439,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"25026:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25026:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3447,"nodeType":"ExpressionStatement","src":"25026:42:16"}]},"documentation":{"id":3416,"nodeType":"StructuredDocumentation","src":"22665:278:16","text":"@dev Destroys token `id`, using `by`.\n Requirements:\n - Token `id` must exist.\n - If `by` is not the zero address,\n   it must be the owner of the token, or be approved to manage the token.\n Emits a {Transfer} event."},"id":3449,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"22957:5:16","nodeType":"FunctionDefinition","parameters":{"id":3421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3418,"mutability":"mutable","name":"by","nameLocation":"22971:2:16","nodeType":"VariableDeclaration","scope":3449,"src":"22963:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3417,"name":"address","nodeType":"ElementaryTypeName","src":"22963:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3420,"mutability":"mutable","name":"id","nameLocation":"22983:2:16","nodeType":"VariableDeclaration","scope":3449,"src":"22975:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3419,"name":"uint256","nodeType":"ElementaryTypeName","src":"22975:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22962:24:16"},"returnParameters":{"id":3422,"nodeType":"ParameterList","parameters":[],"src":"23004:0:16"},"scope":3713,"src":"22948:2127:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3460,"nodeType":"Block","src":"25660:1023:16","statements":[{"AST":{"nodeType":"YulBlock","src":"25722:955:16","statements":[{"nodeType":"YulAssignment","src":"25736:11:16","value":{"kind":"number","nodeType":"YulLiteral","src":"25746:1:16","type":"","value":"1"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"25736:6:16"}]},{"nodeType":"YulAssignment","src":"25800:36:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25815:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25823:2:16","type":"","value":"96"},{"name":"account","nodeType":"YulIdentifier","src":"25827:7:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25819:3:16"},"nodeType":"YulFunctionCall","src":"25819:16:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25811:3:16"},"nodeType":"YulFunctionCall","src":"25811:25:16"},"variableNames":[{"name":"account","nodeType":"YulIdentifier","src":"25800:7:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25896:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"25902:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25889:6:16"},"nodeType":"YulFunctionCall","src":"25889:16:16"},"nodeType":"YulExpressionStatement","src":"25889:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25925:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"25934:24:16"},{"name":"account","nodeType":"YulIdentifier","src":"25960:7:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25931:2:16"},"nodeType":"YulFunctionCall","src":"25931:37:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25918:6:16"},"nodeType":"YulFunctionCall","src":"25918:51:16"},"nodeType":"YulExpressionStatement","src":"25918:51:16"},{"nodeType":"YulVariableDeclaration","src":"25982:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"26007:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"26015:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26029:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"26035:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"26019:9:16"},"nodeType":"YulFunctionCall","src":"26019:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26011:3:16"},"nodeType":"YulFunctionCall","src":"26011:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26003:3:16"},"nodeType":"YulFunctionCall","src":"26003:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"25986:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26055:51:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26072:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26080:2:16","type":"","value":"96"},{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"26090:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26084:5:16"},"nodeType":"YulFunctionCall","src":"26084:20:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26076:3:16"},"nodeType":"YulFunctionCall","src":"26076:29:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"26068:3:16"},"nodeType":"YulFunctionCall","src":"26068:38:16"},"variables":[{"name":"owner","nodeType":"YulTypedName","src":"26059:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"26187:117:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26212:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"26218:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26205:6:16"},"nodeType":"YulFunctionCall","src":"26205:24:16"},"nodeType":"YulExpressionStatement","src":"26205:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26279:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"26285:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26272:6:16"},"nodeType":"YulFunctionCall","src":"26272:18:16"},"nodeType":"YulExpressionStatement","src":"26272:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"26180:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26173:6:16"},"nodeType":"YulFunctionCall","src":"26173:13:16"},"nodeType":"YulIf","src":"26170:134:16"},{"body":{"nodeType":"YulBlock","src":"26397:270:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26422:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"26428:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26415:6:16"},"nodeType":"YulFunctionCall","src":"26415:19:16"},"nodeType":"YulExpressionStatement","src":"26415:19:16"},{"body":{"nodeType":"YulBlock","src":"26562:91:16","statements":[{"nodeType":"YulAssignment","src":"26584:51:16","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"26597:7:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26616:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"26619:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26612:3:16"},"nodeType":"YulFunctionCall","src":"26612:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26606:5:16"},"nodeType":"YulFunctionCall","src":"26606:28:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26594:2:16"},"nodeType":"YulFunctionCall","src":"26594:41:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"26584:6:16"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26548:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"26554:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"26538:9:16"},"nodeType":"YulFunctionCall","src":"26538:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26532:5:16"},"nodeType":"YulFunctionCall","src":"26532:28:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26525:6:16"},"nodeType":"YulFunctionCall","src":"26525:36:16"},"nodeType":"YulIf","src":"26522:131:16"}]},"condition":{"arguments":[{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"26380:7:16"},{"name":"owner","nodeType":"YulIdentifier","src":"26389:5:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26377:2:16"},"nodeType":"YulFunctionCall","src":"26377:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26370:6:16"},"nodeType":"YulFunctionCall","src":"26370:26:16"},"nodeType":"YulIf","src":"26367:300:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"25934:24:16","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"25800:7:16","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"25827:7:16","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"25960:7:16","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"26380:7:16","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"26597:7:16","valueSize":1},{"declaration":3454,"isOffset":false,"isSlot":false,"src":"25902:2:16","valueSize":1},{"declaration":3454,"isOffset":false,"isSlot":false,"src":"26007:2:16","valueSize":1},{"declaration":3454,"isOffset":false,"isSlot":false,"src":"26015:2:16","valueSize":1},{"declaration":3457,"isOffset":false,"isSlot":false,"src":"25736:6:16","valueSize":1},{"declaration":3457,"isOffset":false,"isSlot":false,"src":"26584:6:16","valueSize":1}],"id":3459,"nodeType":"InlineAssembly","src":"25713:964:16"}]},"documentation":{"id":3450,"nodeType":"StructuredDocumentation","src":"25364:154:16","text":"@dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\n Requirements:\n - Token `id` must exist."},"id":3461,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"25532:18:16","nodeType":"FunctionDefinition","parameters":{"id":3455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"account","nameLocation":"25559:7:16","nodeType":"VariableDeclaration","scope":3461,"src":"25551:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3451,"name":"address","nodeType":"ElementaryTypeName","src":"25551:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"id","nameLocation":"25576:2:16","nodeType":"VariableDeclaration","scope":3461,"src":"25568:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3453,"name":"uint256","nodeType":"ElementaryTypeName","src":"25568:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25550:29:16"},"returnParameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3457,"mutability":"mutable","name":"result","nameLocation":"25648:6:16","nodeType":"VariableDeclaration","scope":3461,"src":"25643:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3456,"name":"bool","nodeType":"ElementaryTypeName","src":"25643:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"25642:13:16"},"scope":3713,"src":"25523:1160:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3470,"nodeType":"Block","src":"26917:236:16","statements":[{"AST":{"nodeType":"YulBlock","src":"26979:168:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27000:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"27006:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26993:6:16"},"nodeType":"YulFunctionCall","src":"26993:16:16"},"nodeType":"YulExpressionStatement","src":"26993:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27029:4:16","type":"","value":"0x1c"},{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"27035:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27022:6:16"},"nodeType":"YulFunctionCall","src":"27022:38:16"},"nodeType":"YulExpressionStatement","src":"27022:38:16"},{"nodeType":"YulAssignment","src":"27073:64:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27093:1:16","type":"","value":"1"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"27100:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"27108:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27122:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"27128:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"27112:9:16"},"nodeType":"YulFunctionCall","src":"27112:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27104:3:16"},"nodeType":"YulFunctionCall","src":"27104:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27096:3:16"},"nodeType":"YulFunctionCall","src":"27096:39:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27089:3:16"},"nodeType":"YulFunctionCall","src":"27089:47:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"27083:5:16"},"nodeType":"YulFunctionCall","src":"27083:54:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"27073:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"27035:24:16","valueSize":1},{"declaration":3464,"isOffset":false,"isSlot":false,"src":"27006:2:16","valueSize":1},{"declaration":3464,"isOffset":false,"isSlot":false,"src":"27100:2:16","valueSize":1},{"declaration":3464,"isOffset":false,"isSlot":false,"src":"27108:2:16","valueSize":1},{"declaration":3467,"isOffset":false,"isSlot":false,"src":"27073:6:16","valueSize":1}],"id":3469,"nodeType":"InlineAssembly","src":"26970:177:16"}]},"documentation":{"id":3462,"nodeType":"StructuredDocumentation","src":"26689:142:16","text":"@dev Returns the account approved to manage token `id`.\n Returns the zero address instead of reverting if the token does not exist."},"id":3471,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"26845:12:16","nodeType":"FunctionDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3464,"mutability":"mutable","name":"id","nameLocation":"26866:2:16","nodeType":"VariableDeclaration","scope":3471,"src":"26858:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"26858:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26857:12:16"},"returnParameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"result","nameLocation":"26909:6:16","nodeType":"VariableDeclaration","scope":3471,"src":"26901:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3466,"name":"address","nodeType":"ElementaryTypeName","src":"26901:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26900:16:16"},"scope":3713,"src":"26836:317:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3488,"nodeType":"Block","src":"27287:50:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27314:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27306:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3480,"name":"address","nodeType":"ElementaryTypeName","src":"27306:7:16","typeDescriptions":{}}},"id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27306:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3484,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"27318:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3485,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"27327:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3479,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3489,3501],"referencedDeclaration":3501,"src":"27297:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27297:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3487,"nodeType":"ExpressionStatement","src":"27297:33:16"}]},"documentation":{"id":3472,"nodeType":"StructuredDocumentation","src":"27159:59:16","text":"@dev Equivalent to `_approve(address(0), account, id)`."},"id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"27232:8:16","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3474,"mutability":"mutable","name":"account","nameLocation":"27249:7:16","nodeType":"VariableDeclaration","scope":3489,"src":"27241:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3473,"name":"address","nodeType":"ElementaryTypeName","src":"27241:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"id","nameLocation":"27266:2:16","nodeType":"VariableDeclaration","scope":3489,"src":"27258:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"27258:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27240:29:16"},"returnParameters":{"id":3478,"nodeType":"ParameterList","parameters":[],"src":"27287:0:16"},"scope":3713,"src":"27223:114:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3500,"nodeType":"Block","src":"27731:1366:16","statements":[{"AST":{"nodeType":"YulBlock","src":"27750:1341:16","statements":[{"nodeType":"YulVariableDeclaration","src":"27804:37:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27830:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27838:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27834:3:16"},"nodeType":"YulFunctionCall","src":"27834:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"27826:3:16"},"nodeType":"YulFunctionCall","src":"27826:15:16"},"variables":[{"name":"bitmaskAddress","nodeType":"YulTypedName","src":"27808:14:16","type":""}]},{"nodeType":"YulAssignment","src":"27854:39:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"27869:14:16"},{"name":"account","nodeType":"YulIdentifier","src":"27885:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27865:3:16"},"nodeType":"YulFunctionCall","src":"27865:28:16"},"variableNames":[{"name":"account","nodeType":"YulIdentifier","src":"27854:7:16"}]},{"nodeType":"YulAssignment","src":"27906:29:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"27916:14:16"},{"name":"by","nodeType":"YulIdentifier","src":"27932:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27912:3:16"},"nodeType":"YulFunctionCall","src":"27912:23:16"},"variableNames":[{"name":"by","nodeType":"YulIdentifier","src":"27906:2:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27999:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"28005:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27992:6:16"},"nodeType":"YulFunctionCall","src":"27992:16:16"},"nodeType":"YulExpressionStatement","src":"27992:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28028:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"28037:24:16"},{"name":"by","nodeType":"YulIdentifier","src":"28063:2:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"28034:2:16"},"nodeType":"YulFunctionCall","src":"28034:32:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28021:6:16"},"nodeType":"YulFunctionCall","src":"28021:46:16"},"nodeType":"YulExpressionStatement","src":"28021:46:16"},{"nodeType":"YulVariableDeclaration","src":"28080:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"28105:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"28113:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28127:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"28133:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"28117:9:16"},"nodeType":"YulFunctionCall","src":"28117:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28109:3:16"},"nodeType":"YulFunctionCall","src":"28109:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28101:3:16"},"nodeType":"YulFunctionCall","src":"28101:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"28084:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28153:54:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"28170:14:16"},{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"28192:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"28186:5:16"},"nodeType":"YulFunctionCall","src":"28186:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28166:3:16"},"nodeType":"YulFunctionCall","src":"28166:41:16"},"variables":[{"name":"owner","nodeType":"YulTypedName","src":"28157:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"28288:117:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28313:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"28319:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28306:6:16"},"nodeType":"YulFunctionCall","src":"28306:24:16"},"nodeType":"YulExpressionStatement","src":"28306:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28380:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"28386:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28373:6:16"},"nodeType":"YulFunctionCall","src":"28373:18:16"},"nodeType":"YulExpressionStatement","src":"28373:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"28281:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28274:6:16"},"nodeType":"YulFunctionCall","src":"28274:13:16"},"nodeType":"YulIf","src":"28271:134:16"},{"body":{"nodeType":"YulBlock","src":"28597:239:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28622:4:16","type":"","value":"0x00"},{"name":"owner","nodeType":"YulIdentifier","src":"28628:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28615:6:16"},"nodeType":"YulFunctionCall","src":"28615:19:16"},"nodeType":"YulExpressionStatement","src":"28615:19:16"},{"body":{"nodeType":"YulBlock","src":"28691:131:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28720:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"28726:10:16","type":"","value":"0x4b6e7f18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28713:6:16"},"nodeType":"YulFunctionCall","src":"28713:24:16"},"nodeType":"YulExpressionStatement","src":"28713:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28793:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"28799:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28786:6:16"},"nodeType":"YulFunctionCall","src":"28786:18:16"},"nodeType":"YulExpressionStatement","src":"28786:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28677:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"28683:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"28667:9:16"},"nodeType":"YulFunctionCall","src":"28667:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"28661:5:16"},"nodeType":"YulFunctionCall","src":"28661:28:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28654:6:16"},"nodeType":"YulFunctionCall","src":"28654:36:16"},"nodeType":"YulIf","src":"28651:171:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"28576:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28569:6:16"},"nodeType":"YulFunctionCall","src":"28569:10:16"},{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"28584:2:16"},{"name":"owner","nodeType":"YulIdentifier","src":"28588:5:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28581:2:16"},"nodeType":"YulFunctionCall","src":"28581:13:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"28566:2:16"},"nodeType":"YulFunctionCall","src":"28566:29:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28559:6:16"},"nodeType":"YulFunctionCall","src":"28559:37:16"},"nodeType":"YulIf","src":"28556:280:16"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28930:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"28933:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28926:3:16"},"nodeType":"YulFunctionCall","src":"28926:21:16"},{"name":"account","nodeType":"YulIdentifier","src":"28949:7:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"28919:6:16"},"nodeType":"YulFunctionCall","src":"28919:38:16"},"nodeType":"YulExpressionStatement","src":"28919:38:16"},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"codesize","nodeType":"YulIdentifier","src":"29017:8:16"},"nodeType":"YulFunctionCall","src":"29017:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"29029:4:16","type":"","value":"0x00"},{"name":"_APPROVAL_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29035:25:16"},{"name":"owner","nodeType":"YulIdentifier","src":"29062:5:16"},{"name":"account","nodeType":"YulIdentifier","src":"29069:7:16"},{"name":"id","nodeType":"YulIdentifier","src":"29078:2:16"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"29012:4:16"},"nodeType":"YulFunctionCall","src":"29012:69:16"},"nodeType":"YulExpressionStatement","src":"29012:69:16"}]},"evmVersion":"london","externalReferences":[{"declaration":3057,"isOffset":false,"isSlot":false,"src":"29035:25:16","valueSize":1},{"declaration":3067,"isOffset":false,"isSlot":false,"src":"28037:24:16","valueSize":1},{"declaration":3494,"isOffset":false,"isSlot":false,"src":"27854:7:16","valueSize":1},{"declaration":3494,"isOffset":false,"isSlot":false,"src":"27885:7:16","valueSize":1},{"declaration":3494,"isOffset":false,"isSlot":false,"src":"28949:7:16","valueSize":1},{"declaration":3494,"isOffset":false,"isSlot":false,"src":"29069:7:16","valueSize":1},{"declaration":3492,"isOffset":false,"isSlot":false,"src":"27906:2:16","valueSize":1},{"declaration":3492,"isOffset":false,"isSlot":false,"src":"27932:2:16","valueSize":1},{"declaration":3492,"isOffset":false,"isSlot":false,"src":"28063:2:16","valueSize":1},{"declaration":3492,"isOffset":false,"isSlot":false,"src":"28576:2:16","valueSize":1},{"declaration":3492,"isOffset":false,"isSlot":false,"src":"28584:2:16","valueSize":1},{"declaration":3496,"isOffset":false,"isSlot":false,"src":"28005:2:16","valueSize":1},{"declaration":3496,"isOffset":false,"isSlot":false,"src":"28105:2:16","valueSize":1},{"declaration":3496,"isOffset":false,"isSlot":false,"src":"28113:2:16","valueSize":1},{"declaration":3496,"isOffset":false,"isSlot":false,"src":"29078:2:16","valueSize":1}],"id":3499,"nodeType":"InlineAssembly","src":"27741:1350:16"}]},"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"27343:307:16","text":"@dev Sets `account` as the approved account to manage token `id`, using `by`.\n Requirements:\n - Token `id` must exist.\n - If `by` is not the zero address, `by` must be the owner\n   or an approved operator for the token owner.\n Emits a {Transfer} event."},"id":3501,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"27664:8:16","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"by","nameLocation":"27681:2:16","nodeType":"VariableDeclaration","scope":3501,"src":"27673:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3491,"name":"address","nodeType":"ElementaryTypeName","src":"27673:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"account","nameLocation":"27693:7:16","nodeType":"VariableDeclaration","scope":3501,"src":"27685:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3493,"name":"address","nodeType":"ElementaryTypeName","src":"27685:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3496,"mutability":"mutable","name":"id","nameLocation":"27710:2:16","nodeType":"VariableDeclaration","scope":3501,"src":"27702:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"27702:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27672:41:16"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[],"src":"27731:0:16"},"scope":3713,"src":"27655:1442:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3512,"nodeType":"Block","src":"29353:670:16","statements":[{"AST":{"nodeType":"YulBlock","src":"29415:602:16","statements":[{"nodeType":"YulAssignment","src":"29469:26:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29479:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29487:2:16","type":"","value":"96"},{"name":"by","nodeType":"YulIdentifier","src":"29491:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29483:3:16"},"nodeType":"YulFunctionCall","src":"29483:11:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"29475:3:16"},"nodeType":"YulFunctionCall","src":"29475:20:16"},"variableNames":[{"name":"by","nodeType":"YulIdentifier","src":"29469:2:16"}]},{"nodeType":"YulAssignment","src":"29508:38:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29524:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29532:2:16","type":"","value":"96"},{"name":"operator","nodeType":"YulIdentifier","src":"29536:8:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29528:3:16"},"nodeType":"YulFunctionCall","src":"29528:17:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"29520:3:16"},"nodeType":"YulFunctionCall","src":"29520:26:16"},"variableNames":[{"name":"operator","nodeType":"YulIdentifier","src":"29508:8:16"}]},{"nodeType":"YulAssignment","src":"29593:40:16","value":{"arguments":[{"arguments":[{"name":"isApproved","nodeType":"YulIdentifier","src":"29621:10:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29614:6:16"},"nodeType":"YulFunctionCall","src":"29614:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29607:6:16"},"nodeType":"YulFunctionCall","src":"29607:26:16"},"variableNames":[{"name":"isApproved","nodeType":"YulIdentifier","src":"29593:10:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29716:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"29725:24:16"},{"name":"operator","nodeType":"YulIdentifier","src":"29751:8:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"29722:2:16"},"nodeType":"YulFunctionCall","src":"29722:38:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29709:6:16"},"nodeType":"YulFunctionCall","src":"29709:52:16"},"nodeType":"YulExpressionStatement","src":"29709:52:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29781:4:16","type":"","value":"0x00"},{"name":"by","nodeType":"YulIdentifier","src":"29787:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29774:6:16"},"nodeType":"YulFunctionCall","src":"29774:16:16"},"nodeType":"YulExpressionStatement","src":"29774:16:16"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29820:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"29826:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"29810:9:16"},"nodeType":"YulFunctionCall","src":"29810:21:16"},{"name":"isApproved","nodeType":"YulIdentifier","src":"29833:10:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"29803:6:16"},"nodeType":"YulFunctionCall","src":"29803:41:16"},"nodeType":"YulExpressionStatement","src":"29803:41:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29912:4:16","type":"","value":"0x00"},{"name":"isApproved","nodeType":"YulIdentifier","src":"29918:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29905:6:16"},"nodeType":"YulFunctionCall","src":"29905:24:16"},"nodeType":"YulExpressionStatement","src":"29905:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29947:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"29953:4:16","type":"","value":"0x20"},{"name":"_APPROVAL_FOR_ALL_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29959:33:16"},{"name":"by","nodeType":"YulIdentifier","src":"29994:2:16"},{"name":"operator","nodeType":"YulIdentifier","src":"29998:8:16"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"29942:4:16"},"nodeType":"YulFunctionCall","src":"29942:65:16"},"nodeType":"YulExpressionStatement","src":"29942:65:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3061,"isOffset":false,"isSlot":false,"src":"29959:33:16","valueSize":1},{"declaration":3067,"isOffset":false,"isSlot":false,"src":"29725:24:16","valueSize":1},{"declaration":3504,"isOffset":false,"isSlot":false,"src":"29469:2:16","valueSize":1},{"declaration":3504,"isOffset":false,"isSlot":false,"src":"29491:2:16","valueSize":1},{"declaration":3504,"isOffset":false,"isSlot":false,"src":"29787:2:16","valueSize":1},{"declaration":3504,"isOffset":false,"isSlot":false,"src":"29994:2:16","valueSize":1},{"declaration":3508,"isOffset":false,"isSlot":false,"src":"29593:10:16","valueSize":1},{"declaration":3508,"isOffset":false,"isSlot":false,"src":"29621:10:16","valueSize":1},{"declaration":3508,"isOffset":false,"isSlot":false,"src":"29833:10:16","valueSize":1},{"declaration":3508,"isOffset":false,"isSlot":false,"src":"29918:10:16","valueSize":1},{"declaration":3506,"isOffset":false,"isSlot":false,"src":"29508:8:16","valueSize":1},{"declaration":3506,"isOffset":false,"isSlot":false,"src":"29536:8:16","valueSize":1},{"declaration":3506,"isOffset":false,"isSlot":false,"src":"29751:8:16","valueSize":1},{"declaration":3506,"isOffset":false,"isSlot":false,"src":"29998:8:16","valueSize":1}],"id":3511,"nodeType":"InlineAssembly","src":"29406:611:16"}]},"documentation":{"id":3502,"nodeType":"StructuredDocumentation","src":"29103:153:16","text":"@dev Approve or remove the `operator` as an operator for `by`,\n without authorization checks.\n Emits an {ApprovalForAll} event."},"id":3513,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"29270:18:16","nodeType":"FunctionDefinition","parameters":{"id":3509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3504,"mutability":"mutable","name":"by","nameLocation":"29297:2:16","nodeType":"VariableDeclaration","scope":3513,"src":"29289:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3503,"name":"address","nodeType":"ElementaryTypeName","src":"29289:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3506,"mutability":"mutable","name":"operator","nameLocation":"29309:8:16","nodeType":"VariableDeclaration","scope":3513,"src":"29301:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3505,"name":"address","nodeType":"ElementaryTypeName","src":"29301:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3508,"mutability":"mutable","name":"isApproved","nameLocation":"29324:10:16","nodeType":"VariableDeclaration","scope":3513,"src":"29319:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3507,"name":"bool","nodeType":"ElementaryTypeName","src":"29319:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"29288:47:16"},"returnParameters":{"id":3510,"nodeType":"ParameterList","parameters":[],"src":"29353:0:16"},"scope":3713,"src":"29261:762:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3533,"nodeType":"Block","src":"30452:52:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30480:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30472:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3524,"name":"address","nodeType":"ElementaryTypeName","src":"30472:7:16","typeDescriptions":{}}},"id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30472:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3528,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"30484:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3529,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"30490:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3530,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"30494:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3523,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[3534,3560],"referencedDeclaration":3560,"src":"30462:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30462:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3532,"nodeType":"ExpressionStatement","src":"30462:35:16"}]},"documentation":{"id":3514,"nodeType":"StructuredDocumentation","src":"30312:61:16","text":"@dev Equivalent to `_transfer(address(0), from, to, id)`."},"id":3534,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"30387:9:16","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"from","nameLocation":"30405:4:16","nodeType":"VariableDeclaration","scope":3534,"src":"30397:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3515,"name":"address","nodeType":"ElementaryTypeName","src":"30397:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3518,"mutability":"mutable","name":"to","nameLocation":"30419:2:16","nodeType":"VariableDeclaration","scope":3534,"src":"30411:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3517,"name":"address","nodeType":"ElementaryTypeName","src":"30411:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3520,"mutability":"mutable","name":"id","nameLocation":"30431:2:16","nodeType":"VariableDeclaration","scope":3534,"src":"30423:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"30423:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30396:38:16"},"returnParameters":{"id":3522,"nodeType":"ParameterList","parameters":[],"src":"30452:0:16"},"scope":3713,"src":"30378:126:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3559,"nodeType":"Block","src":"30980:3036:16","statements":[{"expression":{"arguments":[{"id":3547,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"31011:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3548,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"31017:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3549,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"31021:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3546,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"30990:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30990:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3551,"nodeType":"ExpressionStatement","src":"30990:34:16"},{"AST":{"nodeType":"YulBlock","src":"31086:2881:16","statements":[{"nodeType":"YulVariableDeclaration","src":"31140:37:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31166:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31174:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31170:3:16"},"nodeType":"YulFunctionCall","src":"31170:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"31162:3:16"},"nodeType":"YulFunctionCall","src":"31162:15:16"},"variables":[{"name":"bitmaskAddress","nodeType":"YulTypedName","src":"31144:14:16","type":""}]},{"nodeType":"YulAssignment","src":"31190:33:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"31202:14:16"},{"name":"from","nodeType":"YulIdentifier","src":"31218:4:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31198:3:16"},"nodeType":"YulFunctionCall","src":"31198:25:16"},"variableNames":[{"name":"from","nodeType":"YulIdentifier","src":"31190:4:16"}]},{"nodeType":"YulAssignment","src":"31236:29:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"31246:14:16"},{"name":"to","nodeType":"YulIdentifier","src":"31262:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31242:3:16"},"nodeType":"YulFunctionCall","src":"31242:23:16"},"variableNames":[{"name":"to","nodeType":"YulIdentifier","src":"31236:2:16"}]},{"nodeType":"YulAssignment","src":"31278:29:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"31288:14:16"},{"name":"by","nodeType":"YulIdentifier","src":"31304:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31284:3:16"},"nodeType":"YulFunctionCall","src":"31284:23:16"},"variableNames":[{"name":"by","nodeType":"YulIdentifier","src":"31278:2:16"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31367:4:16","type":"","value":"0x00"},{"name":"id","nodeType":"YulIdentifier","src":"31373:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31360:6:16"},"nodeType":"YulFunctionCall","src":"31360:16:16"},"nodeType":"YulExpressionStatement","src":"31360:16:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31396:4:16","type":"","value":"0x1c"},{"arguments":[{"name":"_ERC721_MASTER_SLOT_SEED","nodeType":"YulIdentifier","src":"31405:24:16"},{"name":"by","nodeType":"YulIdentifier","src":"31431:2:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31402:2:16"},"nodeType":"YulFunctionCall","src":"31402:32:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31389:6:16"},"nodeType":"YulFunctionCall","src":"31389:46:16"},"nodeType":"YulExpressionStatement","src":"31389:46:16"},{"nodeType":"YulVariableDeclaration","src":"31448:60:16","value":{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"31473:2:16"},{"arguments":[{"name":"id","nodeType":"YulIdentifier","src":"31481:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31495:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"31501:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"31485:9:16"},"nodeType":"YulFunctionCall","src":"31485:21:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31477:3:16"},"nodeType":"YulFunctionCall","src":"31477:30:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31469:3:16"},"nodeType":"YulFunctionCall","src":"31469:39:16"},"variables":[{"name":"ownershipSlot","nodeType":"YulTypedName","src":"31452:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31521:43:16","value":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"31550:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"31544:5:16"},"nodeType":"YulFunctionCall","src":"31544:20:16"},"variables":[{"name":"ownershipPacked","nodeType":"YulTypedName","src":"31525:15:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31577:49:16","value":{"arguments":[{"name":"bitmaskAddress","nodeType":"YulIdentifier","src":"31594:14:16"},{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"31610:15:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31590:3:16"},"nodeType":"YulFunctionCall","src":"31590:36:16"},"variables":[{"name":"owner","nodeType":"YulTypedName","src":"31581:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"31747:289:16","statements":[{"body":{"nodeType":"YulBlock","src":"31782:129:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31811:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"31817:10:16","type":"","value":"0xceea21b6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31804:6:16"},"nodeType":"YulFunctionCall","src":"31804:24:16"},"nodeType":"YulExpressionStatement","src":"31804:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31882:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"31888:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31875:6:16"},"nodeType":"YulFunctionCall","src":"31875:18:16"},"nodeType":"YulExpressionStatement","src":"31875:18:16"}]},"condition":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"31775:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31768:6:16"},"nodeType":"YulFunctionCall","src":"31768:13:16"},"nodeType":"YulIf","src":"31765:146:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31935:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"31941:10:16","type":"","value":"0xa1148100"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31928:6:16"},"nodeType":"YulFunctionCall","src":"31928:24:16"},"nodeType":"YulExpressionStatement","src":"31928:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32011:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"32017:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32004:6:16"},"nodeType":"YulFunctionCall","src":"32004:18:16"},"nodeType":"YulExpressionStatement","src":"32004:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"31722:5:16"},{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"31732:5:16"},{"name":"from","nodeType":"YulIdentifier","src":"31739:4:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31729:2:16"},"nodeType":"YulFunctionCall","src":"31729:15:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31718:3:16"},"nodeType":"YulFunctionCall","src":"31718:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31711:6:16"},"nodeType":"YulFunctionCall","src":"31711:35:16"},"nodeType":"YulIf","src":"31708:328:16"},{"body":{"nodeType":"YulBlock","src":"32114:121:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32139:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"32145:10:16","type":"","value":"0xea553b34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32132:6:16"},"nodeType":"YulFunctionCall","src":"32132:24:16"},"nodeType":"YulExpressionStatement","src":"32132:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32210:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"32216:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32203:6:16"},"nodeType":"YulFunctionCall","src":"32203:18:16"},"nodeType":"YulExpressionStatement","src":"32203:18:16"}]},"condition":{"arguments":[{"name":"to","nodeType":"YulIdentifier","src":"32110:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32103:6:16"},"nodeType":"YulFunctionCall","src":"32103:10:16"},"nodeType":"YulIf","src":"32100:135:16"},{"nodeType":"YulBlock","src":"32307:704:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32332:4:16","type":"","value":"0x00"},{"name":"from","nodeType":"YulIdentifier","src":"32338:4:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32325:6:16"},"nodeType":"YulFunctionCall","src":"32325:18:16"},"nodeType":"YulExpressionStatement","src":"32325:18:16"},{"nodeType":"YulVariableDeclaration","src":"32360:51:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32393:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"32396:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32389:3:16"},"nodeType":"YulFunctionCall","src":"32389:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32383:5:16"},"nodeType":"YulFunctionCall","src":"32383:28:16"},"variables":[{"name":"approvedAddress","nodeType":"YulTypedName","src":"32364:15:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"32647:223:16","statements":[{"body":{"nodeType":"YulBlock","src":"32709:143:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32742:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"32748:10:16","type":"","value":"0x4b6e7f18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32735:6:16"},"nodeType":"YulFunctionCall","src":"32735:24:16"},"nodeType":"YulExpressionStatement","src":"32735:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32819:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"32825:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32812:6:16"},"nodeType":"YulFunctionCall","src":"32812:18:16"},"nodeType":"YulExpressionStatement","src":"32812:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32695:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"32701:4:16","type":"","value":"0x30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"32685:9:16"},"nodeType":"YulFunctionCall","src":"32685:21:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32679:5:16"},"nodeType":"YulFunctionCall","src":"32679:28:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32672:6:16"},"nodeType":"YulFunctionCall","src":"32672:36:16"},"nodeType":"YulIf","src":"32669:183:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"32598:2:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32591:6:16"},"nodeType":"YulFunctionCall","src":"32591:10:16"},{"arguments":[{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"32609:2:16"},{"name":"from","nodeType":"YulIdentifier","src":"32613:4:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32606:2:16"},"nodeType":"YulFunctionCall","src":"32606:12:16"},{"arguments":[{"name":"by","nodeType":"YulIdentifier","src":"32623:2:16"},{"name":"approvedAddress","nodeType":"YulIdentifier","src":"32627:15:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32620:2:16"},"nodeType":"YulFunctionCall","src":"32620:23:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"32603:2:16"},"nodeType":"YulFunctionCall","src":"32603:41:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"32588:2:16"},"nodeType":"YulFunctionCall","src":"32588:57:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32581:6:16"},"nodeType":"YulFunctionCall","src":"32581:65:16"},"nodeType":"YulIf","src":"32578:292:16"},{"body":{"nodeType":"YulBlock","src":"32961:36:16","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32974:1:16","type":"","value":"1"},{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"32977:13:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32970:3:16"},"nodeType":"YulFunctionCall","src":"32970:21:16"},{"kind":"number","nodeType":"YulLiteral","src":"32993:1:16","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32963:6:16"},"nodeType":"YulFunctionCall","src":"32963:32:16"},"nodeType":"YulExpressionStatement","src":"32963:32:16"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"32945:15:16"},"nodeType":"YulIf","src":"32942:55:16"}]},{"expression":{"arguments":[{"name":"ownershipSlot","nodeType":"YulIdentifier","src":"33073:13:16"},{"arguments":[{"name":"ownershipPacked","nodeType":"YulIdentifier","src":"33092:15:16"},{"arguments":[{"name":"from","nodeType":"YulIdentifier","src":"33113:4:16"},{"name":"to","nodeType":"YulIdentifier","src":"33119:2:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"33109:3:16"},"nodeType":"YulFunctionCall","src":"33109:13:16"}],"functionName":{"name":"xor","nodeType":"YulIdentifier","src":"33088:3:16"},"nodeType":"YulFunctionCall","src":"33088:35:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"33066:6:16"},"nodeType":"YulFunctionCall","src":"33066:58:16"},"nodeType":"YulExpressionStatement","src":"33066:58:16"},{"nodeType":"YulBlock","src":"33185:148:16","statements":[{"nodeType":"YulVariableDeclaration","src":"33203:44:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33236:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"33242:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"33226:9:16"},"nodeType":"YulFunctionCall","src":"33226:21:16"},"variables":[{"name":"fromBalanceSlot","nodeType":"YulTypedName","src":"33207:15:16","type":""}]},{"expression":{"arguments":[{"name":"fromBalanceSlot","nodeType":"YulIdentifier","src":"33271:15:16"},{"arguments":[{"arguments":[{"name":"fromBalanceSlot","nodeType":"YulIdentifier","src":"33298:15:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"33292:5:16"},"nodeType":"YulFunctionCall","src":"33292:22:16"},{"kind":"number","nodeType":"YulLiteral","src":"33316:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33288:3:16"},"nodeType":"YulFunctionCall","src":"33288:30:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"33264:6:16"},"nodeType":"YulFunctionCall","src":"33264:55:16"},"nodeType":"YulExpressionStatement","src":"33264:55:16"}]},{"nodeType":"YulBlock","src":"33392:447:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33417:4:16","type":"","value":"0x00"},{"name":"to","nodeType":"YulIdentifier","src":"33423:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33410:6:16"},"nodeType":"YulFunctionCall","src":"33410:16:16"},"nodeType":"YulExpressionStatement","src":"33410:16:16"},{"nodeType":"YulVariableDeclaration","src":"33443:42:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33474:4:16","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"33480:4:16","type":"","value":"0x1c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"33464:9:16"},"nodeType":"YulFunctionCall","src":"33464:21:16"},"variables":[{"name":"toBalanceSlot","nodeType":"YulTypedName","src":"33447:13:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33502:55:16","value":{"arguments":[{"arguments":[{"name":"toBalanceSlot","nodeType":"YulIdentifier","src":"33539:13:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"33533:5:16"},"nodeType":"YulFunctionCall","src":"33533:20:16"},{"kind":"number","nodeType":"YulLiteral","src":"33555:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33529:3:16"},"nodeType":"YulFunctionCall","src":"33529:28:16"},"variables":[{"name":"toBalanceSlotPacked","nodeType":"YulTypedName","src":"33506:19:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"33632:134:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33661:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"33667:10:16","type":"","value":"0x01336cea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33654:6:16"},"nodeType":"YulFunctionCall","src":"33654:24:16"},"nodeType":"YulExpressionStatement","src":"33654:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33737:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"33743:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33730:6:16"},"nodeType":"YulFunctionCall","src":"33730:18:16"},"nodeType":"YulExpressionStatement","src":"33730:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"toBalanceSlotPacked","nodeType":"YulIdentifier","src":"33588:19:16"},{"name":"_MAX_ACCOUNT_BALANCE","nodeType":"YulIdentifier","src":"33609:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33584:3:16"},"nodeType":"YulFunctionCall","src":"33584:46:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33577:6:16"},"nodeType":"YulFunctionCall","src":"33577:54:16"},"nodeType":"YulIf","src":"33574:192:16"},{"expression":{"arguments":[{"name":"toBalanceSlot","nodeType":"YulIdentifier","src":"33790:13:16"},{"name":"toBalanceSlotPacked","nodeType":"YulIdentifier","src":"33805:19:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"33783:6:16"},"nodeType":"YulFunctionCall","src":"33783:42:16"},"nodeType":"YulExpressionStatement","src":"33783:42:16"}]},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"codesize","nodeType":"YulIdentifier","src":"33899:8:16"},"nodeType":"YulFunctionCall","src":"33899:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"33911:4:16","type":"","value":"0x00"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"33917:25:16"},{"name":"from","nodeType":"YulIdentifier","src":"33944:4:16"},{"name":"to","nodeType":"YulIdentifier","src":"33950:2:16"},{"name":"id","nodeType":"YulIdentifier","src":"33954:2:16"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"33894:4:16"},"nodeType":"YulFunctionCall","src":"33894:63:16"},"nodeType":"YulExpressionStatement","src":"33894:63:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3067,"isOffset":false,"isSlot":false,"src":"31405:24:16","valueSize":1},{"declaration":2998,"isOffset":false,"isSlot":false,"src":"33609:20:16","valueSize":1},{"declaration":3053,"isOffset":false,"isSlot":false,"src":"33917:25:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"31278:2:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"31304:2:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"31431:2:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"32598:2:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"32609:2:16","valueSize":1},{"declaration":3537,"isOffset":false,"isSlot":false,"src":"32623:2:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"31190:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"31218:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"31739:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"32338:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"32613:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"33113:4:16","valueSize":1},{"declaration":3539,"isOffset":false,"isSlot":false,"src":"33944:4:16","valueSize":1},{"declaration":3543,"isOffset":false,"isSlot":false,"src":"31373:2:16","valueSize":1},{"declaration":3543,"isOffset":false,"isSlot":false,"src":"31473:2:16","valueSize":1},{"declaration":3543,"isOffset":false,"isSlot":false,"src":"31481:2:16","valueSize":1},{"declaration":3543,"isOffset":false,"isSlot":false,"src":"33954:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"31236:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"31262:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"32110:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"33119:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"33423:2:16","valueSize":1},{"declaration":3541,"isOffset":false,"isSlot":false,"src":"33950:2:16","valueSize":1}],"id":3552,"nodeType":"InlineAssembly","src":"31077:2890:16"},{"expression":{"arguments":[{"id":3554,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"33996:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3555,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"34002:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3556,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"34006:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3553,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"33976:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33976:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3558,"nodeType":"ExpressionStatement","src":"33976:33:16"}]},"documentation":{"id":3535,"nodeType":"StructuredDocumentation","src":"30510:379:16","text":"@dev Transfers token `id` from `from` to `to`.\n Requirements:\n - Token `id` must exist.\n - `from` must be the owner of the token.\n - `to` cannot be the zero address.\n - If `by` is not the zero address,\n   it must be the owner of the token, or be approved to manage the token.\n Emits a {Transfer} event."},"id":3560,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"30903:9:16","nodeType":"FunctionDefinition","parameters":{"id":3544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"by","nameLocation":"30921:2:16","nodeType":"VariableDeclaration","scope":3560,"src":"30913:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3536,"name":"address","nodeType":"ElementaryTypeName","src":"30913:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3539,"mutability":"mutable","name":"from","nameLocation":"30933:4:16","nodeType":"VariableDeclaration","scope":3560,"src":"30925:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"30925:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3541,"mutability":"mutable","name":"to","nameLocation":"30947:2:16","nodeType":"VariableDeclaration","scope":3560,"src":"30939:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3540,"name":"address","nodeType":"ElementaryTypeName","src":"30939:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3543,"mutability":"mutable","name":"id","nameLocation":"30959:2:16","nodeType":"VariableDeclaration","scope":3560,"src":"30951:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"30951:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30912:50:16"},"returnParameters":{"id":3545,"nodeType":"ParameterList","parameters":[],"src":"30980:0:16"},"scope":3713,"src":"30894:3122:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3577,"nodeType":"Block","src":"34162:48:16","statements":[{"expression":{"arguments":[{"id":3571,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"34186:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3572,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"34192:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3573,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"34196:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34200:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3570,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[3578,3612,3633,3666],"referencedDeclaration":3612,"src":"34172:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34172:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3576,"nodeType":"ExpressionStatement","src":"34172:31:16"}]},"documentation":{"id":3561,"nodeType":"StructuredDocumentation","src":"34022:57:16","text":"@dev Equivalent to `_safeTransfer(from, to, id, \"\")`."},"id":3578,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"34093:13:16","nodeType":"FunctionDefinition","parameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"mutability":"mutable","name":"from","nameLocation":"34115:4:16","nodeType":"VariableDeclaration","scope":3578,"src":"34107:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"34107:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3565,"mutability":"mutable","name":"to","nameLocation":"34129:2:16","nodeType":"VariableDeclaration","scope":3578,"src":"34121:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3564,"name":"address","nodeType":"ElementaryTypeName","src":"34121:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3567,"mutability":"mutable","name":"id","nameLocation":"34141:2:16","nodeType":"VariableDeclaration","scope":3578,"src":"34133:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3566,"name":"uint256","nodeType":"ElementaryTypeName","src":"34133:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34106:38:16"},"returnParameters":{"id":3569,"nodeType":"ParameterList","parameters":[],"src":"34162:0:16"},"scope":3713,"src":"34084:126:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3611,"nodeType":"Block","src":"34830:122:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34858:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34850:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3591,"name":"address","nodeType":"ElementaryTypeName","src":"34850:7:16","typeDescriptions":{}}},"id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34850:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3595,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"34862:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3596,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"34868:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3597,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"34872:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3590,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[3534,3560],"referencedDeclaration":3560,"src":"34840:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34840:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3599,"nodeType":"ExpressionStatement","src":"34840:35:16"},{"condition":{"arguments":[{"id":3601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"34898:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3600,"name":"_hasCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"34889:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34889:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3610,"nodeType":"IfStatement","src":"34885:60:16","trueBody":{"expression":{"arguments":[{"id":3604,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"34926:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3605,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"34932:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3606,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"34936:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3607,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"34940:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3603,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"34903:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34903:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3609,"nodeType":"ExpressionStatement","src":"34903:42:16"}}]},"documentation":{"id":3579,"nodeType":"StructuredDocumentation","src":"34216:492:16","text":"@dev Transfers token `id` from `from` to `to`.\n Requirements:\n - Token `id` must exist.\n - `from` must be the owner of the token.\n - `to` cannot be the zero address.\n - The caller must be the owner of the token, or be approved to manage the token.\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3612,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"34722:13:16","nodeType":"FunctionDefinition","parameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"from","nameLocation":"34744:4:16","nodeType":"VariableDeclaration","scope":3612,"src":"34736:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"34736:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"to","nameLocation":"34758:2:16","nodeType":"VariableDeclaration","scope":3612,"src":"34750:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3582,"name":"address","nodeType":"ElementaryTypeName","src":"34750:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"id","nameLocation":"34770:2:16","nodeType":"VariableDeclaration","scope":3612,"src":"34762:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint256","nodeType":"ElementaryTypeName","src":"34762:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"data","nameLocation":"34787:4:16","nodeType":"VariableDeclaration","scope":3612,"src":"34774:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3586,"name":"bytes","nodeType":"ElementaryTypeName","src":"34774:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"34735:57:16"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[],"src":"34830:0:16"},"scope":3713,"src":"34713:239:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3632,"nodeType":"Block","src":"35114:52:16","statements":[{"expression":{"arguments":[{"id":3625,"name":"by","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"35138:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3626,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"35142:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3627,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"35148:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3628,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"35152:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"35156:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3624,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[3578,3612,3633,3666],"referencedDeclaration":3666,"src":"35124:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35124:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3631,"nodeType":"ExpressionStatement","src":"35124:35:16"}]},"documentation":{"id":3613,"nodeType":"StructuredDocumentation","src":"34958:61:16","text":"@dev Equivalent to `_safeTransfer(by, from, to, id, \"\")`."},"id":3633,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"35033:13:16","nodeType":"FunctionDefinition","parameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3615,"mutability":"mutable","name":"by","nameLocation":"35055:2:16","nodeType":"VariableDeclaration","scope":3633,"src":"35047:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3614,"name":"address","nodeType":"ElementaryTypeName","src":"35047:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3617,"mutability":"mutable","name":"from","nameLocation":"35067:4:16","nodeType":"VariableDeclaration","scope":3633,"src":"35059:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3616,"name":"address","nodeType":"ElementaryTypeName","src":"35059:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3619,"mutability":"mutable","name":"to","nameLocation":"35081:2:16","nodeType":"VariableDeclaration","scope":3633,"src":"35073:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3618,"name":"address","nodeType":"ElementaryTypeName","src":"35073:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3621,"mutability":"mutable","name":"id","nameLocation":"35093:2:16","nodeType":"VariableDeclaration","scope":3633,"src":"35085:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3620,"name":"uint256","nodeType":"ElementaryTypeName","src":"35085:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35046:50:16"},"returnParameters":{"id":3623,"nodeType":"ParameterList","parameters":[],"src":"35114:0:16"},"scope":3713,"src":"35024:142:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3665,"nodeType":"Block","src":"35833:114:16","statements":[{"expression":{"arguments":[{"id":3648,"name":"by","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"35853:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3649,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"35857:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3650,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"35863:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3651,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"35867:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3647,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[3534,3560],"referencedDeclaration":3560,"src":"35843:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35843:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3653,"nodeType":"ExpressionStatement","src":"35843:27:16"},{"condition":{"arguments":[{"id":3655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"35893:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3654,"name":"_hasCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"35884:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35884:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3664,"nodeType":"IfStatement","src":"35880:60:16","trueBody":{"expression":{"arguments":[{"id":3658,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"35921:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3659,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"35927:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3660,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"35931:2:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3661,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"35935:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3657,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"35898:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35898:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3663,"nodeType":"ExpressionStatement","src":"35898:42:16"}}]},"documentation":{"id":3634,"nodeType":"StructuredDocumentation","src":"35172:527:16","text":"@dev Transfers token `id` from `from` to `to`.\n Requirements:\n - Token `id` must exist.\n - `from` must be the owner of the token.\n - `to` cannot be the zero address.\n - If `by` is not the zero address,\n   it must be the owner of the token, or be approved to manage the token.\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3666,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"35713:13:16","nodeType":"FunctionDefinition","parameters":{"id":3645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3636,"mutability":"mutable","name":"by","nameLocation":"35735:2:16","nodeType":"VariableDeclaration","scope":3666,"src":"35727:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3635,"name":"address","nodeType":"ElementaryTypeName","src":"35727:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"from","nameLocation":"35747:4:16","nodeType":"VariableDeclaration","scope":3666,"src":"35739:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3637,"name":"address","nodeType":"ElementaryTypeName","src":"35739:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3640,"mutability":"mutable","name":"to","nameLocation":"35761:2:16","nodeType":"VariableDeclaration","scope":3666,"src":"35753:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3639,"name":"address","nodeType":"ElementaryTypeName","src":"35753:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3642,"mutability":"mutable","name":"id","nameLocation":"35773:2:16","nodeType":"VariableDeclaration","scope":3666,"src":"35765:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3641,"name":"uint256","nodeType":"ElementaryTypeName","src":"35765:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3644,"mutability":"mutable","name":"data","nameLocation":"35790:4:16","nodeType":"VariableDeclaration","scope":3666,"src":"35777:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3643,"name":"bytes","nodeType":"ElementaryTypeName","src":"35777:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"35726:69:16"},"returnParameters":{"id":3646,"nodeType":"ParameterList","parameters":[],"src":"35833:0:16"},"scope":3713,"src":"35704:243:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3676,"nodeType":"Block","src":"36413:2:16","statements":[]},"documentation":{"id":3667,"nodeType":"StructuredDocumentation","src":"36236:87:16","text":"@dev Hook that is called before any token transfers, including minting and burning."},"id":3677,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"36337:20:16","nodeType":"FunctionDefinition","parameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"mutability":"mutable","name":"from","nameLocation":"36366:4:16","nodeType":"VariableDeclaration","scope":3677,"src":"36358:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3668,"name":"address","nodeType":"ElementaryTypeName","src":"36358:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3671,"mutability":"mutable","name":"to","nameLocation":"36380:2:16","nodeType":"VariableDeclaration","scope":3677,"src":"36372:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3670,"name":"address","nodeType":"ElementaryTypeName","src":"36372:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3673,"mutability":"mutable","name":"id","nameLocation":"36392:2:16","nodeType":"VariableDeclaration","scope":3677,"src":"36384:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3672,"name":"uint256","nodeType":"ElementaryTypeName","src":"36384:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36357:38:16"},"returnParameters":{"id":3675,"nodeType":"ParameterList","parameters":[],"src":"36413:0:16"},"scope":3713,"src":"36328:87:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3687,"nodeType":"Block","src":"36596:2:16","statements":[]},"documentation":{"id":3678,"nodeType":"StructuredDocumentation","src":"36421:86:16","text":"@dev Hook that is called after any token transfers, including minting and burning."},"id":3688,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"36521:19:16","nodeType":"FunctionDefinition","parameters":{"id":3685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"from","nameLocation":"36549:4:16","nodeType":"VariableDeclaration","scope":3688,"src":"36541:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3679,"name":"address","nodeType":"ElementaryTypeName","src":"36541:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3682,"mutability":"mutable","name":"to","nameLocation":"36563:2:16","nodeType":"VariableDeclaration","scope":3688,"src":"36555:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"36555:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3684,"mutability":"mutable","name":"id","nameLocation":"36575:2:16","nodeType":"VariableDeclaration","scope":3688,"src":"36567:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3683,"name":"uint256","nodeType":"ElementaryTypeName","src":"36567:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36540:38:16"},"returnParameters":{"id":3686,"nodeType":"ParameterList","parameters":[],"src":"36596:0:16"},"scope":3713,"src":"36512:86:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3697,"nodeType":"Block","src":"37012:148:16","statements":[{"AST":{"nodeType":"YulBlock","src":"37074:80:16","statements":[{"nodeType":"YulAssignment","src":"37088:24:16","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"37110:1:16"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"37098:11:16"},"nodeType":"YulFunctionCall","src":"37098:14:16"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37088:6:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3691,"isOffset":false,"isSlot":false,"src":"37110:1:16","valueSize":1},{"declaration":3694,"isOffset":false,"isSlot":false,"src":"37088:6:16","valueSize":1}],"id":3696,"nodeType":"InlineAssembly","src":"37065:89:16"}]},"documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"36887:56:16","text":"@dev Returns if `a` has bytecode of non-zero length."},"id":3698,"implemented":true,"kind":"function","modifiers":[],"name":"_hasCode","nameLocation":"36957:8:16","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"a","nameLocation":"36974:1:16","nodeType":"VariableDeclaration","scope":3698,"src":"36966:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"36966:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"36965:11:16"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"result","nameLocation":"37004:6:16","nodeType":"VariableDeclaration","scope":3698,"src":"36999:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3693,"name":"bool","nodeType":"ElementaryTypeName","src":"36999:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"36998:13:16"},"scope":3713,"src":"36948:212:16","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3711,"nodeType":"Block","src":"37428:1261:16","statements":[{"AST":{"nodeType":"YulBlock","src":"37490:1193:16","statements":[{"nodeType":"YulVariableDeclaration","src":"37541:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37556:4:16","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37550:5:16"},"nodeType":"YulFunctionCall","src":"37550:11:16"},"variables":[{"name":"m","nodeType":"YulTypedName","src":"37545:1:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"37574:42:16","value":{"kind":"number","nodeType":"YulLiteral","src":"37606:10:16","type":"","value":"0x150b7a02"},"variables":[{"name":"onERC721ReceivedSelector","nodeType":"YulTypedName","src":"37578:24:16","type":""}]},{"expression":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37636:1:16"},{"name":"onERC721ReceivedSelector","nodeType":"YulIdentifier","src":"37639:24:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37629:6:16"},"nodeType":"YulFunctionCall","src":"37629:35:16"},"nodeType":"YulExpressionStatement","src":"37629:35:16"},{"expression":{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37688:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"37691:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37684:3:16"},"nodeType":"YulFunctionCall","src":"37684:12:16"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"37698:6:16"},"nodeType":"YulFunctionCall","src":"37698:8:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37677:6:16"},"nodeType":"YulFunctionCall","src":"37677:30:16"},"nodeType":"YulExpressionStatement","src":"37677:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37780:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"37783:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37776:3:16"},"nodeType":"YulFunctionCall","src":"37776:12:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37794:2:16","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37802:2:16","type":"","value":"96"},{"name":"from","nodeType":"YulIdentifier","src":"37806:4:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"37798:3:16"},"nodeType":"YulFunctionCall","src":"37798:13:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"37790:3:16"},"nodeType":"YulFunctionCall","src":"37790:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37769:6:16"},"nodeType":"YulFunctionCall","src":"37769:44:16"},"nodeType":"YulExpressionStatement","src":"37769:44:16"},{"expression":{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37837:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"37840:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37833:3:16"},"nodeType":"YulFunctionCall","src":"37833:12:16"},{"name":"id","nodeType":"YulIdentifier","src":"37847:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37826:6:16"},"nodeType":"YulFunctionCall","src":"37826:24:16"},"nodeType":"YulExpressionStatement","src":"37826:24:16"},{"expression":{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37874:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"37877:4:16","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37870:3:16"},"nodeType":"YulFunctionCall","src":"37870:12:16"},{"kind":"number","nodeType":"YulLiteral","src":"37884:4:16","type":"","value":"0x80"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37863:6:16"},"nodeType":"YulFunctionCall","src":"37863:26:16"},"nodeType":"YulExpressionStatement","src":"37863:26:16"},{"nodeType":"YulVariableDeclaration","src":"37902:20:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"37917:4:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37911:5:16"},"nodeType":"YulFunctionCall","src":"37911:11:16"},"variables":[{"name":"n","nodeType":"YulTypedName","src":"37906:1:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"37946:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"37949:4:16","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37942:3:16"},"nodeType":"YulFunctionCall","src":"37942:12:16"},{"name":"n","nodeType":"YulIdentifier","src":"37956:1:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37935:6:16"},"nodeType":"YulFunctionCall","src":"37935:23:16"},"nodeType":"YulExpressionStatement","src":"37935:23:16"},{"body":{"nodeType":"YulBlock","src":"37976:66:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"37993:3:16"},"nodeType":"YulFunctionCall","src":"37993:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"38000:1:16","type":"","value":"4"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"38007:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"38013:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38003:3:16"},"nodeType":"YulFunctionCall","src":"38003:15:16"},{"name":"n","nodeType":"YulIdentifier","src":"38020:1:16"},{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"38027:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"38030:4:16","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38023:3:16"},"nodeType":"YulFunctionCall","src":"38023:12:16"},{"name":"n","nodeType":"YulIdentifier","src":"38037:1:16"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"37982:10:16"},"nodeType":"YulFunctionCall","src":"37982:57:16"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"37978:3:16"},"nodeType":"YulFunctionCall","src":"37978:62:16"},"nodeType":"YulExpressionStatement","src":"37978:62:16"}]},"condition":{"name":"n","nodeType":"YulIdentifier","src":"37974:1:16"},"nodeType":"YulIf","src":"37971:71:16"},{"body":{"nodeType":"YulBlock","src":"38165:246:16","statements":[{"body":{"nodeType":"YulBlock","src":"38203:194:16","statements":[{"expression":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"38305:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"38308:4:16","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"38314:14:16"},"nodeType":"YulFunctionCall","src":"38314:16:16"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"38290:14:16"},"nodeType":"YulFunctionCall","src":"38290:41:16"},"nodeType":"YulExpressionStatement","src":"38290:41:16"},{"expression":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"38359:1:16"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"38362:14:16"},"nodeType":"YulFunctionCall","src":"38362:16:16"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38352:6:16"},"nodeType":"YulFunctionCall","src":"38352:27:16"},"nodeType":"YulExpressionStatement","src":"38352:27:16"}]},"condition":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"38186:14:16"},"nodeType":"YulFunctionCall","src":"38186:16:16"},"nodeType":"YulIf","src":"38183:214:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"38113:3:16"},"nodeType":"YulFunctionCall","src":"38113:5:16"},{"name":"to","nodeType":"YulIdentifier","src":"38120:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"38124:1:16","type":"","value":"0"},{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"38131:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"38134:4:16","type":"","value":"0x1c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38127:3:16"},"nodeType":"YulFunctionCall","src":"38127:12:16"},{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"38145:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"38148:4:16","type":"","value":"0xa4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38141:3:16"},"nodeType":"YulFunctionCall","src":"38141:12:16"},{"name":"m","nodeType":"YulIdentifier","src":"38155:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"38158:4:16","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"38108:4:16"},"nodeType":"YulFunctionCall","src":"38108:55:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38101:6:16"},"nodeType":"YulFunctionCall","src":"38101:63:16"},"nodeType":"YulIf","src":"38098:313:16"},{"body":{"nodeType":"YulBlock","src":"38535:138:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38560:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"38566:10:16","type":"","value":"0xd1a57ed6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38553:6:16"},"nodeType":"YulFunctionCall","src":"38553:24:16"},"nodeType":"YulExpressionStatement","src":"38553:24:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38648:4:16","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"38654:4:16","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38641:6:16"},"nodeType":"YulFunctionCall","src":"38641:18:16"},"nodeType":"YulExpressionStatement","src":"38641:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"38494:1:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38488:5:16"},"nodeType":"YulFunctionCall","src":"38488:8:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38502:3:16","type":"","value":"224"},{"name":"onERC721ReceivedSelector","nodeType":"YulIdentifier","src":"38507:24:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"38498:3:16"},"nodeType":"YulFunctionCall","src":"38498:34:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"38485:2:16"},"nodeType":"YulFunctionCall","src":"38485:48:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38478:6:16"},"nodeType":"YulFunctionCall","src":"38478:56:16"},"nodeType":"YulIf","src":"38475:198:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3707,"isOffset":false,"isSlot":false,"src":"37917:4:16","valueSize":1},{"declaration":3707,"isOffset":false,"isSlot":false,"src":"38007:4:16","valueSize":1},{"declaration":3701,"isOffset":false,"isSlot":false,"src":"37806:4:16","valueSize":1},{"declaration":3705,"isOffset":false,"isSlot":false,"src":"37847:2:16","valueSize":1},{"declaration":3703,"isOffset":false,"isSlot":false,"src":"38120:2:16","valueSize":1}],"id":3710,"nodeType":"InlineAssembly","src":"37481:1202:16"}]},"documentation":{"id":3699,"nodeType":"StructuredDocumentation","src":"37166:148:16","text":"@dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\n Reverts if the target does not support the function correctly."},"id":3712,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"37328:22:16","nodeType":"FunctionDefinition","parameters":{"id":3708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3701,"mutability":"mutable","name":"from","nameLocation":"37359:4:16","nodeType":"VariableDeclaration","scope":3712,"src":"37351:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"37351:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3703,"mutability":"mutable","name":"to","nameLocation":"37373:2:16","nodeType":"VariableDeclaration","scope":3712,"src":"37365:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3702,"name":"address","nodeType":"ElementaryTypeName","src":"37365:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"id","nameLocation":"37385:2:16","nodeType":"VariableDeclaration","scope":3712,"src":"37377:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3704,"name":"uint256","nodeType":"ElementaryTypeName","src":"37377:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3707,"mutability":"mutable","name":"data","nameLocation":"37402:4:16","nodeType":"VariableDeclaration","scope":3712,"src":"37389:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3706,"name":"bytes","nodeType":"ElementaryTypeName","src":"37389:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"37350:57:16"},"returnParameters":{"id":3709,"nodeType":"ParameterList","parameters":[],"src":"37428:0:16"},"scope":3713,"src":"37319:1370:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3714,"src":"1441:37250:16","usedErrors":[3001,3004,3007,3010,3013,3016,3019,3022]}],"src":"32:38660:16"},"id":16},"contracts/lib/ERC721iEnumerable.sol":{"ast":{"absolutePath":"contracts/lib/ERC721iEnumerable.sol","exportedSymbols":{"Address":[634],"Context":[656],"ERC165":[909],"ERC721":[2991],"ERC721iEnumerable":[4072],"IERC165":[921],"IERC721":[228],"IERC721Enumerable":[277],"IERC721Metadata":[304],"IERC721Receiver":[246],"Math":[1787],"SignedMath":[1892],"Strings":[885]},"id":4073,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3715,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"309:23:17"},{"absolutePath":"contracts/lib/ERC721.sol","file":"./ERC721.sol","id":3716,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4073,"sourceUnit":2992,"src":"334:22:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","id":3717,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4073,"sourceUnit":278,"src":"357:79:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3719,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"1104:6:17"},"id":3720,"nodeType":"InheritanceSpecifier","src":"1104:6:17"},{"baseName":{"id":3721,"name":"IERC721Enumerable","nodeType":"IdentifierPath","referencedDeclaration":277,"src":"1112:17:17"},"id":3722,"nodeType":"InheritanceSpecifier","src":"1112:17:17"}],"canonicalName":"ERC721iEnumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3718,"nodeType":"StructuredDocumentation","src":"438:626:17","text":" @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account.\n @dev This implementation also includes support for pre-minting a max-supply of tokens up-front.\n Note on pre-mint:\n  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.\n  For this reason, the \"allTokens\" state vars are unneccesary and have been removed.\n  Also defines 2 light-weight state vars: \"_preMintReceiver\" & \"_maxSupply\"\n  Overrides \"ownerOf\" & \"_exists\""},"fullyImplemented":false,"id":4072,"linearizedBaseContracts":[4072,277,2991,304,228,909,921,656],"name":"ERC721iEnumerable","nameLocation":"1083:17:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3728,"mutability":"mutable","name":"_ownedTokens","nameLocation":"1241:12:17","nodeType":"VariableDeclaration","scope":4072,"src":"1185:68:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":3727,"keyType":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1185:47:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueType":{"id":3726,"keyType":{"id":3724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1212:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1204:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":3725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":3732,"mutability":"mutable","name":"_ownedTokensIndex","nameLocation":"1355:17:17","nodeType":"VariableDeclaration","scope":4072,"src":"1319:53:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":3731,"keyType":{"id":3729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1327:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1319:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"1338:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3734,"mutability":"mutable","name":"_preMintReceiver","nameLocation":"1434:16:17","nodeType":"VariableDeclaration","scope":4072,"src":"1417:33:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"1417:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3736,"mutability":"mutable","name":"_maxSupply","nameLocation":"1501:10:17","nodeType":"VariableDeclaration","scope":4072,"src":"1484:27:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3735,"name":"uint256","nodeType":"ElementaryTypeName","src":"1484:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"baseFunctions":[920,2220],"body":{"id":3759,"nodeType":"Block","src":"1788:108:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3747,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"1801:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3749,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1821:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$277_$","typeString":"type(contract IERC721Enumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$277_$","typeString":"type(contract IERC721Enumerable)"}],"id":3748,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1816:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1816:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Enumerable_$277","typeString":"type(contract IERC721Enumerable)"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1816:35:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1801:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3755,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"1879:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3753,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1855:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721iEnumerable_$4072_$","typeString":"type(contract super ERC721iEnumerable)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2220,"src":"1855:23:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1855:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1801:90:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3746,"id":3758,"nodeType":"Return","src":"1794:97:17"}]},"documentation":{"id":3737,"nodeType":"StructuredDocumentation","src":"1516:161:17","text":" @dev See {IERC165-supportsInterface}.\n Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable"},"functionSelector":"01ffc9a7","id":3760,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1689:17:17","nodeType":"FunctionDefinition","overrides":{"id":3743,"nodeType":"OverrideSpecifier","overrides":[{"id":3741,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":921,"src":"1756:7:17"},{"id":3742,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"1765:6:17"}],"src":"1747:25:17"},"parameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"mutability":"mutable","name":"interfaceId","nameLocation":"1714:11:17","nodeType":"VariableDeclaration","scope":3760,"src":"1707:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3738,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1707:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1706:20:17"},"returnParameters":{"id":3746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3760,"src":"1782:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3744,"name":"bool","nodeType":"ElementaryTypeName","src":"1782:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1781:6:17"},"scope":4072,"src":"1680:216:17","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[268],"body":{"id":3839,"nodeType":"Block","src":"2115:468:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3772,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"2129:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"id":3775,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"2154:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3773,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2137:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2991_$","typeString":"type(contract ERC721)"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2244,"src":"2137:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2137:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2129:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2162:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""},"value":"ERC721Enumerable: owner index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""}],"id":3771,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2121:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3780,"nodeType":"ExpressionStatement","src":"2121:87:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3781,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"2218:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3784,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"2235:16:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2227:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:17","typeDescriptions":{}}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2227:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2218:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3832,"nodeType":"IfStatement","src":"2214:326:17","trueBody":{"id":3831,"nodeType":"Block","src":"2254:286:17","statements":[{"assignments":[3788],"declarations":[{"constant":false,"id":3788,"mutability":"mutable","name":"supply","nameLocation":"2270:6:17","nodeType":"VariableDeclaration","scope":3831,"src":"2262:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3787,"name":"uint256","nodeType":"ElementaryTypeName","src":"2262:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3791,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3789,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"2279:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2279:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2262:30:17"},{"assignments":[3793],"declarations":[{"constant":false,"id":3793,"mutability":"mutable","name":"matched","nameLocation":"2308:7:17","nodeType":"VariableDeclaration","scope":3831,"src":"2300:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3792,"name":"uint256","nodeType":"ElementaryTypeName","src":"2300:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3795,"initialValue":{"hexValue":"30","id":3794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2318:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2300:19:17"},{"body":{"id":3829,"nodeType":"Block","src":"2364:170:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3807,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"2386:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3806,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[3913],"referencedDeclaration":3913,"src":"2378:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2378:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3811,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"2400:16:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2392:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3809,"name":"address","nodeType":"ElementaryTypeName","src":"2392:7:17","typeDescriptions":{}}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2392:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2378:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3828,"nodeType":"IfStatement","src":"2374:152:17","trueBody":{"id":3827,"nodeType":"Block","src":"2419:107:17","statements":[{"expression":{"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3814,"name":"matched","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"2431:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2442:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2431:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3817,"nodeType":"ExpressionStatement","src":"2431:12:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3818,"name":"matched","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"2459:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2469:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2459:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3821,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"2474:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2459:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3826,"nodeType":"IfStatement","src":"2455:61:17","trueBody":{"id":3825,"nodeType":"Block","src":"2481:35:17","statements":[{"expression":{"id":3823,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"2502:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3770,"id":3824,"nodeType":"Return","src":"2495:8:17"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3800,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"2347:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3801,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3788,"src":"2351:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2347:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3830,"initializationExpression":{"assignments":[3797],"declarations":[{"constant":false,"id":3797,"mutability":"mutable","name":"i","nameLocation":"2340:1:17","nodeType":"VariableDeclaration","scope":3830,"src":"2332:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3796,"name":"uint256","nodeType":"ElementaryTypeName","src":"2332:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3799,"initialValue":{"hexValue":"31","id":3798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2344:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"2332:13:17"},"loopExpression":{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2359:3:17","subExpression":{"id":3803,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"2359:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3805,"nodeType":"ExpressionStatement","src":"2359:3:17"},"nodeType":"ForStatement","src":"2327:207:17"}]}},{"expression":{"baseExpression":{"baseExpression":{"id":3833,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"2552:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3835,"indexExpression":{"id":3834,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"2565:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2552:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3837,"indexExpression":{"id":3836,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"2572:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2552:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3770,"id":3838,"nodeType":"Return","src":"2545:33:17"}]},"documentation":{"id":3761,"nodeType":"StructuredDocumentation","src":"1900:106:17","text":" @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n note: Fix contributed by surfer77"},"functionSelector":"2f745c59","id":3840,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"2018:19:17","nodeType":"FunctionDefinition","overrides":{"id":3767,"nodeType":"OverrideSpecifier","overrides":[],"src":"2088:8:17"},"parameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3763,"mutability":"mutable","name":"owner","nameLocation":"2046:5:17","nodeType":"VariableDeclaration","scope":3840,"src":"2038:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3762,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"index","nameLocation":"2061:5:17","nodeType":"VariableDeclaration","scope":3840,"src":"2053:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2053:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2037:30:17"},"returnParameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3840,"src":"2106:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3768,"name":"uint256","nodeType":"ElementaryTypeName","src":"2106:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2105:9:17"},"scope":4072,"src":"2009:574:17","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[258],"body":{"id":3849,"nodeType":"Block","src":"2718:77:17","statements":[{"expression":{"id":3847,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"2780:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3846,"id":3848,"nodeType":"Return","src":"2773:17:17"}]},"documentation":{"id":3841,"nodeType":"StructuredDocumentation","src":"2587:58:17","text":" @dev See {IERC721Enumerable-totalSupply}."},"functionSelector":"18160ddd","id":3850,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2657:11:17","nodeType":"FunctionDefinition","overrides":{"id":3843,"nodeType":"OverrideSpecifier","overrides":[],"src":"2691:8:17"},"parameters":{"id":3842,"nodeType":"ParameterList","parameters":[],"src":"2668:2:17"},"returnParameters":{"id":3846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3850,"src":"2709:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3844,"name":"uint256","nodeType":"ElementaryTypeName","src":"2709:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2708:9:17"},"scope":4072,"src":"2648:147:17","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[276],"body":{"id":3870,"nodeType":"Block","src":"2945:181:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3860,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"2959:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3861,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"2967:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2959:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473","id":3863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2979:46:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""},"value":"ERC721Enumerable: global index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""}],"id":3859,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2951:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2951:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3865,"nodeType":"ExpressionStatement","src":"2951:75:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3866,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"3112:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3120:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3112:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3858,"id":3869,"nodeType":"Return","src":"3105:16:17"}]},"documentation":{"id":3851,"nodeType":"StructuredDocumentation","src":"2799:59:17","text":" @dev See {IERC721Enumerable-tokenByIndex}."},"functionSelector":"4f6ccce7","id":3871,"implemented":true,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"2870:12:17","nodeType":"FunctionDefinition","overrides":{"id":3855,"nodeType":"OverrideSpecifier","overrides":[],"src":"2918:8:17"},"parameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3853,"mutability":"mutable","name":"index","nameLocation":"2891:5:17","nodeType":"VariableDeclaration","scope":3871,"src":"2883:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3852,"name":"uint256","nodeType":"ElementaryTypeName","src":"2883:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2882:15:17"},"returnParameters":{"id":3858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3871,"src":"2936:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3856,"name":"uint256","nodeType":"ElementaryTypeName","src":"2936:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2935:9:17"},"scope":4072,"src":"2861:265:17","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[161,2272],"body":{"id":3912,"nodeType":"Block","src":"3329:576:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3416:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3883,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"3426:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3416:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3891,"nodeType":"IfStatement","src":"3412:70:17","trueBody":{"id":3890,"nodeType":"Block","src":"3438:44:17","statements":[{"expression":{"arguments":[{"id":3887,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3467:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3885,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3453:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721iEnumerable_$4072_$","typeString":"type(contract super ERC721iEnumerable)"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2272,"src":"3453:13:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3453:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3881,"id":3889,"nodeType":"Return","src":"3446:29:17"}]}},{"assignments":[3893],"declarations":[{"constant":false,"id":3893,"mutability":"mutable","name":"owner_","nameLocation":"3785:6:17","nodeType":"VariableDeclaration","scope":3912,"src":"3777:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3892,"name":"address","nodeType":"ElementaryTypeName","src":"3777:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3897,"initialValue":{"baseExpression":{"id":3894,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3794:7:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3896,"indexExpression":{"id":3895,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"3802:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3794:16:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3777:33:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3898,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"3820:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3838:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3830:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3899,"name":"address","nodeType":"ElementaryTypeName","src":"3830:7:17","typeDescriptions":{}}},"id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3830:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3820:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3909,"nodeType":"IfStatement","src":"3816:66:17","trueBody":{"id":3908,"nodeType":"Block","src":"3842:40:17","statements":[{"expression":{"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3904,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"3850:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3905,"name":"_preMintReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"3859:16:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3850:25:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3907,"nodeType":"ExpressionStatement","src":"3850:25:17"}]}},{"expression":{"id":3910,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"3894:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3881,"id":3911,"nodeType":"Return","src":"3887:13:17"}]},"documentation":{"id":3872,"nodeType":"StructuredDocumentation","src":"3130:98:17","text":" @dev Override the ERC721 \"ownerOf\" function to account for the Pre-Mint Receiver."},"functionSelector":"6352211e","id":3913,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3240:7:17","nodeType":"FunctionDefinition","overrides":{"id":3878,"nodeType":"OverrideSpecifier","overrides":[{"id":3876,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"3294:7:17"},{"id":3877,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"3303:6:17"}],"src":"3285:25:17"},"parameters":{"id":3875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3874,"mutability":"mutable","name":"tokenId","nameLocation":"3256:7:17","nodeType":"VariableDeclaration","scope":3913,"src":"3248:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3873,"name":"uint256","nodeType":"ElementaryTypeName","src":"3248:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3247:17:17"},"returnParameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3913,"src":"3320:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"3320:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3319:9:17"},"scope":4072,"src":"3231:674:17","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2558],"body":{"id":3942,"nodeType":"Block","src":"4102:285:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3923,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4189:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3924,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"4199:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4189:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3932,"nodeType":"IfStatement","src":"4185:70:17","trueBody":{"id":3931,"nodeType":"Block","src":"4211:44:17","statements":[{"expression":{"arguments":[{"id":3928,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4240:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3926,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4226:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721iEnumerable_$4072_$","typeString":"type(contract super ERC721iEnumerable)"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_exists","nodeType":"MemberAccess","referencedDeclaration":2558,"src":"4226:13:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4226:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3922,"id":3930,"nodeType":"Return","src":"4219:29:17"}]}},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3933,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4345:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4355:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4345:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3936,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4360:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3937,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"4371:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4360:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4345:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4344:38:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3922,"id":3941,"nodeType":"Return","src":"4337:45:17"}]},"documentation":{"id":3914,"nodeType":"StructuredDocumentation","src":"3909:102:17","text":" @dev Override the ERC721 \"_exists\" function to account for the Pre-Minted Max-Supply."},"id":3943,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"4023:7:17","nodeType":"FunctionDefinition","overrides":{"id":3919,"nodeType":"OverrideSpecifier","overrides":[{"id":3918,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"4079:6:17"}],"src":"4070:16:17"},"parameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"tokenId","nameLocation":"4039:7:17","nodeType":"VariableDeclaration","scope":3943,"src":"4031:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"4031:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4030:17:17"},"returnParameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3943,"src":"4096:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3920,"name":"bool","nodeType":"ElementaryTypeName","src":"4096:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4095:6:17"},"scope":4072,"src":"4014:373:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2979],"body":{"id":3977,"nodeType":"Block","src":"4576:188:17","statements":[{"expression":{"arguments":[{"id":3957,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"4609:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3958,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"4615:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"4619:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3954,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4582:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721iEnumerable_$4072_$","typeString":"type(contract super ERC721iEnumerable)"}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":2979,"src":"4582:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4582:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3961,"nodeType":"ExpressionStatement","src":"4582:45:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3962,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"4638:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3963,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"4646:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4638:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3976,"nodeType":"IfStatement","src":"4634:126:17","trueBody":{"id":3975,"nodeType":"Block","src":"4650:110:17","statements":[{"expression":{"arguments":[{"id":3966,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"4691:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3967,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"4697:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3965,"name":"_removeTokenFromOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"4658:32:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4658:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3969,"nodeType":"ExpressionStatement","src":"4658:47:17"},{"expression":{"arguments":[{"id":3971,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"4741:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3972,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"4745:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3970,"name":"_addTokenToOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"4713:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4713:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3974,"nodeType":"ExpressionStatement","src":"4713:40:17"}]}}]},"documentation":{"id":3944,"nodeType":"StructuredDocumentation","src":"4391:67:17","text":" @dev See {IERC721Enumerable-_beforeTokenTransfer}."},"id":3978,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"4470:20:17","nodeType":"FunctionDefinition","overrides":{"id":3952,"nodeType":"OverrideSpecifier","overrides":[],"src":"4567:8:17"},"parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"mutability":"mutable","name":"from","nameLocation":"4504:4:17","nodeType":"VariableDeclaration","scope":3978,"src":"4496:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3945,"name":"address","nodeType":"ElementaryTypeName","src":"4496:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"to","nameLocation":"4522:2:17","nodeType":"VariableDeclaration","scope":3978,"src":"4514:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"4514:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"tokenId","nameLocation":"4538:7:17","nodeType":"VariableDeclaration","scope":3978,"src":"4530:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4490:59:17"},"returnParameters":{"id":3953,"nodeType":"ParameterList","parameters":[],"src":"4576:0:17"},"scope":4072,"src":"4461:303:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4007,"nodeType":"Block","src":"4919:129:17","statements":[{"assignments":[3987],"declarations":[{"constant":false,"id":3987,"mutability":"mutable","name":"length","nameLocation":"4933:6:17","nodeType":"VariableDeclaration","scope":4007,"src":"4925:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"4925:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3992,"initialValue":{"arguments":[{"id":3990,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"4959:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3988,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"4942:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2991_$","typeString":"type(contract ERC721)"}},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2244,"src":"4942:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4942:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4925:37:17"},{"expression":{"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3993,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"4968:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3996,"indexExpression":{"id":3994,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"4981:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4968:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3997,"indexExpression":{"id":3995,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"4985:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4968:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3998,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"4995:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4968:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4000,"nodeType":"ExpressionStatement","src":"4968:34:17"},{"expression":{"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4001,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"5008:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4003,"indexExpression":{"id":4002,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"5026:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5008:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4004,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"5037:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5008:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4006,"nodeType":"ExpressionStatement","src":"5008:35:17"}]},"documentation":{"id":3979,"nodeType":"StructuredDocumentation","src":"4768:74:17","text":" @dev See {IERC721Enumerable-_addTokenToOwnerEnumeration}."},"id":4008,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToOwnerEnumeration","nameLocation":"4854:27:17","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3981,"mutability":"mutable","name":"to","nameLocation":"4890:2:17","nodeType":"VariableDeclaration","scope":4008,"src":"4882:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3980,"name":"address","nodeType":"ElementaryTypeName","src":"4882:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"tokenId","nameLocation":"4902:7:17","nodeType":"VariableDeclaration","scope":4008,"src":"4894:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"4894:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4881:29:17"},"returnParameters":{"id":3985,"nodeType":"ParameterList","parameters":[],"src":"4919:0:17"},"scope":4072,"src":"4845:203:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4070,"nodeType":"Block","src":"5215:829:17","statements":[{"assignments":[4017],"declarations":[{"constant":false,"id":4017,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"5392:14:17","nodeType":"VariableDeclaration","scope":4070,"src":"5384:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4016,"name":"uint256","nodeType":"ElementaryTypeName","src":"5384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4024,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4020,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"5426:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4018,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"5409:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2991_$","typeString":"type(contract ERC721)"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2244,"src":"5409:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5434:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5409:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5384:51:17"},{"assignments":[4026],"declarations":[{"constant":false,"id":4026,"mutability":"mutable","name":"tokenIndex","nameLocation":"5449:10:17","nodeType":"VariableDeclaration","scope":4070,"src":"5441:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4025,"name":"uint256","nodeType":"ElementaryTypeName","src":"5441:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4030,"initialValue":{"baseExpression":{"id":4027,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"5462:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4029,"indexExpression":{"id":4028,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"5480:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5462:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5441:47:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4031,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4026,"src":"5584:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4032,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5598:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5584:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4057,"nodeType":"IfStatement","src":"5580:301:17","trueBody":{"id":4056,"nodeType":"Block","src":"5614:267:17","statements":[{"assignments":[4035],"declarations":[{"constant":false,"id":4035,"mutability":"mutable","name":"lastTokenId","nameLocation":"5630:11:17","nodeType":"VariableDeclaration","scope":4056,"src":"5622:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4034,"name":"uint256","nodeType":"ElementaryTypeName","src":"5622:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4041,"initialValue":{"baseExpression":{"baseExpression":{"id":4036,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"5644:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4038,"indexExpression":{"id":4037,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"5657:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5644:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4040,"indexExpression":{"id":4039,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5663:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5644:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5622:56:17"},{"expression":{"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4042,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"5687:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4045,"indexExpression":{"id":4043,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"5700:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5687:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4046,"indexExpression":{"id":4044,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4026,"src":"5706:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5687:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4047,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"5720:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5687:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4049,"nodeType":"ExpressionStatement","src":"5687:44:17"},{"expression":{"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4050,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"5797:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4052,"indexExpression":{"id":4051,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"5815:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5797:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4053,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4026,"src":"5830:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5797:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4055,"nodeType":"ExpressionStatement","src":"5797:43:17"}]}},{"expression":{"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5959:33:17","subExpression":{"baseExpression":{"id":4058,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"5966:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4060,"indexExpression":{"id":4059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"5984:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5966:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4062,"nodeType":"ExpressionStatement","src":"5959:33:17"},{"expression":{"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5998:41:17","subExpression":{"baseExpression":{"baseExpression":{"id":4063,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"6005:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4065,"indexExpression":{"id":4064,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"6018:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6005:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4067,"indexExpression":{"id":4066,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"6024:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6005:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4069,"nodeType":"ExpressionStatement","src":"5998:41:17"}]},"documentation":{"id":4009,"nodeType":"StructuredDocumentation","src":"5052:79:17","text":" @dev See {IERC721Enumerable-_removeTokenFromOwnerEnumeration}."},"id":4071,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromOwnerEnumeration","nameLocation":"5143:32:17","nodeType":"FunctionDefinition","parameters":{"id":4014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"from","nameLocation":"5184:4:17","nodeType":"VariableDeclaration","scope":4071,"src":"5176:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4010,"name":"address","nodeType":"ElementaryTypeName","src":"5176:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4013,"mutability":"mutable","name":"tokenId","nameLocation":"5198:7:17","nodeType":"VariableDeclaration","scope":4071,"src":"5190:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4012,"name":"uint256","nodeType":"ElementaryTypeName","src":"5190:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5175:31:17"},"returnParameters":{"id":4015,"nodeType":"ParameterList","parameters":[],"src":"5215:0:17"},"scope":4072,"src":"5134:910:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4073,"src":"1065:4981:17","usedErrors":[]}],"src":"309:5738:17"},"id":17},"erc721a/contracts/ERC721A.sol":{"ast":{"absolutePath":"erc721a/contracts/ERC721A.sol","exportedSymbols":{"ERC721A":[5695],"ERC721A__IERC721Receiver":[4090],"IERC721A":[5901]},"id":5696,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4074,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"84:23:18"},{"absolutePath":"erc721a/contracts/IERC721A.sol","file":"./IERC721A.sol","id":4075,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5696,"sourceUnit":5902,"src":"109:24:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721A__IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":4076,"nodeType":"StructuredDocumentation","src":"135:51:18","text":" @dev Interface of ERC721 token receiver."},"fullyImplemented":false,"id":4090,"linearizedBaseContracts":[4090],"name":"ERC721A__IERC721Receiver","nameLocation":"197:24:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"150b7a02","id":4089,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"237:16:18","nodeType":"FunctionDefinition","parameters":{"id":4085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4078,"mutability":"mutable","name":"operator","nameLocation":"271:8:18","nodeType":"VariableDeclaration","scope":4089,"src":"263:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4077,"name":"address","nodeType":"ElementaryTypeName","src":"263:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4080,"mutability":"mutable","name":"from","nameLocation":"297:4:18","nodeType":"VariableDeclaration","scope":4089,"src":"289:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4079,"name":"address","nodeType":"ElementaryTypeName","src":"289:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4082,"mutability":"mutable","name":"tokenId","nameLocation":"319:7:18","nodeType":"VariableDeclaration","scope":4089,"src":"311:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4081,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4084,"mutability":"mutable","name":"data","nameLocation":"351:4:18","nodeType":"VariableDeclaration","scope":4089,"src":"336:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4083,"name":"bytes","nodeType":"ElementaryTypeName","src":"336:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"253:108:18"},"returnParameters":{"id":4088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4089,"src":"380:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4086,"name":"bytes4","nodeType":"ElementaryTypeName","src":"380:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"379:8:18"},"scope":4090,"src":"228:160:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5696,"src":"187:203:18","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":4092,"name":"IERC721A","nodeType":"IdentifierPath","referencedDeclaration":5901,"src":"915:8:18"},"id":4093,"nodeType":"InheritanceSpecifier","src":"915:8:18"}],"canonicalName":"ERC721A","contractDependencies":[],"contractKind":"contract","documentation":{"id":4091,"nodeType":"StructuredDocumentation","src":"392:502:18","text":" @title ERC721A\n @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n Non-Fungible Token Standard, including the Metadata extension.\n Optimized for lower gas during batch mints.\n Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n starting from `_startTokenId()`.\n Assumptions:\n - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256)."},"fullyImplemented":true,"id":5695,"linearizedBaseContracts":[5695,5901],"name":"ERC721A","nameLocation":"904:7:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ERC721A.TokenApprovalRef","id":4096,"members":[{"constant":false,"id":4095,"mutability":"mutable","name":"value","nameLocation":"1057:5:18","nodeType":"VariableDeclaration","scope":4096,"src":"1049:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4094,"name":"address","nodeType":"ElementaryTypeName","src":"1049:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"TokenApprovalRef","nameLocation":"1022:16:18","nodeType":"StructDefinition","scope":5695,"src":"1015:54:18","visibility":"public"},{"constant":true,"id":4104,"mutability":"constant","name":"_BITMASK_ADDRESS_DATA_ENTRY","nameLocation":"1330:27:18","nodeType":"VariableDeclaration","scope":5695,"src":"1305:68:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4097,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":4103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":4100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1361:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":4099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1366:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"1361:7:18","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":4101,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1360:9:18","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1372:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1360:13:18","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"visibility":"private"},{"constant":true,"id":4107,"mutability":"constant","name":"_BITPOS_NUMBER_MINTED","nameLocation":"1471:21:18","nodeType":"VariableDeclaration","scope":5695,"src":"1446:51:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1446:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3634","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1495:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"visibility":"private"},{"constant":true,"id":4110,"mutability":"constant","name":"_BITPOS_NUMBER_BURNED","nameLocation":"1595:21:18","nodeType":"VariableDeclaration","scope":5695,"src":"1570:52:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4108,"name":"uint256","nodeType":"ElementaryTypeName","src":"1570:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313238","id":4109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1619:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"visibility":"private"},{"constant":true,"id":4113,"mutability":"constant","name":"_BITPOS_AUX","nameLocation":"1711:11:18","nodeType":"VariableDeclaration","scope":5695,"src":"1686:42:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313932","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1725:3:18","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"visibility":"private"},{"constant":true,"id":4121,"mutability":"constant","name":"_BITMASK_AUX_COMPLEMENT","nameLocation":"1841:23:18","nodeType":"VariableDeclaration","scope":5695,"src":"1816:65:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512895_by_1","typeString":"int_const 6277...(50 digits omitted)...2895"},"id":4120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":4117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1868:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1873:3:18","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"1868:8:18","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}}],"id":4118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1867:10:18","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1867:14:18","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512895_by_1","typeString":"int_const 6277...(50 digits omitted)...2895"}},"visibility":"private"},{"constant":true,"id":4124,"mutability":"constant","name":"_BITPOS_START_TIMESTAMP","nameLocation":"1978:23:18","nodeType":"VariableDeclaration","scope":5695,"src":"1953:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4122,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313630","id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2004:3:18","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"visibility":"private"},{"constant":true,"id":4129,"mutability":"constant","name":"_BITMASK_BURNED","nameLocation":"2100:15:18","nodeType":"VariableDeclaration","scope":5695,"src":"2075:51:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4125,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"},"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323234","id":4127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2123:3:18","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"2118:8:18","typeDescriptions":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"}},"visibility":"private"},{"constant":true,"id":4132,"mutability":"constant","name":"_BITPOS_NEXT_INITIALIZED","nameLocation":"2232:24:18","nodeType":"VariableDeclaration","scope":5695,"src":"2207:55:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4130,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323235","id":4131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:3:18","typeDescriptions":{"typeIdentifier":"t_rational_225_by_1","typeString":"int_const 225"},"value":"225"},"visibility":"private"},{"constant":true,"id":4137,"mutability":"constant","name":"_BITMASK_NEXT_INITIALIZED","nameLocation":"2364:25:18","nodeType":"VariableDeclaration","scope":5695,"src":"2339:61:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4133,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_53919893334301279589334030174039261347274288845081144962207220498432_by_1","typeString":"int_const 5391...(60 digits omitted)...8432"},"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2392:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323235","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2397:3:18","typeDescriptions":{"typeIdentifier":"t_rational_225_by_1","typeString":"int_const 225"},"value":"225"},"src":"2392:8:18","typeDescriptions":{"typeIdentifier":"t_rational_53919893334301279589334030174039261347274288845081144962207220498432_by_1","typeString":"int_const 5391...(60 digits omitted)...8432"}},"visibility":"private"},{"constant":true,"id":4140,"mutability":"constant","name":"_BITPOS_EXTRA_DATA","nameLocation":"2492:18:18","nodeType":"VariableDeclaration","scope":5695,"src":"2467:49:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2467:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323332","id":4139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2513:3:18","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},"visibility":"private"},{"constant":true,"id":4148,"mutability":"constant","name":"_BITMASK_EXTRA_DATA_COMPLEMENT","nameLocation":"2634:30:18","nodeType":"VariableDeclaration","scope":5695,"src":"2609:72:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2609:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by_1","typeString":"int_const 6901...(62 digits omitted)...9295"},"id":4147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"},"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2668:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323332","id":4143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:3:18","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},"src":"2668:8:18","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"}}],"id":4145,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2667:10:18","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2680:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2667:14:18","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by_1","typeString":"int_const 6901...(62 digits omitted)...9295"}},"visibility":"private"},{"constant":true,"id":4156,"mutability":"constant","name":"_BITMASK_ADDRESS","nameLocation":"2766:16:18","nodeType":"VariableDeclaration","scope":5695,"src":"2741:58:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2741:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542975_by_1","typeString":"int_const 1461...(41 digits omitted)...2975"},"id":4155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"},"id":4152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2786:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":4151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2791:3:18","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2786:8:18","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}}],"id":4153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2785:10:18","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2798:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2785:14:18","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542975_by_1","typeString":"int_const 1461...(41 digits omitted)...2975"}},"visibility":"private"},{"constant":true,"id":4159,"mutability":"constant","name":"_MAX_MINT_ERC2309_QUANTITY_LIMIT","nameLocation":"3107:32:18","nodeType":"VariableDeclaration","scope":5695,"src":"3082:64:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3082:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35303030","id":4158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3142:4:18","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"visibility":"private"},{"constant":true,"id":4162,"mutability":"constant","name":"_TRANSFER_EVENT_SIGNATURE","nameLocation":"3293:25:18","nodeType":"VariableDeclaration","scope":5695,"src":"3268:127:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3268:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864646632353261643162653263383962363963326230363866633337386461613935326261376631363363346131313632386635356134646635323362336566","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3329:66:18","typeDescriptions":{"typeIdentifier":"t_rational_100389287136786176327247604509743168900146139575972864366142685224231313322991_by_1","typeString":"int_const 1003...(70 digits omitted)...2991"},"value":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"},"visibility":"private"},{"constant":false,"id":4164,"mutability":"mutable","name":"_currentIndex","nameLocation":"3638:13:18","nodeType":"VariableDeclaration","scope":5695,"src":"3622:29:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4166,"mutability":"mutable","name":"_burnCounter","nameLocation":"3710:12:18","nodeType":"VariableDeclaration","scope":5695,"src":"3694:28:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4165,"name":"uint256","nodeType":"ElementaryTypeName","src":"3694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4168,"mutability":"mutable","name":"_name","nameLocation":"3762:5:18","nodeType":"VariableDeclaration","scope":5695,"src":"3747:20:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4167,"name":"string","nodeType":"ElementaryTypeName","src":"3747:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":4170,"mutability":"mutable","name":"_symbol","nameLocation":"3809:7:18","nodeType":"VariableDeclaration","scope":5695,"src":"3794:22:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4169,"name":"string","nodeType":"ElementaryTypeName","src":"3794:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":4174,"mutability":"mutable","name":"_packedOwnerships","nameLocation":"4236:17:18","nodeType":"VariableDeclaration","scope":5695,"src":"4200:53:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":4173,"keyType":{"id":4171,"name":"uint256","nodeType":"ElementaryTypeName","src":"4208:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4200:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":4172,"name":"uint256","nodeType":"ElementaryTypeName","src":"4219:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":4178,"mutability":"mutable","name":"_packedAddressData","nameLocation":"4495:18:18","nodeType":"VariableDeclaration","scope":5695,"src":"4459:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4177,"keyType":{"id":4175,"name":"address","nodeType":"ElementaryTypeName","src":"4467:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4459:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4176,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":4183,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"4615:15:18","nodeType":"VariableDeclaration","scope":5695,"src":"4570:60:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$4096_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef)"},"typeName":{"id":4182,"keyType":{"id":4179,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4570:36:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$4096_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef)"},"valueType":{"id":4181,"nodeType":"UserDefinedTypeName","pathNode":{"id":4180,"name":"TokenApprovalRef","nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"4589:16:18"},"referencedDeclaration":4096,"src":"4589:16:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"}}},"visibility":"private"},{"constant":false,"id":4189,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"4738:18:18","nodeType":"VariableDeclaration","scope":5695,"src":"4685:71:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":4188,"keyType":{"id":4184,"name":"address","nodeType":"ElementaryTypeName","src":"4693:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4685:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":4187,"keyType":{"id":4185,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4704:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":4186,"name":"bool","nodeType":"ElementaryTypeName","src":"4723:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":4209,"nodeType":"Block","src":"5002:98:18","statements":[{"expression":{"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4196,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"5012:5:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4197,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5020:5:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5012:13:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4199,"nodeType":"ExpressionStatement","src":"5012:13:18"},{"expression":{"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4200,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"5035:7:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4201,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"5045:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5035:17:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4203,"nodeType":"ExpressionStatement","src":"5035:17:18"},{"expression":{"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4204,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"5062:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":4205,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"5078:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5078:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5062:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4208,"nodeType":"ExpressionStatement","src":"5062:31:18"}]},"id":4210,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4191,"mutability":"mutable","name":"name_","nameLocation":"4972:5:18","nodeType":"VariableDeclaration","scope":4210,"src":"4958:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4190,"name":"string","nodeType":"ElementaryTypeName","src":"4958:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"symbol_","nameLocation":"4993:7:18","nodeType":"VariableDeclaration","scope":4210,"src":"4979:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4192,"name":"string","nodeType":"ElementaryTypeName","src":"4979:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4957:44:18"},"returnParameters":{"id":4195,"nodeType":"ParameterList","parameters":[],"src":"5002:0:18"},"scope":5695,"src":"4946:154:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4218,"nodeType":"Block","src":"5491:25:18","statements":[{"expression":{"hexValue":"30","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5508:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4215,"id":4217,"nodeType":"Return","src":"5501:8:18"}]},"documentation":{"id":4211,"nodeType":"StructuredDocumentation","src":"5296:125:18","text":" @dev Returns the starting token ID.\n To change the starting token ID, please override this function."},"id":4219,"implemented":true,"kind":"function","modifiers":[],"name":"_startTokenId","nameLocation":"5435:13:18","nodeType":"FunctionDefinition","parameters":{"id":4212,"nodeType":"ParameterList","parameters":[],"src":"5448:2:18"},"returnParameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4219,"src":"5482:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4213,"name":"uint256","nodeType":"ElementaryTypeName","src":"5482:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5481:9:18"},"scope":5695,"src":"5426:90:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4227,"nodeType":"Block","src":"5654:37:18","statements":[{"expression":{"id":4225,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"5671:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4224,"id":4226,"nodeType":"Return","src":"5664:20:18"}]},"documentation":{"id":4220,"nodeType":"StructuredDocumentation","src":"5522:63:18","text":" @dev Returns the next token ID to be minted."},"id":4228,"implemented":true,"kind":"function","modifiers":[],"name":"_nextTokenId","nameLocation":"5599:12:18","nodeType":"FunctionDefinition","parameters":{"id":4221,"nodeType":"ParameterList","parameters":[],"src":"5611:2:18"},"returnParameters":{"id":4224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4228,"src":"5645:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4222,"name":"uint256","nodeType":"ElementaryTypeName","src":"5645:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5644:9:18"},"scope":5695,"src":"5590:101:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[5752],"body":{"id":4243,"nodeType":"Block","src":"5964:247:18","statements":[{"id":4242,"nodeType":"UncheckedBlock","src":"6117:88:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4235,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"6148:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4236,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"6164:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6148:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4238,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"6179:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6179:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6148:46:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4234,"id":4241,"nodeType":"Return","src":"6141:53:18"}]}]},"documentation":{"id":4229,"nodeType":"StructuredDocumentation","src":"5697:192:18","text":" @dev Returns the total number of tokens in existence.\n Burned tokens will reduce the count.\n To get the total number of tokens minted, please see {_totalMinted}."},"functionSelector":"18160ddd","id":4244,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"5903:11:18","nodeType":"FunctionDefinition","overrides":{"id":4231,"nodeType":"OverrideSpecifier","overrides":[],"src":"5937:8:18"},"parameters":{"id":4230,"nodeType":"ParameterList","parameters":[],"src":"5914:2:18"},"returnParameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4244,"src":"5955:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4232,"name":"uint256","nodeType":"ElementaryTypeName","src":"5955:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5954:9:18"},"scope":5695,"src":"5894:317:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4256,"nodeType":"Block","src":"6368:226:18","statements":[{"id":4255,"nodeType":"UncheckedBlock","src":"6515:73:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"6546:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4251,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"6562:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6562:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6546:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4249,"id":4254,"nodeType":"Return","src":"6539:38:18"}]}]},"documentation":{"id":4245,"nodeType":"StructuredDocumentation","src":"6217:82:18","text":" @dev Returns the total amount of tokens minted in the contract."},"id":4257,"implemented":true,"kind":"function","modifiers":[],"name":"_totalMinted","nameLocation":"6313:12:18","nodeType":"FunctionDefinition","parameters":{"id":4246,"nodeType":"ParameterList","parameters":[],"src":"6325:2:18"},"returnParameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4257,"src":"6359:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4247,"name":"uint256","nodeType":"ElementaryTypeName","src":"6359:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6358:9:18"},"scope":5695,"src":"6304:290:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4265,"nodeType":"Block","src":"6735:36:18","statements":[{"expression":{"id":4263,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"6752:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4262,"id":4264,"nodeType":"Return","src":"6745:19:18"}]},"documentation":{"id":4258,"nodeType":"StructuredDocumentation","src":"6600:66:18","text":" @dev Returns the total number of tokens burned."},"id":4266,"implemented":true,"kind":"function","modifiers":[],"name":"_totalBurned","nameLocation":"6680:12:18","nodeType":"FunctionDefinition","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[],"src":"6692:2:18"},"returnParameters":{"id":4262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"6726:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4260,"name":"uint256","nodeType":"ElementaryTypeName","src":"6726:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6725:9:18"},"scope":5695,"src":"6671:100:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[5795],"body":{"id":4291,"nodeType":"Block","src":"7126:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4275,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"7140:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7157:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7149:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4276,"name":"address","nodeType":"ElementaryTypeName","src":"7149:7:18","typeDescriptions":{}}},"id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7149:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7140:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4284,"nodeType":"IfStatement","src":"7136:60:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4281,"name":"BalanceQueryForZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5707,"src":"7168:26:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7168:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4283,"nodeType":"RevertStatement","src":"7161:35:18"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4285,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"7213:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4287,"indexExpression":{"id":4286,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"7232:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7213:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4288,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"7241:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7213:55:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4274,"id":4290,"nodeType":"Return","src":"7206:62:18"}]},"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"6966:74:18","text":" @dev Returns the number of tokens in `owner`'s account."},"functionSelector":"70a08231","id":4292,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"7054:9:18","nodeType":"FunctionDefinition","overrides":{"id":4271,"nodeType":"OverrideSpecifier","overrides":[],"src":"7099:8:18"},"parameters":{"id":4270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4269,"mutability":"mutable","name":"owner","nameLocation":"7072:5:18","nodeType":"VariableDeclaration","scope":4292,"src":"7064:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4268,"name":"address","nodeType":"ElementaryTypeName","src":"7064:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7063:15:18"},"returnParameters":{"id":4274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4292,"src":"7117:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4272,"name":"uint256","nodeType":"ElementaryTypeName","src":"7117:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7116:9:18"},"scope":5695,"src":"7045:230:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4309,"nodeType":"Block","src":"7422:106:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4300,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"7440:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4302,"indexExpression":{"id":4301,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"7459:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7440:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4303,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"7469:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7440:50:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7439:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4306,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"7494:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7439:82:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4299,"id":4308,"nodeType":"Return","src":"7432:89:18"}]},"documentation":{"id":4293,"nodeType":"StructuredDocumentation","src":"7281:66:18","text":" Returns the number of tokens minted by `owner`."},"id":4310,"implemented":true,"kind":"function","modifiers":[],"name":"_numberMinted","nameLocation":"7361:13:18","nodeType":"FunctionDefinition","parameters":{"id":4296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4295,"mutability":"mutable","name":"owner","nameLocation":"7383:5:18","nodeType":"VariableDeclaration","scope":4310,"src":"7375:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4294,"name":"address","nodeType":"ElementaryTypeName","src":"7375:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7374:15:18"},"returnParameters":{"id":4299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4310,"src":"7413:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4297,"name":"uint256","nodeType":"ElementaryTypeName","src":"7413:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7412:9:18"},"scope":5695,"src":"7352:176:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4327,"nodeType":"Block","src":"7691:106:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4318,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"7709:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4320,"indexExpression":{"id":4319,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"7728:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7709:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4321,"name":"_BITPOS_NUMBER_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"7738:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:50:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7708:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4324,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"7763:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7708:82:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4317,"id":4326,"nodeType":"Return","src":"7701:89:18"}]},"documentation":{"id":4311,"nodeType":"StructuredDocumentation","src":"7534:82:18","text":" Returns the number of tokens burned by or on behalf of `owner`."},"id":4328,"implemented":true,"kind":"function","modifiers":[],"name":"_numberBurned","nameLocation":"7630:13:18","nodeType":"FunctionDefinition","parameters":{"id":4314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4313,"mutability":"mutable","name":"owner","nameLocation":"7652:5:18","nodeType":"VariableDeclaration","scope":4328,"src":"7644:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4312,"name":"address","nodeType":"ElementaryTypeName","src":"7644:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7643:15:18"},"returnParameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4328,"src":"7682:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4315,"name":"uint256","nodeType":"ElementaryTypeName","src":"7682:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7681:9:18"},"scope":5695,"src":"7621:176:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4345,"nodeType":"Block","src":"7973:72:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4338,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"7997:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4340,"indexExpression":{"id":4339,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"8016:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7997:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4341,"name":"_BITPOS_AUX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"8026:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:40:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7990:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4336,"name":"uint64","nodeType":"ElementaryTypeName","src":"7990:6:18","typeDescriptions":{}}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7990:48:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4335,"id":4344,"nodeType":"Return","src":"7983:55:18"}]},"documentation":{"id":4329,"nodeType":"StructuredDocumentation","src":"7803:102:18","text":" Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used)."},"id":4346,"implemented":true,"kind":"function","modifiers":[],"name":"_getAux","nameLocation":"7919:7:18","nodeType":"FunctionDefinition","parameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4331,"mutability":"mutable","name":"owner","nameLocation":"7935:5:18","nodeType":"VariableDeclaration","scope":4346,"src":"7927:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4330,"name":"address","nodeType":"ElementaryTypeName","src":"7927:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7926:15:18"},"returnParameters":{"id":4335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4346,"src":"7965:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4333,"name":"uint64","nodeType":"ElementaryTypeName","src":"7965:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7964:8:18"},"scope":5695,"src":"7910:135:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4382,"nodeType":"Block","src":"8288:334:18","statements":[{"assignments":[4355],"declarations":[{"constant":false,"id":4355,"mutability":"mutable","name":"packed","nameLocation":"8306:6:18","nodeType":"VariableDeclaration","scope":4382,"src":"8298:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"8298:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4359,"initialValue":{"baseExpression":{"id":4356,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"8315:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4358,"indexExpression":{"id":4357,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"8334:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8315:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8298:42:18"},{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"auxCasted","nameLocation":"8358:9:18","nodeType":"VariableDeclaration","scope":4382,"src":"8350:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4360,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4362,"nodeType":"VariableDeclarationStatement","src":"8350:17:18"},{"AST":{"nodeType":"YulBlock","src":"8450:40:18","statements":[{"nodeType":"YulAssignment","src":"8464:16:18","value":{"name":"aux","nodeType":"YulIdentifier","src":"8477:3:18"},"variableNames":[{"name":"auxCasted","nodeType":"YulIdentifier","src":"8464:9:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4351,"isOffset":false,"isSlot":false,"src":"8477:3:18","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"8464:9:18","valueSize":1}],"id":4363,"nodeType":"InlineAssembly","src":"8441:49:18"},{"expression":{"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4364,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"8499:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4365,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"8509:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4366,"name":"_BITMASK_AUX_COMPLEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"8518:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8509:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4368,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8508:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4369,"name":"auxCasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"8546:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4370,"name":"_BITPOS_AUX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"8559:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8546:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4372,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8545:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8508:63:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8499:72:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4375,"nodeType":"ExpressionStatement","src":"8499:72:18"},{"expression":{"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4376,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"8581:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4378,"indexExpression":{"id":4377,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"8600:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8581:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4379,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"8609:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8581:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ExpressionStatement","src":"8581:34:18"}]},"documentation":{"id":4347,"nodeType":"StructuredDocumentation","src":"8051:171:18","text":" Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."},"id":4383,"implemented":true,"kind":"function","modifiers":[],"name":"_setAux","nameLocation":"8236:7:18","nodeType":"FunctionDefinition","parameters":{"id":4352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"owner","nameLocation":"8252:5:18","nodeType":"VariableDeclaration","scope":4383,"src":"8244:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4348,"name":"address","nodeType":"ElementaryTypeName","src":"8244:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4351,"mutability":"mutable","name":"aux","nameLocation":"8266:3:18","nodeType":"VariableDeclaration","scope":4383,"src":"8259:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4350,"name":"uint64","nodeType":"ElementaryTypeName","src":"8259:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8243:27:18"},"returnParameters":{"id":4353,"nodeType":"ParameterList","parameters":[],"src":"8288:0:18"},"scope":5695,"src":"8227:395:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[5760],"body":{"id":4404,"nodeType":"Block","src":"9246:539:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"9558:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783031666663396137","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9573:10:18","typeDescriptions":{"typeIdentifier":"t_rational_33540519_by_1","typeString":"int_const 33540519"},"value":"0x01ffc9a7"},"src":"9558:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4395,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"9634:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783830616335386364","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9649:10:18","typeDescriptions":{"typeIdentifier":"t_rational_2158778573_by_1","typeString":"int_const 2158778573"},"value":"0x80ac58cd"},"src":"9634:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9558:101:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4399,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"9710:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783562356531333966","id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9725:10:18","typeDescriptions":{"typeIdentifier":"t_rational_1532892063_by_1","typeString":"int_const 1532892063"},"value":"0x5b5e139f"},"src":"9710:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9558:177:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4391,"id":4403,"nodeType":"Return","src":"9539:196:18"}]},"documentation":{"id":4384,"nodeType":"StructuredDocumentation","src":"8809:341:18","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n to learn more about how these ids are created.\n This function call must use less than 30000 gas."},"functionSelector":"01ffc9a7","id":4405,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"9164:17:18","nodeType":"FunctionDefinition","overrides":{"id":4388,"nodeType":"OverrideSpecifier","overrides":[],"src":"9222:8:18"},"parameters":{"id":4387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4386,"mutability":"mutable","name":"interfaceId","nameLocation":"9189:11:18","nodeType":"VariableDeclaration","scope":4405,"src":"9182:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4385,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9182:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9181:20:18"},"returnParameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4405,"src":"9240:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4389,"name":"bool","nodeType":"ElementaryTypeName","src":"9240:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9239:6:18"},"scope":5695,"src":"9155:630:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[5875],"body":{"id":4414,"nodeType":"Block","src":"10108:29:18","statements":[{"expression":{"id":4412,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"10125:5:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4411,"id":4413,"nodeType":"Return","src":"10118:12:18"}]},"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"9976:58:18","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":4415,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"10048:4:18","nodeType":"FunctionDefinition","overrides":{"id":4408,"nodeType":"OverrideSpecifier","overrides":[],"src":"10075:8:18"},"parameters":{"id":4407,"nodeType":"ParameterList","parameters":[],"src":"10052:2:18"},"returnParameters":{"id":4411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4415,"src":"10093:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4409,"name":"string","nodeType":"ElementaryTypeName","src":"10093:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10092:15:18"},"scope":5695,"src":"10039:98:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[5881],"body":{"id":4424,"nodeType":"Block","src":"10279:31:18","statements":[{"expression":{"id":4422,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"10296:7:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4421,"id":4423,"nodeType":"Return","src":"10289:14:18"}]},"documentation":{"id":4416,"nodeType":"StructuredDocumentation","src":"10143:60:18","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":4425,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"10217:6:18","nodeType":"FunctionDefinition","overrides":{"id":4418,"nodeType":"OverrideSpecifier","overrides":[],"src":"10246:8:18"},"parameters":{"id":4417,"nodeType":"ParameterList","parameters":[],"src":"10223:2:18"},"returnParameters":{"id":4421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4425,"src":"10264:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4419,"name":"string","nodeType":"ElementaryTypeName","src":"10264:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10263:15:18"},"scope":5695,"src":"10208:102:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[5889],"body":{"id":4467,"nodeType":"Block","src":"10499:225:18","statements":[{"condition":{"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10513:17:18","subExpression":{"arguments":[{"id":4435,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"10522:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4434,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"10514:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10514:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4441,"nodeType":"IfStatement","src":"10509:59:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4438,"name":"URIQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"10539:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10539:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4440,"nodeType":"RevertStatement","src":"10532:36:18"}},{"assignments":[4443],"declarations":[{"constant":false,"id":4443,"mutability":"mutable","name":"baseURI","nameLocation":"10593:7:18","nodeType":"VariableDeclaration","scope":4467,"src":"10579:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4442,"name":"string","nodeType":"ElementaryTypeName","src":"10579:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4446,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4444,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"10603:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10603:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"10579:34:18"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4449,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"10636:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10630:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4447,"name":"bytes","nodeType":"ElementaryTypeName","src":"10630:5:18","typeDescriptions":{}}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10630:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10630:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10630:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10715:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10630:87:18","trueExpression":{"arguments":[{"arguments":[{"id":4458,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"10683:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"id":4460,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"10702:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4459,"name":"_toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"10692:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10692:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4456,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10666:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"10666:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10666:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10659:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4454,"name":"string","nodeType":"ElementaryTypeName","src":"10659:6:18","typeDescriptions":{}}},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10659:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4433,"id":4466,"nodeType":"Return","src":"10623:94:18"}]},"documentation":{"id":4426,"nodeType":"StructuredDocumentation","src":"10316:90:18","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":4468,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"10420:8:18","nodeType":"FunctionDefinition","overrides":{"id":4430,"nodeType":"OverrideSpecifier","overrides":[],"src":"10466:8:18"},"parameters":{"id":4429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4428,"mutability":"mutable","name":"tokenId","nameLocation":"10437:7:18","nodeType":"VariableDeclaration","scope":4468,"src":"10429:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4427,"name":"uint256","nodeType":"ElementaryTypeName","src":"10429:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10428:17:18"},"returnParameters":{"id":4433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4468,"src":"10484:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4431,"name":"string","nodeType":"ElementaryTypeName","src":"10484:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10483:15:18"},"scope":5695,"src":"10411:313:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4476,"nodeType":"Block","src":"11035:26:18","statements":[{"expression":{"hexValue":"","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11052:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":4473,"id":4475,"nodeType":"Return","src":"11045:9:18"}]},"documentation":{"id":4469,"nodeType":"StructuredDocumentation","src":"10730:234:18","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, it can be overridden in child contracts."},"id":4477,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"10978:8:18","nodeType":"FunctionDefinition","parameters":{"id":4470,"nodeType":"ParameterList","parameters":[],"src":"10986:2:18"},"returnParameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4477,"src":"11020:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4471,"name":"string","nodeType":"ElementaryTypeName","src":"11020:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11019:15:18"},"scope":5695,"src":"10969:92:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[5803],"body":{"id":4496,"nodeType":"Block","src":"11472:69:18","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4480,"src":"11524:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4490,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"11505:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11505:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11497:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4488,"name":"uint160","nodeType":"ElementaryTypeName","src":"11497:7:18","typeDescriptions":{}}},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11497:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4486,"name":"address","nodeType":"ElementaryTypeName","src":"11489:7:18","typeDescriptions":{}}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11489:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4485,"id":4495,"nodeType":"Return","src":"11482:52:18"}]},"documentation":{"id":4478,"nodeType":"StructuredDocumentation","src":"11255:131:18","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":4497,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"11400:7:18","nodeType":"FunctionDefinition","overrides":{"id":4482,"nodeType":"OverrideSpecifier","overrides":[],"src":"11445:8:18"},"parameters":{"id":4481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4480,"mutability":"mutable","name":"tokenId","nameLocation":"11416:7:18","nodeType":"VariableDeclaration","scope":4497,"src":"11408:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4479,"name":"uint256","nodeType":"ElementaryTypeName","src":"11408:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11407:17:18"},"returnParameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4497,"src":"11463:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4483,"name":"address","nodeType":"ElementaryTypeName","src":"11463:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11462:9:18"},"scope":5695,"src":"11391:150:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4512,"nodeType":"Block","src":"11817:71:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":4508,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11872:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4507,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"11853:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11853:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4506,"name":"_unpackedOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"11834:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_TokenOwnership_$5746_memory_ptr_$","typeString":"function (uint256) pure returns (struct IERC721A.TokenOwnership memory)"}},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11834:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"functionReturnParameters":4505,"id":4511,"nodeType":"Return","src":"11827:54:18"}]},"documentation":{"id":4498,"nodeType":"StructuredDocumentation","src":"11547:172:18","text":" @dev Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around over time."},"id":4513,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipOf","nameLocation":"11733:12:18","nodeType":"FunctionDefinition","parameters":{"id":4501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4500,"mutability":"mutable","name":"tokenId","nameLocation":"11754:7:18","nodeType":"VariableDeclaration","scope":4513,"src":"11746:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4499,"name":"uint256","nodeType":"ElementaryTypeName","src":"11746:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11745:17:18"},"returnParameters":{"id":4505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4513,"src":"11794:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":4503,"nodeType":"UserDefinedTypeName","pathNode":{"id":4502,"name":"TokenOwnership","nodeType":"IdentifierPath","referencedDeclaration":5746,"src":"11794:14:18"},"referencedDeclaration":5746,"src":"11794:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"11793:23:18"},"scope":5695,"src":"11724:164:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4528,"nodeType":"Block","src":"12070:68:18","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4523,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"12106:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4525,"indexExpression":{"id":4524,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"12124:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12106:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4522,"name":"_unpackedOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"12087:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_TokenOwnership_$5746_memory_ptr_$","typeString":"function (uint256) pure returns (struct IERC721A.TokenOwnership memory)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12087:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"functionReturnParameters":4521,"id":4527,"nodeType":"Return","src":"12080:51:18"}]},"documentation":{"id":4514,"nodeType":"StructuredDocumentation","src":"11894:80:18","text":" @dev Returns the unpacked `TokenOwnership` struct at `index`."},"id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipAt","nameLocation":"11988:12:18","nodeType":"FunctionDefinition","parameters":{"id":4517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4516,"mutability":"mutable","name":"index","nameLocation":"12009:5:18","nodeType":"VariableDeclaration","scope":4529,"src":"12001:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"12001:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12000:15:18"},"returnParameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"12047:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":4519,"nodeType":"UserDefinedTypeName","pathNode":{"id":4518,"name":"TokenOwnership","nodeType":"IdentifierPath","referencedDeclaration":5746,"src":"12047:14:18"},"referencedDeclaration":5746,"src":"12047:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"12046:23:18"},"scope":5695,"src":"11979:159:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4550,"nodeType":"Block","src":"12310:128:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4535,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"12324:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4537,"indexExpression":{"id":4536,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"12342:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12324:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12352:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12324:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4549,"nodeType":"IfStatement","src":"12320:112:18","trueBody":{"id":4548,"nodeType":"Block","src":"12355:77:18","statements":[{"expression":{"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4540,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"12369:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4542,"indexExpression":{"id":4541,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"12387:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12369:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4544,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"12415:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4543,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"12396:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12396:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12369:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4547,"nodeType":"ExpressionStatement","src":"12369:52:18"}]}}]},"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"12144:97:18","text":" @dev Initializes the ownership slot minted at `index` for efficiency purposes."},"id":4551,"implemented":true,"kind":"function","modifiers":[],"name":"_initializeOwnershipAt","nameLocation":"12255:22:18","nodeType":"FunctionDefinition","parameters":{"id":4533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"index","nameLocation":"12286:5:18","nodeType":"VariableDeclaration","scope":4551,"src":"12278:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4531,"name":"uint256","nodeType":"ElementaryTypeName","src":"12278:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12277:15:18"},"returnParameters":{"id":4534,"nodeType":"ParameterList","parameters":[],"src":"12310:0:18"},"scope":5695,"src":"12246:192:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4604,"nodeType":"Block","src":"12591:1173:18","statements":[{"assignments":[4560],"declarations":[{"constant":false,"id":4560,"mutability":"mutable","name":"curr","nameLocation":"12609:4:18","nodeType":"VariableDeclaration","scope":4604,"src":"12601:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4559,"name":"uint256","nodeType":"ElementaryTypeName","src":"12601:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4562,"initialValue":{"id":4561,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"12616:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12601:22:18"},{"id":4600,"nodeType":"UncheckedBlock","src":"12634:1076:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4563,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"12662:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12662:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4565,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"12681:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12662:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4599,"nodeType":"IfStatement","src":"12658:1042:18","trueBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4567,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"12707:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4568,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"12714:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12707:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4598,"nodeType":"IfStatement","src":"12703:997:18","trueBody":{"id":4597,"nodeType":"Block","src":"12729:971:18","statements":[{"assignments":[4571],"declarations":[{"constant":false,"id":4571,"mutability":"mutable","name":"packed","nameLocation":"12759:6:18","nodeType":"VariableDeclaration","scope":4597,"src":"12751:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4570,"name":"uint256","nodeType":"ElementaryTypeName","src":"12751:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4575,"initialValue":{"baseExpression":{"id":4572,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"12768:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4574,"indexExpression":{"id":4573,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"12786:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12768:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12751:40:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4576,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"12855:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4577,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"12864:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12855:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12855:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4596,"nodeType":"IfStatement","src":"12851:831:18","trueBody":{"id":4595,"nodeType":"Block","src":"12886:796:18","statements":[{"body":{"id":4591,"nodeType":"Block","src":"13530:91:18","statements":[{"expression":{"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4584,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"13560:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4585,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"13569:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4588,"indexExpression":{"id":4587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"13587:6:18","subExpression":{"id":4586,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"13589:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13569:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13560:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4590,"nodeType":"ExpressionStatement","src":"13560:34:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4581,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"13517:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13527:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13517:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4592,"nodeType":"WhileStatement","src":"13510:111:18"},{"expression":{"id":4593,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"13653:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4558,"id":4594,"nodeType":"Return","src":"13646:13:18"}]}}]}}}]},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4601,"name":"OwnerQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"13726:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13726:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4603,"nodeType":"RevertStatement","src":"13719:38:18"}]},"documentation":{"id":4552,"nodeType":"StructuredDocumentation","src":"12444:66:18","text":" Returns the packed ownership data of `tokenId`."},"id":4605,"implemented":true,"kind":"function","modifiers":[],"name":"_packedOwnershipOf","nameLocation":"12524:18:18","nodeType":"FunctionDefinition","parameters":{"id":4555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4554,"mutability":"mutable","name":"tokenId","nameLocation":"12551:7:18","nodeType":"VariableDeclaration","scope":4605,"src":"12543:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4553,"name":"uint256","nodeType":"ElementaryTypeName","src":"12543:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12542:17:18"},"returnParameters":{"id":4558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4605,"src":"12582:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4556,"name":"uint256","nodeType":"ElementaryTypeName","src":"12582:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12581:9:18"},"scope":5695,"src":"12515:1249:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4658,"nodeType":"Block","src":"13957:262:18","statements":[{"expression":{"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4614,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"13967:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":4616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":5739,"src":"13967:14:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":4621,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"14000:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13992:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4619,"name":"uint160","nodeType":"ElementaryTypeName","src":"13992:7:18","typeDescriptions":{}}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13992:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4617,"name":"address","nodeType":"ElementaryTypeName","src":"13984:7:18","typeDescriptions":{}}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13984:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13967:41:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4625,"nodeType":"ExpressionStatement","src":"13967:41:18"},{"expression":{"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4626,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"14018:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":4628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startTimestamp","nodeType":"MemberAccess","referencedDeclaration":5741,"src":"14018:24:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4631,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"14052:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4632,"name":"_BITPOS_START_TIMESTAMP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"14062:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14052:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14045:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4629,"name":"uint64","nodeType":"ElementaryTypeName","src":"14045:6:18","typeDescriptions":{}}},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14045:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"14018:68:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4636,"nodeType":"ExpressionStatement","src":"14018:68:18"},{"expression":{"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4637,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"14096:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":4639,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"burned","nodeType":"MemberAccess","referencedDeclaration":5743,"src":"14096:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4640,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"14115:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4641,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"14124:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14115:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14143:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14115:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14096:48:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4646,"nodeType":"ExpressionStatement","src":"14096:48:18"},{"expression":{"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4647,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"14154:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":4649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"extraData","nodeType":"MemberAccess","referencedDeclaration":5745,"src":"14154:19:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4652,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"14183:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4653,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"14193:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14183:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14176:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4650,"name":"uint24","nodeType":"ElementaryTypeName","src":"14176:6:18","typeDescriptions":{}}},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14176:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"14154:58:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":4657,"nodeType":"ExpressionStatement","src":"14154:58:18"}]},"documentation":{"id":4606,"nodeType":"StructuredDocumentation","src":"13770:83:18","text":" @dev Returns the unpacked `TokenOwnership` struct from `packed`."},"id":4659,"implemented":true,"kind":"function","modifiers":[],"name":"_unpackedOwnership","nameLocation":"13867:18:18","nodeType":"FunctionDefinition","parameters":{"id":4609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4608,"mutability":"mutable","name":"packed","nameLocation":"13894:6:18","nodeType":"VariableDeclaration","scope":4659,"src":"13886:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4607,"name":"uint256","nodeType":"ElementaryTypeName","src":"13886:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13885:16:18"},"returnParameters":{"id":4613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4612,"mutability":"mutable","name":"ownership","nameLocation":"13946:9:18","nodeType":"VariableDeclaration","scope":4659,"src":"13924:31:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":4611,"nodeType":"UserDefinedTypeName","pathNode":{"id":4610,"name":"TokenOwnership","nodeType":"IdentifierPath","referencedDeclaration":5746,"src":"13924:14:18"},"referencedDeclaration":5746,"src":"13924:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$5746_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"13923:33:18"},"scope":5695,"src":"13858:361:18","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4670,"nodeType":"Block","src":"14393:347:18","statements":[{"AST":{"nodeType":"YulBlock","src":"14412:322:18","statements":[{"nodeType":"YulAssignment","src":"14522:37:18","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"14535:5:18"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"14542:16:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14531:3:18"},"nodeType":"YulFunctionCall","src":"14531:28:18"},"variableNames":[{"name":"owner","nodeType":"YulIdentifier","src":"14522:5:18"}]},{"nodeType":"YulAssignment","src":"14651:73:18","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"14664:5:18"},{"arguments":[{"arguments":[{"name":"_BITPOS_START_TIMESTAMP","nodeType":"YulIdentifier","src":"14678:23:18"},{"arguments":[],"functionName":{"name":"timestamp","nodeType":"YulIdentifier","src":"14703:9:18"},"nodeType":"YulFunctionCall","src":"14703:11:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14674:3:18"},"nodeType":"YulFunctionCall","src":"14674:41:18"},{"name":"flags","nodeType":"YulIdentifier","src":"14717:5:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14671:2:18"},"nodeType":"YulFunctionCall","src":"14671:52:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14661:2:18"},"nodeType":"YulFunctionCall","src":"14661:63:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"14651:6:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4156,"isOffset":false,"isSlot":false,"src":"14542:16:18","valueSize":1},{"declaration":4124,"isOffset":false,"isSlot":false,"src":"14678:23:18","valueSize":1},{"declaration":4664,"isOffset":false,"isSlot":false,"src":"14717:5:18","valueSize":1},{"declaration":4662,"isOffset":false,"isSlot":false,"src":"14522:5:18","valueSize":1},{"declaration":4662,"isOffset":false,"isSlot":false,"src":"14535:5:18","valueSize":1},{"declaration":4662,"isOffset":false,"isSlot":false,"src":"14664:5:18","valueSize":1},{"declaration":4667,"isOffset":false,"isSlot":false,"src":"14651:6:18","valueSize":1}],"id":4669,"nodeType":"InlineAssembly","src":"14403:331:18"}]},"documentation":{"id":4660,"nodeType":"StructuredDocumentation","src":"14225:67:18","text":" @dev Packs ownership data into a single uint256."},"id":4671,"implemented":true,"kind":"function","modifiers":[],"name":"_packOwnershipData","nameLocation":"14306:18:18","nodeType":"FunctionDefinition","parameters":{"id":4665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"owner","nameLocation":"14333:5:18","nodeType":"VariableDeclaration","scope":4671,"src":"14325:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4661,"name":"address","nodeType":"ElementaryTypeName","src":"14325:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4664,"mutability":"mutable","name":"flags","nameLocation":"14348:5:18","nodeType":"VariableDeclaration","scope":4671,"src":"14340:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4663,"name":"uint256","nodeType":"ElementaryTypeName","src":"14340:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14324:30:18"},"returnParameters":{"id":4668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4667,"mutability":"mutable","name":"result","nameLocation":"14385:6:18","nodeType":"VariableDeclaration","scope":4671,"src":"14377:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4666,"name":"uint256","nodeType":"ElementaryTypeName","src":"14377:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14376:16:18"},"scope":5695,"src":"14297:443:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4680,"nodeType":"Block","src":"14923:232:18","statements":[{"AST":{"nodeType":"YulBlock","src":"15007:142:18","statements":[{"nodeType":"YulAssignment","src":"15083:56:18","value":{"arguments":[{"name":"_BITPOS_NEXT_INITIALIZED","nodeType":"YulIdentifier","src":"15097:24:18"},{"arguments":[{"name":"quantity","nodeType":"YulIdentifier","src":"15126:8:18"},{"kind":"number","nodeType":"YulLiteral","src":"15136:1:18","type":"","value":"1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15123:2:18"},"nodeType":"YulFunctionCall","src":"15123:15:18"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15093:3:18"},"nodeType":"YulFunctionCall","src":"15093:46:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15083:6:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4132,"isOffset":false,"isSlot":false,"src":"15097:24:18","valueSize":1},{"declaration":4674,"isOffset":false,"isSlot":false,"src":"15126:8:18","valueSize":1},{"declaration":4677,"isOffset":false,"isSlot":false,"src":"15083:6:18","valueSize":1}],"id":4679,"nodeType":"InlineAssembly","src":"14998:151:18"}]},"documentation":{"id":4672,"nodeType":"StructuredDocumentation","src":"14746:86:18","text":" @dev Returns the `nextInitialized` flag set if `quantity` equals 1."},"id":4681,"implemented":true,"kind":"function","modifiers":[],"name":"_nextInitializedFlag","nameLocation":"14846:20:18","nodeType":"FunctionDefinition","parameters":{"id":4675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4674,"mutability":"mutable","name":"quantity","nameLocation":"14875:8:18","nodeType":"VariableDeclaration","scope":4681,"src":"14867:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4673,"name":"uint256","nodeType":"ElementaryTypeName","src":"14867:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14866:18:18"},"returnParameters":{"id":4678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4677,"mutability":"mutable","name":"result","nameLocation":"14915:6:18","nodeType":"VariableDeclaration","scope":4681,"src":"14907:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4676,"name":"uint256","nodeType":"ElementaryTypeName","src":"14907:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14906:16:18"},"scope":5695,"src":"14837:318:18","stateMutability":"pure","virtual":false,"visibility":"private"},{"baseFunctions":[5843],"body":{"id":4725,"nodeType":"Block","src":"15890:320:18","statements":[{"assignments":[4691],"declarations":[{"constant":false,"id":4691,"mutability":"mutable","name":"owner","nameLocation":"15908:5:18","nodeType":"VariableDeclaration","scope":4725,"src":"15900:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4690,"name":"address","nodeType":"ElementaryTypeName","src":"15900:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4695,"initialValue":{"arguments":[{"id":4693,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"15924:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4692,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"15916:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15916:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"15900:32:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4696,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"15947:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15947:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4698,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"15970:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15947:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4711,"nodeType":"IfStatement","src":"15943:172:18","trueBody":{"condition":{"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15993:45:18","subExpression":{"arguments":[{"id":4701,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"16011:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4702,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"16018:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16018:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4700,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"15994:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15994:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4710,"nodeType":"IfStatement","src":"15989:126:18","trueBody":{"id":4709,"nodeType":"Block","src":"16040:75:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4706,"name":"ApprovalCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"16065:33:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16065:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4708,"nodeType":"RevertStatement","src":"16058:42:18"}]}}},{"expression":{"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4712,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"16125:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$4096_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":4714,"indexExpression":{"id":4713,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"16141:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16125:24:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"id":4715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"16125:30:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4716,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"16158:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16125:35:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4718,"nodeType":"ExpressionStatement","src":"16125:35:18"},{"eventCall":{"arguments":[{"id":4720,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"16184:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4721,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"16191:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"16195:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4719,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"16175:8:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16175:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4724,"nodeType":"EmitStatement","src":"16170:33:18"}]},"documentation":{"id":4682,"nodeType":"StructuredDocumentation","src":"15348:459:18","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the\n zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":4726,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"15821:7:18","nodeType":"FunctionDefinition","overrides":{"id":4688,"nodeType":"OverrideSpecifier","overrides":[],"src":"15881:8:18"},"parameters":{"id":4687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"to","nameLocation":"15837:2:18","nodeType":"VariableDeclaration","scope":4726,"src":"15829:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4683,"name":"address","nodeType":"ElementaryTypeName","src":"15829:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4686,"mutability":"mutable","name":"tokenId","nameLocation":"15849:7:18","nodeType":"VariableDeclaration","scope":4726,"src":"15841:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4685,"name":"uint256","nodeType":"ElementaryTypeName","src":"15841:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15828:29:18"},"returnParameters":{"id":4689,"nodeType":"ParameterList","parameters":[],"src":"15890:0:18"},"scope":5695,"src":"15812:398:18","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[5859],"body":{"id":4748,"nodeType":"Block","src":"16445:129:18","statements":[{"condition":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16459:17:18","subExpression":{"arguments":[{"id":4736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"16468:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4735,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"16460:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16460:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4742,"nodeType":"IfStatement","src":"16455:64:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4739,"name":"ApprovalQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"16485:32:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16485:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4741,"nodeType":"RevertStatement","src":"16478:41:18"}},{"expression":{"expression":{"baseExpression":{"id":4743,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"16537:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$4096_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":4745,"indexExpression":{"id":4744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"16553:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16537:24:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"id":4746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"16537:30:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4734,"id":4747,"nodeType":"Return","src":"16530:37:18"}]},"documentation":{"id":4727,"nodeType":"StructuredDocumentation","src":"16216:139:18","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":4749,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"16369:11:18","nodeType":"FunctionDefinition","overrides":{"id":4731,"nodeType":"OverrideSpecifier","overrides":[],"src":"16418:8:18"},"parameters":{"id":4730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4729,"mutability":"mutable","name":"tokenId","nameLocation":"16389:7:18","nodeType":"VariableDeclaration","scope":4749,"src":"16381:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4728,"name":"uint256","nodeType":"ElementaryTypeName","src":"16381:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16380:17:18"},"returnParameters":{"id":4734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4749,"src":"16436:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4732,"name":"address","nodeType":"ElementaryTypeName","src":"16436:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16435:9:18"},"scope":5695,"src":"16360:214:18","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[5851],"body":{"id":4774,"nodeType":"Block","src":"16985:147:18","statements":[{"expression":{"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4758,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"16995:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4762,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4759,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"17014:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17014:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16995:39:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4763,"indexExpression":{"id":4761,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"17035:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16995:49:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4764,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"17047:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16995:60:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4766,"nodeType":"ExpressionStatement","src":"16995:60:18"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4768,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"17085:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17085:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4770,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"17106:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4771,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"17116:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4767,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"17070:14:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17070:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4773,"nodeType":"EmitStatement","src":"17065:60:18"}]},"documentation":{"id":4750,"nodeType":"StructuredDocumentation","src":"16580:316:18","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom}\n for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":4775,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"16910:17:18","nodeType":"FunctionDefinition","overrides":{"id":4756,"nodeType":"OverrideSpecifier","overrides":[],"src":"16976:8:18"},"parameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"operator","nameLocation":"16936:8:18","nodeType":"VariableDeclaration","scope":4775,"src":"16928:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4751,"name":"address","nodeType":"ElementaryTypeName","src":"16928:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"approved","nameLocation":"16951:8:18","nodeType":"VariableDeclaration","scope":4775,"src":"16946:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4753,"name":"bool","nodeType":"ElementaryTypeName","src":"16946:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16927:33:18"},"returnParameters":{"id":4757,"nodeType":"ParameterList","parameters":[],"src":"16985:0:18"},"scope":5695,"src":"16901:231:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[5869],"body":{"id":4792,"nodeType":"Block","src":"17385:59:18","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4786,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"17402:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":4788,"indexExpression":{"id":4787,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"17421:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17402:25:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4790,"indexExpression":{"id":4789,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"17428:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17402:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4785,"id":4791,"nodeType":"Return","src":"17395:42:18"}]},"documentation":{"id":4776,"nodeType":"StructuredDocumentation","src":"17138:139:18","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":4793,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"17291:16:18","nodeType":"FunctionDefinition","overrides":{"id":4782,"nodeType":"OverrideSpecifier","overrides":[],"src":"17361:8:18"},"parameters":{"id":4781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4778,"mutability":"mutable","name":"owner","nameLocation":"17316:5:18","nodeType":"VariableDeclaration","scope":4793,"src":"17308:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4777,"name":"address","nodeType":"ElementaryTypeName","src":"17308:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4780,"mutability":"mutable","name":"operator","nameLocation":"17331:8:18","nodeType":"VariableDeclaration","scope":4793,"src":"17323:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4779,"name":"address","nodeType":"ElementaryTypeName","src":"17323:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17307:33:18"},"returnParameters":{"id":4785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4793,"src":"17379:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4783,"name":"bool","nodeType":"ElementaryTypeName","src":"17379:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17378:6:18"},"scope":5695,"src":"17282:162:18","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4818,"nodeType":"Block","src":"17764:206:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4801,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"17793:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17793:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4803,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"17812:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17793:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4805,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"17835:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4806,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"17845:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17835:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17793:65:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4809,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"17895:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4811,"indexExpression":{"id":4810,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"17913:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17895:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4812,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"17924:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17895:44:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17943:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17895:49:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17793:151:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4800,"id":4817,"nodeType":"Return","src":"17774:170:18"}]},"documentation":{"id":4794,"nodeType":"StructuredDocumentation","src":"17450:238:18","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted. See {_mint}."},"id":4819,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"17702:7:18","nodeType":"FunctionDefinition","parameters":{"id":4797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4796,"mutability":"mutable","name":"tokenId","nameLocation":"17718:7:18","nodeType":"VariableDeclaration","scope":4819,"src":"17710:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"17710:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17709:17:18"},"returnParameters":{"id":4800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4819,"src":"17758:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4798,"name":"bool","nodeType":"ElementaryTypeName","src":"17758:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17757:6:18"},"scope":5695,"src":"17693:277:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4832,"nodeType":"Block","src":"18232:488:18","statements":[{"AST":{"nodeType":"YulBlock","src":"18251:463:18","statements":[{"nodeType":"YulAssignment","src":"18361:37:18","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"18374:5:18"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"18381:16:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18370:3:18"},"nodeType":"YulFunctionCall","src":"18370:28:18"},"variableNames":[{"name":"owner","nodeType":"YulIdentifier","src":"18361:5:18"}]},{"nodeType":"YulAssignment","src":"18511:45:18","value":{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18528:9:18"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"18539:16:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18524:3:18"},"nodeType":"YulFunctionCall","src":"18524:32:18"},"variableNames":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18511:9:18"}]},{"nodeType":"YulAssignment","src":"18638:66:18","value":{"arguments":[{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18654:9:18"},{"name":"owner","nodeType":"YulIdentifier","src":"18665:5:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18651:2:18"},"nodeType":"YulFunctionCall","src":"18651:20:18"},{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18676:9:18"},{"name":"approvedAddress","nodeType":"YulIdentifier","src":"18687:15:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18673:2:18"},"nodeType":"YulFunctionCall","src":"18673:30:18"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18648:2:18"},"nodeType":"YulFunctionCall","src":"18648:56:18"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18638:6:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4156,"isOffset":false,"isSlot":false,"src":"18381:16:18","valueSize":1},{"declaration":4156,"isOffset":false,"isSlot":false,"src":"18539:16:18","valueSize":1},{"declaration":4822,"isOffset":false,"isSlot":false,"src":"18687:15:18","valueSize":1},{"declaration":4826,"isOffset":false,"isSlot":false,"src":"18511:9:18","valueSize":1},{"declaration":4826,"isOffset":false,"isSlot":false,"src":"18528:9:18","valueSize":1},{"declaration":4826,"isOffset":false,"isSlot":false,"src":"18654:9:18","valueSize":1},{"declaration":4826,"isOffset":false,"isSlot":false,"src":"18676:9:18","valueSize":1},{"declaration":4824,"isOffset":false,"isSlot":false,"src":"18361:5:18","valueSize":1},{"declaration":4824,"isOffset":false,"isSlot":false,"src":"18374:5:18","valueSize":1},{"declaration":4824,"isOffset":false,"isSlot":false,"src":"18665:5:18","valueSize":1},{"declaration":4829,"isOffset":false,"isSlot":false,"src":"18638:6:18","valueSize":1}],"id":4831,"nodeType":"InlineAssembly","src":"18242:472:18"}]},"documentation":{"id":4820,"nodeType":"StructuredDocumentation","src":"17976:93:18","text":" @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`."},"id":4833,"implemented":true,"kind":"function","modifiers":[],"name":"_isSenderApprovedOrOwner","nameLocation":"18083:24:18","nodeType":"FunctionDefinition","parameters":{"id":4827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4822,"mutability":"mutable","name":"approvedAddress","nameLocation":"18125:15:18","nodeType":"VariableDeclaration","scope":4833,"src":"18117:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4821,"name":"address","nodeType":"ElementaryTypeName","src":"18117:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4824,"mutability":"mutable","name":"owner","nameLocation":"18158:5:18","nodeType":"VariableDeclaration","scope":4833,"src":"18150:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4823,"name":"address","nodeType":"ElementaryTypeName","src":"18150:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4826,"mutability":"mutable","name":"msgSender","nameLocation":"18181:9:18","nodeType":"VariableDeclaration","scope":4833,"src":"18173:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4825,"name":"address","nodeType":"ElementaryTypeName","src":"18173:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18107:89:18"},"returnParameters":{"id":4830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4829,"mutability":"mutable","name":"result","nameLocation":"18224:6:18","nodeType":"VariableDeclaration","scope":4833,"src":"18219:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4828,"name":"bool","nodeType":"ElementaryTypeName","src":"18219:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18218:13:18"},"scope":5695,"src":"18074:646:18","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4851,"nodeType":"Block","src":"18985:317:18","statements":[{"assignments":[4845],"declarations":[{"constant":false,"id":4845,"mutability":"mutable","name":"tokenApproval","nameLocation":"19020:13:18","nodeType":"VariableDeclaration","scope":4851,"src":"18995:38:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"},"typeName":{"id":4844,"nodeType":"UserDefinedTypeName","pathNode":{"id":4843,"name":"TokenApprovalRef","nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"18995:16:18"},"referencedDeclaration":4096,"src":"18995:16:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"}},"visibility":"internal"}],"id":4849,"initialValue":{"baseExpression":{"id":4846,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"19036:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$4096_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":4848,"indexExpression":{"id":4847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4836,"src":"19052:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19036:24:18","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$4096_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18995:65:18"},{"AST":{"nodeType":"YulBlock","src":"19173:123:18","statements":[{"nodeType":"YulAssignment","src":"19187:41:18","value":{"name":"tokenApproval.slot","nodeType":"YulIdentifier","src":"19210:18:18"},"variableNames":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"19187:19:18"}]},{"nodeType":"YulAssignment","src":"19241:45:18","value":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"19266:19:18"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"19260:5:18"},"nodeType":"YulFunctionCall","src":"19260:26:18"},"variableNames":[{"name":"approvedAddress","nodeType":"YulIdentifier","src":"19241:15:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4841,"isOffset":false,"isSlot":false,"src":"19241:15:18","valueSize":1},{"declaration":4839,"isOffset":false,"isSlot":false,"src":"19187:19:18","valueSize":1},{"declaration":4839,"isOffset":false,"isSlot":false,"src":"19266:19:18","valueSize":1},{"declaration":4845,"isOffset":false,"isSlot":true,"src":"19210:18:18","suffix":"slot","valueSize":1}],"id":4850,"nodeType":"InlineAssembly","src":"19164:132:18"}]},"documentation":{"id":4834,"nodeType":"StructuredDocumentation","src":"18726:97:18","text":" @dev Returns the storage slot and value for the approved address of `tokenId`."},"id":4852,"implemented":true,"kind":"function","modifiers":[],"name":"_getApprovedSlotAndAddress","nameLocation":"18837:26:18","nodeType":"FunctionDefinition","parameters":{"id":4837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4836,"mutability":"mutable","name":"tokenId","nameLocation":"18872:7:18","nodeType":"VariableDeclaration","scope":4852,"src":"18864:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4835,"name":"uint256","nodeType":"ElementaryTypeName","src":"18864:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18863:17:18"},"returnParameters":{"id":4842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"18935:19:18","nodeType":"VariableDeclaration","scope":4852,"src":"18927:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4838,"name":"uint256","nodeType":"ElementaryTypeName","src":"18927:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4841,"mutability":"mutable","name":"approvedAddress","nameLocation":"18964:15:18","nodeType":"VariableDeclaration","scope":4852,"src":"18956:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4840,"name":"address","nodeType":"ElementaryTypeName","src":"18956:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18926:54:18"},"scope":5695,"src":"18828:474:18","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[5835],"body":{"id":4996,"nodeType":"Block","src":"20030:2637:18","statements":[{"assignments":[4864],"declarations":[{"constant":false,"id":4864,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"20048:19:18","nodeType":"VariableDeclaration","scope":4996,"src":"20040:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4863,"name":"uint256","nodeType":"ElementaryTypeName","src":"20040:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4868,"initialValue":{"arguments":[{"id":4866,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"20089:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4865,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"20070:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20070:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20040:57:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4873,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"20128:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20120:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4871,"name":"uint160","nodeType":"ElementaryTypeName","src":"20120:7:18","typeDescriptions":{}}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20120:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20112:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4869,"name":"address","nodeType":"ElementaryTypeName","src":"20112:7:18","typeDescriptions":{}}},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20112:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4876,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"20153:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20112:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4881,"nodeType":"IfStatement","src":"20108:86:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4878,"name":"TransferFromIncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"20166:26:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20166:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4880,"nodeType":"RevertStatement","src":"20159:35:18"}},{"assignments":[4883,4885],"declarations":[{"constant":false,"id":4883,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"20214:19:18","nodeType":"VariableDeclaration","scope":4996,"src":"20206:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4882,"name":"uint256","nodeType":"ElementaryTypeName","src":"20206:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4885,"mutability":"mutable","name":"approvedAddress","nameLocation":"20243:15:18","nodeType":"VariableDeclaration","scope":4996,"src":"20235:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4884,"name":"address","nodeType":"ElementaryTypeName","src":"20235:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4889,"initialValue":{"arguments":[{"id":4887,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"20289:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4886,"name":"_getApprovedSlotAndAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"20262:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_address_$","typeString":"function (uint256) view returns (uint256,address)"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20262:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"nodeType":"VariableDeclarationStatement","src":"20205:92:18"},{"condition":{"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"20393:69:18","subExpression":{"arguments":[{"id":4891,"name":"approvedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"20419:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4892,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"20436:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4893,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"20442:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20442:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4890,"name":"_isSenderApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"20394:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) pure returns (bool)"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20394:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4907,"nodeType":"IfStatement","src":"20389:179:18","trueBody":{"condition":{"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"20480:44:18","subExpression":{"arguments":[{"id":4898,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"20498:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4899,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"20504:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20504:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4897,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"20481:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20481:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4906,"nodeType":"IfStatement","src":"20476:92:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4903,"name":"TransferCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"20533:33:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20533:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4905,"nodeType":"RevertStatement","src":"20526:42:18"}}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4908,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"20583:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20597:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20589:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4909,"name":"address","nodeType":"ElementaryTypeName","src":"20589:7:18","typeDescriptions":{}}},"id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20589:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20583:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4917,"nodeType":"IfStatement","src":"20579:52:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4914,"name":"TransferToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5728,"src":"20608:21:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20608:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4916,"nodeType":"RevertStatement","src":"20601:30:18"}},{"expression":{"arguments":[{"id":4919,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"20664:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"20670:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4921,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"20674:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20683:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4918,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"20642:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20642:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4924,"nodeType":"ExpressionStatement","src":"20642:43:18"},{"AST":{"nodeType":"YulBlock","src":"20757:181:18","statements":[{"body":{"nodeType":"YulBlock","src":"20790:138:18","statements":[{"expression":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"20891:19:18"},{"kind":"number","nodeType":"YulLiteral","src":"20912:1:18","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20884:6:18"},"nodeType":"YulFunctionCall","src":"20884:30:18"},"nodeType":"YulExpressionStatement","src":"20884:30:18"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"20774:15:18"},"nodeType":"YulIf","src":"20771:157:18"}]},"evmVersion":"london","externalReferences":[{"declaration":4885,"isOffset":false,"isSlot":false,"src":"20774:15:18","valueSize":1},{"declaration":4883,"isOffset":false,"isSlot":false,"src":"20891:19:18","valueSize":1}],"id":4925,"nodeType":"InlineAssembly","src":"20748:190:18"},{"id":4982,"nodeType":"UncheckedBlock","src":"21205:1361:18","statements":[{"expression":{"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"21298:26:18","subExpression":{"baseExpression":{"id":4926,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"21300:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4928,"indexExpression":{"id":4927,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"21319:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21300:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4930,"nodeType":"ExpressionStatement","src":"21298:26:18"},{"expression":{"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21366:24:18","subExpression":{"baseExpression":{"id":4931,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"21368:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4933,"indexExpression":{"id":4932,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"21387:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21368:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4935,"nodeType":"ExpressionStatement","src":"21366:24:18"},{"expression":{"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4936,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"21654:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4938,"indexExpression":{"id":4937,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"21672:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21654:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4940,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"21719:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4941,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"21739:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":4943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"21782:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"21788:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4945,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"21792:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4942,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"21767:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":4946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21767:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21739:73:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4939,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4671,"src":"21683:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21683:143:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21654:172:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4950,"nodeType":"ExpressionStatement","src":"21654:172:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4951,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"21943:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4952,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"21965:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21943:47:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21994:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21943:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4981,"nodeType":"IfStatement","src":"21939:617:18","trueBody":{"id":4980,"nodeType":"Block","src":"21997:559:18","statements":[{"assignments":[4957],"declarations":[{"constant":false,"id":4957,"mutability":"mutable","name":"nextTokenId","nameLocation":"22023:11:18","nodeType":"VariableDeclaration","scope":4980,"src":"22015:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"22015:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4961,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4958,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"22037:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22047:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22037:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22015:33:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4962,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"22168:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4964,"indexExpression":{"id":4963,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"22186:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22168:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22202:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22168:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4979,"nodeType":"IfStatement","src":"22164:378:18","trueBody":{"id":4978,"nodeType":"Block","src":"22205:337:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4967,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"22289:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4968,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"22304:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22289:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4977,"nodeType":"IfStatement","src":"22285:239:18","trueBody":{"id":4976,"nodeType":"Block","src":"22319:205:18","statements":[{"expression":{"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4970,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"22449:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4972,"indexExpression":{"id":4971,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"22467:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"22449:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4973,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"22482:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22449:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4975,"nodeType":"ExpressionStatement","src":"22449:52:18"}]}}]}}]}}]},{"eventCall":{"arguments":[{"id":4984,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"22590:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4985,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"22596:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4986,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"22600:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4983,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"22581:8:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22581:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4988,"nodeType":"EmitStatement","src":"22576:32:18"},{"expression":{"arguments":[{"id":4990,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"22639:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4991,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"22645:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4992,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"22649:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22658:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4989,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22618:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22618:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4995,"nodeType":"ExpressionStatement","src":"22618:42:18"}]},"documentation":{"id":4853,"nodeType":"StructuredDocumentation","src":"19495:403:18","text":" @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":4997,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"19912:12:18","nodeType":"FunctionDefinition","overrides":{"id":4861,"nodeType":"OverrideSpecifier","overrides":[],"src":"20021:8:18"},"parameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4855,"mutability":"mutable","name":"from","nameLocation":"19942:4:18","nodeType":"VariableDeclaration","scope":4997,"src":"19934:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4854,"name":"address","nodeType":"ElementaryTypeName","src":"19934:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4857,"mutability":"mutable","name":"to","nameLocation":"19964:2:18","nodeType":"VariableDeclaration","scope":4997,"src":"19956:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4856,"name":"address","nodeType":"ElementaryTypeName","src":"19956:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4859,"mutability":"mutable","name":"tokenId","nameLocation":"19984:7:18","nodeType":"VariableDeclaration","scope":4997,"src":"19976:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4858,"name":"uint256","nodeType":"ElementaryTypeName","src":"19976:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19924:73:18"},"returnParameters":{"id":4862,"nodeType":"ParameterList","parameters":[],"src":"20030:0:18"},"scope":5695,"src":"19903:2764:18","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[5825],"body":{"id":5015,"nodeType":"Block","src":"22889:56:18","statements":[{"expression":{"arguments":[{"id":5009,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"22916:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5010,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"22922:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5011,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"22926:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":5012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22935:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5008,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[5016,5054],"referencedDeclaration":5054,"src":"22899:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22899:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5014,"nodeType":"ExpressionStatement","src":"22899:39:18"}]},"documentation":{"id":4998,"nodeType":"StructuredDocumentation","src":"22673:80:18","text":" @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"functionSelector":"42842e0e","id":5016,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"22767:16:18","nodeType":"FunctionDefinition","overrides":{"id":5006,"nodeType":"OverrideSpecifier","overrides":[],"src":"22880:8:18"},"parameters":{"id":5005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"from","nameLocation":"22801:4:18","nodeType":"VariableDeclaration","scope":5016,"src":"22793:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4999,"name":"address","nodeType":"ElementaryTypeName","src":"22793:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5002,"mutability":"mutable","name":"to","nameLocation":"22823:2:18","nodeType":"VariableDeclaration","scope":5016,"src":"22815:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5001,"name":"address","nodeType":"ElementaryTypeName","src":"22815:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5004,"mutability":"mutable","name":"tokenId","nameLocation":"22843:7:18","nodeType":"VariableDeclaration","scope":5016,"src":"22835:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5003,"name":"uint256","nodeType":"ElementaryTypeName","src":"22835:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22783:73:18"},"returnParameters":{"id":5007,"nodeType":"ParameterList","parameters":[],"src":"22889:0:18"},"scope":5695,"src":"22758:187:18","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[5815],"body":{"id":5053,"nodeType":"Block","src":"23685:237:18","statements":[{"expression":{"arguments":[{"id":5030,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"23708:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5031,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"23714:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5032,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"23718:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5029,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"23695:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23695:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5034,"nodeType":"ExpressionStatement","src":"23695:31:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5035,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"23740:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"23740:7:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"23740:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23758:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23740:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5052,"nodeType":"IfStatement","src":"23736:180:18","trueBody":{"condition":{"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"23777:57:18","subExpression":{"arguments":[{"id":5041,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"23809:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5042,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"23815:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5043,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"23819:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5044,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"23828:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5040,"name":"_checkContractOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"23778:30:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23778:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5051,"nodeType":"IfStatement","src":"23773:143:18","trueBody":{"id":5050,"nodeType":"Block","src":"23836:80:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5047,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"23861:38:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23861:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5049,"nodeType":"RevertStatement","src":"23854:47:18"}]}}}]},"documentation":{"id":5017,"nodeType":"StructuredDocumentation","src":"22951:570:18","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":5054,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"23535:16:18","nodeType":"FunctionDefinition","overrides":{"id":5027,"nodeType":"OverrideSpecifier","overrides":[],"src":"23676:8:18"},"parameters":{"id":5026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5019,"mutability":"mutable","name":"from","nameLocation":"23569:4:18","nodeType":"VariableDeclaration","scope":5054,"src":"23561:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5018,"name":"address","nodeType":"ElementaryTypeName","src":"23561:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5021,"mutability":"mutable","name":"to","nameLocation":"23591:2:18","nodeType":"VariableDeclaration","scope":5054,"src":"23583:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5020,"name":"address","nodeType":"ElementaryTypeName","src":"23583:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5023,"mutability":"mutable","name":"tokenId","nameLocation":"23611:7:18","nodeType":"VariableDeclaration","scope":5054,"src":"23603:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5022,"name":"uint256","nodeType":"ElementaryTypeName","src":"23603:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5025,"mutability":"mutable","name":"_data","nameLocation":"23641:5:18","nodeType":"VariableDeclaration","scope":5054,"src":"23628:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5024,"name":"bytes","nodeType":"ElementaryTypeName","src":"23628:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23551:101:18"},"returnParameters":{"id":5028,"nodeType":"ParameterList","parameters":[],"src":"23685:0:18"},"scope":5695,"src":"23526:396:18","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":5066,"nodeType":"Block","src":"24718:2:18","statements":[]},"documentation":{"id":5055,"nodeType":"StructuredDocumentation","src":"23928:633:18","text":" @dev Hook that is called before a set of serially-ordered token IDs\n are about to be transferred. This includes minting.\n And also called before burning one token.\n `startTokenId` - the first token ID to be transferred.\n `quantity` - the amount to be transferred.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."},"id":5067,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfers","nameLocation":"24575:21:18","nodeType":"FunctionDefinition","parameters":{"id":5064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5057,"mutability":"mutable","name":"from","nameLocation":"24614:4:18","nodeType":"VariableDeclaration","scope":5067,"src":"24606:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5056,"name":"address","nodeType":"ElementaryTypeName","src":"24606:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5059,"mutability":"mutable","name":"to","nameLocation":"24636:2:18","nodeType":"VariableDeclaration","scope":5067,"src":"24628:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5058,"name":"address","nodeType":"ElementaryTypeName","src":"24628:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5061,"mutability":"mutable","name":"startTokenId","nameLocation":"24656:12:18","nodeType":"VariableDeclaration","scope":5067,"src":"24648:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5060,"name":"uint256","nodeType":"ElementaryTypeName","src":"24648:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5063,"mutability":"mutable","name":"quantity","nameLocation":"24686:8:18","nodeType":"VariableDeclaration","scope":5067,"src":"24678:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5062,"name":"uint256","nodeType":"ElementaryTypeName","src":"24678:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24596:104:18"},"returnParameters":{"id":5065,"nodeType":"ParameterList","parameters":[],"src":"24718:0:18"},"scope":5695,"src":"24566:154:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5079,"nodeType":"Block","src":"25518:2:18","statements":[]},"documentation":{"id":5068,"nodeType":"StructuredDocumentation","src":"24726:636:18","text":" @dev Hook that is called after a set of serially-ordered token IDs\n have been transferred. This includes minting.\n And also called after one token has been burned.\n `startTokenId` - the first token ID to be transferred.\n `quantity` - the amount to be transferred.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."},"id":5080,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfers","nameLocation":"25376:20:18","nodeType":"FunctionDefinition","parameters":{"id":5077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5070,"mutability":"mutable","name":"from","nameLocation":"25414:4:18","nodeType":"VariableDeclaration","scope":5080,"src":"25406:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5069,"name":"address","nodeType":"ElementaryTypeName","src":"25406:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5072,"mutability":"mutable","name":"to","nameLocation":"25436:2:18","nodeType":"VariableDeclaration","scope":5080,"src":"25428:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5071,"name":"address","nodeType":"ElementaryTypeName","src":"25428:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5074,"mutability":"mutable","name":"startTokenId","nameLocation":"25456:12:18","nodeType":"VariableDeclaration","scope":5080,"src":"25448:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5073,"name":"uint256","nodeType":"ElementaryTypeName","src":"25448:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5076,"mutability":"mutable","name":"quantity","nameLocation":"25486:8:18","nodeType":"VariableDeclaration","scope":5080,"src":"25478:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5075,"name":"uint256","nodeType":"ElementaryTypeName","src":"25478:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25396:104:18"},"returnParameters":{"id":5078,"nodeType":"ParameterList","parameters":[],"src":"25518:0:18"},"scope":5695,"src":"25367:153:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5134,"nodeType":"Block","src":"26112:533:18","statements":[{"clauses":[{"block":{"id":5115,"nodeType":"Block","src":"26261:96:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5107,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5105,"src":"26282:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"arguments":[{"id":5109,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"26317:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5108,"name":"ERC721A__IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"26292:24:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721A__IERC721Receiver_$4090_$","typeString":"type(contract ERC721A__IERC721Receiver)"}},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26292:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721A__IERC721Receiver_$4090","typeString":"contract ERC721A__IERC721Receiver"}},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":4089,"src":"26292:45:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"26292:54:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"26282:64:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5093,"id":5114,"nodeType":"Return","src":"26275:71:18"}]},"errorName":"","id":5116,"nodeType":"TryCatchClause","parameters":{"id":5106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5105,"mutability":"mutable","name":"retval","nameLocation":"26244:6:18","nodeType":"VariableDeclaration","scope":5116,"src":"26237:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5104,"name":"bytes4","nodeType":"ElementaryTypeName","src":"26237:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"26223:37:18"},"src":"26215:142:18"},{"block":{"id":5131,"nodeType":"Block","src":"26386:253:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5120,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"26404:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"26404:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26421:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26404:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5129,"nodeType":"Block","src":"26510:119:18","statements":[{"AST":{"nodeType":"YulBlock","src":"26537:78:18","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26570:2:18","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"26574:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26566:3:18"},"nodeType":"YulFunctionCall","src":"26566:15:18"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"26589:6:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26583:5:18"},"nodeType":"YulFunctionCall","src":"26583:13:18"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26559:6:18"},"nodeType":"YulFunctionCall","src":"26559:38:18"},"nodeType":"YulExpressionStatement","src":"26559:38:18"}]},"evmVersion":"london","externalReferences":[{"declaration":5118,"isOffset":false,"isSlot":false,"src":"26574:6:18","valueSize":1},{"declaration":5118,"isOffset":false,"isSlot":false,"src":"26589:6:18","valueSize":1}],"id":5128,"nodeType":"InlineAssembly","src":"26528:87:18"}]},"id":5130,"nodeType":"IfStatement","src":"26400:229:18","trueBody":{"id":5127,"nodeType":"Block","src":"26424:80:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5124,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"26449:38:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26449:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5126,"nodeType":"RevertStatement","src":"26442:47:18"}]}}]},"errorName":"","id":5132,"nodeType":"TryCatchClause","parameters":{"id":5119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5118,"mutability":"mutable","name":"reason","nameLocation":"26378:6:18","nodeType":"VariableDeclaration","scope":5132,"src":"26365:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5117,"name":"bytes","nodeType":"ElementaryTypeName","src":"26365:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"26364:21:18"},"src":"26358:281:18"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5098,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"26172:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26172:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5083,"src":"26193:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5101,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5087,"src":"26199:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5102,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"26208:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5095,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"26151:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5094,"name":"ERC721A__IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"26126:24:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721A__IERC721Receiver_$4090_$","typeString":"type(contract ERC721A__IERC721Receiver)"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26126:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721A__IERC721Receiver_$4090","typeString":"contract ERC721A__IERC721Receiver"}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":4089,"src":"26126:45:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26126:88:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":5133,"nodeType":"TryStatement","src":"26122:517:18"}]},"documentation":{"id":5081,"nodeType":"StructuredDocumentation","src":"25526:417:18","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n `from` - Previous owner of the given token ID.\n `to` - Target address that will receive the token.\n `tokenId` - Token ID to be transferred.\n `_data` - Optional data to send along with the call.\n Returns whether the call correctly returned the expected magic value."},"id":5135,"implemented":true,"kind":"function","modifiers":[],"name":"_checkContractOnERC721Received","nameLocation":"25957:30:18","nodeType":"FunctionDefinition","parameters":{"id":5090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5083,"mutability":"mutable","name":"from","nameLocation":"26005:4:18","nodeType":"VariableDeclaration","scope":5135,"src":"25997:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5082,"name":"address","nodeType":"ElementaryTypeName","src":"25997:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5085,"mutability":"mutable","name":"to","nameLocation":"26027:2:18","nodeType":"VariableDeclaration","scope":5135,"src":"26019:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5084,"name":"address","nodeType":"ElementaryTypeName","src":"26019:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5087,"mutability":"mutable","name":"tokenId","nameLocation":"26047:7:18","nodeType":"VariableDeclaration","scope":5135,"src":"26039:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5086,"name":"uint256","nodeType":"ElementaryTypeName","src":"26039:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5089,"mutability":"mutable","name":"_data","nameLocation":"26077:5:18","nodeType":"VariableDeclaration","scope":5135,"src":"26064:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5088,"name":"bytes","nodeType":"ElementaryTypeName","src":"26064:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25987:101:18"},"returnParameters":{"id":5093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5135,"src":"26106:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5091,"name":"bool","nodeType":"ElementaryTypeName","src":"26106:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"26105:6:18"},"scope":5695,"src":"25948:697:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5230,"nodeType":"Block","src":"27153:2840:18","statements":[{"assignments":[5144],"declarations":[{"constant":false,"id":5144,"mutability":"mutable","name":"startTokenId","nameLocation":"27171:12:18","nodeType":"VariableDeclaration","scope":5230,"src":"27163:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5143,"name":"uint256","nodeType":"ElementaryTypeName","src":"27163:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5146,"initialValue":{"id":5145,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"27186:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27163:36:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5147,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"27213:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27225:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27213:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5153,"nodeType":"IfStatement","src":"27209:44:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5150,"name":"MintZeroQuantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5713,"src":"27235:16:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27235:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5152,"nodeType":"RevertStatement","src":"27228:25:18"}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27294:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27286:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5155,"name":"address","nodeType":"ElementaryTypeName","src":"27286:7:18","typeDescriptions":{}}},"id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27286:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5159,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"27298:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5160,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5144,"src":"27302:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5161,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"27316:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5154,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"27264:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27264:61:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5163,"nodeType":"ExpressionStatement","src":"27264:61:18"},{"id":5219,"nodeType":"UncheckedBlock","src":"27508:2409:18","statements":[{"expression":{"id":5176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5164,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"27728:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5166,"indexExpression":{"id":5165,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"27747:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"27728:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5167,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"27754:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27767:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5169,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"27772:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27767:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27766:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"31","id":5172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27797:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27766:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27765:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27754:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27728:71:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5177,"nodeType":"ExpressionStatement","src":"27728:71:18"},{"expression":{"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5178,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"28035:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5180,"indexExpression":{"id":5179,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5144,"src":"28053:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"28035:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5182,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"28105:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5184,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"28146:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5183,"name":"_nextInitializedFlag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"28125:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28125:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":5189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28181:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28173:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5187,"name":"address","nodeType":"ElementaryTypeName","src":"28173:7:18","typeDescriptions":{}}},"id":5190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28173:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5191,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"28185:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":5192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28189:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5186,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"28158:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28158:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28125:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5181,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4671,"src":"28069:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28069:136:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28035:170:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5197,"nodeType":"ExpressionStatement","src":"28035:170:18"},{"assignments":[5199],"declarations":[{"constant":false,"id":5199,"mutability":"mutable","name":"toMasked","nameLocation":"28228:8:18","nodeType":"VariableDeclaration","scope":5219,"src":"28220:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5198,"name":"uint256","nodeType":"ElementaryTypeName","src":"28220:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5200,"nodeType":"VariableDeclarationStatement","src":"28220:16:18"},{"assignments":[5202],"declarations":[{"constant":false,"id":5202,"mutability":"mutable","name":"end","nameLocation":"28258:3:18","nodeType":"VariableDeclaration","scope":5219,"src":"28250:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5201,"name":"uint256","nodeType":"ElementaryTypeName","src":"28250:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5206,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5203,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5144,"src":"28264:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5204,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"28279:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28264:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28250:37:18"},{"AST":{"nodeType":"YulBlock","src":"28657:1157:18","statements":[{"nodeType":"YulAssignment","src":"28772:37:18","value":{"arguments":[{"name":"to","nodeType":"YulIdentifier","src":"28788:2:18"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"28792:16:18"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28784:3:18"},"nodeType":"YulFunctionCall","src":"28784:25:18"},"variableNames":[{"name":"toMasked","nodeType":"YulIdentifier","src":"28772:8:18"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28898:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28958:1:18","type":"","value":"0"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29016:25:18"},{"kind":"number","nodeType":"YulLiteral","src":"29077:1:18","type":"","value":"0"},{"name":"toMasked","nodeType":"YulIdentifier","src":"29117:8:18"},{"name":"startTokenId","nodeType":"YulIdentifier","src":"29156:12:18"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"28872:4:18"},"nodeType":"YulFunctionCall","src":"28872:328:18"},"nodeType":"YulExpressionStatement","src":"28872:328:18"},{"body":{"nodeType":"YulBlock","src":"29633:167:18","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29728:1:18","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29731:1:18","type":"","value":"0"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29734:25:18"},{"kind":"number","nodeType":"YulLiteral","src":"29761:1:18","type":"","value":"0"},{"name":"toMasked","nodeType":"YulIdentifier","src":"29764:8:18"},{"name":"tokenId","nodeType":"YulIdentifier","src":"29774:7:18"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"29723:4:18"},"nodeType":"YulFunctionCall","src":"29723:59:18"},"nodeType":"YulExpressionStatement","src":"29723:59:18"}]},"condition":{"arguments":[{"arguments":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29551:7:18"},{"name":"end","nodeType":"YulIdentifier","src":"29560:3:18"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29548:2:18"},"nodeType":"YulFunctionCall","src":"29548:16:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29541:6:18"},"nodeType":"YulFunctionCall","src":"29541:24:18"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"29566:66:18","statements":[{"nodeType":"YulAssignment","src":"29588:26:18","value":{"arguments":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29603:7:18"},{"kind":"number","nodeType":"YulLiteral","src":"29612:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29599:3:18"},"nodeType":"YulFunctionCall","src":"29599:15:18"},"variableNames":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29588:7:18"}]}]},"pre":{"nodeType":"YulBlock","src":"29465:75:18","statements":[{"nodeType":"YulVariableDeclaration","src":"29487:35:18","value":{"arguments":[{"name":"startTokenId","nodeType":"YulIdentifier","src":"29506:12:18"},{"kind":"number","nodeType":"YulLiteral","src":"29520:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29502:3:18"},"nodeType":"YulFunctionCall","src":"29502:20:18"},"variables":[{"name":"tokenId","nodeType":"YulTypedName","src":"29491:7:18","type":""}]}]},"src":"29461:339:18"}]},"evmVersion":"london","externalReferences":[{"declaration":4156,"isOffset":false,"isSlot":false,"src":"28792:16:18","valueSize":1},{"declaration":4162,"isOffset":false,"isSlot":false,"src":"29016:25:18","valueSize":1},{"declaration":4162,"isOffset":false,"isSlot":false,"src":"29734:25:18","valueSize":1},{"declaration":5202,"isOffset":false,"isSlot":false,"src":"29560:3:18","valueSize":1},{"declaration":5144,"isOffset":false,"isSlot":false,"src":"29156:12:18","valueSize":1},{"declaration":5144,"isOffset":false,"isSlot":false,"src":"29506:12:18","valueSize":1},{"declaration":5138,"isOffset":false,"isSlot":false,"src":"28788:2:18","valueSize":1},{"declaration":5199,"isOffset":false,"isSlot":false,"src":"28772:8:18","valueSize":1},{"declaration":5199,"isOffset":false,"isSlot":false,"src":"29117:8:18","valueSize":1},{"declaration":5199,"isOffset":false,"isSlot":false,"src":"29764:8:18","valueSize":1}],"id":5207,"nodeType":"InlineAssembly","src":"28648:1166:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5208,"name":"toMasked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"29831:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29843:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29831:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5214,"nodeType":"IfStatement","src":"29827:45:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5211,"name":"MintToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"29853:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29853:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5213,"nodeType":"RevertStatement","src":"29846:26:18"}},{"expression":{"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5215,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"29887:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5216,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5202,"src":"29903:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29887:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5218,"nodeType":"ExpressionStatement","src":"29887:19:18"}]},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":5223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29955:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29947:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5221,"name":"address","nodeType":"ElementaryTypeName","src":"29947:7:18","typeDescriptions":{}}},"id":5224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29947:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5225,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"29959:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5226,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5144,"src":"29963:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5227,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"29977:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5220,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"29926:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29926:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5229,"nodeType":"ExpressionStatement","src":"29926:60:18"}]},"documentation":{"id":5136,"nodeType":"StructuredDocumentation","src":"26836:250:18","text":" @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event for each mint."},"id":5231,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"27100:5:18","nodeType":"FunctionDefinition","parameters":{"id":5141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5138,"mutability":"mutable","name":"to","nameLocation":"27114:2:18","nodeType":"VariableDeclaration","scope":5231,"src":"27106:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5137,"name":"address","nodeType":"ElementaryTypeName","src":"27106:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5140,"mutability":"mutable","name":"quantity","nameLocation":"27126:8:18","nodeType":"VariableDeclaration","scope":5231,"src":"27118:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5139,"name":"uint256","nodeType":"ElementaryTypeName","src":"27118:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27105:30:18"},"returnParameters":{"id":5142,"nodeType":"ParameterList","parameters":[],"src":"27153:0:18"},"scope":5695,"src":"27091:2902:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5342,"nodeType":"Block","src":"30902:1374:18","statements":[{"assignments":[5240],"declarations":[{"constant":false,"id":5240,"mutability":"mutable","name":"startTokenId","nameLocation":"30920:12:18","nodeType":"VariableDeclaration","scope":5342,"src":"30912:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5239,"name":"uint256","nodeType":"ElementaryTypeName","src":"30912:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5242,"initialValue":{"id":5241,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"30935:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30912:36:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5243,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"30962:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30976:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30968:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5244,"name":"address","nodeType":"ElementaryTypeName","src":"30968:7:18","typeDescriptions":{}}},"id":5247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30968:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"30962:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5252,"nodeType":"IfStatement","src":"30958:48:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5249,"name":"MintToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"30987:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30987:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5251,"nodeType":"RevertStatement","src":"30980:26:18"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5253,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"31020:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31032:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31020:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5259,"nodeType":"IfStatement","src":"31016:44:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5256,"name":"MintZeroQuantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5713,"src":"31042:16:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31042:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5258,"nodeType":"RevertStatement","src":"31035:25:18"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5260,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"31074:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5261,"name":"_MAX_MINT_ERC2309_QUANTITY_LIMIT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"31085:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31074:43:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5266,"nodeType":"IfStatement","src":"31070:89:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5263,"name":"MintERC2309QuantityExceedsLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"31126:31:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31126:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5265,"nodeType":"RevertStatement","src":"31119:40:18"}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":5270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31200:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31192:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5268,"name":"address","nodeType":"ElementaryTypeName","src":"31192:7:18","typeDescriptions":{}}},"id":5271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31192:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5272,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"31204:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5273,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"31208:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5274,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"31222:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5267,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"31170:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31170:61:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5276,"nodeType":"ExpressionStatement","src":"31170:61:18"},{"id":5331,"nodeType":"UncheckedBlock","src":"31340:860:18","statements":[{"expression":{"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5277,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"31560:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5279,"indexExpression":{"id":5278,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"31579:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31560:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5280,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"31586:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31599:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5282,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"31604:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31599:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"31598:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"31","id":5285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31629:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"31598:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"31597:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31586:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31560:71:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5290,"nodeType":"ExpressionStatement","src":"31560:71:18"},{"expression":{"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5291,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"31867:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5293,"indexExpression":{"id":5292,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"31885:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31867:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5295,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"31937:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5297,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"31978:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5296,"name":"_nextInitializedFlag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"31957:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31957:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":5302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32013:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32005:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5300,"name":"address","nodeType":"ElementaryTypeName","src":"32005:7:18","typeDescriptions":{}}},"id":5303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32005:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5304,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"32017:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":5305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32021:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5299,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"31990:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":5306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31990:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31957:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5294,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4671,"src":"31901:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31901:136:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31867:170:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5310,"nodeType":"ExpressionStatement","src":"31867:170:18"},{"eventCall":{"arguments":[{"id":5312,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"32077:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5313,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"32091:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5314,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"32106:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32091:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32117:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"32091:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":5320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32128:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32120:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5318,"name":"address","nodeType":"ElementaryTypeName","src":"32120:7:18","typeDescriptions":{}}},"id":5321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32120:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5322,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"32132:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5311,"name":"ConsecutiveTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5900,"src":"32057:19:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address,address)"}},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32057:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5324,"nodeType":"EmitStatement","src":"32052:83:18"},{"expression":{"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5325,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"32150:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5326,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"32166:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5327,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"32181:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32166:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32150:39:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5330,"nodeType":"ExpressionStatement","src":"32150:39:18"}]},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":5335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32238:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32230:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5333,"name":"address","nodeType":"ElementaryTypeName","src":"32230:7:18","typeDescriptions":{}}},"id":5336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32230:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5337,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"32242:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5338,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"32246:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5339,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"32260:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5332,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"32209:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32209:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5341,"nodeType":"ExpressionStatement","src":"32209:60:18"}]},"documentation":{"id":5232,"nodeType":"StructuredDocumentation","src":"29999:829:18","text":" @dev Mints `quantity` tokens and transfers them to `to`.\n This function is intended for efficient minting only during contract creation.\n It emits only one {ConsecutiveTransfer} as defined in\n [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n instead of a sequence of {Transfer} event(s).\n Calling this function outside of contract creation WILL make your contract\n non-compliant with the ERC721 standard.\n For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n {ConsecutiveTransfer} event is only permissible during contract creation.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {ConsecutiveTransfer} event."},"id":5343,"implemented":true,"kind":"function","modifiers":[],"name":"_mintERC2309","nameLocation":"30842:12:18","nodeType":"FunctionDefinition","parameters":{"id":5237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"to","nameLocation":"30863:2:18","nodeType":"VariableDeclaration","scope":5343,"src":"30855:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5233,"name":"address","nodeType":"ElementaryTypeName","src":"30855:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5236,"mutability":"mutable","name":"quantity","nameLocation":"30875:8:18","nodeType":"VariableDeclaration","scope":5343,"src":"30867:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5235,"name":"uint256","nodeType":"ElementaryTypeName","src":"30867:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30854:30:18"},"returnParameters":{"id":5238,"nodeType":"ParameterList","parameters":[],"src":"30902:0:18"},"scope":5695,"src":"30833:1443:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5404,"nodeType":"Block","src":"32791:553:18","statements":[{"expression":{"arguments":[{"id":5354,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"32807:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5355,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"32811:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5353,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"32801:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32801:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5357,"nodeType":"ExpressionStatement","src":"32801:19:18"},{"id":5403,"nodeType":"UncheckedBlock","src":"32831:507:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5358,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"32859:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"32859:7:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"32859:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32877:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"32859:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5402,"nodeType":"IfStatement","src":"32855:473:18","trueBody":{"id":5401,"nodeType":"Block","src":"32880:448:18","statements":[{"assignments":[5364],"declarations":[{"constant":false,"id":5364,"mutability":"mutable","name":"end","nameLocation":"32906:3:18","nodeType":"VariableDeclaration","scope":5401,"src":"32898:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5363,"name":"uint256","nodeType":"ElementaryTypeName","src":"32898:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5366,"initialValue":{"id":5365,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"32912:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32898:27:18"},{"assignments":[5368],"declarations":[{"constant":false,"id":5368,"mutability":"mutable","name":"index","nameLocation":"32951:5:18","nodeType":"VariableDeclaration","scope":5401,"src":"32943:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5367,"name":"uint256","nodeType":"ElementaryTypeName","src":"32943:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5372,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5369,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"32959:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5370,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"32965:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32959:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32943:30:18"},{"body":{"id":5389,"nodeType":"Block","src":"32994:205:18","statements":[{"condition":{"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"33020:63:18","subExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":5376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33060:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33052:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5374,"name":"address","nodeType":"ElementaryTypeName","src":"33052:7:18","typeDescriptions":{}}},"id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33052:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5378,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"33064:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"33068:7:18","subExpression":{"id":5379,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"33068:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5381,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5350,"src":"33077:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5373,"name":"_checkContractOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"33021:30:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33021:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5388,"nodeType":"IfStatement","src":"33016:165:18","trueBody":{"id":5387,"nodeType":"Block","src":"33085:96:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5384,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"33118:38:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33118:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5386,"nodeType":"RevertStatement","src":"33111:47:18"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5390,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"33207:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5391,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"33215:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33207:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5393,"nodeType":"DoWhileStatement","src":"32991:229:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5394,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"33283:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5395,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"33300:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33283:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5400,"nodeType":"IfStatement","src":"33279:34:18","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5397,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"33305:6:18","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":5398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33305:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5399,"nodeType":"ExpressionStatement","src":"33305:8:18"}}]}}]}]},"documentation":{"id":5344,"nodeType":"StructuredDocumentation","src":"32282:388:18","text":" @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n See {_mint}.\n Emits a {Transfer} event for each mint."},"id":5405,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"32684:9:18","nodeType":"FunctionDefinition","parameters":{"id":5351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5346,"mutability":"mutable","name":"to","nameLocation":"32711:2:18","nodeType":"VariableDeclaration","scope":5405,"src":"32703:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5345,"name":"address","nodeType":"ElementaryTypeName","src":"32703:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5348,"mutability":"mutable","name":"quantity","nameLocation":"32731:8:18","nodeType":"VariableDeclaration","scope":5405,"src":"32723:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5347,"name":"uint256","nodeType":"ElementaryTypeName","src":"32723:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5350,"mutability":"mutable","name":"_data","nameLocation":"32762:5:18","nodeType":"VariableDeclaration","scope":5405,"src":"32749:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5349,"name":"bytes","nodeType":"ElementaryTypeName","src":"32749:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"32693:80:18"},"returnParameters":{"id":5352,"nodeType":"ParameterList","parameters":[],"src":"32791:0:18"},"scope":5695,"src":"32675:669:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5419,"nodeType":"Block","src":"33489:44:18","statements":[{"expression":{"arguments":[{"id":5414,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"33509:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5415,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5410,"src":"33513:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":5416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33523:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5413,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[5405,5420],"referencedDeclaration":5405,"src":"33499:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33499:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5418,"nodeType":"ExpressionStatement","src":"33499:27:18"}]},"documentation":{"id":5406,"nodeType":"StructuredDocumentation","src":"33350:68:18","text":" @dev Equivalent to `_safeMint(to, quantity, '')`."},"id":5420,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"33432:9:18","nodeType":"FunctionDefinition","parameters":{"id":5411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5408,"mutability":"mutable","name":"to","nameLocation":"33450:2:18","nodeType":"VariableDeclaration","scope":5420,"src":"33442:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5407,"name":"address","nodeType":"ElementaryTypeName","src":"33442:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5410,"mutability":"mutable","name":"quantity","nameLocation":"33462:8:18","nodeType":"VariableDeclaration","scope":5420,"src":"33454:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5409,"name":"uint256","nodeType":"ElementaryTypeName","src":"33454:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33441:30:18"},"returnParameters":{"id":5412,"nodeType":"ParameterList","parameters":[],"src":"33489:0:18"},"scope":5695,"src":"33423:110:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5431,"nodeType":"Block","src":"33840:38:18","statements":[{"expression":{"arguments":[{"id":5427,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5423,"src":"33856:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":5428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"33865:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5426,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[5432,5584],"referencedDeclaration":5584,"src":"33850:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,bool)"}},"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33850:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5430,"nodeType":"ExpressionStatement","src":"33850:21:18"}]},"documentation":{"id":5421,"nodeType":"StructuredDocumentation","src":"33724:62:18","text":" @dev Equivalent to `_burn(tokenId, false)`."},"id":5432,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"33800:5:18","nodeType":"FunctionDefinition","parameters":{"id":5424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5423,"mutability":"mutable","name":"tokenId","nameLocation":"33814:7:18","nodeType":"VariableDeclaration","scope":5432,"src":"33806:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5422,"name":"uint256","nodeType":"ElementaryTypeName","src":"33806:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33805:17:18"},"returnParameters":{"id":5425,"nodeType":"ParameterList","parameters":[],"src":"33840:0:18"},"scope":5695,"src":"33791:87:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5583,"nodeType":"Block","src":"34164:2946:18","statements":[{"assignments":[5441],"declarations":[{"constant":false,"id":5441,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"34182:19:18","nodeType":"VariableDeclaration","scope":5583,"src":"34174:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5440,"name":"uint256","nodeType":"ElementaryTypeName","src":"34174:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5445,"initialValue":{"arguments":[{"id":5443,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"34223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5442,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"34204:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34204:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"34174:57:18"},{"assignments":[5447],"declarations":[{"constant":false,"id":5447,"mutability":"mutable","name":"from","nameLocation":"34250:4:18","nodeType":"VariableDeclaration","scope":5583,"src":"34242:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5446,"name":"address","nodeType":"ElementaryTypeName","src":"34242:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5455,"initialValue":{"arguments":[{"arguments":[{"id":5452,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"34273:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34265:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5450,"name":"uint160","nodeType":"ElementaryTypeName","src":"34265:7:18","typeDescriptions":{}}},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34265:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34257:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5448,"name":"address","nodeType":"ElementaryTypeName","src":"34257:7:18","typeDescriptions":{}}},"id":5454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34257:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"34242:52:18"},{"assignments":[5457,5459],"declarations":[{"constant":false,"id":5457,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"34314:19:18","nodeType":"VariableDeclaration","scope":5583,"src":"34306:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5456,"name":"uint256","nodeType":"ElementaryTypeName","src":"34306:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5459,"mutability":"mutable","name":"approvedAddress","nameLocation":"34343:15:18","nodeType":"VariableDeclaration","scope":5583,"src":"34335:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5458,"name":"address","nodeType":"ElementaryTypeName","src":"34335:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5463,"initialValue":{"arguments":[{"id":5461,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"34389:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5460,"name":"_getApprovedSlotAndAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"34362:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_address_$","typeString":"function (uint256) view returns (uint256,address)"}},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34362:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"nodeType":"VariableDeclarationStatement","src":"34305:92:18"},{"condition":{"id":5464,"name":"approvalCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5437,"src":"34412:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5484,"nodeType":"IfStatement","src":"34408:312:18","trueBody":{"id":5483,"nodeType":"Block","src":"34427:293:18","statements":[{"condition":{"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"34530:69:18","subExpression":{"arguments":[{"id":5466,"name":"approvedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"34556:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5467,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"34573:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5468,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"34579:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34579:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5465,"name":"_isSenderApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"34531:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) pure returns (bool)"}},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34531:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5482,"nodeType":"IfStatement","src":"34526:183:18","trueBody":{"condition":{"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"34621:44:18","subExpression":{"arguments":[{"id":5473,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"34639:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5474,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"34645:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34645:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5472,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"34622:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34622:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5481,"nodeType":"IfStatement","src":"34617:92:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5478,"name":"TransferCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"34674:33:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34674:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"RevertStatement","src":"34667:42:18"}}}]}},{"expression":{"arguments":[{"id":5486,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"34752:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34766:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34758:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5487,"name":"address","nodeType":"ElementaryTypeName","src":"34758:7:18","typeDescriptions":{}}},"id":5490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34758:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"34770:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":5492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5485,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"34730:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34730:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5494,"nodeType":"ExpressionStatement","src":"34730:51:18"},{"AST":{"nodeType":"YulBlock","src":"34853:181:18","statements":[{"body":{"nodeType":"YulBlock","src":"34886:138:18","statements":[{"expression":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"34987:19:18"},{"kind":"number","nodeType":"YulLiteral","src":"35008:1:18","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34980:6:18"},"nodeType":"YulFunctionCall","src":"34980:30:18"},"nodeType":"YulExpressionStatement","src":"34980:30:18"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"34870:15:18"},"nodeType":"YulIf","src":"34867:157:18"}]},"evmVersion":"london","externalReferences":[{"declaration":5459,"isOffset":false,"isSlot":false,"src":"34870:15:18","valueSize":1},{"declaration":5457,"isOffset":false,"isSlot":false,"src":"34987:19:18","valueSize":1}],"id":5495,"nodeType":"InlineAssembly","src":"34844:190:18"},{"id":5559,"nodeType":"UncheckedBlock","src":"35301:1545:18","statements":[{"expression":{"id":5505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5496,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"35613:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5498,"indexExpression":{"id":5497,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"35632:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35613:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35642:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5500,"name":"_BITPOS_NUMBER_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"35647:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35642:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"35641:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35672:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"35641:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35613:60:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5506,"nodeType":"ExpressionStatement","src":"35613:60:18"},{"expression":{"id":5526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5507,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"35904:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5509,"indexExpression":{"id":5508,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"35922:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35904:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"35969:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":5512,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"35992:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":5513,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"36010:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35992:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"35991:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":5517,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"36054:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36068:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36060:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5518,"name":"address","nodeType":"ElementaryTypeName","src":"36060:7:18","typeDescriptions":{}}},"id":5521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36060:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5522,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"36072:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5516,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"36039:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36039:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35991:101:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5510,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4671,"src":"35933:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35933:173:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35904:202:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5527,"nodeType":"ExpressionStatement","src":"35904:202:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5528,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"36223:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5529,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"36245:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36223:47:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36274:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36223:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5558,"nodeType":"IfStatement","src":"36219:617:18","trueBody":{"id":5557,"nodeType":"Block","src":"36277:559:18","statements":[{"assignments":[5534],"declarations":[{"constant":false,"id":5534,"mutability":"mutable","name":"nextTokenId","nameLocation":"36303:11:18","nodeType":"VariableDeclaration","scope":5557,"src":"36295:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5533,"name":"uint256","nodeType":"ElementaryTypeName","src":"36295:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5538,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5535,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"36317:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36327:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"36317:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"36295:33:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5539,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"36448:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5541,"indexExpression":{"id":5540,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"36466:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"36448:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36482:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36448:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5556,"nodeType":"IfStatement","src":"36444:378:18","trueBody":{"id":5555,"nodeType":"Block","src":"36485:337:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5544,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"36569:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5545,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"36584:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36569:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5554,"nodeType":"IfStatement","src":"36565:239:18","trueBody":{"id":5553,"nodeType":"Block","src":"36599:205:18","statements":[{"expression":{"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5547,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"36729:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5549,"indexExpression":{"id":5548,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"36747:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36729:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5550,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"36762:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36729:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5552,"nodeType":"ExpressionStatement","src":"36729:52:18"}]}}]}}]}}]},{"eventCall":{"arguments":[{"id":5561,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"36870:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36884:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36876:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5562,"name":"address","nodeType":"ElementaryTypeName","src":"36876:7:18","typeDescriptions":{}}},"id":5565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36876:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5566,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"36888:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5560,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"36861:8:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36861:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5568,"nodeType":"EmitStatement","src":"36856:40:18"},{"expression":{"arguments":[{"id":5570,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5447,"src":"36927:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36941:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36933:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5571,"name":"address","nodeType":"ElementaryTypeName","src":"36933:7:18","typeDescriptions":{}}},"id":5574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36933:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5575,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"36945:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":5576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36954:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5569,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"36906:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36906:50:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5578,"nodeType":"ExpressionStatement","src":"36906:50:18"},{"id":5582,"nodeType":"UncheckedBlock","src":"37055:49:18","statements":[{"expression":{"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"37079:14:18","subExpression":{"id":5579,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"37079:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5581,"nodeType":"ExpressionStatement","src":"37079:14:18"}]}]},"documentation":{"id":5433,"nodeType":"StructuredDocumentation","src":"33884:206:18","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":5584,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"34104:5:18","nodeType":"FunctionDefinition","parameters":{"id":5438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5435,"mutability":"mutable","name":"tokenId","nameLocation":"34118:7:18","nodeType":"VariableDeclaration","scope":5584,"src":"34110:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5434,"name":"uint256","nodeType":"ElementaryTypeName","src":"34110:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5437,"mutability":"mutable","name":"approvalCheck","nameLocation":"34132:13:18","nodeType":"VariableDeclaration","scope":5584,"src":"34127:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5436,"name":"bool","nodeType":"ElementaryTypeName","src":"34127:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34109:37:18"},"returnParameters":{"id":5439,"nodeType":"ParameterList","parameters":[],"src":"34164:0:18"},"scope":5695,"src":"34095:3015:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5627,"nodeType":"Block","src":"37468:447:18","statements":[{"assignments":[5593],"declarations":[{"constant":false,"id":5593,"mutability":"mutable","name":"packed","nameLocation":"37486:6:18","nodeType":"VariableDeclaration","scope":5627,"src":"37478:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5592,"name":"uint256","nodeType":"ElementaryTypeName","src":"37478:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5597,"initialValue":{"baseExpression":{"id":5594,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"37495:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5596,"indexExpression":{"id":5595,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"37513:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37495:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"37478:41:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5598,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"37533:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37543:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"37533:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5604,"nodeType":"IfStatement","src":"37529:61:18","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5601,"name":"OwnershipNotInitializedForExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5737,"src":"37553:35:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37553:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5603,"nodeType":"RevertStatement","src":"37546:44:18"}},{"assignments":[5606],"declarations":[{"constant":false,"id":5606,"mutability":"mutable","name":"extraDataCasted","nameLocation":"37608:15:18","nodeType":"VariableDeclaration","scope":5627,"src":"37600:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5605,"name":"uint256","nodeType":"ElementaryTypeName","src":"37600:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5607,"nodeType":"VariableDeclarationStatement","src":"37600:23:18"},{"AST":{"nodeType":"YulBlock","src":"37712:52:18","statements":[{"nodeType":"YulAssignment","src":"37726:28:18","value":{"name":"extraData","nodeType":"YulIdentifier","src":"37745:9:18"},"variableNames":[{"name":"extraDataCasted","nodeType":"YulIdentifier","src":"37726:15:18"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5589,"isOffset":false,"isSlot":false,"src":"37745:9:18","valueSize":1},{"declaration":5606,"isOffset":false,"isSlot":false,"src":"37726:15:18","valueSize":1}],"id":5608,"nodeType":"InlineAssembly","src":"37703:61:18"},{"expression":{"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5609,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"37773:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5610,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"37783:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5611,"name":"_BITMASK_EXTRA_DATA_COMPLEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4148,"src":"37792:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37783:39:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5613,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"37782:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5614,"name":"extraDataCasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5606,"src":"37827:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5615,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"37846:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37827:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"37826:39:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37782:83:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37773:92:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5620,"nodeType":"ExpressionStatement","src":"37773:92:18"},{"expression":{"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5621,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"37875:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5623,"indexExpression":{"id":5622,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"37893:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"37875:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5624,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"37902:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37875:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5626,"nodeType":"ExpressionStatement","src":"37875:33:18"}]},"documentation":{"id":5585,"nodeType":"StructuredDocumentation","src":"37304:84:18","text":" @dev Directly sets the extra data for the ownership data `index`."},"id":5628,"implemented":true,"kind":"function","modifiers":[],"name":"_setExtraDataAt","nameLocation":"37402:15:18","nodeType":"FunctionDefinition","parameters":{"id":5590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5587,"mutability":"mutable","name":"index","nameLocation":"37426:5:18","nodeType":"VariableDeclaration","scope":5628,"src":"37418:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5586,"name":"uint256","nodeType":"ElementaryTypeName","src":"37418:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5589,"mutability":"mutable","name":"extraData","nameLocation":"37440:9:18","nodeType":"VariableDeclaration","scope":5628,"src":"37433:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5588,"name":"uint24","nodeType":"ElementaryTypeName","src":"37433:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"37417:33:18"},"returnParameters":{"id":5591,"nodeType":"ParameterList","parameters":[],"src":"37468:0:18"},"scope":5695,"src":"37393:522:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5640,"nodeType":"Block","src":"38616:2:18","statements":[]},"documentation":{"id":5629,"nodeType":"StructuredDocumentation","src":"37921:549:18","text":" @dev Called during each token transfer to set the 24bit `extraData` field.\n Intended to be overridden by the cosumer contract.\n `previousExtraData` - the value of `extraData` before transfer.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."},"id":5641,"implemented":true,"kind":"function","modifiers":[],"name":"_extraData","nameLocation":"38484:10:18","nodeType":"FunctionDefinition","parameters":{"id":5636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5631,"mutability":"mutable","name":"from","nameLocation":"38512:4:18","nodeType":"VariableDeclaration","scope":5641,"src":"38504:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5630,"name":"address","nodeType":"ElementaryTypeName","src":"38504:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5633,"mutability":"mutable","name":"to","nameLocation":"38534:2:18","nodeType":"VariableDeclaration","scope":5641,"src":"38526:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5632,"name":"address","nodeType":"ElementaryTypeName","src":"38526:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5635,"mutability":"mutable","name":"previousExtraData","nameLocation":"38553:17:18","nodeType":"VariableDeclaration","scope":5641,"src":"38546:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5634,"name":"uint24","nodeType":"ElementaryTypeName","src":"38546:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"38494:82:18"},"returnParameters":{"id":5639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5641,"src":"38608:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5637,"name":"uint24","nodeType":"ElementaryTypeName","src":"38608:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"38607:8:18"},"scope":5695,"src":"38475:143:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5673,"nodeType":"Block","src":"38904:164:18","statements":[{"assignments":[5654],"declarations":[{"constant":false,"id":5654,"mutability":"mutable","name":"extraData","nameLocation":"38921:9:18","nodeType":"VariableDeclaration","scope":5673,"src":"38914:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5653,"name":"uint24","nodeType":"ElementaryTypeName","src":"38914:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":5661,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5657,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5648,"src":"38940:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5658,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"38963:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38940:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38933:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":5655,"name":"uint24","nodeType":"ElementaryTypeName","src":"38933:6:18","typeDescriptions":{}}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38933:49:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"VariableDeclarationStatement","src":"38914:68:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5665,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"39018:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5666,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5646,"src":"39024:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5667,"name":"extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"39028:9:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":5664,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"39007:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_uint24_$","typeString":"function (address,address,uint24) view returns (uint24)"}},"id":5668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39007:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":5663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38999:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5662,"name":"uint256","nodeType":"ElementaryTypeName","src":"38999:7:18","typeDescriptions":{}}},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38999:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5670,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"39043:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38999:62:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5652,"id":5672,"nodeType":"Return","src":"38992:69:18"}]},"documentation":{"id":5642,"nodeType":"StructuredDocumentation","src":"38624:135:18","text":" @dev Returns the next extra data for the packed ownership data.\n The returned result is shifted into position."},"id":5674,"implemented":true,"kind":"function","modifiers":[],"name":"_nextExtraData","nameLocation":"38773:14:18","nodeType":"FunctionDefinition","parameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5644,"mutability":"mutable","name":"from","nameLocation":"38805:4:18","nodeType":"VariableDeclaration","scope":5674,"src":"38797:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5643,"name":"address","nodeType":"ElementaryTypeName","src":"38797:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5646,"mutability":"mutable","name":"to","nameLocation":"38827:2:18","nodeType":"VariableDeclaration","scope":5674,"src":"38819:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5645,"name":"address","nodeType":"ElementaryTypeName","src":"38819:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5648,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"38847:19:18","nodeType":"VariableDeclaration","scope":5674,"src":"38839:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5647,"name":"uint256","nodeType":"ElementaryTypeName","src":"38839:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38787:85:18"},"returnParameters":{"id":5652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5674,"src":"38895:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5650,"name":"uint256","nodeType":"ElementaryTypeName","src":"38895:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38894:9:18"},"scope":5695,"src":"38764:304:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5683,"nodeType":"Block","src":"39506:34:18","statements":[{"expression":{"expression":{"id":5680,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"39523:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"39523:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5679,"id":5682,"nodeType":"Return","src":"39516:17:18"}]},"documentation":{"id":5675,"nodeType":"StructuredDocumentation","src":"39259:173:18","text":" @dev Returns the message sender (defaults to `msg.sender`).\n If you are writing GSN compatible contracts, you need to override this function."},"id":5684,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSenderERC721A","nameLocation":"39446:17:18","nodeType":"FunctionDefinition","parameters":{"id":5676,"nodeType":"ParameterList","parameters":[],"src":"39463:2:18"},"returnParameters":{"id":5679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5684,"src":"39497:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5677,"name":"address","nodeType":"ElementaryTypeName","src":"39497:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"39496:9:18"},"scope":5695,"src":"39437:103:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5693,"nodeType":"Block","src":"39721:1624:18","statements":[{"AST":{"nodeType":"YulBlock","src":"39740:1599:18","statements":[{"nodeType":"YulVariableDeclaration","src":"40104:31:18","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40123:4:18","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40117:5:18"},"nodeType":"YulFunctionCall","src":"40117:11:18"},{"kind":"number","nodeType":"YulLiteral","src":"40130:4:18","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40113:3:18"},"nodeType":"YulFunctionCall","src":"40113:22:18"},"variables":[{"name":"m","nodeType":"YulTypedName","src":"40108:1:18","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40214:4:18","type":"","value":"0x40"},{"name":"m","nodeType":"YulIdentifier","src":"40220:1:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40207:6:18"},"nodeType":"YulFunctionCall","src":"40207:15:18"},"nodeType":"YulExpressionStatement","src":"40207:15:18"},{"nodeType":"YulAssignment","src":"40279:19:18","value":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"40290:1:18"},{"kind":"number","nodeType":"YulLiteral","src":"40293:4:18","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40286:3:18"},"nodeType":"YulFunctionCall","src":"40286:12:18"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"40279:3:18"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40368:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"40373:1:18","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40361:6:18"},"nodeType":"YulFunctionCall","src":"40361:14:18"},"nodeType":"YulExpressionStatement","src":"40361:14:18"},{"nodeType":"YulVariableDeclaration","src":"40463:14:18","value":{"name":"str","nodeType":"YulIdentifier","src":"40474:3:18"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"40467:3:18","type":""}]},{"body":{"nodeType":"YulBlock","src":"40721:388:18","statements":[{"nodeType":"YulAssignment","src":"40739:18:18","value":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40750:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"40755:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40746:3:18"},"nodeType":"YulFunctionCall","src":"40746:11:18"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"40739:3:18"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40900:3:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40909:2:18","type":"","value":"48"},{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"40917:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"40923:2:18","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"40913:3:18"},"nodeType":"YulFunctionCall","src":"40913:13:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40905:3:18"},"nodeType":"YulFunctionCall","src":"40905:22:18"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"40892:7:18"},"nodeType":"YulFunctionCall","src":"40892:36:18"},"nodeType":"YulExpressionStatement","src":"40892:36:18"},{"nodeType":"YulAssignment","src":"40997:21:18","value":{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"41009:4:18"},{"kind":"number","nodeType":"YulLiteral","src":"41015:2:18","type":"","value":"10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"41005:3:18"},"nodeType":"YulFunctionCall","src":"41005:13:18"},"variableNames":[{"name":"temp","nodeType":"YulIdentifier","src":"40997:4:18"}]},{"body":{"nodeType":"YulBlock","src":"41086:9:18","statements":[{"nodeType":"YulBreak","src":"41088:5:18"}]},"condition":{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"41080:4:18"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41073:6:18"},"nodeType":"YulFunctionCall","src":"41073:12:18"},"nodeType":"YulIf","src":"41070:25:18"}]},"condition":{"kind":"number","nodeType":"YulLiteral","src":"40716:1:18","type":"","value":"1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"40718:2:18","statements":[]},"pre":{"nodeType":"YulBlock","src":"40694:21:18","statements":[{"nodeType":"YulVariableDeclaration","src":"40696:17:18","value":{"name":"value","nodeType":"YulIdentifier","src":"40708:5:18"},"variables":[{"name":"temp","nodeType":"YulTypedName","src":"40700:4:18","type":""}]}]},"src":"40690:419:18"},{"nodeType":"YulVariableDeclaration","src":"41123:27:18","value":{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"41141:3:18"},{"name":"str","nodeType":"YulIdentifier","src":"41146:3:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41137:3:18"},"nodeType":"YulFunctionCall","src":"41137:13:18"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"41127:6:18","type":""}]},{"nodeType":"YulAssignment","src":"41243:21:18","value":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"41254:3:18"},{"kind":"number","nodeType":"YulLiteral","src":"41259:4:18","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41250:3:18"},"nodeType":"YulFunctionCall","src":"41250:14:18"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"41243:3:18"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"41317:3:18"},{"name":"length","nodeType":"YulIdentifier","src":"41322:6:18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41310:6:18"},"nodeType":"YulFunctionCall","src":"41310:19:18"},"nodeType":"YulExpressionStatement","src":"41310:19:18"}]},"evmVersion":"london","externalReferences":[{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40279:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40368:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40474:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40739:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40750:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"40900:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"41146:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"41243:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"41254:3:18","valueSize":1},{"declaration":5690,"isOffset":false,"isSlot":false,"src":"41317:3:18","valueSize":1},{"declaration":5687,"isOffset":false,"isSlot":false,"src":"40708:5:18","valueSize":1}],"id":5692,"nodeType":"InlineAssembly","src":"39731:1608:18"}]},"documentation":{"id":5685,"nodeType":"StructuredDocumentation","src":"39546:86:18","text":" @dev Converts a uint256 to its ASCII string decimal representation."},"id":5694,"implemented":true,"kind":"function","modifiers":[],"name":"_toString","nameLocation":"39646:9:18","nodeType":"FunctionDefinition","parameters":{"id":5688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5687,"mutability":"mutable","name":"value","nameLocation":"39664:5:18","nodeType":"VariableDeclaration","scope":5694,"src":"39656:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5686,"name":"uint256","nodeType":"ElementaryTypeName","src":"39656:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"39655:15:18"},"returnParameters":{"id":5691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5690,"mutability":"mutable","name":"str","nameLocation":"39716:3:18","nodeType":"VariableDeclaration","scope":5694,"src":"39702:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5689,"name":"string","nodeType":"ElementaryTypeName","src":"39702:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"39701:19:18"},"scope":5695,"src":"39637:1708:18","stateMutability":"pure","virtual":true,"visibility":"internal"}],"scope":5696,"src":"895:40452:18","usedErrors":[5701,5704,5707,5710,5713,5716,5719,5722,5725,5728,5731,5734,5737]}],"src":"84:41264:18"},"id":18},"erc721a/contracts/IERC721A.sol":{"ast":{"absolutePath":"erc721a/contracts/IERC721A.sol","exportedSymbols":{"IERC721A":[5901]},"id":5902,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5697,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"84:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721A","contractDependencies":[],"contractKind":"interface","documentation":{"id":5698,"nodeType":"StructuredDocumentation","src":"109:37:19","text":" @dev Interface of ERC721A."},"fullyImplemented":false,"id":5901,"linearizedBaseContracts":[5901],"name":"IERC721A","nameLocation":"157:8:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5699,"nodeType":"StructuredDocumentation","src":"172:76:19","text":" The caller must own the token or be an approved operator."},"errorSelector":"cfb3b942","id":5701,"name":"ApprovalCallerNotOwnerNorApproved","nameLocation":"259:33:19","nodeType":"ErrorDefinition","parameters":{"id":5700,"nodeType":"ParameterList","parameters":[],"src":"292:2:19"},"src":"253:42:19"},{"documentation":{"id":5702,"nodeType":"StructuredDocumentation","src":"301:44:19","text":" The token does not exist."},"errorSelector":"cf4700e4","id":5704,"name":"ApprovalQueryForNonexistentToken","nameLocation":"356:32:19","nodeType":"ErrorDefinition","parameters":{"id":5703,"nodeType":"ParameterList","parameters":[],"src":"388:2:19"},"src":"350:41:19"},{"documentation":{"id":5705,"nodeType":"StructuredDocumentation","src":"397:65:19","text":" Cannot query the balance for the zero address."},"errorSelector":"8f4eb604","id":5707,"name":"BalanceQueryForZeroAddress","nameLocation":"473:26:19","nodeType":"ErrorDefinition","parameters":{"id":5706,"nodeType":"ParameterList","parameters":[],"src":"499:2:19"},"src":"467:35:19"},{"documentation":{"id":5708,"nodeType":"StructuredDocumentation","src":"508:51:19","text":" Cannot mint to the zero address."},"errorSelector":"2e076300","id":5710,"name":"MintToZeroAddress","nameLocation":"570:17:19","nodeType":"ErrorDefinition","parameters":{"id":5709,"nodeType":"ParameterList","parameters":[],"src":"587:2:19"},"src":"564:26:19"},{"documentation":{"id":5711,"nodeType":"StructuredDocumentation","src":"596:72:19","text":" The quantity of tokens minted must be more than zero."},"errorSelector":"b562e8dd","id":5713,"name":"MintZeroQuantity","nameLocation":"679:16:19","nodeType":"ErrorDefinition","parameters":{"id":5712,"nodeType":"ParameterList","parameters":[],"src":"695:2:19"},"src":"673:25:19"},{"documentation":{"id":5714,"nodeType":"StructuredDocumentation","src":"704:44:19","text":" The token does not exist."},"errorSelector":"df2d9b42","id":5716,"name":"OwnerQueryForNonexistentToken","nameLocation":"759:29:19","nodeType":"ErrorDefinition","parameters":{"id":5715,"nodeType":"ParameterList","parameters":[],"src":"788:2:19"},"src":"753:38:19"},{"documentation":{"id":5717,"nodeType":"StructuredDocumentation","src":"797:76:19","text":" The caller must own the token or be an approved operator."},"errorSelector":"59c896be","id":5719,"name":"TransferCallerNotOwnerNorApproved","nameLocation":"884:33:19","nodeType":"ErrorDefinition","parameters":{"id":5718,"nodeType":"ParameterList","parameters":[],"src":"917:2:19"},"src":"878:42:19"},{"documentation":{"id":5720,"nodeType":"StructuredDocumentation","src":"926:53:19","text":" The token must be owned by `from`."},"errorSelector":"a1148100","id":5722,"name":"TransferFromIncorrectOwner","nameLocation":"990:26:19","nodeType":"ErrorDefinition","parameters":{"id":5721,"nodeType":"ParameterList","parameters":[],"src":"1016:2:19"},"src":"984:35:19"},{"documentation":{"id":5723,"nodeType":"StructuredDocumentation","src":"1025:116:19","text":" Cannot safely transfer to a contract that does not implement the\n ERC721Receiver interface."},"errorSelector":"d1a57ed6","id":5725,"name":"TransferToNonERC721ReceiverImplementer","nameLocation":"1152:38:19","nodeType":"ErrorDefinition","parameters":{"id":5724,"nodeType":"ParameterList","parameters":[],"src":"1190:2:19"},"src":"1146:47:19"},{"documentation":{"id":5726,"nodeType":"StructuredDocumentation","src":"1199:55:19","text":" Cannot transfer to the zero address."},"errorSelector":"ea553b34","id":5728,"name":"TransferToZeroAddress","nameLocation":"1265:21:19","nodeType":"ErrorDefinition","parameters":{"id":5727,"nodeType":"ParameterList","parameters":[],"src":"1286:2:19"},"src":"1259:30:19"},{"documentation":{"id":5729,"nodeType":"StructuredDocumentation","src":"1295:44:19","text":" The token does not exist."},"errorSelector":"a14c4b50","id":5731,"name":"URIQueryForNonexistentToken","nameLocation":"1350:27:19","nodeType":"ErrorDefinition","parameters":{"id":5730,"nodeType":"ParameterList","parameters":[],"src":"1377:2:19"},"src":"1344:36:19"},{"documentation":{"id":5732,"nodeType":"StructuredDocumentation","src":"1386:79:19","text":" The `quantity` minted with ERC2309 exceeds the safety limit."},"errorSelector":"3db1f9af","id":5734,"name":"MintERC2309QuantityExceedsLimit","nameLocation":"1476:31:19","nodeType":"ErrorDefinition","parameters":{"id":5733,"nodeType":"ParameterList","parameters":[],"src":"1507:2:19"},"src":"1470:40:19"},{"documentation":{"id":5735,"nodeType":"StructuredDocumentation","src":"1516:83:19","text":" The `extraData` cannot be set on an unintialized ownership slot."},"errorSelector":"00d58153","id":5737,"name":"OwnershipNotInitializedForExtraData","nameLocation":"1610:35:19","nodeType":"ErrorDefinition","parameters":{"id":5736,"nodeType":"ParameterList","parameters":[],"src":"1645:2:19"},"src":"1604:44:19"},{"canonicalName":"IERC721A.TokenOwnership","id":5746,"members":[{"constant":false,"id":5739,"mutability":"mutable","name":"addr","nameLocation":"1912:4:19","nodeType":"VariableDeclaration","scope":5746,"src":"1904:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5738,"name":"address","nodeType":"ElementaryTypeName","src":"1904:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5741,"mutability":"mutable","name":"startTimestamp","nameLocation":"2017:14:19","nodeType":"VariableDeclaration","scope":5746,"src":"2010:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5740,"name":"uint64","nodeType":"ElementaryTypeName","src":"2010:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5743,"mutability":"mutable","name":"burned","nameLocation":"2092:6:19","nodeType":"VariableDeclaration","scope":5746,"src":"2087:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5742,"name":"bool","nodeType":"ElementaryTypeName","src":"2087:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5745,"mutability":"mutable","name":"extraData","nameLocation":"2203:9:19","nodeType":"VariableDeclaration","scope":5746,"src":"2196:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5744,"name":"uint24","nodeType":"ElementaryTypeName","src":"2196:6:19","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"name":"TokenOwnership","nameLocation":"1842:14:19","nodeType":"StructDefinition","scope":5901,"src":"1835:384:19","visibility":"public"},{"documentation":{"id":5747,"nodeType":"StructuredDocumentation","src":"2410:192:19","text":" @dev Returns the total number of tokens in existence.\n Burned tokens will reduce the count.\n To get the total number of tokens minted, please see {_totalMinted}."},"functionSelector":"18160ddd","id":5752,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2616:11:19","nodeType":"FunctionDefinition","parameters":{"id":5748,"nodeType":"ParameterList","parameters":[],"src":"2627:2:19"},"returnParameters":{"id":5751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5752,"src":"2653:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5749,"name":"uint256","nodeType":"ElementaryTypeName","src":"2653:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:9:19"},"scope":5901,"src":"2607:55:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5753,"nodeType":"StructuredDocumentation","src":"2849:341:19","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n to learn more about how these ids are created.\n This function call must use less than 30000 gas."},"functionSelector":"01ffc9a7","id":5760,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3204:17:19","nodeType":"FunctionDefinition","parameters":{"id":5756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5755,"mutability":"mutable","name":"interfaceId","nameLocation":"3229:11:19","nodeType":"VariableDeclaration","scope":5760,"src":"3222:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5754,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3222:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3221:20:19"},"returnParameters":{"id":5759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5760,"src":"3265:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5757,"name":"bool","nodeType":"ElementaryTypeName","src":"3265:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3264:6:19"},"scope":5901,"src":"3195:76:19","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":5761,"nodeType":"StructuredDocumentation","src":"3458:88:19","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":5769,"name":"Transfer","nameLocation":"3557:8:19","nodeType":"EventDefinition","parameters":{"id":5768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5763,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"3582:4:19","nodeType":"VariableDeclaration","scope":5769,"src":"3566:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5762,"name":"address","nodeType":"ElementaryTypeName","src":"3566:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5765,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"3604:2:19","nodeType":"VariableDeclaration","scope":5769,"src":"3588:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5764,"name":"address","nodeType":"ElementaryTypeName","src":"3588:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5767,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"3624:7:19","nodeType":"VariableDeclaration","scope":5769,"src":"3608:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5766,"name":"uint256","nodeType":"ElementaryTypeName","src":"3608:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3565:67:19"},"src":"3551:82:19"},{"anonymous":false,"documentation":{"id":5770,"nodeType":"StructuredDocumentation","src":"3639:94:19","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":5778,"name":"Approval","nameLocation":"3744:8:19","nodeType":"EventDefinition","parameters":{"id":5777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5772,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3769:5:19","nodeType":"VariableDeclaration","scope":5778,"src":"3753:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5771,"name":"address","nodeType":"ElementaryTypeName","src":"3753:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5774,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"3792:8:19","nodeType":"VariableDeclaration","scope":5778,"src":"3776:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5773,"name":"address","nodeType":"ElementaryTypeName","src":"3776:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5776,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"3818:7:19","nodeType":"VariableDeclaration","scope":5778,"src":"3802:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5775,"name":"uint256","nodeType":"ElementaryTypeName","src":"3802:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:74:19"},"src":"3738:89:19"},{"anonymous":false,"documentation":{"id":5779,"nodeType":"StructuredDocumentation","src":"3833:124:19","text":" @dev Emitted when `owner` enables or disables\n (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":5787,"name":"ApprovalForAll","nameLocation":"3968:14:19","nodeType":"EventDefinition","parameters":{"id":5786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5781,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3999:5:19","nodeType":"VariableDeclaration","scope":5787,"src":"3983:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5780,"name":"address","nodeType":"ElementaryTypeName","src":"3983:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5783,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"4022:8:19","nodeType":"VariableDeclaration","scope":5787,"src":"4006:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5782,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5785,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"4037:8:19","nodeType":"VariableDeclaration","scope":5787,"src":"4032:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5784,"name":"bool","nodeType":"ElementaryTypeName","src":"4032:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3982:64:19"},"src":"3962:85:19"},{"documentation":{"id":5788,"nodeType":"StructuredDocumentation","src":"4053:74:19","text":" @dev Returns the number of tokens in `owner`'s account."},"functionSelector":"70a08231","id":5795,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4141:9:19","nodeType":"FunctionDefinition","parameters":{"id":5791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5790,"mutability":"mutable","name":"owner","nameLocation":"4159:5:19","nodeType":"VariableDeclaration","scope":5795,"src":"4151:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5789,"name":"address","nodeType":"ElementaryTypeName","src":"4151:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4150:15:19"},"returnParameters":{"id":5794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5793,"mutability":"mutable","name":"balance","nameLocation":"4197:7:19","nodeType":"VariableDeclaration","scope":5795,"src":"4189:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5792,"name":"uint256","nodeType":"ElementaryTypeName","src":"4189:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4188:17:19"},"scope":5901,"src":"4132:74:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5796,"nodeType":"StructuredDocumentation","src":"4212:131:19","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":5803,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4357:7:19","nodeType":"FunctionDefinition","parameters":{"id":5799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5798,"mutability":"mutable","name":"tokenId","nameLocation":"4373:7:19","nodeType":"VariableDeclaration","scope":5803,"src":"4365:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5797,"name":"uint256","nodeType":"ElementaryTypeName","src":"4365:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4364:17:19"},"returnParameters":{"id":5802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5801,"mutability":"mutable","name":"owner","nameLocation":"4413:5:19","nodeType":"VariableDeclaration","scope":5803,"src":"4405:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5800,"name":"address","nodeType":"ElementaryTypeName","src":"4405:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4404:15:19"},"scope":5901,"src":"4348:72:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5804,"nodeType":"StructuredDocumentation","src":"4426:711:19","text":" @dev Safely transfers `tokenId` token from `from` to `to`,\n checking first that contract recipients are aware of the ERC721 protocol\n to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move\n this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":5815,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5151:16:19","nodeType":"FunctionDefinition","parameters":{"id":5813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5806,"mutability":"mutable","name":"from","nameLocation":"5185:4:19","nodeType":"VariableDeclaration","scope":5815,"src":"5177:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5805,"name":"address","nodeType":"ElementaryTypeName","src":"5177:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5808,"mutability":"mutable","name":"to","nameLocation":"5207:2:19","nodeType":"VariableDeclaration","scope":5815,"src":"5199:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5807,"name":"address","nodeType":"ElementaryTypeName","src":"5199:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5810,"mutability":"mutable","name":"tokenId","nameLocation":"5227:7:19","nodeType":"VariableDeclaration","scope":5815,"src":"5219:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5809,"name":"uint256","nodeType":"ElementaryTypeName","src":"5219:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5812,"mutability":"mutable","name":"data","nameLocation":"5259:4:19","nodeType":"VariableDeclaration","scope":5815,"src":"5244:19:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5811,"name":"bytes","nodeType":"ElementaryTypeName","src":"5244:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5167:102:19"},"returnParameters":{"id":5814,"nodeType":"ParameterList","parameters":[],"src":"5286:0:19"},"scope":5901,"src":"5142:145:19","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":5816,"nodeType":"StructuredDocumentation","src":"5293:80:19","text":" @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"functionSelector":"42842e0e","id":5825,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5387:16:19","nodeType":"FunctionDefinition","parameters":{"id":5823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5818,"mutability":"mutable","name":"from","nameLocation":"5421:4:19","nodeType":"VariableDeclaration","scope":5825,"src":"5413:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5817,"name":"address","nodeType":"ElementaryTypeName","src":"5413:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5820,"mutability":"mutable","name":"to","nameLocation":"5443:2:19","nodeType":"VariableDeclaration","scope":5825,"src":"5435:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5819,"name":"address","nodeType":"ElementaryTypeName","src":"5435:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5822,"mutability":"mutable","name":"tokenId","nameLocation":"5463:7:19","nodeType":"VariableDeclaration","scope":5825,"src":"5455:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5821,"name":"uint256","nodeType":"ElementaryTypeName","src":"5455:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5403:73:19"},"returnParameters":{"id":5824,"nodeType":"ParameterList","parameters":[],"src":"5493:0:19"},"scope":5901,"src":"5378:116:19","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":5826,"nodeType":"StructuredDocumentation","src":"5500:512:19","text":" @dev Transfers `tokenId` from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":5835,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"6026:12:19","nodeType":"FunctionDefinition","parameters":{"id":5833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"from","nameLocation":"6056:4:19","nodeType":"VariableDeclaration","scope":5835,"src":"6048:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5827,"name":"address","nodeType":"ElementaryTypeName","src":"6048:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5830,"mutability":"mutable","name":"to","nameLocation":"6078:2:19","nodeType":"VariableDeclaration","scope":5835,"src":"6070:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5829,"name":"address","nodeType":"ElementaryTypeName","src":"6070:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5832,"mutability":"mutable","name":"tokenId","nameLocation":"6098:7:19","nodeType":"VariableDeclaration","scope":5835,"src":"6090:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5831,"name":"uint256","nodeType":"ElementaryTypeName","src":"6090:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6038:73:19"},"returnParameters":{"id":5834,"nodeType":"ParameterList","parameters":[],"src":"6128:0:19"},"scope":5901,"src":"6017:112:19","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":5836,"nodeType":"StructuredDocumentation","src":"6135:459:19","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the\n zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":5843,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"6608:7:19","nodeType":"FunctionDefinition","parameters":{"id":5841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5838,"mutability":"mutable","name":"to","nameLocation":"6624:2:19","nodeType":"VariableDeclaration","scope":5843,"src":"6616:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5837,"name":"address","nodeType":"ElementaryTypeName","src":"6616:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5840,"mutability":"mutable","name":"tokenId","nameLocation":"6636:7:19","nodeType":"VariableDeclaration","scope":5843,"src":"6628:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5839,"name":"uint256","nodeType":"ElementaryTypeName","src":"6628:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6615:29:19"},"returnParameters":{"id":5842,"nodeType":"ParameterList","parameters":[],"src":"6661:0:19"},"scope":5901,"src":"6599:63:19","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":5844,"nodeType":"StructuredDocumentation","src":"6668:316:19","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom}\n for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":5851,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"6998:17:19","nodeType":"FunctionDefinition","parameters":{"id":5849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5846,"mutability":"mutable","name":"operator","nameLocation":"7024:8:19","nodeType":"VariableDeclaration","scope":5851,"src":"7016:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5845,"name":"address","nodeType":"ElementaryTypeName","src":"7016:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5848,"mutability":"mutable","name":"_approved","nameLocation":"7039:9:19","nodeType":"VariableDeclaration","scope":5851,"src":"7034:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5847,"name":"bool","nodeType":"ElementaryTypeName","src":"7034:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7015:34:19"},"returnParameters":{"id":5850,"nodeType":"ParameterList","parameters":[],"src":"7058:0:19"},"scope":5901,"src":"6989:70:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5852,"nodeType":"StructuredDocumentation","src":"7065:139:19","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":5859,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"7218:11:19","nodeType":"FunctionDefinition","parameters":{"id":5855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5854,"mutability":"mutable","name":"tokenId","nameLocation":"7238:7:19","nodeType":"VariableDeclaration","scope":5859,"src":"7230:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5853,"name":"uint256","nodeType":"ElementaryTypeName","src":"7230:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7229:17:19"},"returnParameters":{"id":5858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5857,"mutability":"mutable","name":"operator","nameLocation":"7278:8:19","nodeType":"VariableDeclaration","scope":5859,"src":"7270:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5856,"name":"address","nodeType":"ElementaryTypeName","src":"7270:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7269:18:19"},"scope":5901,"src":"7209:79:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5860,"nodeType":"StructuredDocumentation","src":"7294:139:19","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":5869,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"7447:16:19","nodeType":"FunctionDefinition","parameters":{"id":5865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5862,"mutability":"mutable","name":"owner","nameLocation":"7472:5:19","nodeType":"VariableDeclaration","scope":5869,"src":"7464:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5861,"name":"address","nodeType":"ElementaryTypeName","src":"7464:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5864,"mutability":"mutable","name":"operator","nameLocation":"7487:8:19","nodeType":"VariableDeclaration","scope":5869,"src":"7479:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5863,"name":"address","nodeType":"ElementaryTypeName","src":"7479:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7463:33:19"},"returnParameters":{"id":5868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5869,"src":"7520:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5866,"name":"bool","nodeType":"ElementaryTypeName","src":"7520:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7519:6:19"},"scope":5901,"src":"7438:88:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5870,"nodeType":"StructuredDocumentation","src":"7717:58:19","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":5875,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"7789:4:19","nodeType":"FunctionDefinition","parameters":{"id":5871,"nodeType":"ParameterList","parameters":[],"src":"7793:2:19"},"returnParameters":{"id":5874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5875,"src":"7819:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5872,"name":"string","nodeType":"ElementaryTypeName","src":"7819:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7818:15:19"},"scope":5901,"src":"7780:54:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5876,"nodeType":"StructuredDocumentation","src":"7840:60:19","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":5881,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"7914:6:19","nodeType":"FunctionDefinition","parameters":{"id":5877,"nodeType":"ParameterList","parameters":[],"src":"7920:2:19"},"returnParameters":{"id":5880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5881,"src":"7946:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5878,"name":"string","nodeType":"ElementaryTypeName","src":"7946:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7945:15:19"},"scope":5901,"src":"7905:56:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5882,"nodeType":"StructuredDocumentation","src":"7967:90:19","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":5889,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"8071:8:19","nodeType":"FunctionDefinition","parameters":{"id":5885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5884,"mutability":"mutable","name":"tokenId","nameLocation":"8088:7:19","nodeType":"VariableDeclaration","scope":5889,"src":"8080:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5883,"name":"uint256","nodeType":"ElementaryTypeName","src":"8080:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8079:17:19"},"returnParameters":{"id":5888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5889,"src":"8120:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5886,"name":"string","nodeType":"ElementaryTypeName","src":"8120:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8119:15:19"},"scope":5901,"src":"8062:73:19","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":5890,"nodeType":"StructuredDocumentation","src":"8322:267:19","text":" @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n (inclusive) is transferred from `from` to `to`, as defined in the\n [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n See {_mintERC2309} for more details."},"eventSelector":"deaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d","id":5900,"name":"ConsecutiveTransfer","nameLocation":"8600:19:19","nodeType":"EventDefinition","parameters":{"id":5899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5892,"indexed":true,"mutability":"mutable","name":"fromTokenId","nameLocation":"8636:11:19","nodeType":"VariableDeclaration","scope":5900,"src":"8620:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5891,"name":"uint256","nodeType":"ElementaryTypeName","src":"8620:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5894,"indexed":false,"mutability":"mutable","name":"toTokenId","nameLocation":"8657:9:19","nodeType":"VariableDeclaration","scope":5900,"src":"8649:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5893,"name":"uint256","nodeType":"ElementaryTypeName","src":"8649:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5896,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"8684:4:19","nodeType":"VariableDeclaration","scope":5900,"src":"8668:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5895,"name":"address","nodeType":"ElementaryTypeName","src":"8668:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5898,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"8706:2:19","nodeType":"VariableDeclaration","scope":5900,"src":"8690:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5897,"name":"address","nodeType":"ElementaryTypeName","src":"8690:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8619:90:19"},"src":"8594:116:19"}],"scope":5902,"src":"147:8565:19","usedErrors":[5701,5704,5707,5710,5713,5716,5719,5722,5725,5728,5731,5734,5737]}],"src":"84:8629:19"},"id":19},"node_modules/solady/src/auth/Ownable.sol":{"ast":{"absolutePath":"node_modules/solady/src/auth/Ownable.sol","exportedSymbols":{"Ownable":[6289]},"id":6290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6097,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:20"},{"abstract":true,"baseContracts":[],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":6098,"nodeType":"StructuredDocumentation","src":"57:514:20","text":"@notice Simple single owner authorization mixin.\n @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n @dev Note:\n This implementation does NOT auto-initialize the owner to `msg.sender`.\n You MUST call the `_initializeOwner` in the constructor / initializer.\n While the ownable portion follows\n [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\n the nomenclature for the 2-step ownership handover may be unique to this codebase."},"fullyImplemented":true,"id":6289,"linearizedBaseContracts":[6289],"name":"Ownable","nameLocation":"589:7:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6099,"nodeType":"StructuredDocumentation","src":"886:59:20","text":"@dev The caller is not authorized to call the function."},"errorSelector":"82b42900","id":6101,"name":"Unauthorized","nameLocation":"956:12:20","nodeType":"ErrorDefinition","parameters":{"id":6100,"nodeType":"ParameterList","parameters":[],"src":"968:2:20"},"src":"950:21:20"},{"documentation":{"id":6102,"nodeType":"StructuredDocumentation","src":"977:51:20","text":"@dev The `newOwner` cannot be the zero address."},"errorSelector":"7448fbae","id":6104,"name":"NewOwnerIsZeroAddress","nameLocation":"1039:21:20","nodeType":"ErrorDefinition","parameters":{"id":6103,"nodeType":"ParameterList","parameters":[],"src":"1060:2:20"},"src":"1033:30:20"},{"documentation":{"id":6105,"nodeType":"StructuredDocumentation","src":"1069:67:20","text":"@dev The `pendingOwner` does not have a valid handover request."},"errorSelector":"6f5e8818","id":6107,"name":"NoHandoverRequest","nameLocation":"1147:17:20","nodeType":"ErrorDefinition","parameters":{"id":6106,"nodeType":"ParameterList","parameters":[],"src":"1164:2:20"},"src":"1141:26:20"},{"documentation":{"id":6108,"nodeType":"StructuredDocumentation","src":"1173:34:20","text":"@dev Cannot double-initialize."},"errorSelector":"0dc149f0","id":6110,"name":"AlreadyInitialized","nameLocation":"1218:18:20","nodeType":"ErrorDefinition","parameters":{"id":6109,"nodeType":"ParameterList","parameters":[],"src":"1236:2:20"},"src":"1212:27:20"},{"anonymous":false,"documentation":{"id":6111,"nodeType":"StructuredDocumentation","src":"1528:310:20","text":"@dev The ownership is transferred from `oldOwner` to `newOwner`.\n This event is intentionally kept the same as OpenZeppelin's Ownable to be\n compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n despite it not being as lightweight as a single argument event."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":6117,"name":"OwnershipTransferred","nameLocation":"1849:20:20","nodeType":"EventDefinition","parameters":{"id":6116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6113,"indexed":true,"mutability":"mutable","name":"oldOwner","nameLocation":"1886:8:20","nodeType":"VariableDeclaration","scope":6117,"src":"1870:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6112,"name":"address","nodeType":"ElementaryTypeName","src":"1870:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6115,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1912:8:20","nodeType":"VariableDeclaration","scope":6117,"src":"1896:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6114,"name":"address","nodeType":"ElementaryTypeName","src":"1896:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1869:52:20"},"src":"1843:79:20"},{"anonymous":false,"documentation":{"id":6118,"nodeType":"StructuredDocumentation","src":"1928:68:20","text":"@dev An ownership handover to `pendingOwner` has been requested."},"eventSelector":"dbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d","id":6122,"name":"OwnershipHandoverRequested","nameLocation":"2007:26:20","nodeType":"EventDefinition","parameters":{"id":6121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6120,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"2050:12:20","nodeType":"VariableDeclaration","scope":6122,"src":"2034:28:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6119,"name":"address","nodeType":"ElementaryTypeName","src":"2034:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2033:30:20"},"src":"2001:63:20"},{"anonymous":false,"documentation":{"id":6123,"nodeType":"StructuredDocumentation","src":"2070:68:20","text":"@dev The ownership handover to `pendingOwner` has been canceled."},"eventSelector":"fa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92","id":6127,"name":"OwnershipHandoverCanceled","nameLocation":"2149:25:20","nodeType":"EventDefinition","parameters":{"id":6126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6125,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"2191:12:20","nodeType":"VariableDeclaration","scope":6127,"src":"2175:28:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6124,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2174:30:20"},"src":"2143:62:20"},{"constant":true,"documentation":{"id":6128,"nodeType":"StructuredDocumentation","src":"2211:69:20","text":"@dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`."},"id":6131,"mutability":"constant","name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nameLocation":"2310:38:20","nodeType":"VariableDeclaration","scope":6289,"src":"2285:140:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6129,"name":"uint256","nodeType":"ElementaryTypeName","src":"2285:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307838626530303739633533313635393134313334346364316664306134663238343139343937663937323261336461616665336234313836663662363435376530","id":6130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:66:20","typeDescriptions":{"typeIdentifier":"t_rational_63267312222310607310220992301550539520881909915348243260808268974908359596000_by_1","typeString":"int_const 6326...(69 digits omitted)...6000"},"value":"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"},"visibility":"private"},{"constant":true,"documentation":{"id":6132,"nodeType":"StructuredDocumentation","src":"2432:67:20","text":"@dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`."},"id":6135,"mutability":"constant","name":"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE","nameLocation":"2529:45:20","nodeType":"VariableDeclaration","scope":6289,"src":"2504:147:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6133,"name":"uint256","nodeType":"ElementaryTypeName","src":"2504:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864626633366131303764613139653439353237613731373661316261626639363362346230666638636465333565653335643663643866316639616337653164","id":6134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2585:66:20","typeDescriptions":{"typeIdentifier":"t_rational_99486589706178915293482045537067896628184784474209892898124391061398315892253_by_1","typeString":"int_const 9948...(69 digits omitted)...2253"},"value":"0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d"},"visibility":"private"},{"constant":true,"documentation":{"id":6136,"nodeType":"StructuredDocumentation","src":"2658:66:20","text":"@dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`."},"id":6139,"mutability":"constant","name":"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE","nameLocation":"2754:44:20","nodeType":"VariableDeclaration","scope":6289,"src":"2729:146:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2729:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307866613762386561623764613637663431326363393537356564343334363434363866396266626165383964313637353931373334366361366438666533633932","id":6138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2809:66:20","typeDescriptions":{"typeIdentifier":"t_rational_113296519006148992096626879868577423813870114622160551413976512868841544367250_by_1","typeString":"int_const 1132...(70 digits omitted)...7250"},"value":"0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92"},"visibility":"private"},{"constant":true,"documentation":{"id":6140,"nodeType":"StructuredDocumentation","src":"3165:334:20","text":"@dev The owner slot is given by:\n `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\n It is intentionally chosen to be a high value\n to avoid collision with lower slots.\n The choice of manual storage layout is to enable compatibility\n with both regular and upgradeable contracts."},"id":6143,"mutability":"constant","name":"_OWNER_SLOT","nameLocation":"3530:11:20","nodeType":"VariableDeclaration","scope":6289,"src":"3504:114:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3504:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663734383733393237","id":6142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3552:66:20","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007910789691687_by_1","typeString":"int_const 1157...(70 digits omitted)...1687"},"value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927"},"visibility":"internal"},{"constant":true,"documentation":{"id":6144,"nodeType":"StructuredDocumentation","src":"3625:276:20","text":"The ownership handover slot of `newOwner` is given by:\n ```\n     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n     let handoverSlot := keccak256(0x00, 0x20)\n ```\n It stores the expiry timestamp of the two-step ownership handover."},"id":6147,"mutability":"constant","name":"_HANDOVER_SLOT_SEED","nameLocation":"3931:19:20","nodeType":"VariableDeclaration","scope":6289,"src":"3906:57:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6145,"name":"uint256","nodeType":"ElementaryTypeName","src":"3906:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783338396137356531","id":6146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3953:10:20","typeDescriptions":{"typeIdentifier":"t_rational_949646817_by_1","typeString":"int_const 949646817"},"value":"0x389a75e1"},"visibility":"private"},{"body":{"id":6153,"nodeType":"Block","src":"4424:2:20","statements":[]},"documentation":{"id":6148,"nodeType":"StructuredDocumentation","src":"4253:90:20","text":"@dev Override to return true to make `_initializeOwner` prevent double-initialization."},"id":6154,"implemented":true,"kind":"function","modifiers":[],"name":"_guardInitializeOwner","nameLocation":"4357:21:20","nodeType":"FunctionDefinition","parameters":{"id":6149,"nodeType":"ParameterList","parameters":[],"src":"4378:2:20"},"returnParameters":{"id":6152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6151,"mutability":"mutable","name":"guard","nameLocation":"4417:5:20","nodeType":"VariableDeclaration","scope":6154,"src":"4412:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6150,"name":"bool","nodeType":"ElementaryTypeName","src":"4412:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4411:12:20"},"scope":6289,"src":"4348:78:20","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":6167,"nodeType":"Block","src":"4944:1129:20","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":6160,"name":"_guardInitializeOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"4958:21:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bool_$","typeString":"function () pure returns (bool)"}},"id":6161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4958:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6165,"nodeType":"Block","src":"5649:418:20","statements":[{"AST":{"nodeType":"YulBlock","src":"5719:338:20","statements":[{"nodeType":"YulAssignment","src":"5781:38:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5797:2:20","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5805:2:20","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5809:8:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5801:3:20"},"nodeType":"YulFunctionCall","src":"5801:17:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5793:3:20"},"nodeType":"YulFunctionCall","src":"5793:26:20"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5781:8:20"}]},{"expression":{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"5883:11:20"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5896:8:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5876:6:20"},"nodeType":"YulFunctionCall","src":"5876:29:20"},"nodeType":"YulExpressionStatement","src":"5876:29:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5985:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5988:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"5991:38:20"},{"kind":"number","nodeType":"YulLiteral","src":"6031:1:20","type":"","value":"0"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6034:8:20"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"5980:4:20"},"nodeType":"YulFunctionCall","src":"5980:63:20"},"nodeType":"YulExpressionStatement","src":"5980:63:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6131,"isOffset":false,"isSlot":false,"src":"5991:38:20","valueSize":1},{"declaration":6143,"isOffset":false,"isSlot":false,"src":"5883:11:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5781:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5809:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5896:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"6034:8:20","valueSize":1}],"id":6164,"nodeType":"InlineAssembly","src":"5710:347:20"}]},"id":6166,"nodeType":"IfStatement","src":"4954:1113:20","trueBody":{"id":6163,"nodeType":"Block","src":"4983:660:20","statements":[{"AST":{"nodeType":"YulBlock","src":"5053:580:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5071:28:20","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"5088:11:20"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"5075:9:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"5136:130:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5165:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"5171:10:20","type":"","value":"0x0dc149f0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5158:6:20"},"nodeType":"YulFunctionCall","src":"5158:24:20"},"nodeType":"YulExpressionStatement","src":"5158:24:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5237:4:20","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"5243:4:20","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5230:6:20"},"nodeType":"YulFunctionCall","src":"5230:18:20"},"nodeType":"YulExpressionStatement","src":"5230:18:20"}]},"condition":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"5125:9:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5119:5:20"},"nodeType":"YulFunctionCall","src":"5119:16:20"},"nodeType":"YulIf","src":"5116:150:20"},{"nodeType":"YulAssignment","src":"5327:38:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5343:2:20","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5351:2:20","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5355:8:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5347:3:20"},"nodeType":"YulFunctionCall","src":"5347:17:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5339:3:20"},"nodeType":"YulFunctionCall","src":"5339:26:20"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5327:8:20"}]},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"5429:9:20"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5443:8:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5457:3:20","type":"","value":"255"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5469:8:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5462:6:20"},"nodeType":"YulFunctionCall","src":"5462:16:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5453:3:20"},"nodeType":"YulFunctionCall","src":"5453:26:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5440:2:20"},"nodeType":"YulFunctionCall","src":"5440:40:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5422:6:20"},"nodeType":"YulFunctionCall","src":"5422:59:20"},"nodeType":"YulExpressionStatement","src":"5422:59:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5561:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5564:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"5567:38:20"},{"kind":"number","nodeType":"YulLiteral","src":"5607:1:20","type":"","value":"0"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5610:8:20"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"5556:4:20"},"nodeType":"YulFunctionCall","src":"5556:63:20"},"nodeType":"YulExpressionStatement","src":"5556:63:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6131,"isOffset":false,"isSlot":false,"src":"5567:38:20","valueSize":1},{"declaration":6143,"isOffset":false,"isSlot":false,"src":"5088:11:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5327:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5355:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5443:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5469:8:20","valueSize":1},{"declaration":6157,"isOffset":false,"isSlot":false,"src":"5610:8:20","valueSize":1}],"id":6162,"nodeType":"InlineAssembly","src":"5044:589:20"}]}}]},"documentation":{"id":6155,"nodeType":"StructuredDocumentation","src":"4432:446:20","text":"@dev Initializes the owner directly without authorization guard.\n This function must be called upon initialization,\n regardless of whether the contract is upgradeable or not.\n This is to enable generalization to both regular and upgradeable contracts,\n and to save gas in case the initial owner is not the caller.\n For performance reasons, this function will not check if there\n is an existing owner."},"id":6168,"implemented":true,"kind":"function","modifiers":[],"name":"_initializeOwner","nameLocation":"4892:16:20","nodeType":"FunctionDefinition","parameters":{"id":6158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6157,"mutability":"mutable","name":"newOwner","nameLocation":"4917:8:20","nodeType":"VariableDeclaration","scope":6168,"src":"4909:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6156,"name":"address","nodeType":"ElementaryTypeName","src":"4909:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4908:18:20"},"returnParameters":{"id":6159,"nodeType":"ParameterList","parameters":[],"src":"4944:0:20"},"scope":6289,"src":"4883:1190:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6181,"nodeType":"Block","src":"6199:1035:20","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":6174,"name":"_guardInitializeOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"6213:21:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bool_$","typeString":"function () pure returns (bool)"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6213:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6179,"nodeType":"Block","src":"6752:476:20","statements":[{"AST":{"nodeType":"YulBlock","src":"6822:396:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6840:28:20","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"6857:11:20"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"6844:9:20","type":""}]},{"nodeType":"YulAssignment","src":"6929:38:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6945:2:20","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6953:2:20","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6957:8:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6949:3:20"},"nodeType":"YulFunctionCall","src":"6949:17:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6941:3:20"},"nodeType":"YulFunctionCall","src":"6941:26:20"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6929:8:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7047:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7050:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"7053:38:20"},{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"7099:9:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7093:5:20"},"nodeType":"YulFunctionCall","src":"7093:16:20"},{"name":"newOwner","nodeType":"YulIdentifier","src":"7111:8:20"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"7042:4:20"},"nodeType":"YulFunctionCall","src":"7042:78:20"},"nodeType":"YulExpressionStatement","src":"7042:78:20"},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"7184:9:20"},{"name":"newOwner","nodeType":"YulIdentifier","src":"7195:8:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7177:6:20"},"nodeType":"YulFunctionCall","src":"7177:27:20"},"nodeType":"YulExpressionStatement","src":"7177:27:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6131,"isOffset":false,"isSlot":false,"src":"7053:38:20","valueSize":1},{"declaration":6143,"isOffset":false,"isSlot":false,"src":"6857:11:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6929:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6957:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"7111:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"7195:8:20","valueSize":1}],"id":6178,"nodeType":"InlineAssembly","src":"6813:405:20"}]},"id":6180,"nodeType":"IfStatement","src":"6209:1019:20","trueBody":{"id":6177,"nodeType":"Block","src":"6238:508:20","statements":[{"AST":{"nodeType":"YulBlock","src":"6308:428:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6326:28:20","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"6343:11:20"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"6330:9:20","type":""}]},{"nodeType":"YulAssignment","src":"6415:38:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6431:2:20","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6439:2:20","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6443:8:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6435:3:20"},"nodeType":"YulFunctionCall","src":"6435:17:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6427:3:20"},"nodeType":"YulFunctionCall","src":"6427:26:20"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6415:8:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6533:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6536:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"6539:38:20"},{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"6585:9:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6579:5:20"},"nodeType":"YulFunctionCall","src":"6579:16:20"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6597:8:20"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"6528:4:20"},"nodeType":"YulFunctionCall","src":"6528:78:20"},"nodeType":"YulExpressionStatement","src":"6528:78:20"},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"6670:9:20"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6684:8:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6698:3:20","type":"","value":"255"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6710:8:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6703:6:20"},"nodeType":"YulFunctionCall","src":"6703:16:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6694:3:20"},"nodeType":"YulFunctionCall","src":"6694:26:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6681:2:20"},"nodeType":"YulFunctionCall","src":"6681:40:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6663:6:20"},"nodeType":"YulFunctionCall","src":"6663:59:20"},"nodeType":"YulExpressionStatement","src":"6663:59:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6131,"isOffset":false,"isSlot":false,"src":"6539:38:20","valueSize":1},{"declaration":6143,"isOffset":false,"isSlot":false,"src":"6343:11:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6415:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6443:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6597:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6684:8:20","valueSize":1},{"declaration":6171,"isOffset":false,"isSlot":false,"src":"6710:8:20","valueSize":1}],"id":6176,"nodeType":"InlineAssembly","src":"6299:437:20"}]}}]},"documentation":{"id":6169,"nodeType":"StructuredDocumentation","src":"6079:61:20","text":"@dev Sets the owner directly without authorization guard."},"id":6182,"implemented":true,"kind":"function","modifiers":[],"name":"_setOwner","nameLocation":"6154:9:20","nodeType":"FunctionDefinition","parameters":{"id":6172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6171,"mutability":"mutable","name":"newOwner","nameLocation":"6172:8:20","nodeType":"VariableDeclaration","scope":6182,"src":"6164:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6170,"name":"address","nodeType":"ElementaryTypeName","src":"6164:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6163:18:20"},"returnParameters":{"id":6173,"nodeType":"ParameterList","parameters":[],"src":"6199:0:20"},"scope":6289,"src":"6145:1089:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6187,"nodeType":"Block","src":"7337:310:20","statements":[{"AST":{"nodeType":"YulBlock","src":"7399:242:20","statements":[{"body":{"nodeType":"YulBlock","src":"7519:112:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7544:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7550:10:20","type":"","value":"0x82b42900"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7537:6:20"},"nodeType":"YulFunctionCall","src":"7537:24:20"},"nodeType":"YulExpressionStatement","src":"7537:24:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7606:4:20","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"7612:4:20","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7599:6:20"},"nodeType":"YulFunctionCall","src":"7599:18:20"},"nodeType":"YulExpressionStatement","src":"7599:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"7488:6:20"},"nodeType":"YulFunctionCall","src":"7488:8:20"},{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"7504:11:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7498:5:20"},"nodeType":"YulFunctionCall","src":"7498:18:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7485:2:20"},"nodeType":"YulFunctionCall","src":"7485:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7478:6:20"},"nodeType":"YulFunctionCall","src":"7478:40:20"},"nodeType":"YulIf","src":"7475:156:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6143,"isOffset":false,"isSlot":false,"src":"7504:11:20","valueSize":1}],"id":6186,"nodeType":"InlineAssembly","src":"7390:251:20"}]},"documentation":{"id":6183,"nodeType":"StructuredDocumentation","src":"7240:47:20","text":"@dev Throws if the sender is not the owner."},"id":6188,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"7301:11:20","nodeType":"FunctionDefinition","parameters":{"id":6184,"nodeType":"ParameterList","parameters":[],"src":"7312:2:20"},"returnParameters":{"id":6185,"nodeType":"ParameterList","parameters":[],"src":"7337:0:20"},"scope":6289,"src":"7292:355:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6198,"nodeType":"Block","src":"7955:33:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_rational_172800_by_1","typeString":"int_const 172800"},"id":6196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":6194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7972:2:20","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"33363030","id":6195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7977:4:20","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"3600"},"src":"7972:9:20","typeDescriptions":{"typeIdentifier":"t_rational_172800_by_1","typeString":"int_const 172800"}},"functionReturnParameters":6193,"id":6197,"nodeType":"Return","src":"7965:16:20"}]},"documentation":{"id":6189,"nodeType":"StructuredDocumentation","src":"7653:220:20","text":"@dev Returns how long a two-step ownership handover is valid for in seconds.\n Override to return a different value if needed.\n Made internal to conserve bytecode. Wrap it in a public function if needed."},"id":6199,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipHandoverValidFor","nameLocation":"7887:26:20","nodeType":"FunctionDefinition","parameters":{"id":6190,"nodeType":"ParameterList","parameters":[],"src":"7913:2:20"},"returnParameters":{"id":6193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6199,"src":"7947:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6191,"name":"uint64","nodeType":"ElementaryTypeName","src":"7947:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7946:8:20"},"scope":6289,"src":"7878:110:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6212,"nodeType":"Block","src":"8426:271:20","statements":[{"AST":{"nodeType":"YulBlock","src":"8488:174:20","statements":[{"body":{"nodeType":"YulBlock","src":"8531:121:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8556:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8562:10:20","type":"","value":"0x7448fbae"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8549:6:20"},"nodeType":"YulFunctionCall","src":"8549:24:20"},"nodeType":"YulExpressionStatement","src":"8549:24:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8627:4:20","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"8633:4:20","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8620:6:20"},"nodeType":"YulFunctionCall","src":"8620:18:20"},"nodeType":"YulExpressionStatement","src":"8620:18:20"}]},"condition":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8516:2:20","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"8520:8:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8512:3:20"},"nodeType":"YulFunctionCall","src":"8512:17:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8505:6:20"},"nodeType":"YulFunctionCall","src":"8505:25:20"},"nodeType":"YulIf","src":"8502:150:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6202,"isOffset":false,"isSlot":false,"src":"8520:8:20","valueSize":1}],"id":6207,"nodeType":"InlineAssembly","src":"8479:183:20"},{"expression":{"arguments":[{"id":6209,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"8681:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6208,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"8671:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8671:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6211,"nodeType":"ExpressionStatement","src":"8671:19:20"}]},"documentation":{"id":6200,"nodeType":"StructuredDocumentation","src":"8277:66:20","text":"@dev Allows the owner to transfer the ownership to `newOwner`."},"functionSelector":"f2fde38b","id":6213,"implemented":true,"kind":"function","modifiers":[{"id":6205,"kind":"modifierInvocation","modifierName":{"id":6204,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6288,"src":"8416:9:20"},"nodeType":"ModifierInvocation","src":"8416:9:20"}],"name":"transferOwnership","nameLocation":"8357:17:20","nodeType":"FunctionDefinition","parameters":{"id":6203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6202,"mutability":"mutable","name":"newOwner","nameLocation":"8383:8:20","nodeType":"VariableDeclaration","scope":6213,"src":"8375:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6201,"name":"address","nodeType":"ElementaryTypeName","src":"8375:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8374:18:20"},"returnParameters":{"id":6206,"nodeType":"ParameterList","parameters":[],"src":"8426:0:20"},"scope":6289,"src":"8348:349:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6226,"nodeType":"Block","src":"8824:38:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":6222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8852:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8844:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6220,"name":"address","nodeType":"ElementaryTypeName","src":"8844:7:20","typeDescriptions":{}}},"id":6223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8844:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6219,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"8834:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8834:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6225,"nodeType":"ExpressionStatement","src":"8834:21:20"}]},"documentation":{"id":6214,"nodeType":"StructuredDocumentation","src":"8703:54:20","text":"@dev Allows the owner to renounce their ownership."},"functionSelector":"715018a6","id":6227,"implemented":true,"kind":"function","modifiers":[{"id":6217,"kind":"modifierInvocation","modifierName":{"id":6216,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6288,"src":"8814:9:20"},"nodeType":"ModifierInvocation","src":"8814:9:20"}],"name":"renounceOwnership","nameLocation":"8771:17:20","nodeType":"FunctionDefinition","parameters":{"id":6215,"nodeType":"ParameterList","parameters":[],"src":"8788:2:20"},"returnParameters":{"id":6218,"nodeType":"ParameterList","parameters":[],"src":"8824:0:20"},"scope":6289,"src":"8762:100:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6241,"nodeType":"Block","src":"9080:558:20","statements":[{"id":6240,"nodeType":"UncheckedBlock","src":"9090:542:20","statements":[{"assignments":[6232],"declarations":[{"constant":false,"id":6232,"mutability":"mutable","name":"expires","nameLocation":"9122:7:20","nodeType":"VariableDeclaration","scope":6240,"src":"9114:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6231,"name":"uint256","nodeType":"ElementaryTypeName","src":"9114:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6238,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6233,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9132:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"9132:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6235,"name":"_ownershipHandoverValidFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"9150:26:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint64_$","typeString":"function () view returns (uint64)"}},"id":6236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9150:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9132:46:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9114:64:20"},{"AST":{"nodeType":"YulBlock","src":"9248:374:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9340:4:20","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"9346:19:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9333:6:20"},"nodeType":"YulFunctionCall","src":"9333:33:20"},"nodeType":"YulExpressionStatement","src":"9333:33:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9390:4:20","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9396:6:20"},"nodeType":"YulFunctionCall","src":"9396:8:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9383:6:20"},"nodeType":"YulFunctionCall","src":"9383:22:20"},"nodeType":"YulExpressionStatement","src":"9383:22:20"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9439:4:20","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"9445:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9429:9:20"},"nodeType":"YulFunctionCall","src":"9429:21:20"},{"name":"expires","nodeType":"YulIdentifier","src":"9452:7:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9422:6:20"},"nodeType":"YulFunctionCall","src":"9422:38:20"},"nodeType":"YulExpressionStatement","src":"9422:38:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9546:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9549:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"9552:45:20"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9599:6:20"},"nodeType":"YulFunctionCall","src":"9599:8:20"}],"functionName":{"name":"log2","nodeType":"YulIdentifier","src":"9541:4:20"},"nodeType":"YulFunctionCall","src":"9541:67:20"},"nodeType":"YulExpressionStatement","src":"9541:67:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6147,"isOffset":false,"isSlot":false,"src":"9346:19:20","valueSize":1},{"declaration":6135,"isOffset":false,"isSlot":false,"src":"9552:45:20","valueSize":1},{"declaration":6232,"isOffset":false,"isSlot":false,"src":"9452:7:20","valueSize":1}],"id":6239,"nodeType":"InlineAssembly","src":"9239:383:20"}]}]},"documentation":{"id":6228,"nodeType":"StructuredDocumentation","src":"8868:148:20","text":"@dev Request a two-step ownership handover to the caller.\n The request will automatically expire in 48 hours (172800 seconds) by default."},"functionSelector":"25692962","id":6242,"implemented":true,"kind":"function","modifiers":[],"name":"requestOwnershipHandover","nameLocation":"9030:24:20","nodeType":"FunctionDefinition","parameters":{"id":6229,"nodeType":"ParameterList","parameters":[],"src":"9054:2:20"},"returnParameters":{"id":6230,"nodeType":"ParameterList","parameters":[],"src":"9080:0:20"},"scope":6289,"src":"9021:617:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6247,"nodeType":"Block","src":"9778:398:20","statements":[{"AST":{"nodeType":"YulBlock","src":"9840:330:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9916:4:20","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"9922:19:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9909:6:20"},"nodeType":"YulFunctionCall","src":"9909:33:20"},"nodeType":"YulExpressionStatement","src":"9909:33:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9962:4:20","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9968:6:20"},"nodeType":"YulFunctionCall","src":"9968:8:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9955:6:20"},"nodeType":"YulFunctionCall","src":"9955:22:20"},"nodeType":"YulExpressionStatement","src":"9955:22:20"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10007:4:20","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"10013:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9997:9:20"},"nodeType":"YulFunctionCall","src":"9997:21:20"},{"kind":"number","nodeType":"YulLiteral","src":"10020:1:20","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9990:6:20"},"nodeType":"YulFunctionCall","src":"9990:32:20"},"nodeType":"YulExpressionStatement","src":"9990:32:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10099:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10102:1:20","type":"","value":"0"},{"name":"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"10105:44:20"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"10151:6:20"},"nodeType":"YulFunctionCall","src":"10151:8:20"}],"functionName":{"name":"log2","nodeType":"YulIdentifier","src":"10094:4:20"},"nodeType":"YulFunctionCall","src":"10094:66:20"},"nodeType":"YulExpressionStatement","src":"10094:66:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6147,"isOffset":false,"isSlot":false,"src":"9922:19:20","valueSize":1},{"declaration":6139,"isOffset":false,"isSlot":false,"src":"10105:44:20","valueSize":1}],"id":6246,"nodeType":"InlineAssembly","src":"9831:339:20"}]},"documentation":{"id":6243,"nodeType":"StructuredDocumentation","src":"9644:71:20","text":"@dev Cancels the two-step ownership handover to the caller, if any."},"functionSelector":"54d1f13d","id":6248,"implemented":true,"kind":"function","modifiers":[],"name":"cancelOwnershipHandover","nameLocation":"9729:23:20","nodeType":"FunctionDefinition","parameters":{"id":6244,"nodeType":"ParameterList","parameters":[],"src":"9752:2:20"},"returnParameters":{"id":6245,"nodeType":"ParameterList","parameters":[],"src":"9778:0:20"},"scope":6289,"src":"9720:456:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6261,"nodeType":"Block","src":"10453:618:20","statements":[{"AST":{"nodeType":"YulBlock","src":"10515:517:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10591:4:20","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"10597:19:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10584:6:20"},"nodeType":"YulFunctionCall","src":"10584:33:20"},"nodeType":"YulExpressionStatement","src":"10584:33:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:4:20","type":"","value":"0x00"},{"name":"pendingOwner","nodeType":"YulIdentifier","src":"10643:12:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10630:6:20"},"nodeType":"YulFunctionCall","src":"10630:26:20"},"nodeType":"YulExpressionStatement","src":"10630:26:20"},{"nodeType":"YulVariableDeclaration","src":"10669:41:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10699:4:20","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"10705:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10689:9:20"},"nodeType":"YulFunctionCall","src":"10689:21:20"},"variables":[{"name":"handoverSlot","nodeType":"YulTypedName","src":"10673:12:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:117:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10857:10:20","type":"","value":"0x6f5e8818"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:20"},"nodeType":"YulFunctionCall","src":"10844:24:20"},"nodeType":"YulExpressionStatement","src":"10844:24:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10918:4:20","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"10924:4:20","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10911:6:20"},"nodeType":"YulFunctionCall","src":"10911:18:20"},"nodeType":"YulExpressionStatement","src":"10911:18:20"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"timestamp","nodeType":"YulIdentifier","src":"10792:9:20"},"nodeType":"YulFunctionCall","src":"10792:11:20"},{"arguments":[{"name":"handoverSlot","nodeType":"YulIdentifier","src":"10811:12:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10805:5:20"},"nodeType":"YulFunctionCall","src":"10805:19:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10789:2:20"},"nodeType":"YulFunctionCall","src":"10789:36:20"},"nodeType":"YulIf","src":"10786:157:20"},{"expression":{"arguments":[{"name":"handoverSlot","nodeType":"YulIdentifier","src":"11006:12:20"},{"kind":"number","nodeType":"YulLiteral","src":"11020:1:20","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10999:6:20"},"nodeType":"YulFunctionCall","src":"10999:23:20"},"nodeType":"YulExpressionStatement","src":"10999:23:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6147,"isOffset":false,"isSlot":false,"src":"10597:19:20","valueSize":1},{"declaration":6251,"isOffset":false,"isSlot":false,"src":"10643:12:20","valueSize":1}],"id":6256,"nodeType":"InlineAssembly","src":"10506:526:20"},{"expression":{"arguments":[{"id":6258,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"11051:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6257,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"11041:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11041:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6260,"nodeType":"ExpressionStatement","src":"11041:23:20"}]},"documentation":{"id":6249,"nodeType":"StructuredDocumentation","src":"10182:176:20","text":"@dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n Reverts if there is no existing ownership handover requested by `pendingOwner`."},"functionSelector":"f04e283e","id":6262,"implemented":true,"kind":"function","modifiers":[{"id":6254,"kind":"modifierInvocation","modifierName":{"id":6253,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6288,"src":"10443:9:20"},"nodeType":"ModifierInvocation","src":"10443:9:20"}],"name":"completeOwnershipHandover","nameLocation":"10372:25:20","nodeType":"FunctionDefinition","parameters":{"id":6252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6251,"mutability":"mutable","name":"pendingOwner","nameLocation":"10406:12:20","nodeType":"VariableDeclaration","scope":6262,"src":"10398:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6250,"name":"address","nodeType":"ElementaryTypeName","src":"10398:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10397:22:20"},"returnParameters":{"id":6255,"nodeType":"ParameterList","parameters":[],"src":"10453:0:20"},"scope":6289,"src":"10363:708:20","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6269,"nodeType":"Block","src":"11470:120:20","statements":[{"AST":{"nodeType":"YulBlock","src":"11532:52:20","statements":[{"nodeType":"YulAssignment","src":"11546:28:20","value":{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"11562:11:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"11556:5:20"},"nodeType":"YulFunctionCall","src":"11556:18:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"11546:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6143,"isOffset":false,"isSlot":false,"src":"11562:11:20","valueSize":1},{"declaration":6266,"isOffset":false,"isSlot":false,"src":"11546:6:20","valueSize":1}],"id":6268,"nodeType":"InlineAssembly","src":"11523:61:20"}]},"documentation":{"id":6263,"nodeType":"StructuredDocumentation","src":"11360:43:20","text":"@dev Returns the owner of the contract."},"functionSelector":"8da5cb5b","id":6270,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"11417:5:20","nodeType":"FunctionDefinition","parameters":{"id":6264,"nodeType":"ParameterList","parameters":[],"src":"11422:2:20"},"returnParameters":{"id":6267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6266,"mutability":"mutable","name":"result","nameLocation":"11462:6:20","nodeType":"VariableDeclaration","scope":6270,"src":"11454:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6265,"name":"address","nodeType":"ElementaryTypeName","src":"11454:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11453:16:20"},"scope":6289,"src":"11408:182:20","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6279,"nodeType":"Block","src":"11832:296:20","statements":[{"AST":{"nodeType":"YulBlock","src":"11894:228:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11957:4:20","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"11963:19:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11950:6:20"},"nodeType":"YulFunctionCall","src":"11950:33:20"},"nodeType":"YulExpressionStatement","src":"11950:33:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12003:4:20","type":"","value":"0x00"},{"name":"pendingOwner","nodeType":"YulIdentifier","src":"12009:12:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11996:6:20"},"nodeType":"YulFunctionCall","src":"11996:26:20"},"nodeType":"YulExpressionStatement","src":"11996:26:20"},{"nodeType":"YulAssignment","src":"12074:38:20","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12100:4:20","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"12106:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12090:9:20"},"nodeType":"YulFunctionCall","src":"12090:21:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12084:5:20"},"nodeType":"YulFunctionCall","src":"12084:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12074:6:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6147,"isOffset":false,"isSlot":false,"src":"11963:19:20","valueSize":1},{"declaration":6273,"isOffset":false,"isSlot":false,"src":"12009:12:20","valueSize":1},{"declaration":6276,"isOffset":false,"isSlot":false,"src":"12074:6:20","valueSize":1}],"id":6278,"nodeType":"InlineAssembly","src":"11885:237:20"}]},"documentation":{"id":6271,"nodeType":"StructuredDocumentation","src":"11596:92:20","text":"@dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."},"functionSelector":"fee81cf4","id":6280,"implemented":true,"kind":"function","modifiers":[],"name":"ownershipHandoverExpiresAt","nameLocation":"11702:26:20","nodeType":"FunctionDefinition","parameters":{"id":6274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6273,"mutability":"mutable","name":"pendingOwner","nameLocation":"11737:12:20","nodeType":"VariableDeclaration","scope":6280,"src":"11729:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6272,"name":"address","nodeType":"ElementaryTypeName","src":"11729:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11728:22:20"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6276,"mutability":"mutable","name":"result","nameLocation":"11820:6:20","nodeType":"VariableDeclaration","scope":6280,"src":"11812:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"11812:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11811:16:20"},"scope":6289,"src":"11693:435:20","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6287,"nodeType":"Block","src":"12507:41:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6283,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6188,"src":"12517:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":6284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12517:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6285,"nodeType":"ExpressionStatement","src":"12517:13:20"},{"id":6286,"nodeType":"PlaceholderStatement","src":"12540:1:20"}]},"documentation":{"id":6281,"nodeType":"StructuredDocumentation","src":"12417:56:20","text":"@dev Marks a function as only callable by the owner."},"id":6288,"name":"onlyOwner","nameLocation":"12487:9:20","nodeType":"ModifierDefinition","parameters":{"id":6282,"nodeType":"ParameterList","parameters":[],"src":"12496:2:20"},"src":"12478:70:20","virtual":true,"visibility":"internal"}],"scope":6290,"src":"571:11979:20","usedErrors":[6101,6104,6107,6110]}],"src":"32:12519:20"},"id":20},"solady/src/auth/Ownable.sol":{"ast":{"absolutePath":"solady/src/auth/Ownable.sol","exportedSymbols":{"Ownable":[6095]},"id":6096,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5903,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:21"},{"abstract":true,"baseContracts":[],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":5904,"nodeType":"StructuredDocumentation","src":"57:514:21","text":"@notice Simple single owner authorization mixin.\n @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n @dev Note:\n This implementation does NOT auto-initialize the owner to `msg.sender`.\n You MUST call the `_initializeOwner` in the constructor / initializer.\n While the ownable portion follows\n [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\n the nomenclature for the 2-step ownership handover may be unique to this codebase."},"fullyImplemented":true,"id":6095,"linearizedBaseContracts":[6095],"name":"Ownable","nameLocation":"589:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5905,"nodeType":"StructuredDocumentation","src":"886:59:21","text":"@dev The caller is not authorized to call the function."},"errorSelector":"82b42900","id":5907,"name":"Unauthorized","nameLocation":"956:12:21","nodeType":"ErrorDefinition","parameters":{"id":5906,"nodeType":"ParameterList","parameters":[],"src":"968:2:21"},"src":"950:21:21"},{"documentation":{"id":5908,"nodeType":"StructuredDocumentation","src":"977:51:21","text":"@dev The `newOwner` cannot be the zero address."},"errorSelector":"7448fbae","id":5910,"name":"NewOwnerIsZeroAddress","nameLocation":"1039:21:21","nodeType":"ErrorDefinition","parameters":{"id":5909,"nodeType":"ParameterList","parameters":[],"src":"1060:2:21"},"src":"1033:30:21"},{"documentation":{"id":5911,"nodeType":"StructuredDocumentation","src":"1069:67:21","text":"@dev The `pendingOwner` does not have a valid handover request."},"errorSelector":"6f5e8818","id":5913,"name":"NoHandoverRequest","nameLocation":"1147:17:21","nodeType":"ErrorDefinition","parameters":{"id":5912,"nodeType":"ParameterList","parameters":[],"src":"1164:2:21"},"src":"1141:26:21"},{"documentation":{"id":5914,"nodeType":"StructuredDocumentation","src":"1173:34:21","text":"@dev Cannot double-initialize."},"errorSelector":"0dc149f0","id":5916,"name":"AlreadyInitialized","nameLocation":"1218:18:21","nodeType":"ErrorDefinition","parameters":{"id":5915,"nodeType":"ParameterList","parameters":[],"src":"1236:2:21"},"src":"1212:27:21"},{"anonymous":false,"documentation":{"id":5917,"nodeType":"StructuredDocumentation","src":"1528:310:21","text":"@dev The ownership is transferred from `oldOwner` to `newOwner`.\n This event is intentionally kept the same as OpenZeppelin's Ownable to be\n compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n despite it not being as lightweight as a single argument event."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":5923,"name":"OwnershipTransferred","nameLocation":"1849:20:21","nodeType":"EventDefinition","parameters":{"id":5922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5919,"indexed":true,"mutability":"mutable","name":"oldOwner","nameLocation":"1886:8:21","nodeType":"VariableDeclaration","scope":5923,"src":"1870:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5918,"name":"address","nodeType":"ElementaryTypeName","src":"1870:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5921,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1912:8:21","nodeType":"VariableDeclaration","scope":5923,"src":"1896:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5920,"name":"address","nodeType":"ElementaryTypeName","src":"1896:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1869:52:21"},"src":"1843:79:21"},{"anonymous":false,"documentation":{"id":5924,"nodeType":"StructuredDocumentation","src":"1928:68:21","text":"@dev An ownership handover to `pendingOwner` has been requested."},"eventSelector":"dbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d","id":5928,"name":"OwnershipHandoverRequested","nameLocation":"2007:26:21","nodeType":"EventDefinition","parameters":{"id":5927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5926,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"2050:12:21","nodeType":"VariableDeclaration","scope":5928,"src":"2034:28:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5925,"name":"address","nodeType":"ElementaryTypeName","src":"2034:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2033:30:21"},"src":"2001:63:21"},{"anonymous":false,"documentation":{"id":5929,"nodeType":"StructuredDocumentation","src":"2070:68:21","text":"@dev The ownership handover to `pendingOwner` has been canceled."},"eventSelector":"fa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92","id":5933,"name":"OwnershipHandoverCanceled","nameLocation":"2149:25:21","nodeType":"EventDefinition","parameters":{"id":5932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5931,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"2191:12:21","nodeType":"VariableDeclaration","scope":5933,"src":"2175:28:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5930,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2174:30:21"},"src":"2143:62:21"},{"constant":true,"documentation":{"id":5934,"nodeType":"StructuredDocumentation","src":"2211:69:21","text":"@dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`."},"id":5937,"mutability":"constant","name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nameLocation":"2310:38:21","nodeType":"VariableDeclaration","scope":6095,"src":"2285:140:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5935,"name":"uint256","nodeType":"ElementaryTypeName","src":"2285:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307838626530303739633533313635393134313334346364316664306134663238343139343937663937323261336461616665336234313836663662363435376530","id":5936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:66:21","typeDescriptions":{"typeIdentifier":"t_rational_63267312222310607310220992301550539520881909915348243260808268974908359596000_by_1","typeString":"int_const 6326...(69 digits omitted)...6000"},"value":"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"},"visibility":"private"},{"constant":true,"documentation":{"id":5938,"nodeType":"StructuredDocumentation","src":"2432:67:21","text":"@dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`."},"id":5941,"mutability":"constant","name":"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE","nameLocation":"2529:45:21","nodeType":"VariableDeclaration","scope":6095,"src":"2504:147:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2504:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864626633366131303764613139653439353237613731373661316261626639363362346230666638636465333565653335643663643866316639616337653164","id":5940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2585:66:21","typeDescriptions":{"typeIdentifier":"t_rational_99486589706178915293482045537067896628184784474209892898124391061398315892253_by_1","typeString":"int_const 9948...(69 digits omitted)...2253"},"value":"0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d"},"visibility":"private"},{"constant":true,"documentation":{"id":5942,"nodeType":"StructuredDocumentation","src":"2658:66:21","text":"@dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`."},"id":5945,"mutability":"constant","name":"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE","nameLocation":"2754:44:21","nodeType":"VariableDeclaration","scope":6095,"src":"2729:146:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5943,"name":"uint256","nodeType":"ElementaryTypeName","src":"2729:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307866613762386561623764613637663431326363393537356564343334363434363866396266626165383964313637353931373334366361366438666533633932","id":5944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2809:66:21","typeDescriptions":{"typeIdentifier":"t_rational_113296519006148992096626879868577423813870114622160551413976512868841544367250_by_1","typeString":"int_const 1132...(70 digits omitted)...7250"},"value":"0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92"},"visibility":"private"},{"constant":true,"documentation":{"id":5946,"nodeType":"StructuredDocumentation","src":"3165:334:21","text":"@dev The owner slot is given by:\n `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\n It is intentionally chosen to be a high value\n to avoid collision with lower slots.\n The choice of manual storage layout is to enable compatibility\n with both regular and upgradeable contracts."},"id":5949,"mutability":"constant","name":"_OWNER_SLOT","nameLocation":"3530:11:21","nodeType":"VariableDeclaration","scope":6095,"src":"3504:114:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3504:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663734383733393237","id":5948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3552:66:21","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007910789691687_by_1","typeString":"int_const 1157...(70 digits omitted)...1687"},"value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927"},"visibility":"internal"},{"constant":true,"documentation":{"id":5950,"nodeType":"StructuredDocumentation","src":"3625:276:21","text":"The ownership handover slot of `newOwner` is given by:\n ```\n     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n     let handoverSlot := keccak256(0x00, 0x20)\n ```\n It stores the expiry timestamp of the two-step ownership handover."},"id":5953,"mutability":"constant","name":"_HANDOVER_SLOT_SEED","nameLocation":"3931:19:21","nodeType":"VariableDeclaration","scope":6095,"src":"3906:57:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5951,"name":"uint256","nodeType":"ElementaryTypeName","src":"3906:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783338396137356531","id":5952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3953:10:21","typeDescriptions":{"typeIdentifier":"t_rational_949646817_by_1","typeString":"int_const 949646817"},"value":"0x389a75e1"},"visibility":"private"},{"body":{"id":5959,"nodeType":"Block","src":"4424:2:21","statements":[]},"documentation":{"id":5954,"nodeType":"StructuredDocumentation","src":"4253:90:21","text":"@dev Override to return true to make `_initializeOwner` prevent double-initialization."},"id":5960,"implemented":true,"kind":"function","modifiers":[],"name":"_guardInitializeOwner","nameLocation":"4357:21:21","nodeType":"FunctionDefinition","parameters":{"id":5955,"nodeType":"ParameterList","parameters":[],"src":"4378:2:21"},"returnParameters":{"id":5958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5957,"mutability":"mutable","name":"guard","nameLocation":"4417:5:21","nodeType":"VariableDeclaration","scope":5960,"src":"4412:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5956,"name":"bool","nodeType":"ElementaryTypeName","src":"4412:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4411:12:21"},"scope":6095,"src":"4348:78:21","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":5973,"nodeType":"Block","src":"4944:1129:21","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":5966,"name":"_guardInitializeOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5960,"src":"4958:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bool_$","typeString":"function () pure returns (bool)"}},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4958:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5971,"nodeType":"Block","src":"5649:418:21","statements":[{"AST":{"nodeType":"YulBlock","src":"5719:338:21","statements":[{"nodeType":"YulAssignment","src":"5781:38:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5797:2:21","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5805:2:21","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5809:8:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5801:3:21"},"nodeType":"YulFunctionCall","src":"5801:17:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5793:3:21"},"nodeType":"YulFunctionCall","src":"5793:26:21"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5781:8:21"}]},{"expression":{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"5883:11:21"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5896:8:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5876:6:21"},"nodeType":"YulFunctionCall","src":"5876:29:21"},"nodeType":"YulExpressionStatement","src":"5876:29:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5985:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5988:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"5991:38:21"},{"kind":"number","nodeType":"YulLiteral","src":"6031:1:21","type":"","value":"0"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6034:8:21"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"5980:4:21"},"nodeType":"YulFunctionCall","src":"5980:63:21"},"nodeType":"YulExpressionStatement","src":"5980:63:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5937,"isOffset":false,"isSlot":false,"src":"5991:38:21","valueSize":1},{"declaration":5949,"isOffset":false,"isSlot":false,"src":"5883:11:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5781:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5809:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5896:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"6034:8:21","valueSize":1}],"id":5970,"nodeType":"InlineAssembly","src":"5710:347:21"}]},"id":5972,"nodeType":"IfStatement","src":"4954:1113:21","trueBody":{"id":5969,"nodeType":"Block","src":"4983:660:21","statements":[{"AST":{"nodeType":"YulBlock","src":"5053:580:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5071:28:21","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"5088:11:21"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"5075:9:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5136:130:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5165:4:21","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"5171:10:21","type":"","value":"0x0dc149f0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5158:6:21"},"nodeType":"YulFunctionCall","src":"5158:24:21"},"nodeType":"YulExpressionStatement","src":"5158:24:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5237:4:21","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"5243:4:21","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5230:6:21"},"nodeType":"YulFunctionCall","src":"5230:18:21"},"nodeType":"YulExpressionStatement","src":"5230:18:21"}]},"condition":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"5125:9:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5119:5:21"},"nodeType":"YulFunctionCall","src":"5119:16:21"},"nodeType":"YulIf","src":"5116:150:21"},{"nodeType":"YulAssignment","src":"5327:38:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5343:2:21","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5351:2:21","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5355:8:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5347:3:21"},"nodeType":"YulFunctionCall","src":"5347:17:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5339:3:21"},"nodeType":"YulFunctionCall","src":"5339:26:21"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5327:8:21"}]},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"5429:9:21"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5443:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5457:3:21","type":"","value":"255"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"5469:8:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5462:6:21"},"nodeType":"YulFunctionCall","src":"5462:16:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5453:3:21"},"nodeType":"YulFunctionCall","src":"5453:26:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5440:2:21"},"nodeType":"YulFunctionCall","src":"5440:40:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5422:6:21"},"nodeType":"YulFunctionCall","src":"5422:59:21"},"nodeType":"YulExpressionStatement","src":"5422:59:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5561:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5564:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"5567:38:21"},{"kind":"number","nodeType":"YulLiteral","src":"5607:1:21","type":"","value":"0"},{"name":"newOwner","nodeType":"YulIdentifier","src":"5610:8:21"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"5556:4:21"},"nodeType":"YulFunctionCall","src":"5556:63:21"},"nodeType":"YulExpressionStatement","src":"5556:63:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5937,"isOffset":false,"isSlot":false,"src":"5567:38:21","valueSize":1},{"declaration":5949,"isOffset":false,"isSlot":false,"src":"5088:11:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5327:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5355:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5443:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5469:8:21","valueSize":1},{"declaration":5963,"isOffset":false,"isSlot":false,"src":"5610:8:21","valueSize":1}],"id":5968,"nodeType":"InlineAssembly","src":"5044:589:21"}]}}]},"documentation":{"id":5961,"nodeType":"StructuredDocumentation","src":"4432:446:21","text":"@dev Initializes the owner directly without authorization guard.\n This function must be called upon initialization,\n regardless of whether the contract is upgradeable or not.\n This is to enable generalization to both regular and upgradeable contracts,\n and to save gas in case the initial owner is not the caller.\n For performance reasons, this function will not check if there\n is an existing owner."},"id":5974,"implemented":true,"kind":"function","modifiers":[],"name":"_initializeOwner","nameLocation":"4892:16:21","nodeType":"FunctionDefinition","parameters":{"id":5964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5963,"mutability":"mutable","name":"newOwner","nameLocation":"4917:8:21","nodeType":"VariableDeclaration","scope":5974,"src":"4909:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5962,"name":"address","nodeType":"ElementaryTypeName","src":"4909:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4908:18:21"},"returnParameters":{"id":5965,"nodeType":"ParameterList","parameters":[],"src":"4944:0:21"},"scope":6095,"src":"4883:1190:21","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5987,"nodeType":"Block","src":"6199:1035:21","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":5980,"name":"_guardInitializeOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5960,"src":"6213:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bool_$","typeString":"function () pure returns (bool)"}},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6213:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5985,"nodeType":"Block","src":"6752:476:21","statements":[{"AST":{"nodeType":"YulBlock","src":"6822:396:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6840:28:21","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"6857:11:21"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"6844:9:21","type":""}]},{"nodeType":"YulAssignment","src":"6929:38:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6945:2:21","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6953:2:21","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6957:8:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6949:3:21"},"nodeType":"YulFunctionCall","src":"6949:17:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6941:3:21"},"nodeType":"YulFunctionCall","src":"6941:26:21"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6929:8:21"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7047:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7050:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"7053:38:21"},{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"7099:9:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7093:5:21"},"nodeType":"YulFunctionCall","src":"7093:16:21"},{"name":"newOwner","nodeType":"YulIdentifier","src":"7111:8:21"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"7042:4:21"},"nodeType":"YulFunctionCall","src":"7042:78:21"},"nodeType":"YulExpressionStatement","src":"7042:78:21"},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"7184:9:21"},{"name":"newOwner","nodeType":"YulIdentifier","src":"7195:8:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7177:6:21"},"nodeType":"YulFunctionCall","src":"7177:27:21"},"nodeType":"YulExpressionStatement","src":"7177:27:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5937,"isOffset":false,"isSlot":false,"src":"7053:38:21","valueSize":1},{"declaration":5949,"isOffset":false,"isSlot":false,"src":"6857:11:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6929:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6957:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"7111:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"7195:8:21","valueSize":1}],"id":5984,"nodeType":"InlineAssembly","src":"6813:405:21"}]},"id":5986,"nodeType":"IfStatement","src":"6209:1019:21","trueBody":{"id":5983,"nodeType":"Block","src":"6238:508:21","statements":[{"AST":{"nodeType":"YulBlock","src":"6308:428:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6326:28:21","value":{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"6343:11:21"},"variables":[{"name":"ownerSlot","nodeType":"YulTypedName","src":"6330:9:21","type":""}]},{"nodeType":"YulAssignment","src":"6415:38:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6431:2:21","type":"","value":"96"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6439:2:21","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6443:8:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6435:3:21"},"nodeType":"YulFunctionCall","src":"6435:17:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6427:3:21"},"nodeType":"YulFunctionCall","src":"6427:26:21"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6415:8:21"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6533:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6536:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"6539:38:21"},{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"6585:9:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6579:5:21"},"nodeType":"YulFunctionCall","src":"6579:16:21"},{"name":"newOwner","nodeType":"YulIdentifier","src":"6597:8:21"}],"functionName":{"name":"log3","nodeType":"YulIdentifier","src":"6528:4:21"},"nodeType":"YulFunctionCall","src":"6528:78:21"},"nodeType":"YulExpressionStatement","src":"6528:78:21"},{"expression":{"arguments":[{"name":"ownerSlot","nodeType":"YulIdentifier","src":"6670:9:21"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6684:8:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6698:3:21","type":"","value":"255"},{"arguments":[{"name":"newOwner","nodeType":"YulIdentifier","src":"6710:8:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6703:6:21"},"nodeType":"YulFunctionCall","src":"6703:16:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6694:3:21"},"nodeType":"YulFunctionCall","src":"6694:26:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6681:2:21"},"nodeType":"YulFunctionCall","src":"6681:40:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6663:6:21"},"nodeType":"YulFunctionCall","src":"6663:59:21"},"nodeType":"YulExpressionStatement","src":"6663:59:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5937,"isOffset":false,"isSlot":false,"src":"6539:38:21","valueSize":1},{"declaration":5949,"isOffset":false,"isSlot":false,"src":"6343:11:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6415:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6443:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6597:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6684:8:21","valueSize":1},{"declaration":5977,"isOffset":false,"isSlot":false,"src":"6710:8:21","valueSize":1}],"id":5982,"nodeType":"InlineAssembly","src":"6299:437:21"}]}}]},"documentation":{"id":5975,"nodeType":"StructuredDocumentation","src":"6079:61:21","text":"@dev Sets the owner directly without authorization guard."},"id":5988,"implemented":true,"kind":"function","modifiers":[],"name":"_setOwner","nameLocation":"6154:9:21","nodeType":"FunctionDefinition","parameters":{"id":5978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5977,"mutability":"mutable","name":"newOwner","nameLocation":"6172:8:21","nodeType":"VariableDeclaration","scope":5988,"src":"6164:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5976,"name":"address","nodeType":"ElementaryTypeName","src":"6164:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6163:18:21"},"returnParameters":{"id":5979,"nodeType":"ParameterList","parameters":[],"src":"6199:0:21"},"scope":6095,"src":"6145:1089:21","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":5993,"nodeType":"Block","src":"7337:310:21","statements":[{"AST":{"nodeType":"YulBlock","src":"7399:242:21","statements":[{"body":{"nodeType":"YulBlock","src":"7519:112:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7544:4:21","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7550:10:21","type":"","value":"0x82b42900"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7537:6:21"},"nodeType":"YulFunctionCall","src":"7537:24:21"},"nodeType":"YulExpressionStatement","src":"7537:24:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7606:4:21","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"7612:4:21","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7599:6:21"},"nodeType":"YulFunctionCall","src":"7599:18:21"},"nodeType":"YulExpressionStatement","src":"7599:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"7488:6:21"},"nodeType":"YulFunctionCall","src":"7488:8:21"},{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"7504:11:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7498:5:21"},"nodeType":"YulFunctionCall","src":"7498:18:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7485:2:21"},"nodeType":"YulFunctionCall","src":"7485:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7478:6:21"},"nodeType":"YulFunctionCall","src":"7478:40:21"},"nodeType":"YulIf","src":"7475:156:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5949,"isOffset":false,"isSlot":false,"src":"7504:11:21","valueSize":1}],"id":5992,"nodeType":"InlineAssembly","src":"7390:251:21"}]},"documentation":{"id":5989,"nodeType":"StructuredDocumentation","src":"7240:47:21","text":"@dev Throws if the sender is not the owner."},"id":5994,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"7301:11:21","nodeType":"FunctionDefinition","parameters":{"id":5990,"nodeType":"ParameterList","parameters":[],"src":"7312:2:21"},"returnParameters":{"id":5991,"nodeType":"ParameterList","parameters":[],"src":"7337:0:21"},"scope":6095,"src":"7292:355:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6004,"nodeType":"Block","src":"7955:33:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_rational_172800_by_1","typeString":"int_const 172800"},"id":6002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":6000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7972:2:21","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"33363030","id":6001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7977:4:21","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"3600"},"src":"7972:9:21","typeDescriptions":{"typeIdentifier":"t_rational_172800_by_1","typeString":"int_const 172800"}},"functionReturnParameters":5999,"id":6003,"nodeType":"Return","src":"7965:16:21"}]},"documentation":{"id":5995,"nodeType":"StructuredDocumentation","src":"7653:220:21","text":"@dev Returns how long a two-step ownership handover is valid for in seconds.\n Override to return a different value if needed.\n Made internal to conserve bytecode. Wrap it in a public function if needed."},"id":6005,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipHandoverValidFor","nameLocation":"7887:26:21","nodeType":"FunctionDefinition","parameters":{"id":5996,"nodeType":"ParameterList","parameters":[],"src":"7913:2:21"},"returnParameters":{"id":5999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6005,"src":"7947:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5997,"name":"uint64","nodeType":"ElementaryTypeName","src":"7947:6:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7946:8:21"},"scope":6095,"src":"7878:110:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6018,"nodeType":"Block","src":"8426:271:21","statements":[{"AST":{"nodeType":"YulBlock","src":"8488:174:21","statements":[{"body":{"nodeType":"YulBlock","src":"8531:121:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8556:4:21","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8562:10:21","type":"","value":"0x7448fbae"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8549:6:21"},"nodeType":"YulFunctionCall","src":"8549:24:21"},"nodeType":"YulExpressionStatement","src":"8549:24:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8627:4:21","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"8633:4:21","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8620:6:21"},"nodeType":"YulFunctionCall","src":"8620:18:21"},"nodeType":"YulExpressionStatement","src":"8620:18:21"}]},"condition":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8516:2:21","type":"","value":"96"},{"name":"newOwner","nodeType":"YulIdentifier","src":"8520:8:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8512:3:21"},"nodeType":"YulFunctionCall","src":"8512:17:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8505:6:21"},"nodeType":"YulFunctionCall","src":"8505:25:21"},"nodeType":"YulIf","src":"8502:150:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":6008,"isOffset":false,"isSlot":false,"src":"8520:8:21","valueSize":1}],"id":6013,"nodeType":"InlineAssembly","src":"8479:183:21"},{"expression":{"arguments":[{"id":6015,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6008,"src":"8681:8:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6014,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"8671:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8671:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6017,"nodeType":"ExpressionStatement","src":"8671:19:21"}]},"documentation":{"id":6006,"nodeType":"StructuredDocumentation","src":"8277:66:21","text":"@dev Allows the owner to transfer the ownership to `newOwner`."},"functionSelector":"f2fde38b","id":6019,"implemented":true,"kind":"function","modifiers":[{"id":6011,"kind":"modifierInvocation","modifierName":{"id":6010,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6094,"src":"8416:9:21"},"nodeType":"ModifierInvocation","src":"8416:9:21"}],"name":"transferOwnership","nameLocation":"8357:17:21","nodeType":"FunctionDefinition","parameters":{"id":6009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6008,"mutability":"mutable","name":"newOwner","nameLocation":"8383:8:21","nodeType":"VariableDeclaration","scope":6019,"src":"8375:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6007,"name":"address","nodeType":"ElementaryTypeName","src":"8375:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8374:18:21"},"returnParameters":{"id":6012,"nodeType":"ParameterList","parameters":[],"src":"8426:0:21"},"scope":6095,"src":"8348:349:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6032,"nodeType":"Block","src":"8824:38:21","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":6028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8852:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8844:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6026,"name":"address","nodeType":"ElementaryTypeName","src":"8844:7:21","typeDescriptions":{}}},"id":6029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8844:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6025,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"8834:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8834:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6031,"nodeType":"ExpressionStatement","src":"8834:21:21"}]},"documentation":{"id":6020,"nodeType":"StructuredDocumentation","src":"8703:54:21","text":"@dev Allows the owner to renounce their ownership."},"functionSelector":"715018a6","id":6033,"implemented":true,"kind":"function","modifiers":[{"id":6023,"kind":"modifierInvocation","modifierName":{"id":6022,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6094,"src":"8814:9:21"},"nodeType":"ModifierInvocation","src":"8814:9:21"}],"name":"renounceOwnership","nameLocation":"8771:17:21","nodeType":"FunctionDefinition","parameters":{"id":6021,"nodeType":"ParameterList","parameters":[],"src":"8788:2:21"},"returnParameters":{"id":6024,"nodeType":"ParameterList","parameters":[],"src":"8824:0:21"},"scope":6095,"src":"8762:100:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6047,"nodeType":"Block","src":"9080:558:21","statements":[{"id":6046,"nodeType":"UncheckedBlock","src":"9090:542:21","statements":[{"assignments":[6038],"declarations":[{"constant":false,"id":6038,"mutability":"mutable","name":"expires","nameLocation":"9122:7:21","nodeType":"VariableDeclaration","scope":6046,"src":"9114:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6037,"name":"uint256","nodeType":"ElementaryTypeName","src":"9114:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6044,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6039,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9132:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"9132:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6041,"name":"_ownershipHandoverValidFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6005,"src":"9150:26:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint64_$","typeString":"function () view returns (uint64)"}},"id":6042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9150:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9132:46:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9114:64:21"},{"AST":{"nodeType":"YulBlock","src":"9248:374:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9340:4:21","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"9346:19:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9333:6:21"},"nodeType":"YulFunctionCall","src":"9333:33:21"},"nodeType":"YulExpressionStatement","src":"9333:33:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9390:4:21","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9396:6:21"},"nodeType":"YulFunctionCall","src":"9396:8:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9383:6:21"},"nodeType":"YulFunctionCall","src":"9383:22:21"},"nodeType":"YulExpressionStatement","src":"9383:22:21"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9439:4:21","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"9445:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9429:9:21"},"nodeType":"YulFunctionCall","src":"9429:21:21"},{"name":"expires","nodeType":"YulIdentifier","src":"9452:7:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9422:6:21"},"nodeType":"YulFunctionCall","src":"9422:38:21"},"nodeType":"YulExpressionStatement","src":"9422:38:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9546:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9549:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"9552:45:21"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9599:6:21"},"nodeType":"YulFunctionCall","src":"9599:8:21"}],"functionName":{"name":"log2","nodeType":"YulIdentifier","src":"9541:4:21"},"nodeType":"YulFunctionCall","src":"9541:67:21"},"nodeType":"YulExpressionStatement","src":"9541:67:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5953,"isOffset":false,"isSlot":false,"src":"9346:19:21","valueSize":1},{"declaration":5941,"isOffset":false,"isSlot":false,"src":"9552:45:21","valueSize":1},{"declaration":6038,"isOffset":false,"isSlot":false,"src":"9452:7:21","valueSize":1}],"id":6045,"nodeType":"InlineAssembly","src":"9239:383:21"}]}]},"documentation":{"id":6034,"nodeType":"StructuredDocumentation","src":"8868:148:21","text":"@dev Request a two-step ownership handover to the caller.\n The request will automatically expire in 48 hours (172800 seconds) by default."},"functionSelector":"25692962","id":6048,"implemented":true,"kind":"function","modifiers":[],"name":"requestOwnershipHandover","nameLocation":"9030:24:21","nodeType":"FunctionDefinition","parameters":{"id":6035,"nodeType":"ParameterList","parameters":[],"src":"9054:2:21"},"returnParameters":{"id":6036,"nodeType":"ParameterList","parameters":[],"src":"9080:0:21"},"scope":6095,"src":"9021:617:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6053,"nodeType":"Block","src":"9778:398:21","statements":[{"AST":{"nodeType":"YulBlock","src":"9840:330:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9916:4:21","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"9922:19:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9909:6:21"},"nodeType":"YulFunctionCall","src":"9909:33:21"},"nodeType":"YulExpressionStatement","src":"9909:33:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9962:4:21","type":"","value":"0x00"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"9968:6:21"},"nodeType":"YulFunctionCall","src":"9968:8:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9955:6:21"},"nodeType":"YulFunctionCall","src":"9955:22:21"},"nodeType":"YulExpressionStatement","src":"9955:22:21"},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10007:4:21","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"10013:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9997:9:21"},"nodeType":"YulFunctionCall","src":"9997:21:21"},{"kind":"number","nodeType":"YulLiteral","src":"10020:1:21","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9990:6:21"},"nodeType":"YulFunctionCall","src":"9990:32:21"},"nodeType":"YulExpressionStatement","src":"9990:32:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10099:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10102:1:21","type":"","value":"0"},{"name":"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"10105:44:21"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"10151:6:21"},"nodeType":"YulFunctionCall","src":"10151:8:21"}],"functionName":{"name":"log2","nodeType":"YulIdentifier","src":"10094:4:21"},"nodeType":"YulFunctionCall","src":"10094:66:21"},"nodeType":"YulExpressionStatement","src":"10094:66:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5953,"isOffset":false,"isSlot":false,"src":"9922:19:21","valueSize":1},{"declaration":5945,"isOffset":false,"isSlot":false,"src":"10105:44:21","valueSize":1}],"id":6052,"nodeType":"InlineAssembly","src":"9831:339:21"}]},"documentation":{"id":6049,"nodeType":"StructuredDocumentation","src":"9644:71:21","text":"@dev Cancels the two-step ownership handover to the caller, if any."},"functionSelector":"54d1f13d","id":6054,"implemented":true,"kind":"function","modifiers":[],"name":"cancelOwnershipHandover","nameLocation":"9729:23:21","nodeType":"FunctionDefinition","parameters":{"id":6050,"nodeType":"ParameterList","parameters":[],"src":"9752:2:21"},"returnParameters":{"id":6051,"nodeType":"ParameterList","parameters":[],"src":"9778:0:21"},"scope":6095,"src":"9720:456:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6067,"nodeType":"Block","src":"10453:618:21","statements":[{"AST":{"nodeType":"YulBlock","src":"10515:517:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10591:4:21","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"10597:19:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10584:6:21"},"nodeType":"YulFunctionCall","src":"10584:33:21"},"nodeType":"YulExpressionStatement","src":"10584:33:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:4:21","type":"","value":"0x00"},{"name":"pendingOwner","nodeType":"YulIdentifier","src":"10643:12:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10630:6:21"},"nodeType":"YulFunctionCall","src":"10630:26:21"},"nodeType":"YulExpressionStatement","src":"10630:26:21"},{"nodeType":"YulVariableDeclaration","src":"10669:41:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10699:4:21","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"10705:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10689:9:21"},"nodeType":"YulFunctionCall","src":"10689:21:21"},"variables":[{"name":"handoverSlot","nodeType":"YulTypedName","src":"10673:12:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:117:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:4:21","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10857:10:21","type":"","value":"0x6f5e8818"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:21"},"nodeType":"YulFunctionCall","src":"10844:24:21"},"nodeType":"YulExpressionStatement","src":"10844:24:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10918:4:21","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"10924:4:21","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10911:6:21"},"nodeType":"YulFunctionCall","src":"10911:18:21"},"nodeType":"YulExpressionStatement","src":"10911:18:21"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"timestamp","nodeType":"YulIdentifier","src":"10792:9:21"},"nodeType":"YulFunctionCall","src":"10792:11:21"},{"arguments":[{"name":"handoverSlot","nodeType":"YulIdentifier","src":"10811:12:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10805:5:21"},"nodeType":"YulFunctionCall","src":"10805:19:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10789:2:21"},"nodeType":"YulFunctionCall","src":"10789:36:21"},"nodeType":"YulIf","src":"10786:157:21"},{"expression":{"arguments":[{"name":"handoverSlot","nodeType":"YulIdentifier","src":"11006:12:21"},{"kind":"number","nodeType":"YulLiteral","src":"11020:1:21","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10999:6:21"},"nodeType":"YulFunctionCall","src":"10999:23:21"},"nodeType":"YulExpressionStatement","src":"10999:23:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5953,"isOffset":false,"isSlot":false,"src":"10597:19:21","valueSize":1},{"declaration":6057,"isOffset":false,"isSlot":false,"src":"10643:12:21","valueSize":1}],"id":6062,"nodeType":"InlineAssembly","src":"10506:526:21"},{"expression":{"arguments":[{"id":6064,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"11051:12:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6063,"name":"_setOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"11041:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11041:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6066,"nodeType":"ExpressionStatement","src":"11041:23:21"}]},"documentation":{"id":6055,"nodeType":"StructuredDocumentation","src":"10182:176:21","text":"@dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n Reverts if there is no existing ownership handover requested by `pendingOwner`."},"functionSelector":"f04e283e","id":6068,"implemented":true,"kind":"function","modifiers":[{"id":6060,"kind":"modifierInvocation","modifierName":{"id":6059,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":6094,"src":"10443:9:21"},"nodeType":"ModifierInvocation","src":"10443:9:21"}],"name":"completeOwnershipHandover","nameLocation":"10372:25:21","nodeType":"FunctionDefinition","parameters":{"id":6058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6057,"mutability":"mutable","name":"pendingOwner","nameLocation":"10406:12:21","nodeType":"VariableDeclaration","scope":6068,"src":"10398:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6056,"name":"address","nodeType":"ElementaryTypeName","src":"10398:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10397:22:21"},"returnParameters":{"id":6061,"nodeType":"ParameterList","parameters":[],"src":"10453:0:21"},"scope":6095,"src":"10363:708:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":6075,"nodeType":"Block","src":"11470:120:21","statements":[{"AST":{"nodeType":"YulBlock","src":"11532:52:21","statements":[{"nodeType":"YulAssignment","src":"11546:28:21","value":{"arguments":[{"name":"_OWNER_SLOT","nodeType":"YulIdentifier","src":"11562:11:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"11556:5:21"},"nodeType":"YulFunctionCall","src":"11556:18:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"11546:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5949,"isOffset":false,"isSlot":false,"src":"11562:11:21","valueSize":1},{"declaration":6072,"isOffset":false,"isSlot":false,"src":"11546:6:21","valueSize":1}],"id":6074,"nodeType":"InlineAssembly","src":"11523:61:21"}]},"documentation":{"id":6069,"nodeType":"StructuredDocumentation","src":"11360:43:21","text":"@dev Returns the owner of the contract."},"functionSelector":"8da5cb5b","id":6076,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"11417:5:21","nodeType":"FunctionDefinition","parameters":{"id":6070,"nodeType":"ParameterList","parameters":[],"src":"11422:2:21"},"returnParameters":{"id":6073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6072,"mutability":"mutable","name":"result","nameLocation":"11462:6:21","nodeType":"VariableDeclaration","scope":6076,"src":"11454:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6071,"name":"address","nodeType":"ElementaryTypeName","src":"11454:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11453:16:21"},"scope":6095,"src":"11408:182:21","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6085,"nodeType":"Block","src":"11832:296:21","statements":[{"AST":{"nodeType":"YulBlock","src":"11894:228:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11957:4:21","type":"","value":"0x0c"},{"name":"_HANDOVER_SLOT_SEED","nodeType":"YulIdentifier","src":"11963:19:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11950:6:21"},"nodeType":"YulFunctionCall","src":"11950:33:21"},"nodeType":"YulExpressionStatement","src":"11950:33:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12003:4:21","type":"","value":"0x00"},{"name":"pendingOwner","nodeType":"YulIdentifier","src":"12009:12:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11996:6:21"},"nodeType":"YulFunctionCall","src":"11996:26:21"},"nodeType":"YulExpressionStatement","src":"11996:26:21"},{"nodeType":"YulAssignment","src":"12074:38:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12100:4:21","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"12106:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12090:9:21"},"nodeType":"YulFunctionCall","src":"12090:21:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12084:5:21"},"nodeType":"YulFunctionCall","src":"12084:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12074:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5953,"isOffset":false,"isSlot":false,"src":"11963:19:21","valueSize":1},{"declaration":6079,"isOffset":false,"isSlot":false,"src":"12009:12:21","valueSize":1},{"declaration":6082,"isOffset":false,"isSlot":false,"src":"12074:6:21","valueSize":1}],"id":6084,"nodeType":"InlineAssembly","src":"11885:237:21"}]},"documentation":{"id":6077,"nodeType":"StructuredDocumentation","src":"11596:92:21","text":"@dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."},"functionSelector":"fee81cf4","id":6086,"implemented":true,"kind":"function","modifiers":[],"name":"ownershipHandoverExpiresAt","nameLocation":"11702:26:21","nodeType":"FunctionDefinition","parameters":{"id":6080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6079,"mutability":"mutable","name":"pendingOwner","nameLocation":"11737:12:21","nodeType":"VariableDeclaration","scope":6086,"src":"11729:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6078,"name":"address","nodeType":"ElementaryTypeName","src":"11729:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11728:22:21"},"returnParameters":{"id":6083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6082,"mutability":"mutable","name":"result","nameLocation":"11820:6:21","nodeType":"VariableDeclaration","scope":6086,"src":"11812:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6081,"name":"uint256","nodeType":"ElementaryTypeName","src":"11812:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11811:16:21"},"scope":6095,"src":"11693:435:21","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6093,"nodeType":"Block","src":"12507:41:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6089,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"12517:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":6090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12517:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6091,"nodeType":"ExpressionStatement","src":"12517:13:21"},{"id":6092,"nodeType":"PlaceholderStatement","src":"12540:1:21"}]},"documentation":{"id":6087,"nodeType":"StructuredDocumentation","src":"12417:56:21","text":"@dev Marks a function as only callable by the owner."},"id":6094,"name":"onlyOwner","nameLocation":"12487:9:21","nodeType":"ModifierDefinition","parameters":{"id":6088,"nodeType":"ParameterList","parameters":[],"src":"12496:2:21"},"src":"12478:70:21","virtual":true,"visibility":"internal"}],"scope":6096,"src":"571:11979:21","usedErrors":[5907,5910,5913,5916]}],"src":"32:12519:21"},"id":21}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"IERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220797f35741cb66d7a16b41fdcffac91115968eef487bcc2739bd90f6b37d7e55f64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0x7F35741CB66D7A16B41FDCFFAC91115968EEF487BCC2739BD90F PUSH12 0x37D7E55F64736F6C63430008 0xD STOP CALLER ","sourceMap":"194:9169:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220797f35741cb66d7a16b41fdcffac91115968eef487bcc2739bd90f6b37d7e55f64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0x7F35741CB66D7A16B41FDCFFAC91115968EEF487BCC2739BD90F PUSH12 0x37D7E55F64736F6C63430008 0xD STOP CALLER ","sourceMap":"194:9169:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122024e8f06dc23cedcbc3fb76692e021e8c28de9e9e8875a9e785a3089df8c7ca6a64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 0xE8 CREATE PUSH14 0xC23CEDCBC3FB76692E021E8C28DE SWAP15 SWAP15 DUP9 PUSH22 0xA9E785A3089DF8C7CA6A64736F6C634300080D003300 ","sourceMap":"220:2559:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122024e8f06dc23cedcbc3fb76692e021e8c28de9e9e8875a9e785a3089df8c7ca6a64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 0xE8 CREATE PUSH14 0xC23CEDCBC3FB76692E021E8C28DE SWAP15 SWAP15 DUP9 PUSH22 0xA9E785A3089DF8C7CA6A64736F6C634300080D003300 ","sourceMap":"220:2559:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087c5fb4917483e28533013d7bcb690352255304278d78b5fcd9af94c9d9c15f964736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xC5 0xFB 0x49 OR BASEFEE RETURNDATACOPY 0x28 MSTORE8 ADDRESS SGT 0xD7 0xBC 0xB6 SWAP1 CALLDATALOAD 0x22 SSTORE ADDRESS TIMESTAMP PUSH25 0xD78B5FCD9AF94C9D9C15F964736F6C634300080D0033000000 ","sourceMap":"202:12582:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087c5fb4917483e28533013d7bcb690352255304278d78b5fcd9af94c9d9c15f964736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xC5 0xFB 0x49 OR BASEFEE RETURNDATACOPY 0x28 MSTORE8 ADDRESS SGT 0xD7 0xBC 0xB6 SWAP1 CALLDATALOAD 0x22 SSTORE ADDRESS TIMESTAMP PUSH25 0xD78B5FCD9AF94C9D9C15F964736F6C634300080D0033000000 ","sourceMap":"202:12582:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206db98ebddd5c37c4bd3fb388481339ba5d5102a6fa1d0187c157a74304db9a9264736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB98EBDDD5C37C4BD3FB388481339 0xBA 0x5D MLOAD MUL 0xA6 STATICCALL SAR ADD DUP8 0xC1 JUMPI 0xA7 NUMBER DIV 0xDB SWAP11 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1047:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206db98ebddd5c37c4bd3fb388481339ba5d5102a6fa1d0187c157a74304db9a9264736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB98EBDDD5C37C4BD3FB388481339 0xBA 0x5D MLOAD MUL 0xA6 STATICCALL SAR ADD DUP8 0xC1 JUMPI 0xA7 NUMBER DIV 0xDB SWAP11 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1047:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC712A.sol":{"Azuki":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1905":{"entryPoint":null,"id":1905,"parameterSlots":0,"returnSlots":0},"@_4210":{"entryPoint":null,"id":4210,"parameterSlots":2,"returnSlots":0},"@_startTokenId_4219":{"entryPoint":null,"id":4219,"parameterSlots":0,"returnSlots":1},"extract_byte_array_length":{"entryPoint":303,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:396:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"69:325:22","statements":[{"nodeType":"YulAssignment","src":"79:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"93:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"96:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"89:3:22"},"nodeType":"YulFunctionCall","src":"89:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"79:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"110:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"140:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"146:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"136:3:22"},"nodeType":"YulFunctionCall","src":"136:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"114:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"187:31:22","statements":[{"nodeType":"YulAssignment","src":"189:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"203:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"211:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"199:3:22"},"nodeType":"YulFunctionCall","src":"199:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"189:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"167:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"160:6:22"},"nodeType":"YulFunctionCall","src":"160:26:22"},"nodeType":"YulIf","src":"157:61:22"},{"body":{"nodeType":"YulBlock","src":"277:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"305:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"310:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"301:3:22"},"nodeType":"YulFunctionCall","src":"301:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"291:6:22"},"nodeType":"YulFunctionCall","src":"291:31:22"},"nodeType":"YulExpressionStatement","src":"291:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"345:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"335:6:22"},"nodeType":"YulFunctionCall","src":"335:15:22"},"nodeType":"YulExpressionStatement","src":"335:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"370:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"373:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"363:6:22"},"nodeType":"YulFunctionCall","src":"363:15:22"},"nodeType":"YulExpressionStatement","src":"363:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"233:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"256:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"264:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"253:2:22"},"nodeType":"YulFunctionCall","src":"253:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"230:2:22"},"nodeType":"YulFunctionCall","src":"230:38:22"},"nodeType":"YulIf","src":"227:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"49:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"58:6:22","type":""}],"src":"14:380:22"}]},"contents":"{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x417A756B69 PUSH1 0xD8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x415A554B49 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x66 SWAP3 SWAP2 SWAP1 PUSH3 0x89 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x7C SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x89 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x16B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x97 SWAP1 PUSH3 0x12F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xBB JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x106 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xD6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x106 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x106 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x106 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xE9 JUMP JUMPDEST POP PUSH3 0x114 SWAP3 SWAP2 POP PUSH3 0x118 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x114 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x119 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x144 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x165 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE84 DUP1 PUSH3 0x17B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x144 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xB61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0xBA9 JUMP JUMPDEST PUSH2 0x406 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7C JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x30F JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x32A JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x33F SWAP1 PUSH2 0xD8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36B SWAP1 PUSH2 0xD8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3B8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x38D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3B8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD DUP3 PUSH2 0x81B JUMP JUMPDEST PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411 DUP3 PUSH2 0x65E JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x44A JUMPI PUSH2 0x42D DUP2 CALLER PUSH2 0x2B0 JUMP JUMPDEST PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B1 DUP3 PUSH2 0x842 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x531 JUMPI PUSH2 0x514 DUP7 CALLER PUSH2 0x2B0 JUMP JUMPDEST PUSH2 0x531 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5F5 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5F3 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x659 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x740 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A DUP3 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x692 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x33F SWAP1 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0x6D1 CALLER DUP3 PUSH2 0x8A9 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x74B DUP5 DUP5 DUP5 PUSH2 0x4A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x784 JUMPI PUSH2 0x767 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9A7 JUMP JUMPDEST PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x795 DUP3 PUSH2 0x81B JUMP JUMPDEST PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C9 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x814 JUMP JUMPDEST DUP1 PUSH2 0x7F3 DUP5 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x804 SWAP3 SWAP2 SWAP1 PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x32A JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x890 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x88E JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x814 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x86D JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x8CE JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000001 DUP9 MUL ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 DUP6 EQ PUSH1 0xE1 SHL TIMESTAMP PUSH1 0xA0 SHL OR DUP4 OR SWAP1 SSTORE DUP3 DUP5 ADD SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP1 LOG4 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 EQ PUSH2 0x97D JUMPI DUP1 DUP4 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 ADD PUSH2 0x945 JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9DC SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA17 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA14 SWAP2 DUP2 ADD SWAP1 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA75 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA4A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0xAAC JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x814 DUP2 PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB24 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB0C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x784 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xB4D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x814 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBC5 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF1 DUP5 PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP PUSH2 0xBFF PUSH1 0x20 DUP6 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x814 DUP3 PUSH2 0xB8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC46 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC9B DUP6 PUSH2 0xB8D JUMP JUMPDEST SWAP4 POP PUSH2 0xCA9 PUSH1 0x20 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xCCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xCF3 JUMPI PUSH2 0xCF3 PUSH2 0xC66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xD1B JUMPI PUSH2 0xD1B PUSH2 0xC66 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xD34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD74 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH2 0xD82 PUSH1 0x20 DUP5 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD9F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xDD7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xB09 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xDEB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xB09 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xE27 SWAP1 DUP4 ADD DUP5 PUSH2 0xB35 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x814 DUP2 PUSH2 0xAD6 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 CREATE2 BLOCKHASH 0xC3 0x5D 0xCC 0xD5 0xAD DUP1 CREATE 0x25 0x23 0xDD 0xCE KECCAK256 0xD1 COINBASE PUSH26 0xFDC69F3EA2BDCDBD3CA83AAA7F2964736F6C634300080D003300 ","sourceMap":"66:256:12:-:0;;;98:42;;;;;;;;;;4946:154:18;;;;;;;;;;;;;-1:-1:-1;;;4946:154:18;;;;;;;;;;;;;;;;-1:-1:-1;;;4946:154:18;;;5020:5;5012;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5035:17:18;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;5482:7:18;5062:31;;-1:-1:-1;66:256:12;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;66:256:12;;;-1:-1:-1;66:256:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:22;93:1;89:12;;;;136;;;157:61;;211:4;203:6;199:17;189:27;;157:61;264:2;256:6;253:14;233:18;230:38;227:161;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:161;;14:380;;;:::o;:::-;66:256:12;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfers_5080":{"entryPoint":null,"id":5080,"parameterSlots":4,"returnSlots":0},"@_baseURI_4477":{"entryPoint":null,"id":4477,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfers_5067":{"entryPoint":null,"id":5067,"parameterSlots":4,"returnSlots":0},"@_checkContractOnERC721Received_5135":{"entryPoint":2471,"id":5135,"parameterSlots":4,"returnSlots":1},"@_exists_4819":{"entryPoint":2075,"id":4819,"parameterSlots":1,"returnSlots":1},"@_extraData_5641":{"entryPoint":null,"id":5641,"parameterSlots":3,"returnSlots":1},"@_getApprovedSlotAndAddress_4852":{"entryPoint":null,"id":4852,"parameterSlots":1,"returnSlots":2},"@_isSenderApprovedOrOwner_4833":{"entryPoint":null,"id":4833,"parameterSlots":3,"returnSlots":1},"@_mint_5231":{"entryPoint":2217,"id":5231,"parameterSlots":2,"returnSlots":0},"@_msgSenderERC721A_5684":{"entryPoint":null,"id":5684,"parameterSlots":0,"returnSlots":1},"@_nextExtraData_5674":{"entryPoint":null,"id":5674,"parameterSlots":3,"returnSlots":1},"@_nextInitializedFlag_4681":{"entryPoint":null,"id":4681,"parameterSlots":1,"returnSlots":1},"@_packOwnershipData_4671":{"entryPoint":null,"id":4671,"parameterSlots":2,"returnSlots":1},"@_packedOwnershipOf_4605":{"entryPoint":2114,"id":4605,"parameterSlots":1,"returnSlots":1},"@_startTokenId_4219":{"entryPoint":null,"id":4219,"parameterSlots":0,"returnSlots":1},"@_toString_5694":{"entryPoint":2706,"id":5694,"parameterSlots":1,"returnSlots":1},"@approve_4726":{"entryPoint":1030,"id":4726,"parameterSlots":2,"returnSlots":0},"@balanceOf_4292":{"entryPoint":1641,"id":4292,"parameterSlots":1,"returnSlots":1},"@getApproved_4749":{"entryPoint":962,"id":4749,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_4793":{"entryPoint":null,"id":4793,"parameterSlots":2,"returnSlots":1},"@mint_1917":{"entryPoint":1735,"id":1917,"parameterSlots":1,"returnSlots":0},"@name_4415":{"entryPoint":816,"id":4415,"parameterSlots":0,"returnSlots":1},"@ownerOf_4497":{"entryPoint":1630,"id":4497,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_5016":{"entryPoint":1598,"id":5016,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_5054":{"entryPoint":1856,"id":5054,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_4775":{"entryPoint":1748,"id":4775,"parameterSlots":2,"returnSlots":0},"@supportsInterface_4405":{"entryPoint":734,"id":4405,"parameterSlots":1,"returnSlots":1},"@symbol_4425":{"entryPoint":1720,"id":4425,"parameterSlots":0,"returnSlots":1},"@tokenURI_4468":{"entryPoint":1930,"id":4468,"parameterSlots":1,"returnSlots":1},"@totalSupply_4244":{"entryPoint":null,"id":4244,"parameterSlots":0,"returnSlots":1},"@transferFrom_4997":{"entryPoint":1190,"id":4997,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":2957,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3087,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3416,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3027,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3196,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3114,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2985,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2796,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":3633,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2932,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":2869,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3525,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3572,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2913,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":2825,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3467,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":3174,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":2774,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6376:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:22","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:22"},"nodeType":"YulFunctionCall","src":"125:12:22"},"nodeType":"YulExpressionStatement","src":"125:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:22"},"nodeType":"YulFunctionCall","src":"99:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:22"},"nodeType":"YulFunctionCall","src":"88:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:22"},"nodeType":"YulFunctionCall","src":"78:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:22"},"nodeType":"YulFunctionCall","src":"71:51:22"},"nodeType":"YulIf","src":"68:71:22"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:22","type":""}],"src":"14:131:22"},{"body":{"nodeType":"YulBlock","src":"219:176:22","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:22"},"nodeType":"YulFunctionCall","src":"267:12:22"},"nodeType":"YulExpressionStatement","src":"267:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:22"},"nodeType":"YulFunctionCall","src":"236:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:22"},"nodeType":"YulFunctionCall","src":"232:32:22"},"nodeType":"YulIf","src":"229:52:22"},{"nodeType":"YulVariableDeclaration","src":"290:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:22"},"nodeType":"YulFunctionCall","src":"303:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:22"},"nodeType":"YulFunctionCall","src":"335:30:22"},"nodeType":"YulExpressionStatement","src":"335:30:22"},{"nodeType":"YulAssignment","src":"374:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:22","type":""}],"src":"150:245:22"},{"body":{"nodeType":"YulBlock","src":"495:92:22","statements":[{"nodeType":"YulAssignment","src":"505:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:22"},"nodeType":"YulFunctionCall","src":"513:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:22"},"nodeType":"YulFunctionCall","src":"565:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:22"},"nodeType":"YulFunctionCall","src":"558:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:22"},"nodeType":"YulFunctionCall","src":"540:41:22"},"nodeType":"YulExpressionStatement","src":"540:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:22","type":""}],"src":"400:187:22"},{"body":{"nodeType":"YulBlock","src":"645:205:22","statements":[{"nodeType":"YulVariableDeclaration","src":"655:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"664:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"659:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"724:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"749:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"754:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:22"},"nodeType":"YulFunctionCall","src":"745:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"768:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"773:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"764:3:22"},"nodeType":"YulFunctionCall","src":"764:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"758:5:22"},"nodeType":"YulFunctionCall","src":"758:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"738:6:22"},"nodeType":"YulFunctionCall","src":"738:39:22"},"nodeType":"YulExpressionStatement","src":"738:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"685:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"682:2:22"},"nodeType":"YulFunctionCall","src":"682:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"696:19:22","statements":[{"nodeType":"YulAssignment","src":"698:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"710:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:22"},"nodeType":"YulFunctionCall","src":"703:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"678:3:22","statements":[]},"src":"674:113:22"},{"body":{"nodeType":"YulBlock","src":"813:31:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"826:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"831:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:22"},"nodeType":"YulFunctionCall","src":"822:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"840:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:22"},"nodeType":"YulFunctionCall","src":"815:27:22"},"nodeType":"YulExpressionStatement","src":"815:27:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"802:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"805:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"799:2:22"},"nodeType":"YulFunctionCall","src":"799:13:22"},"nodeType":"YulIf","src":"796:48:22"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"623:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"628:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"633:6:22","type":""}],"src":"592:258:22"},{"body":{"nodeType":"YulBlock","src":"905:208:22","statements":[{"nodeType":"YulVariableDeclaration","src":"915:26:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"935:5:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:22"},"nodeType":"YulFunctionCall","src":"929:12:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"919:6:22","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"957:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"962:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"950:6:22"},"nodeType":"YulFunctionCall","src":"950:19:22"},"nodeType":"YulExpressionStatement","src":"950:19:22"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1004:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:22"},"nodeType":"YulFunctionCall","src":"1000:16:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1022:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"1027:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1018:3:22"},"nodeType":"YulFunctionCall","src":"1018:14:22"},{"name":"length","nodeType":"YulIdentifier","src":"1034:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"978:21:22"},"nodeType":"YulFunctionCall","src":"978:63:22"},"nodeType":"YulExpressionStatement","src":"978:63:22"},{"nodeType":"YulAssignment","src":"1050:57:22","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1065:3:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1078:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1086:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1074:3:22"},"nodeType":"YulFunctionCall","src":"1074:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1091:3:22"},"nodeType":"YulFunctionCall","src":"1091:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1070:3:22"},"nodeType":"YulFunctionCall","src":"1070:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1061:3:22"},"nodeType":"YulFunctionCall","src":"1061:39:22"},{"kind":"number","nodeType":"YulLiteral","src":"1102:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:22"},"nodeType":"YulFunctionCall","src":"1057:50:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1050:3:22"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"882:5:22","type":""},{"name":"pos","nodeType":"YulTypedName","src":"889:3:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"897:3:22","type":""}],"src":"855:258:22"},{"body":{"nodeType":"YulBlock","src":"1239:99:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1256:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1267:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1249:6:22"},"nodeType":"YulFunctionCall","src":"1249:21:22"},"nodeType":"YulExpressionStatement","src":"1249:21:22"},{"nodeType":"YulAssignment","src":"1279:53:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1317:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1328:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:22"},"nodeType":"YulFunctionCall","src":"1313:18:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1287:17:22"},"nodeType":"YulFunctionCall","src":"1287:45:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1279:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1219:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1230:4:22","type":""}],"src":"1118:220:22"},{"body":{"nodeType":"YulBlock","src":"1413:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:22"},"nodeType":"YulFunctionCall","src":"1461:12:22"},"nodeType":"YulExpressionStatement","src":"1461:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:22"},"nodeType":"YulFunctionCall","src":"1430:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:22"},"nodeType":"YulFunctionCall","src":"1426:32:22"},"nodeType":"YulIf","src":"1423:52:22"},{"nodeType":"YulAssignment","src":"1484:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1494:12:22"},"nodeType":"YulFunctionCall","src":"1494:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1379:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1390:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1402:6:22","type":""}],"src":"1343:180:22"},{"body":{"nodeType":"YulBlock","src":"1629:102:22","statements":[{"nodeType":"YulAssignment","src":"1639:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1651:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1647:3:22"},"nodeType":"YulFunctionCall","src":"1647:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1639:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1708:3:22"},"nodeType":"YulFunctionCall","src":"1708:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1721:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1704:3:22"},"nodeType":"YulFunctionCall","src":"1704:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1692:3:22"},"nodeType":"YulFunctionCall","src":"1692:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1674:6:22"},"nodeType":"YulFunctionCall","src":"1674:51:22"},"nodeType":"YulExpressionStatement","src":"1674:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:22","type":""}],"src":"1528:203:22"},{"body":{"nodeType":"YulBlock","src":"1785:124:22","statements":[{"nodeType":"YulAssignment","src":"1795:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1817:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:22"},"nodeType":"YulFunctionCall","src":"1804:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1795:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1887:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1896:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1889:6:22"},"nodeType":"YulFunctionCall","src":"1889:12:22"},"nodeType":"YulExpressionStatement","src":"1889:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1846:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1857:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1872:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1877:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1868:3:22"},"nodeType":"YulFunctionCall","src":"1868:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1881:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1864:3:22"},"nodeType":"YulFunctionCall","src":"1864:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1853:3:22"},"nodeType":"YulFunctionCall","src":"1853:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1843:2:22"},"nodeType":"YulFunctionCall","src":"1843:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1836:6:22"},"nodeType":"YulFunctionCall","src":"1836:50:22"},"nodeType":"YulIf","src":"1833:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1764:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:22","type":""}],"src":"1736:173:22"},{"body":{"nodeType":"YulBlock","src":"2001:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"2047:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2056:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2059:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2049:6:22"},"nodeType":"YulFunctionCall","src":"2049:12:22"},"nodeType":"YulExpressionStatement","src":"2049:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2022:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2031:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2018:3:22"},"nodeType":"YulFunctionCall","src":"2018:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2043:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2014:3:22"},"nodeType":"YulFunctionCall","src":"2014:32:22"},"nodeType":"YulIf","src":"2011:52:22"},{"nodeType":"YulAssignment","src":"2072:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2101:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2082:18:22"},"nodeType":"YulFunctionCall","src":"2082:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2072:6:22"}]},{"nodeType":"YulAssignment","src":"2120:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2158:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2143:3:22"},"nodeType":"YulFunctionCall","src":"2143:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2130:12:22"},"nodeType":"YulFunctionCall","src":"2130:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2120:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1990:6:22","type":""}],"src":"1914:254:22"},{"body":{"nodeType":"YulBlock","src":"2274:76:22","statements":[{"nodeType":"YulAssignment","src":"2284:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2296:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2307:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2292:3:22"},"nodeType":"YulFunctionCall","src":"2292:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2284:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2337:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2319:6:22"},"nodeType":"YulFunctionCall","src":"2319:25:22"},"nodeType":"YulExpressionStatement","src":"2319:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2243:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2254:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2265:4:22","type":""}],"src":"2173:177:22"},{"body":{"nodeType":"YulBlock","src":"2459:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"2505:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2514:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2517:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2507:6:22"},"nodeType":"YulFunctionCall","src":"2507:12:22"},"nodeType":"YulExpressionStatement","src":"2507:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2480:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2489:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2476:3:22"},"nodeType":"YulFunctionCall","src":"2476:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2501:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2472:3:22"},"nodeType":"YulFunctionCall","src":"2472:32:22"},"nodeType":"YulIf","src":"2469:52:22"},{"nodeType":"YulAssignment","src":"2530:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2559:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2540:18:22"},"nodeType":"YulFunctionCall","src":"2540:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2530:6:22"}]},{"nodeType":"YulAssignment","src":"2578:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2622:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2607:3:22"},"nodeType":"YulFunctionCall","src":"2607:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2588:18:22"},"nodeType":"YulFunctionCall","src":"2588:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2578:6:22"}]},{"nodeType":"YulAssignment","src":"2635:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2662:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2673:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2658:3:22"},"nodeType":"YulFunctionCall","src":"2658:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2645:12:22"},"nodeType":"YulFunctionCall","src":"2645:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2635:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2409:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2420:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2432:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2440:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2448:6:22","type":""}],"src":"2355:328:22"},{"body":{"nodeType":"YulBlock","src":"2758:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2804:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2813:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2816:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2806:6:22"},"nodeType":"YulFunctionCall","src":"2806:12:22"},"nodeType":"YulExpressionStatement","src":"2806:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2779:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2788:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2775:3:22"},"nodeType":"YulFunctionCall","src":"2775:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2800:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2771:3:22"},"nodeType":"YulFunctionCall","src":"2771:32:22"},"nodeType":"YulIf","src":"2768:52:22"},{"nodeType":"YulAssignment","src":"2829:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2858:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2839:18:22"},"nodeType":"YulFunctionCall","src":"2839:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2829:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2724:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2735:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2747:6:22","type":""}],"src":"2688:186:22"},{"body":{"nodeType":"YulBlock","src":"2963:263:22","statements":[{"body":{"nodeType":"YulBlock","src":"3009:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:22"},"nodeType":"YulFunctionCall","src":"3011:12:22"},"nodeType":"YulExpressionStatement","src":"3011:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2984:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2993:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2980:3:22"},"nodeType":"YulFunctionCall","src":"2980:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3005:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2976:3:22"},"nodeType":"YulFunctionCall","src":"2976:32:22"},"nodeType":"YulIf","src":"2973:52:22"},{"nodeType":"YulAssignment","src":"3034:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3044:18:22"},"nodeType":"YulFunctionCall","src":"3044:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3034:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3082:45:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:22"},"nodeType":"YulFunctionCall","src":"3108:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3095:12:22"},"nodeType":"YulFunctionCall","src":"3095:32:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3086:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3180:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:22"},"nodeType":"YulFunctionCall","src":"3182:12:22"},"nodeType":"YulExpressionStatement","src":"3182:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3149:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3170:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3163:6:22"},"nodeType":"YulFunctionCall","src":"3163:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3156:6:22"},"nodeType":"YulFunctionCall","src":"3156:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3146:2:22"},"nodeType":"YulFunctionCall","src":"3146:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3139:6:22"},"nodeType":"YulFunctionCall","src":"3139:40:22"},"nodeType":"YulIf","src":"3136:60:22"},{"nodeType":"YulAssignment","src":"3205:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"3215:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3205:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2921:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2932:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2944:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2952:6:22","type":""}],"src":"2879:347:22"},{"body":{"nodeType":"YulBlock","src":"3263:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3280:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3287:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3292:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3283:3:22"},"nodeType":"YulFunctionCall","src":"3283:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3273:6:22"},"nodeType":"YulFunctionCall","src":"3273:31:22"},"nodeType":"YulExpressionStatement","src":"3273:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3323:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3313:6:22"},"nodeType":"YulFunctionCall","src":"3313:15:22"},"nodeType":"YulExpressionStatement","src":"3313:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3344:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3347:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3337:6:22"},"nodeType":"YulFunctionCall","src":"3337:15:22"},"nodeType":"YulExpressionStatement","src":"3337:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3231:127:22"},{"body":{"nodeType":"YulBlock","src":"3493:1008:22","statements":[{"body":{"nodeType":"YulBlock","src":"3540:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3549:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3552:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3542:6:22"},"nodeType":"YulFunctionCall","src":"3542:12:22"},"nodeType":"YulExpressionStatement","src":"3542:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3514:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3523:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:22"},"nodeType":"YulFunctionCall","src":"3510:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3535:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3506:3:22"},"nodeType":"YulFunctionCall","src":"3506:33:22"},"nodeType":"YulIf","src":"3503:53:22"},{"nodeType":"YulAssignment","src":"3565:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3594:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3575:18:22"},"nodeType":"YulFunctionCall","src":"3575:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3565:6:22"}]},{"nodeType":"YulAssignment","src":"3613:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3646:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3657:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3642:3:22"},"nodeType":"YulFunctionCall","src":"3642:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3623:18:22"},"nodeType":"YulFunctionCall","src":"3623:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3613:6:22"}]},{"nodeType":"YulAssignment","src":"3670:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3697:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3708:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3693:3:22"},"nodeType":"YulFunctionCall","src":"3693:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3680:12:22"},"nodeType":"YulFunctionCall","src":"3680:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3670:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3721:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3752:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3763:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:22"},"nodeType":"YulFunctionCall","src":"3748:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3735:12:22"},"nodeType":"YulFunctionCall","src":"3735:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3725:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3776:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3786:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3780:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3831:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3840:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3843:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3833:6:22"},"nodeType":"YulFunctionCall","src":"3833:12:22"},"nodeType":"YulExpressionStatement","src":"3833:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3819:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3827:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3816:2:22"},"nodeType":"YulFunctionCall","src":"3816:14:22"},"nodeType":"YulIf","src":"3813:34:22"},{"nodeType":"YulVariableDeclaration","src":"3856:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3870:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"3881:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3866:3:22"},"nodeType":"YulFunctionCall","src":"3866:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3860:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:22"},"nodeType":"YulFunctionCall","src":"3938:12:22"},"nodeType":"YulExpressionStatement","src":"3938:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3915:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3919:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3911:3:22"},"nodeType":"YulFunctionCall","src":"3911:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3926:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3907:3:22"},"nodeType":"YulFunctionCall","src":"3907:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3900:6:22"},"nodeType":"YulFunctionCall","src":"3900:35:22"},"nodeType":"YulIf","src":"3897:55:22"},{"nodeType":"YulVariableDeclaration","src":"3961:26:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3984:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3971:12:22"},"nodeType":"YulFunctionCall","src":"3971:16:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3965:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4010:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4012:16:22"},"nodeType":"YulFunctionCall","src":"4012:18:22"},"nodeType":"YulExpressionStatement","src":"4012:18:22"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4002:2:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4006:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3999:2:22"},"nodeType":"YulFunctionCall","src":"3999:10:22"},"nodeType":"YulIf","src":"3996:36:22"},{"nodeType":"YulVariableDeclaration","src":"4041:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4051:3:22"},"nodeType":"YulFunctionCall","src":"4051:7:22"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4045:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4067:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4087:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4081:5:22"},"nodeType":"YulFunctionCall","src":"4081:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4071:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4099:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4121:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4145:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4149:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4141:3:22"},"nodeType":"YulFunctionCall","src":"4141:13:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4156:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4137:3:22"},"nodeType":"YulFunctionCall","src":"4137:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"4161:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:22"},"nodeType":"YulFunctionCall","src":"4133:31:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4166:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4129:3:22"},"nodeType":"YulFunctionCall","src":"4129:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:22"},"nodeType":"YulFunctionCall","src":"4117:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4103:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4229:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4231:16:22"},"nodeType":"YulFunctionCall","src":"4231:18:22"},"nodeType":"YulExpressionStatement","src":"4231:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4188:10:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4200:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4185:2:22"},"nodeType":"YulFunctionCall","src":"4185:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4208:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4220:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4205:2:22"},"nodeType":"YulFunctionCall","src":"4205:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4182:2:22"},"nodeType":"YulFunctionCall","src":"4182:46:22"},"nodeType":"YulIf","src":"4179:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4267:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4271:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4260:6:22"},"nodeType":"YulFunctionCall","src":"4260:22:22"},"nodeType":"YulExpressionStatement","src":"4260:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4298:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4306:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4291:6:22"},"nodeType":"YulFunctionCall","src":"4291:18:22"},"nodeType":"YulExpressionStatement","src":"4291:18:22"},{"body":{"nodeType":"YulBlock","src":"4355:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4364:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4367:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4357:6:22"},"nodeType":"YulFunctionCall","src":"4357:12:22"},"nodeType":"YulExpressionStatement","src":"4357:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4332:2:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4336:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:22"},"nodeType":"YulFunctionCall","src":"4328:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"4341:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4324:3:22"},"nodeType":"YulFunctionCall","src":"4324:20:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4346:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4321:2:22"},"nodeType":"YulFunctionCall","src":"4321:33:22"},"nodeType":"YulIf","src":"4318:53:22"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4397:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4405:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:22"},"nodeType":"YulFunctionCall","src":"4393:15:22"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4414:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4418:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4410:3:22"},"nodeType":"YulFunctionCall","src":"4410:11:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4423:2:22"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4380:12:22"},"nodeType":"YulFunctionCall","src":"4380:46:22"},"nodeType":"YulExpressionStatement","src":"4380:46:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4450:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4458:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:22"},"nodeType":"YulFunctionCall","src":"4446:15:22"},{"kind":"number","nodeType":"YulLiteral","src":"4463:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:22"},"nodeType":"YulFunctionCall","src":"4442:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"4468:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:22"},"nodeType":"YulFunctionCall","src":"4435:35:22"},"nodeType":"YulExpressionStatement","src":"4435:35:22"},{"nodeType":"YulAssignment","src":"4479:16:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4489:6:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4479:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3435:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3446:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3458:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3466:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3474:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3482:6:22","type":""}],"src":"3363:1138:22"},{"body":{"nodeType":"YulBlock","src":"4593:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"4639:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4648:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4651:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4641:6:22"},"nodeType":"YulFunctionCall","src":"4641:12:22"},"nodeType":"YulExpressionStatement","src":"4641:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4614:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4623:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4610:3:22"},"nodeType":"YulFunctionCall","src":"4610:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4635:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4606:3:22"},"nodeType":"YulFunctionCall","src":"4606:32:22"},"nodeType":"YulIf","src":"4603:52:22"},{"nodeType":"YulAssignment","src":"4664:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4693:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4674:18:22"},"nodeType":"YulFunctionCall","src":"4674:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4664:6:22"}]},{"nodeType":"YulAssignment","src":"4712:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4745:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4756:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4741:3:22"},"nodeType":"YulFunctionCall","src":"4741:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4722:18:22"},"nodeType":"YulFunctionCall","src":"4722:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4712:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4551:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4562:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4574:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4582:6:22","type":""}],"src":"4506:260:22"},{"body":{"nodeType":"YulBlock","src":"4826:325:22","statements":[{"nodeType":"YulAssignment","src":"4836:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4853:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4846:3:22"},"nodeType":"YulFunctionCall","src":"4846:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4836:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4867:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4897:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4903:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4893:3:22"},"nodeType":"YulFunctionCall","src":"4893:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4871:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4944:31:22","statements":[{"nodeType":"YulAssignment","src":"4946:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4960:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4968:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4956:3:22"},"nodeType":"YulFunctionCall","src":"4956:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4946:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4924:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4917:6:22"},"nodeType":"YulFunctionCall","src":"4917:26:22"},"nodeType":"YulIf","src":"4914:61:22"},{"body":{"nodeType":"YulBlock","src":"5034:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5055:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5062:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5067:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5058:3:22"},"nodeType":"YulFunctionCall","src":"5058:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5048:6:22"},"nodeType":"YulFunctionCall","src":"5048:31:22"},"nodeType":"YulExpressionStatement","src":"5048:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5099:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5102:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5092:6:22"},"nodeType":"YulFunctionCall","src":"5092:15:22"},"nodeType":"YulExpressionStatement","src":"5092:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5120:6:22"},"nodeType":"YulFunctionCall","src":"5120:15:22"},"nodeType":"YulExpressionStatement","src":"5120:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4990:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5013:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5021:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5010:2:22"},"nodeType":"YulFunctionCall","src":"5010:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4987:2:22"},"nodeType":"YulFunctionCall","src":"4987:38:22"},"nodeType":"YulIf","src":"4984:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4806:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4815:6:22","type":""}],"src":"4771:380:22"},{"body":{"nodeType":"YulBlock","src":"5343:283:22","statements":[{"nodeType":"YulVariableDeclaration","src":"5353:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5373:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5367:5:22"},"nodeType":"YulFunctionCall","src":"5367:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5357:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5415:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5423:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5411:3:22"},"nodeType":"YulFunctionCall","src":"5411:17:22"},{"name":"pos","nodeType":"YulIdentifier","src":"5430:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"5435:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5389:21:22"},"nodeType":"YulFunctionCall","src":"5389:53:22"},"nodeType":"YulExpressionStatement","src":"5389:53:22"},{"nodeType":"YulVariableDeclaration","src":"5451:29:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5468:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"5473:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5464:3:22"},"nodeType":"YulFunctionCall","src":"5464:16:22"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"5455:5:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5489:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5511:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5505:5:22"},"nodeType":"YulFunctionCall","src":"5505:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"5493:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5553:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5561:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5549:3:22"},"nodeType":"YulFunctionCall","src":"5549:17:22"},{"name":"end_1","nodeType":"YulIdentifier","src":"5568:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"5575:8:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5527:21:22"},"nodeType":"YulFunctionCall","src":"5527:57:22"},"nodeType":"YulExpressionStatement","src":"5527:57:22"},{"nodeType":"YulAssignment","src":"5593:27:22","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"5604:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"5611:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5600:3:22"},"nodeType":"YulFunctionCall","src":"5600:20:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5593:3:22"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5311:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5316:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5324:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5335:3:22","type":""}],"src":"5156:470:22"},{"body":{"nodeType":"YulBlock","src":"5834:286:22","statements":[{"nodeType":"YulVariableDeclaration","src":"5844:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5862:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5867:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5858:3:22"},"nodeType":"YulFunctionCall","src":"5858:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"5871:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5854:3:22"},"nodeType":"YulFunctionCall","src":"5854:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5848:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5889:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5904:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"5912:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5900:3:22"},"nodeType":"YulFunctionCall","src":"5900:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5882:6:22"},"nodeType":"YulFunctionCall","src":"5882:34:22"},"nodeType":"YulExpressionStatement","src":"5882:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5936:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5947:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5932:3:22"},"nodeType":"YulFunctionCall","src":"5932:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5956:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"5964:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5952:3:22"},"nodeType":"YulFunctionCall","src":"5952:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:22"},"nodeType":"YulFunctionCall","src":"5925:43:22"},"nodeType":"YulExpressionStatement","src":"5925:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5988:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5999:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5984:3:22"},"nodeType":"YulFunctionCall","src":"5984:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"6004:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5977:6:22"},"nodeType":"YulFunctionCall","src":"5977:34:22"},"nodeType":"YulExpressionStatement","src":"5977:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6031:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6042:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6027:3:22"},"nodeType":"YulFunctionCall","src":"6027:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6047:3:22","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6020:6:22"},"nodeType":"YulFunctionCall","src":"6020:31:22"},"nodeType":"YulExpressionStatement","src":"6020:31:22"},{"nodeType":"YulAssignment","src":"6060:54:22","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6086:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6098:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6109:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6094:3:22"},"nodeType":"YulFunctionCall","src":"6094:19:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6068:17:22"},"nodeType":"YulFunctionCall","src":"6068:46:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6060:4:22"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5779:9:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5790:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5798:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5806:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5814:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5825:4:22","type":""}],"src":"5631:489:22"},{"body":{"nodeType":"YulBlock","src":"6205:169:22","statements":[{"body":{"nodeType":"YulBlock","src":"6251:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6260:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6263:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6253:6:22"},"nodeType":"YulFunctionCall","src":"6253:12:22"},"nodeType":"YulExpressionStatement","src":"6253:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6226:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"6235:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6222:3:22"},"nodeType":"YulFunctionCall","src":"6222:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"6247:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6218:3:22"},"nodeType":"YulFunctionCall","src":"6218:32:22"},"nodeType":"YulIf","src":"6215:52:22"},{"nodeType":"YulVariableDeclaration","src":"6276:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6295:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6289:5:22"},"nodeType":"YulFunctionCall","src":"6289:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6280:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6338:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"6314:23:22"},"nodeType":"YulFunctionCall","src":"6314:30:22"},"nodeType":"YulExpressionStatement","src":"6314:30:22"},{"nodeType":"YulAssignment","src":"6353:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"6363:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6353:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6171:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6182:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6194:6:22","type":""}],"src":"6125:249:22"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100e85760003560e01c80636352211e1161008a578063a22cb46511610059578063a22cb46514610242578063b88d4fde14610262578063c87b56dd14610275578063e985e9c51461029557600080fd5b80636352211e146101da57806370a08231146101fa57806395d89b411461021a578063a0712d681461022f57600080fd5b8063095ea7b3116100c6578063095ea7b31461017c57806318160ddd1461019157806323b872dd146101b457806342842e0e146101c757600080fd5b806301ffc9a7146100ed57806306fdde0314610122578063081812fc14610144575b600080fd5b3480156100f957600080fd5b5061010d610108366004610aec565b6102de565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b50610137610330565b6040516101199190610b61565b34801561015057600080fd5b5061016461015f366004610b74565b6103c2565b6040516001600160a01b039091168152602001610119565b61018f61018a366004610ba9565b610406565b005b34801561019d57600080fd5b50600154600054035b604051908152602001610119565b61018f6101c2366004610bd3565b6104a6565b61018f6101d5366004610bd3565b61063e565b3480156101e657600080fd5b506101646101f5366004610b74565b61065e565b34801561020657600080fd5b506101a6610215366004610c0f565b610669565b34801561022657600080fd5b506101376106b8565b61018f61023d366004610b74565b6106c7565b34801561024e57600080fd5b5061018f61025d366004610c2a565b6106d4565b61018f610270366004610c7c565b610740565b34801561028157600080fd5b50610137610290366004610b74565b61078a565b3480156102a157600080fd5b5061010d6102b0366004610d58565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061030f57506380ac58cd60e01b6001600160e01b03198316145b8061032a5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606002805461033f90610d8b565b80601f016020809104026020016040519081016040528092919081815260200182805461036b90610d8b565b80156103b85780601f1061038d576101008083540402835291602001916103b8565b820191906000526020600020905b81548152906001019060200180831161039b57829003601f168201915b5050505050905090565b60006103cd8261081b565b6103ea576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006104118261065e565b9050336001600160a01b0382161461044a5761042d81336102b0565b61044a576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006104b182610842565b9050836001600160a01b0316816001600160a01b0316146104e45760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b038816909114176105315761051486336102b0565b61053157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661055857604051633a954ecd60e21b815260040160405180910390fd5b801561056357600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036105f5576001840160008181526004602052604081205490036105f35760005481146105f35760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b61065983838360405180602001604052806000815250610740565b505050565b600061032a82610842565b60006001600160a01b038216610692576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b60606003805461033f90610d8b565b6106d133826108a9565b50565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61074b8484846104a6565b6001600160a01b0383163b1561078457610767848484846109a7565b610784576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606107958261081b565b6107b257604051630a14c4b560e41b815260040160405180910390fd5b60006107c960408051602081019091526000815290565b905080516000036107e95760405180602001604052806000815250610814565b806107f384610a92565b604051602001610804929190610dc5565b6040516020818303038152906040525b9392505050565b600080548210801561032a575050600090815260046020526040902054600160e01b161590565b6000816000548110156108905760008181526004602052604081205490600160e01b8216900361088e575b8060000361081457506000190160008181526004602052604090205461086d565b505b604051636f96cda160e11b815260040160405180910390fd5b60008054908290036108ce5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461097d57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101610945565b508160000361099e57604051622e076360e81b815260040160405180910390fd5b60005550505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109dc903390899088908890600401610df4565b6020604051808303816000875af1925050508015610a17575060408051601f3d908101601f19168201909252610a1491810190610e31565b60015b610a75573d808015610a45576040519150601f19603f3d011682016040523d82523d6000602084013e610a4a565b606091505b508051600003610a6d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610aac5750819003601f19909101908152919050565b6001600160e01b0319811681146106d157600080fd5b600060208284031215610afe57600080fd5b813561081481610ad6565b60005b83811015610b24578181015183820152602001610b0c565b838111156107845750506000910152565b60008151808452610b4d816020860160208601610b09565b601f01601f19169290920160200192915050565b6020815260006108146020830184610b35565b600060208284031215610b8657600080fd5b5035919050565b80356001600160a01b0381168114610ba457600080fd5b919050565b60008060408385031215610bbc57600080fd5b610bc583610b8d565b946020939093013593505050565b600080600060608486031215610be857600080fd5b610bf184610b8d565b9250610bff60208501610b8d565b9150604084013590509250925092565b600060208284031215610c2157600080fd5b61081482610b8d565b60008060408385031215610c3d57600080fd5b610c4683610b8d565b915060208301358015158114610c5b57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610c9257600080fd5b610c9b85610b8d565b9350610ca960208601610b8d565b925060408501359150606085013567ffffffffffffffff80821115610ccd57600080fd5b818701915087601f830112610ce157600080fd5b813581811115610cf357610cf3610c66565b604051601f8201601f19908116603f01168101908382118183101715610d1b57610d1b610c66565b816040528281528a6020848701011115610d3457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610d6b57600080fd5b610d7483610b8d565b9150610d8260208401610b8d565b90509250929050565b600181811c90821680610d9f57607f821691505b602082108103610dbf57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610dd7818460208801610b09565b835190830190610deb818360208801610b09565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610e2790830184610b35565b9695505050505050565b600060208284031215610e4357600080fd5b815161081481610ad656fea2646970667358221220d3f540c35dccd5ad80f02523ddce20d14179fdc69f3ea2bdcdbd3ca83aaa7f2964736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x144 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x2DE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xB61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0xBA9 JUMP JUMPDEST PUSH2 0x406 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x18F PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7C JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x30F JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x32A JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x33F SWAP1 PUSH2 0xD8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36B SWAP1 PUSH2 0xD8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3B8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x38D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3B8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD DUP3 PUSH2 0x81B JUMP JUMPDEST PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411 DUP3 PUSH2 0x65E JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x44A JUMPI PUSH2 0x42D DUP2 CALLER PUSH2 0x2B0 JUMP JUMPDEST PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B1 DUP3 PUSH2 0x842 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x531 JUMPI PUSH2 0x514 DUP7 CALLER PUSH2 0x2B0 JUMP JUMPDEST PUSH2 0x531 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5F5 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5F3 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x659 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x740 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A DUP3 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x692 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x33F SWAP1 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0x6D1 CALLER DUP3 PUSH2 0x8A9 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x74B DUP5 DUP5 DUP5 PUSH2 0x4A6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x784 JUMPI PUSH2 0x767 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9A7 JUMP JUMPDEST PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x795 DUP3 PUSH2 0x81B JUMP JUMPDEST PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C9 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x814 JUMP JUMPDEST DUP1 PUSH2 0x7F3 DUP5 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x804 SWAP3 SWAP2 SWAP1 PUSH2 0xDC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x32A JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x890 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x88E JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x814 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x86D JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x8CE JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000001 DUP9 MUL ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 DUP6 EQ PUSH1 0xE1 SHL TIMESTAMP PUSH1 0xA0 SHL OR DUP4 OR SWAP1 SSTORE DUP3 DUP5 ADD SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP1 LOG4 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 EQ PUSH2 0x97D JUMPI DUP1 DUP4 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 ADD PUSH2 0x945 JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9DC SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA17 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA14 SWAP2 DUP2 ADD SWAP1 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA75 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA4A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0xAAC JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x814 DUP2 PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB24 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB0C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x784 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xB4D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x814 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBC5 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF1 DUP5 PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP PUSH2 0xBFF PUSH1 0x20 DUP6 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x814 DUP3 PUSH2 0xB8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC46 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC9B DUP6 PUSH2 0xB8D JUMP JUMPDEST SWAP4 POP PUSH2 0xCA9 PUSH1 0x20 DUP7 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xCCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xCF3 JUMPI PUSH2 0xCF3 PUSH2 0xC66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xD1B JUMPI PUSH2 0xD1B PUSH2 0xC66 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xD34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD74 DUP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 POP PUSH2 0xD82 PUSH1 0x20 DUP5 ADD PUSH2 0xB8D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD9F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xDD7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xB09 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xDEB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xB09 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xE27 SWAP1 DUP4 ADD DUP5 PUSH2 0xB35 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x814 DUP2 PUSH2 0xAD6 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 CREATE2 BLOCKHASH 0xC3 0x5D 0xCC 0xD5 0xAD DUP1 CREATE 0x25 0x23 0xDD 0xCE KECCAK256 0xD1 COINBASE PUSH26 0xFDC69F3EA2BDCDBD3CA83AAA7F2964736F6C634300080D003300 ","sourceMap":"66:256:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9155:630:18;;;;;;;;;;-1:-1:-1;9155:630:18;;;;;:::i;:::-;;:::i;:::-;;;565:14:22;;558:22;540:41;;528:2;513:18;9155:630:18;;;;;;;;10039:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;16360:214::-;;;;;;;;;;-1:-1:-1;16360:214:18;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:22;;;1674:51;;1662:2;1647:18;16360:214:18;1528:203:22;15812:398:18;;;;;;:::i;:::-;;:::i;:::-;;5894:317;;;;;;;;;;-1:-1:-1;6164:12:18;;5955:7;6148:13;:28;5894:317;;;2319:25:22;;;2307:2;2292:18;5894:317:18;2173:177:22;19903:2764:18;;;;;;:::i;:::-;;:::i;22758:187::-;;;;;;:::i;:::-;;:::i;11391:150::-;;;;;;;;;;-1:-1:-1;11391:150:18;;;;;:::i;:::-;;:::i;7045:230::-;;;;;;;;;;-1:-1:-1;7045:230:18;;;;;:::i;:::-;;:::i;10208:102::-;;;;;;;;;;;;;:::i;146:174:12:-;;;;;;:::i;:::-;;:::i;16901:231:18:-;;;;;;;;;;-1:-1:-1;16901:231:18;;;;;:::i;:::-;;:::i;23526:396::-;;;;;;:::i;:::-;;:::i;10411:313::-;;;;;;;;;;-1:-1:-1;10411:313:18;;;;;:::i;:::-;;:::i;17282:162::-;;;;;;;;;;-1:-1:-1;17282:162:18;;;;;:::i;:::-;-1:-1:-1;;;;;17402:25:18;;;17379:4;17402:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;17282:162;9155:630;9240:4;-1:-1:-1;;;;;;;;;9558:25:18;;;;:101;;-1:-1:-1;;;;;;;;;;9634:25:18;;;9558:101;:177;;;-1:-1:-1;;;;;;;;;;9710:25:18;;;9558:177;9539:196;9155:630;-1:-1:-1;;9155:630:18:o;10039:98::-;10093:13;10125:5;10118:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10039:98;:::o;16360:214::-;16436:7;16460:16;16468:7;16460;:16::i;:::-;16455:64;;16485:34;;-1:-1:-1;;;16485:34:18;;;;;;;;;;;16455:64;-1:-1:-1;16537:24:18;;;;:15;:24;;;;;:30;-1:-1:-1;;;;;16537:30:18;;16360:214::o;15812:398::-;15900:13;15916:16;15924:7;15916;:16::i;:::-;15900:32;-1:-1:-1;39523:10:18;-1:-1:-1;;;;;15947:28:18;;;15943:172;;15994:44;16011:5;39523:10;17282:162;:::i;15994:44::-;15989:126;;16065:35;;-1:-1:-1;;;16065:35:18;;;;;;;;;;;15989:126;16125:24;;;;:15;:24;;;;;;:35;;-1:-1:-1;;;;;;16125:35:18;-1:-1:-1;;;;;16125:35:18;;;;;;;;;16175:28;;16125:24;;16175:28;;;;;;;15890:320;15812:398;;:::o;19903:2764::-;20040:27;20070;20089:7;20070:18;:27::i;:::-;20040:57;;20153:4;-1:-1:-1;;;;;20112:45:18;20128:19;-1:-1:-1;;;;;20112:45:18;;20108:86;;20166:28;;-1:-1:-1;;;20166:28:18;;;;;;;;;;;20108:86;20206:27;19036:24;;;:15;:24;;;;;19260:26;;39523:10;18673:30;;;-1:-1:-1;;;;;18370:28:18;;18651:20;;;18648:56;20389:179;;20481:43;20498:4;39523:10;17282:162;:::i;20481:43::-;20476:92;;20533:35;;-1:-1:-1;;;20533:35:18;;;;;;;;;;;20476:92;-1:-1:-1;;;;;20583:16:18;;20579:52;;20608:23;;-1:-1:-1;;;20608:23:18;;;;;;;;;;;20579:52;20774:15;20771:157;;;20912:1;20891:19;20884:30;20771:157;-1:-1:-1;;;;;21300:24:18;;;;;;;:18;:24;;;;;;21298:26;;-1:-1:-1;;21298:26:18;;;21368:22;;;;;;;;;21366:24;;-1:-1:-1;21366:24:18;;;14703:11;14678:23;14674:41;14661:63;-1:-1:-1;;;14661:63:18;21654:26;;;;:17;:26;;;;;:172;;;;-1:-1:-1;;;21943:47:18;;:52;;21939:617;;22047:1;22037:11;;22015:19;22168:30;;;:17;:30;;;;;;:35;;22164:378;;22304:13;;22289:11;:28;22285:239;;22449:30;;;;:17;:30;;;;;:52;;;22285:239;21997:559;21939:617;22600:7;22596:2;-1:-1:-1;;;;;22581:27:18;22590:4;-1:-1:-1;;;;;22581:27:18;;;;;;;;;;;20030:2637;;;19903:2764;;;:::o;22758:187::-;22899:39;22916:4;22922:2;22926:7;22899:39;;;;;;;;;;;;:16;:39::i;:::-;22758:187;;;:::o;11391:150::-;11463:7;11505:27;11524:7;11505:18;:27::i;7045:230::-;7117:7;-1:-1:-1;;;;;7140:19:18;;7136:60;;7168:28;;-1:-1:-1;;;7168:28:18;;;;;;;;;;;7136:60;-1:-1:-1;;;;;;7213:25:18;;;;;:18;:25;;;;;;1360:13;7213:55;;7045:230::o;10208:102::-;10264:13;10296:7;10289:14;;;;;:::i;146:174:12:-;286:27;292:10;304:8;286:5;:27::i;:::-;146:174;:::o;16901:231:18:-;39523:10;16995:39;;;;:18;:39;;;;;;;;-1:-1:-1;;;;;16995:49:18;;;;;;;;;;;;:60;;-1:-1:-1;;16995:60:18;;;;;;;;;;17070:55;;540:41:22;;;16995:49:18;;39523:10;17070:55;;513:18:22;17070:55:18;;;;;;;16901:231;;:::o;23526:396::-;23695:31;23708:4;23714:2;23718:7;23695:12;:31::i;:::-;-1:-1:-1;;;;;23740:14:18;;;:19;23736:180;;23778:56;23809:4;23815:2;23819:7;23828:5;23778:30;:56::i;:::-;23773:143;;23861:40;;-1:-1:-1;;;23861:40:18;;;;;;;;;;;23773:143;23526:396;;;;:::o;10411:313::-;10484:13;10514:16;10522:7;10514;:16::i;:::-;10509:59;;10539:29;;-1:-1:-1;;;10539:29:18;;;;;;;;;;;10509:59;10579:21;10603:10;11045:9;;;;;;;;;-1:-1:-1;11045:9:18;;;10969:92;10603:10;10579:34;;10636:7;10630:21;10655:1;10630:26;:87;;;;;;;;;;;;;;;;;10683:7;10692:18;10702:7;10692:9;:18::i;:::-;10666:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10630:87;10623:94;10411:313;-1:-1:-1;;;10411:313:18:o;17693:277::-;17758:4;17845:13;;17835:7;:23;17793:151;;;;-1:-1:-1;;17895:26:18;;;;:17;:26;;;;;;-1:-1:-1;;;17895:44:18;:49;;17693:277::o;12515:1249::-;12582:7;12616;12714:13;;12707:4;:20;12703:997;;;12751:14;12768:23;;;:17;:23;;;;;;;-1:-1:-1;;;12855:24:18;;:29;;12851:831;;13510:111;13517:6;13527:1;13517:11;13510:111;;-1:-1:-1;;;13587:6:18;13569:25;;;;:17;:25;;;;;;13510:111;;12851:831;12729:971;12703:997;13726:31;;-1:-1:-1;;;13726:31:18;;;;;;;;;;;27091:2902;27163:20;27186:13;;;27213;;;27209:44;;27235:18;;-1:-1:-1;;;27235:18:18;;;;;;;;;;;27209:44;-1:-1:-1;;;;;27728:22:18;;;;;;:18;:22;;;;1495:2;27728:22;;;:71;;27766:32;27754:45;;27728:71;;;28035:31;;;:17;:31;;;;;-1:-1:-1;15123:15:18;;15097:24;15093:46;14703:11;14678:23;14674:41;14671:52;14661:63;;28035:170;;28264:23;;;;28035:31;;27728:22;;29016:25;27728:22;;28872:328;29520:1;29506:12;29502:20;29461:339;29560:3;29551:7;29548:16;29461:339;;29774:7;29764:8;29761:1;29734:25;29731:1;29728;29723:59;29612:1;29599:15;29461:339;;;29465:75;29831:8;29843:1;29831:13;29827:45;;29853:19;;-1:-1:-1;;;29853:19:18;;;;;;;;;;;29827:45;29887:13;:19;-1:-1:-1;22758:187:18;;;:::o;25948:697::-;26126:88;;-1:-1:-1;;;26126:88:18;;26106:4;;-1:-1:-1;;;;;26126:45:18;;;;;:88;;39523:10;;26193:4;;26199:7;;26208:5;;26126:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26126:88:18;;;;;;;;-1:-1:-1;;26126:88:18;;;;;;;;;;;;:::i;:::-;;;26122:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26404:6;:13;26421:1;26404:18;26400:229;;26449:40;;-1:-1:-1;;;26449:40:18;;;;;;;;;;;26400:229;26589:6;26583:13;26574:6;26570:2;26566:15;26559:38;26122:517;-1:-1:-1;;;;;;26282:64:18;-1:-1:-1;;;26282:64:18;;-1:-1:-1;25948:697:18;;;;;;:::o;39637:1708::-;39702:17;40130:4;40123;40117:11;40113:22;40220:1;40214:4;40207:15;40293:4;40290:1;40286:12;40279:19;;;40373:1;40368:3;40361:14;40474:3;40708:5;40690:419;40755:1;40750:3;40746:11;40739:18;;40923:2;40917:4;40913:13;40909:2;40905:22;40900:3;40892:36;41015:2;41005:13;;41070:25;40690:419;41070:25;-1:-1:-1;41137:13:18;;;-1:-1:-1;;41250:14:18;;;41310:19;;;41250:14;39637:1708;-1:-1:-1;39637:1708:18:o;14:131:22:-;-1:-1:-1;;;;;;88:32:22;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:22;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:22;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:22:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:22;;1343:180;-1:-1:-1;1343:180:22:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:22;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:22:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:186::-;2747:6;2800:2;2788:9;2779:7;2775:23;2771:32;2768:52;;;2816:1;2813;2806:12;2768:52;2839:29;2858:9;2839:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;;3708:2;3697:9;3693:18;3680:32;3670:42;;3763:2;3752:9;3748:18;3735:32;3786:18;3827:2;3819:6;3816:14;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:22;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5156:470::-;5335:3;5373:6;5367:13;5389:53;5435:6;5430:3;5423:4;5415:6;5411:17;5389:53;:::i;:::-;5505:13;;5464:16;;;;5527:57;5505:13;5464:16;5561:4;5549:17;;5527:57;:::i;:::-;5600:20;;5156:470;-1:-1:-1;;;;5156:470:22:o;5631:489::-;-1:-1:-1;;;;;5900:15:22;;;5882:34;;5952:15;;5947:2;5932:18;;5925:43;5999:2;5984:18;;5977:34;;;6047:3;6042:2;6027:18;;6020:31;;;5825:4;;6068:46;;6094:19;;6086:6;6068:46;:::i;:::-;6060:54;5631:489;-1:-1:-1;;;;;;5631:489:22:o;6125:249::-;6194:6;6247:2;6235:9;6226:7;6222:23;6218:32;6215:52;;;6263:1;6260;6253:12;6215:52;6295:9;6289:16;6314:30;6338:5;6314:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"743200","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2640","getApproved(uint256)":"6925","isApprovedForAll(address,address)":"infinite","mint(uint256)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26607","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"4432","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mint(uint256)":"a0712d68","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC712A.sol\":\"Azuki\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC712A.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\ncontract Azuki is ERC721A {\\n    constructor() ERC721A(\\\"Azuki\\\", \\\"AZUKI\\\") {}\\n\\n    function mint(uint256 quantity) external payable {\\n        // `_mint`'s second argument now takes in a `quantity`, not a `tokenId`.\\n        _mint(msg.sender, quantity);\\n    }\\n}\",\"keccak256\":\"0x5bcdc8179726efd76121b561136143d91289eeb5e455602d7895122e067d0132\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4164,"contract":"contracts/ERC712A.sol:Azuki","label":"_currentIndex","offset":0,"slot":"0","type":"t_uint256"},{"astId":4166,"contract":"contracts/ERC712A.sol:Azuki","label":"_burnCounter","offset":0,"slot":"1","type":"t_uint256"},{"astId":4168,"contract":"contracts/ERC712A.sol:Azuki","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":4170,"contract":"contracts/ERC712A.sol:Azuki","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":4174,"contract":"contracts/ERC712A.sol:Azuki","label":"_packedOwnerships","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4178,"contract":"contracts/ERC712A.sol:Azuki","label":"_packedAddressData","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":4183,"contract":"contracts/ERC712A.sol:Azuki","label":"_tokenApprovals","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(TokenApprovalRef)4096_storage)"},{"astId":4189,"contract":"contracts/ERC712A.sol:Azuki","label":"_operatorApprovals","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(TokenApprovalRef)4096_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC721A.TokenApprovalRef)","numberOfBytes":"32","value":"t_struct(TokenApprovalRef)4096_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(TokenApprovalRef)4096_storage":{"encoding":"inplace","label":"struct ERC721A.TokenApprovalRef","members":[{"astId":4095,"contract":"contracts/ERC712A.sol:Azuki","label":"value","offset":0,"slot":"0","type":"t_address"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{},"version":1}}},"contracts/ERC721All.sol":{"ERC721All":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseUri","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccountBalanceOverflow","type":"error"},{"inputs":[],"name":"AlreadyInitialized","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"NewOwnerIsZeroAddress","type":"error"},{"inputs":[],"name":"NoHandoverRequest","type":"error"},{"inputs":[],"name":"NotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TokenAlreadyExists","type":"error"},{"inputs":[],"name":"TokenDoesNotExist","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"isApproved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cancelOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"completeOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"ownershipHandoverExpiresAt","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"requestOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"isApproved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"todo...","errors":{"AccountBalanceOverflow()":[{"details":"The recipient's balance has overflowed."}],"AlreadyInitialized()":[{"details":"Cannot double-initialize."}],"BalanceQueryForZeroAddress()":[{"details":"Cannot query the balance for the zero address."}],"NewOwnerIsZeroAddress()":[{"details":"The `newOwner` cannot be the zero address."}],"NoHandoverRequest()":[{"details":"The `pendingOwner` does not have a valid handover request."}],"NotOwnerNorApproved()":[{"details":"Only the token owner or an approved account can manage the token."}],"TokenAlreadyExists()":[{"details":"The token already exists."}],"TokenDoesNotExist()":[{"details":"The token does not exist."}],"TransferFromIncorrectOwner()":[{"details":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"details":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"details":"Cannot mint or transfer to the zero address."}],"Unauthorized()":[{"details":"The caller is not authorized to call the function."}]},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."},"cancelOwnershipHandover()":{"details":"Cancels the two-step ownership handover to the caller, if any."},"completeOwnershipHandover(address)":{"details":"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."},"getApproved(uint256)":{"details":"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."},"isApprovedForAll(address,address)":{"details":"Returns whether `operator` is approved to manage the tokens of `owner`."},"name()":{"details":"Returns the token collection name."},"owner()":{"details":"Returns the owner of the contract."},"ownerOf(uint256)":{"details":"Returns the owner of token `id`. Requirements: - Token `id` must exist."},"ownershipHandoverExpiresAt(address)":{"details":"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."},"renounceOwnership()":{"details":"Allows the owner to renounce their ownership."},"requestOwnershipHandover()":{"details":"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, id, \"\")`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for token `id`."},"transferFrom(address,address,uint256)":{"details":"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."},"transferOwnership(address)":{"details":"Allows the owner to transfer the ownership to `newOwner`."}},"stateVariables":{"_baseTokenURI":{"details":"ERC721 Base Token URI"}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1964":{"entryPoint":null,"id":1964,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":315,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":498,"id":null,"parameterSlots":2,"returnSlots":3},"extract_byte_array_length":{"entryPoint":643,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":293,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2189:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:821:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"body":{"nodeType":"YulBlock","src":"942:59:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:22"},"nodeType":"YulFunctionCall","src":"967:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:22"},"nodeType":"YulFunctionCall","src":"963:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:22"},"nodeType":"YulFunctionCall","src":"956:35:22"},"nodeType":"YulExpressionStatement","src":"956:35:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:22"},"nodeType":"YulFunctionCall","src":"924:9:22"},"nodeType":"YulIf","src":"921:80:22"},{"nodeType":"YulAssignment","src":"1010:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:885:22"},{"body":{"nodeType":"YulBlock","src":"1181:621:22","statements":[{"body":{"nodeType":"YulBlock","src":"1227:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1236:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1239:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1229:6:22"},"nodeType":"YulFunctionCall","src":"1229:12:22"},"nodeType":"YulExpressionStatement","src":"1229:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1202:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1211:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1198:3:22"},"nodeType":"YulFunctionCall","src":"1198:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1223:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1194:3:22"},"nodeType":"YulFunctionCall","src":"1194:32:22"},"nodeType":"YulIf","src":"1191:52:22"},{"nodeType":"YulVariableDeclaration","src":"1252:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1272:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1266:5:22"},"nodeType":"YulFunctionCall","src":"1266:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1256:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1291:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1309:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1313:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1305:3:22"},"nodeType":"YulFunctionCall","src":"1305:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1317:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1301:3:22"},"nodeType":"YulFunctionCall","src":"1301:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1295:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1346:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1355:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1358:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1348:6:22"},"nodeType":"YulFunctionCall","src":"1348:12:22"},"nodeType":"YulExpressionStatement","src":"1348:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1334:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1342:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1331:2:22"},"nodeType":"YulFunctionCall","src":"1331:14:22"},"nodeType":"YulIf","src":"1328:34:22"},{"nodeType":"YulAssignment","src":"1371:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1414:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1425:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1410:3:22"},"nodeType":"YulFunctionCall","src":"1410:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1381:28:22"},"nodeType":"YulFunctionCall","src":"1381:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1371:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1451:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1477:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1488:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:22"},"nodeType":"YulFunctionCall","src":"1473:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1467:5:22"},"nodeType":"YulFunctionCall","src":"1467:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1455:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1521:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1530:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1533:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1523:6:22"},"nodeType":"YulFunctionCall","src":"1523:12:22"},"nodeType":"YulExpressionStatement","src":"1523:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1507:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1517:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1504:2:22"},"nodeType":"YulFunctionCall","src":"1504:16:22"},"nodeType":"YulIf","src":"1501:36:22"},{"nodeType":"YulAssignment","src":"1546:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1589:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1600:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1585:3:22"},"nodeType":"YulFunctionCall","src":"1585:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1611:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1556:28:22"},"nodeType":"YulFunctionCall","src":"1556:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1546:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1628:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1654:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1665:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1650:3:22"},"nodeType":"YulFunctionCall","src":"1650:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1644:5:22"},"nodeType":"YulFunctionCall","src":"1644:25:22"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1632:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1698:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1710:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:22"},"nodeType":"YulFunctionCall","src":"1700:12:22"},"nodeType":"YulExpressionStatement","src":"1700:12:22"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1684:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1694:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1681:2:22"},"nodeType":"YulFunctionCall","src":"1681:16:22"},"nodeType":"YulIf","src":"1678:36:22"},{"nodeType":"YulAssignment","src":"1723:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1766:9:22"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1777:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1762:3:22"},"nodeType":"YulFunctionCall","src":"1762:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1788:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1733:28:22"},"nodeType":"YulFunctionCall","src":"1733:63:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1723:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1131:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1142:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1154:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1162:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1170:6:22","type":""}],"src":"1036:766:22"},{"body":{"nodeType":"YulBlock","src":"1862:325:22","statements":[{"nodeType":"YulAssignment","src":"1872:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1889:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1882:3:22"},"nodeType":"YulFunctionCall","src":"1882:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1872:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1903:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1933:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1939:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1929:3:22"},"nodeType":"YulFunctionCall","src":"1929:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1907:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1980:31:22","statements":[{"nodeType":"YulAssignment","src":"1982:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1996:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2004:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1992:3:22"},"nodeType":"YulFunctionCall","src":"1992:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1982:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1960:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1953:6:22"},"nodeType":"YulFunctionCall","src":"1953:26:22"},"nodeType":"YulIf","src":"1950:61:22"},{"body":{"nodeType":"YulBlock","src":"2070:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2091:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2098:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2103:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2094:3:22"},"nodeType":"YulFunctionCall","src":"2094:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2084:6:22"},"nodeType":"YulFunctionCall","src":"2084:31:22"},"nodeType":"YulExpressionStatement","src":"2084:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2135:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2138:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2128:6:22"},"nodeType":"YulFunctionCall","src":"2128:15:22"},"nodeType":"YulExpressionStatement","src":"2128:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2163:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2166:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2156:6:22"},"nodeType":"YulFunctionCall","src":"2156:15:22"},"nodeType":"YulExpressionStatement","src":"2156:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2026:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2049:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2057:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2046:2:22"},"nodeType":"YulFunctionCall","src":"2046:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2023:2:22"},"nodeType":"YulFunctionCall","src":"2023:38:22"},"nodeType":"YulIf","src":"2020:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1842:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1851:6:22","type":""}],"src":"1807:380:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_2), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1057 CODESIZE SUB DUP1 PUSH3 0x1057 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1F2 JUMP JUMPDEST DUP1 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x7F JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x7F JUMP JUMPDEST POP DUP3 MLOAD PUSH3 0x75 SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x7F JUMP JUMPDEST POP POP POP POP PUSH3 0x2BF JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x8D SWAP1 PUSH3 0x283 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xB1 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xFC JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xCC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xFC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xFC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xFC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xDF JUMP JUMPDEST POP PUSH3 0x10A SWAP3 SWAP2 POP PUSH3 0x10E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x10A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x10F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x16A JUMPI PUSH3 0x16A PUSH3 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x195 JUMPI PUSH3 0x195 PUSH3 0x125 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1D6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1B7 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22E DUP8 DUP4 DUP9 ADD PUSH3 0x13B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x253 DUP8 DUP4 DUP9 ADD PUSH3 0x13B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x279 DUP7 DUP3 DUP8 ADD PUSH3 0x13B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x298 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD88 DUP1 PUSH3 0x2CF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xF04E283E EQ PUSH2 0x348 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xFEE81CF4 EQ PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x25692962 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x54D1F13D EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1F0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xAD7 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SWAP2 SWAP1 SWAP2 SHR SWAP1 DUP2 EQ PUSH4 0x80AC58CD DUP3 EQ OR PUSH4 0x5B5E139F SWAP1 SWAP2 EQ OR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0xB08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x178 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8D JUMP JUMPDEST PUSH2 0x472 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH2 0x481 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x5F4 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x621 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x178 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x6D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH4 0x8B78C6D8 NOT SLOAD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x6E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH2 0x2DA CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x83C JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x87C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x3B0 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3DC SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x429 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x429 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x40C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD PUSH1 0x60 SHL PUSH2 0x468 JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x1 ADD SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x47D CALLER DUP4 DUP4 PUSH2 0x8A3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x48B CALLER DUP1 PUSH2 0x944 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL CALLER OR PUSH1 0x1C MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP5 SWAP4 DUP5 AND SWAP4 DUP2 AND SWAP2 SWAP1 DUP3 DUP7 EQ DUP4 MUL PUSH2 0x4EB JUMPI DUP3 PUSH2 0x4DD JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xA1148100 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP5 PUSH2 0x4FE JUMPI PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP6 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD SWAP3 POP DUP3 CALLER EQ DUP7 CALLER EQ OR PUSH2 0x52C JUMPI PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x52C JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP3 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 ADD SSTORE JUMPDEST DUP6 DUP6 XOR XOR SWAP1 SSTORE POP PUSH1 0x1C PUSH1 0xC DUP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x0 DUP5 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x574 JUMPI PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 SSTORE DUP1 DUP3 DUP5 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 CODESIZE LOG4 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2A300 PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP ADD SWAP1 POP PUSH4 0x389A75E1 PUSH1 0xC MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 PUSH1 0xC KECCAK256 SSTORE CALLER PUSH32 0xDBF36A107DA19E49527A7176A1BABF963B4B0FF8CDE35EE35D6CD8F1F9AC7E1D PUSH1 0x0 DUP1 LOG2 POP JUMP JUMPDEST PUSH2 0x5FF DUP4 DUP4 DUP4 PUSH2 0x48D JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9F2 JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC MSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xC KECCAK256 SSTORE CALLER PUSH32 0xFA7B8EAB7DA67F412CC9575ED43464468F9BFBAE89D1675917346CA6D8FE3C92 PUSH1 0x0 DUP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x696 JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x6B0 JUMPI PUSH4 0x8F4EB604 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE DUP2 PUSH1 0x0 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1C PUSH1 0xC KECCAK256 SLOAD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6DE PUSH2 0xA7E JUMP JUMPDEST PUSH2 0x48B PUSH1 0x0 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x3B0 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO ISZERO SWAP1 POP DUP2 PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x30 PUSH1 0xC KECCAK256 SSTORE DUP1 PUSH1 0x0 MSTORE DUP2 PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 POP POP JUMP JUMPDEST PUSH2 0x758 DUP6 DUP6 DUP6 PUSH2 0x48D JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x7A1 JUMPI PUSH2 0x7A1 DUP6 DUP6 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x9F2 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x7B7 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7E3 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x830 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x805 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x830 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x813 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x844 PUSH2 0xA7E JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0xC KECCAK256 DUP1 SLOAD TIMESTAMP GT ISZERO PUSH2 0x86C JUMPI PUSH4 0x6F5E8818 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 SSTORE PUSH2 0x879 DUP2 PUSH2 0xA99 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x884 PUSH2 0xA7E JUMP JUMPDEST DUP1 PUSH1 0x60 SHL PUSH2 0x89A JUMPI PUSH4 0x7448FBAE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x879 DUP2 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x60 SHR DUP3 DUP2 AND SWAP3 POP DUP4 DUP2 AND SWAP4 POP DUP2 PUSH1 0x0 MSTORE DUP4 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD DUP3 AND SWAP2 POP DUP2 PUSH2 0x8EA JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP2 DUP6 EQ DUP6 ISZERO OR PUSH2 0x910 JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x910 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x1 ADD DUP4 SWAP1 SSTORE DUP2 DUP4 DUP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 CODESIZE LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP2 PUSH2 0x963 JUMPI PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD DUP2 ADD DUP1 SLOAD DUP1 PUSH1 0x60 SHL ISZERO PUSH2 0x998 JUMPI PUSH4 0xC991CBB1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP4 OR SWAP1 SSTORE PUSH1 0x0 DUP3 SWAP1 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x9C4 JUMPI PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 SSTORE DUP1 DUP3 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 CODESIZE LOG4 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x150B7A02 DUP1 DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP6 PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP4 ADD MSTORE DUP3 MLOAD DUP1 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 ISZERO PUSH2 0xA39 JUMPI DUP1 PUSH1 0xC0 DUP5 ADD DUP3 PUSH1 0x20 DUP8 ADD PUSH1 0x4 GAS STATICCALL POP JUMPDEST PUSH1 0x20 DUP4 PUSH1 0xA4 DUP4 ADD PUSH1 0x1C DUP7 ADD PUSH1 0x0 DUP11 GAS CALL PUSH2 0xA5C JUMPI RETURNDATASIZE ISZERO PUSH2 0xA5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP5 RETURNDATACOPY RETURNDATASIZE DUP4 REVERT JUMPDEST POP DUP1 PUSH1 0xE0 SHL DUP3 MLOAD EQ PUSH2 0xA76 JUMPI PUSH4 0xD1A57ED6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x8B78C6D8 NOT SLOAD CALLER EQ PUSH2 0x48B JUMPI PUSH4 0x82B42900 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x8B78C6D8 NOT DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB35 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xB19 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBA9 DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD5 DUP5 PUSH2 0xB76 JUMP JUMPDEST SWAP3 POP PUSH2 0xBE3 PUSH1 0x20 DUP6 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB01 DUP3 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2A DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC6B DUP7 PUSH2 0xB76 JUMP JUMPDEST SWAP5 POP PUSH2 0xC79 PUSH1 0x20 DUP8 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD01 DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH2 0xD0F PUSH1 0x20 DUP5 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD2C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD4C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xBB6E11B2CD9E512FC02FD3642E7AFA335C537EC19941BF4B8A 0x2C 0xA7 PUSH6 0x62CCD264736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"437:2249:13:-:0;;;650:186;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;768:23;;::::2;::::0;:13:::2;::::0;:23:::2;::::0;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;797:16:13;;::::2;::::0;:7:::2;::::0;:16:::2;::::0;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;819:12:13;;::::2;::::0;:5:::2;::::0;:12:::2;::::0;::::2;::::0;::::2;:::i;:::-;;650:186:::0;;;437:2249;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;437:2249:13;;;-1:-1:-1;437:2249:13;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:22:o;1036:766::-;1154:6;1162;1170;1223:2;1211:9;1202:7;1198:23;1194:32;1191:52;;;1239:1;1236;1229:12;1191:52;1266:16;;-1:-1:-1;;;;;1331:14:22;;;1328:34;;;1358:1;1355;1348:12;1328:34;1381:61;1434:7;1425:6;1414:9;1410:22;1381:61;:::i;:::-;1371:71;;1488:2;1477:9;1473:18;1467:25;1451:41;;1517:2;1507:8;1504:16;1501:36;;;1533:1;1530;1523:12;1501:36;1556:63;1611:7;1600:8;1589:9;1585:24;1556:63;:::i;:::-;1546:73;;1665:2;1654:9;1650:18;1644:25;1628:41;;1694:2;1684:8;1681:16;1678:36;;;1710:1;1707;1700:12;1678:36;;1733:63;1788:7;1777:8;1766:9;1762:24;1733:63;:::i;:::-;1723:73;;;1036:766;;;;;:::o;1807:380::-;1886:1;1882:12;;;;1929;;;1950:61;;2004:4;1996:6;1992:17;1982:27;;1950:61;2057:2;2049:6;2046:14;2026:18;2023:38;2020:161;;2103:10;2098:3;2094:20;2091:1;2084:31;2138:4;2135:1;2128:15;2166:4;2163:1;2156:15;2020:161;;1807:380;;;:::o;:::-;437:2249:13;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3688":{"entryPoint":null,"id":3688,"parameterSlots":3,"returnSlots":0},"@_approve_3501":{"entryPoint":2211,"id":3501,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3677":{"entryPoint":null,"id":3677,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3712":{"entryPoint":2546,"id":3712,"parameterSlots":4,"returnSlots":0},"@_checkOwner_6188":{"entryPoint":2686,"id":6188,"parameterSlots":0,"returnSlots":0},"@_guardInitializeOwner_6154":{"entryPoint":null,"id":6154,"parameterSlots":0,"returnSlots":1},"@_hasCode_3698":{"entryPoint":null,"id":3698,"parameterSlots":1,"returnSlots":1},"@_mint_3355":{"entryPoint":2372,"id":3355,"parameterSlots":2,"returnSlots":0},"@_ownerOf_3287":{"entryPoint":null,"id":3287,"parameterSlots":1,"returnSlots":1},"@_ownershipHandoverValidFor_6199":{"entryPoint":null,"id":6199,"parameterSlots":0,"returnSlots":1},"@_setOwner_6182":{"entryPoint":2713,"id":6182,"parameterSlots":1,"returnSlots":0},"@approve_3143":{"entryPoint":1138,"id":3143,"parameterSlots":2,"returnSlots":0},"@balanceOf_3117":{"entryPoint":1691,"id":3117,"parameterSlots":1,"returnSlots":1},"@cancelOwnershipHandover_6248":{"entryPoint":1569,"id":6248,"parameterSlots":0,"returnSlots":0},"@completeOwnershipHandover_6262":{"entryPoint":2108,"id":6262,"parameterSlots":1,"returnSlots":0},"@getApproved_3127":{"entryPoint":1075,"id":3127,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_3155":{"entryPoint":null,"id":3155,"parameterSlots":2,"returnSlots":1},"@mint_1999":{"entryPoint":1153,"id":1999,"parameterSlots":0,"returnSlots":0},"@name_1973":{"entryPoint":929,"id":1973,"parameterSlots":0,"returnSlots":1},"@ownerOf_3107":{"entryPoint":1629,"id":3107,"parameterSlots":1,"returnSlots":1},"@owner_6270":{"entryPoint":null,"id":6270,"parameterSlots":0,"returnSlots":1},"@ownershipHandoverExpiresAt_6280":{"entryPoint":null,"id":6280,"parameterSlots":1,"returnSlots":1},"@renounceOwnership_6227":{"entryPoint":1750,"id":6227,"parameterSlots":0,"returnSlots":0},"@requestOwnershipHandover_6242":{"entryPoint":1444,"id":6242,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_3217":{"entryPoint":1524,"id":3217,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_3247":{"entryPoint":1869,"id":3247,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_3165":{"entryPoint":1783,"id":3165,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3257":{"entryPoint":null,"id":3257,"parameterSlots":1,"returnSlots":1},"@symbol_1982":{"entryPoint":1768,"id":1982,"parameterSlots":0,"returnSlots":1},"@tokenURI_2010":{"entryPoint":1960,"id":2010,"parameterSlots":1,"returnSlots":1},"@transferFrom_3189":{"entryPoint":1165,"id":3189,"parameterSlots":3,"returnSlots":0},"@transferOwnership_6213":{"entryPoint":2172,"id":6213,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2934,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3059,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3301,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2999,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":3146,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3086,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2957,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2909,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":3352,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4447:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:22","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:22"},"nodeType":"YulFunctionCall","src":"131:12:22"},"nodeType":"YulExpressionStatement","src":"131:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:22"},"nodeType":"YulFunctionCall","src":"100:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:22"},"nodeType":"YulFunctionCall","src":"96:32:22"},"nodeType":"YulIf","src":"93:52:22"},{"nodeType":"YulVariableDeclaration","src":"154:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:22"},"nodeType":"YulFunctionCall","src":"167:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:22"},"nodeType":"YulFunctionCall","src":"256:12:22"},"nodeType":"YulExpressionStatement","src":"256:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:22"},"nodeType":"YulFunctionCall","src":"219:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:22"},"nodeType":"YulFunctionCall","src":"209:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:22"},"nodeType":"YulFunctionCall","src":"202:51:22"},"nodeType":"YulIf","src":"199:71:22"},{"nodeType":"YulAssignment","src":"279:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:22","type":""}],"src":"14:286:22"},{"body":{"nodeType":"YulBlock","src":"400:92:22","statements":[{"nodeType":"YulAssignment","src":"410:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:22"},"nodeType":"YulFunctionCall","src":"418:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:22"},"nodeType":"YulFunctionCall","src":"470:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:22"},"nodeType":"YulFunctionCall","src":"463:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:22"},"nodeType":"YulFunctionCall","src":"445:41:22"},"nodeType":"YulExpressionStatement","src":"445:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:22","type":""}],"src":"305:187:22"},{"body":{"nodeType":"YulBlock","src":"618:476:22","statements":[{"nodeType":"YulVariableDeclaration","src":"628:12:22","value":{"kind":"number","nodeType":"YulLiteral","src":"638:2:22","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"632:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"656:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"667:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"649:6:22"},"nodeType":"YulFunctionCall","src":"649:21:22"},"nodeType":"YulExpressionStatement","src":"649:21:22"},{"nodeType":"YulVariableDeclaration","src":"679:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"699:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"693:5:22"},"nodeType":"YulFunctionCall","src":"693:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"683:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"726:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"737:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"722:3:22"},"nodeType":"YulFunctionCall","src":"722:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"742:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"715:6:22"},"nodeType":"YulFunctionCall","src":"715:34:22"},"nodeType":"YulExpressionStatement","src":"715:34:22"},{"nodeType":"YulVariableDeclaration","src":"758:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"767:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"762:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"827:90:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"856:9:22"},{"name":"i","nodeType":"YulIdentifier","src":"867:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"852:3:22"},"nodeType":"YulFunctionCall","src":"852:17:22"},{"kind":"number","nodeType":"YulLiteral","src":"871:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"848:3:22"},"nodeType":"YulFunctionCall","src":"848:26:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"890:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"898:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"886:3:22"},"nodeType":"YulFunctionCall","src":"886:14:22"},{"name":"_1","nodeType":"YulIdentifier","src":"902:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"882:3:22"},"nodeType":"YulFunctionCall","src":"882:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"876:5:22"},"nodeType":"YulFunctionCall","src":"876:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"841:6:22"},"nodeType":"YulFunctionCall","src":"841:66:22"},"nodeType":"YulExpressionStatement","src":"841:66:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"788:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"791:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"785:2:22"},"nodeType":"YulFunctionCall","src":"785:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"799:19:22","statements":[{"nodeType":"YulAssignment","src":"801:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"810:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"813:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"806:3:22"},"nodeType":"YulFunctionCall","src":"806:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"801:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"781:3:22","statements":[]},"src":"777:140:22"},{"body":{"nodeType":"YulBlock","src":"951:66:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"980:9:22"},{"name":"length","nodeType":"YulIdentifier","src":"991:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"976:3:22"},"nodeType":"YulFunctionCall","src":"976:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"1000:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"972:3:22"},"nodeType":"YulFunctionCall","src":"972:31:22"},{"kind":"number","nodeType":"YulLiteral","src":"1005:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"965:6:22"},"nodeType":"YulFunctionCall","src":"965:42:22"},"nodeType":"YulExpressionStatement","src":"965:42:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"932:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"935:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"929:2:22"},"nodeType":"YulFunctionCall","src":"929:13:22"},"nodeType":"YulIf","src":"926:91:22"},{"nodeType":"YulAssignment","src":"1026:62:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1042:9:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1061:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1069:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:22"},"nodeType":"YulFunctionCall","src":"1057:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1078:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1074:3:22"},"nodeType":"YulFunctionCall","src":"1074:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1053:3:22"},"nodeType":"YulFunctionCall","src":"1053:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1038:3:22"},"nodeType":"YulFunctionCall","src":"1038:45:22"},{"kind":"number","nodeType":"YulLiteral","src":"1085:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1034:3:22"},"nodeType":"YulFunctionCall","src":"1034:54:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1026:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"587:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"598:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"609:4:22","type":""}],"src":"497:597:22"},{"body":{"nodeType":"YulBlock","src":"1169:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1215:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1224:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1227:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1217:6:22"},"nodeType":"YulFunctionCall","src":"1217:12:22"},"nodeType":"YulExpressionStatement","src":"1217:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1190:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1199:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1186:3:22"},"nodeType":"YulFunctionCall","src":"1186:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1211:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1182:3:22"},"nodeType":"YulFunctionCall","src":"1182:32:22"},"nodeType":"YulIf","src":"1179:52:22"},{"nodeType":"YulAssignment","src":"1240:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1263:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1250:12:22"},"nodeType":"YulFunctionCall","src":"1250:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1240:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1135:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1146:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1158:6:22","type":""}],"src":"1099:180:22"},{"body":{"nodeType":"YulBlock","src":"1385:102:22","statements":[{"nodeType":"YulAssignment","src":"1395:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1407:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1418:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1403:3:22"},"nodeType":"YulFunctionCall","src":"1403:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1395:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1437:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1452:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1473:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1464:3:22"},"nodeType":"YulFunctionCall","src":"1464:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1477:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1460:3:22"},"nodeType":"YulFunctionCall","src":"1460:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1448:3:22"},"nodeType":"YulFunctionCall","src":"1448:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1430:6:22"},"nodeType":"YulFunctionCall","src":"1430:51:22"},"nodeType":"YulExpressionStatement","src":"1430:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1354:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1365:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1376:4:22","type":""}],"src":"1284:203:22"},{"body":{"nodeType":"YulBlock","src":"1541:124:22","statements":[{"nodeType":"YulAssignment","src":"1551:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1573:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1560:12:22"},"nodeType":"YulFunctionCall","src":"1560:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1551:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1643:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1652:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1655:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1645:6:22"},"nodeType":"YulFunctionCall","src":"1645:12:22"},"nodeType":"YulExpressionStatement","src":"1645:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1602:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1613:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1628:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1633:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1624:3:22"},"nodeType":"YulFunctionCall","src":"1624:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1637:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1620:3:22"},"nodeType":"YulFunctionCall","src":"1620:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1609:3:22"},"nodeType":"YulFunctionCall","src":"1609:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1599:2:22"},"nodeType":"YulFunctionCall","src":"1599:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1592:6:22"},"nodeType":"YulFunctionCall","src":"1592:50:22"},"nodeType":"YulIf","src":"1589:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1520:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1531:5:22","type":""}],"src":"1492:173:22"},{"body":{"nodeType":"YulBlock","src":"1757:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"1803:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1812:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1815:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1805:6:22"},"nodeType":"YulFunctionCall","src":"1805:12:22"},"nodeType":"YulExpressionStatement","src":"1805:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1778:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1787:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1774:3:22"},"nodeType":"YulFunctionCall","src":"1774:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1799:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1770:3:22"},"nodeType":"YulFunctionCall","src":"1770:32:22"},"nodeType":"YulIf","src":"1767:52:22"},{"nodeType":"YulAssignment","src":"1828:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1857:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1838:18:22"},"nodeType":"YulFunctionCall","src":"1838:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1828:6:22"}]},{"nodeType":"YulAssignment","src":"1876:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1903:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1914:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1899:3:22"},"nodeType":"YulFunctionCall","src":"1899:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1886:12:22"},"nodeType":"YulFunctionCall","src":"1886:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1876:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1715:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1726:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1738:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1746:6:22","type":""}],"src":"1670:254:22"},{"body":{"nodeType":"YulBlock","src":"2033:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"2079:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2088:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2091:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2081:6:22"},"nodeType":"YulFunctionCall","src":"2081:12:22"},"nodeType":"YulExpressionStatement","src":"2081:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2054:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2063:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2050:3:22"},"nodeType":"YulFunctionCall","src":"2050:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2075:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2046:3:22"},"nodeType":"YulFunctionCall","src":"2046:32:22"},"nodeType":"YulIf","src":"2043:52:22"},{"nodeType":"YulAssignment","src":"2104:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2133:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2114:18:22"},"nodeType":"YulFunctionCall","src":"2114:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2104:6:22"}]},{"nodeType":"YulAssignment","src":"2152:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2185:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2196:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2181:3:22"},"nodeType":"YulFunctionCall","src":"2181:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2162:18:22"},"nodeType":"YulFunctionCall","src":"2162:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2152:6:22"}]},{"nodeType":"YulAssignment","src":"2209:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2236:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2247:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2232:3:22"},"nodeType":"YulFunctionCall","src":"2232:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2219:12:22"},"nodeType":"YulFunctionCall","src":"2219:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2209:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1983:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1994:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2006:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2014:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2022:6:22","type":""}],"src":"1929:328:22"},{"body":{"nodeType":"YulBlock","src":"2332:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2378:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2387:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2390:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2380:6:22"},"nodeType":"YulFunctionCall","src":"2380:12:22"},"nodeType":"YulExpressionStatement","src":"2380:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2353:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2362:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2349:3:22"},"nodeType":"YulFunctionCall","src":"2349:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2374:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2345:3:22"},"nodeType":"YulFunctionCall","src":"2345:32:22"},"nodeType":"YulIf","src":"2342:52:22"},{"nodeType":"YulAssignment","src":"2403:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2432:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2413:18:22"},"nodeType":"YulFunctionCall","src":"2413:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2403:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2298:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2309:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2321:6:22","type":""}],"src":"2262:186:22"},{"body":{"nodeType":"YulBlock","src":"2554:76:22","statements":[{"nodeType":"YulAssignment","src":"2564:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2576:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2587:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:22"},"nodeType":"YulFunctionCall","src":"2572:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2564:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2606:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2617:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2599:6:22"},"nodeType":"YulFunctionCall","src":"2599:25:22"},"nodeType":"YulExpressionStatement","src":"2599:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2523:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2534:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2545:4:22","type":""}],"src":"2453:177:22"},{"body":{"nodeType":"YulBlock","src":"2719:263:22","statements":[{"body":{"nodeType":"YulBlock","src":"2765:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2774:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2777:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2767:6:22"},"nodeType":"YulFunctionCall","src":"2767:12:22"},"nodeType":"YulExpressionStatement","src":"2767:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2740:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2749:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2736:3:22"},"nodeType":"YulFunctionCall","src":"2736:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2761:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2732:3:22"},"nodeType":"YulFunctionCall","src":"2732:32:22"},"nodeType":"YulIf","src":"2729:52:22"},{"nodeType":"YulAssignment","src":"2790:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2800:18:22"},"nodeType":"YulFunctionCall","src":"2800:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2790:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"2838:45:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2868:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2879:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2864:3:22"},"nodeType":"YulFunctionCall","src":"2864:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2851:12:22"},"nodeType":"YulFunctionCall","src":"2851:32:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2842:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2938:6:22"},"nodeType":"YulFunctionCall","src":"2938:12:22"},"nodeType":"YulExpressionStatement","src":"2938:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2905:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2926:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2919:6:22"},"nodeType":"YulFunctionCall","src":"2919:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2912:6:22"},"nodeType":"YulFunctionCall","src":"2912:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2902:2:22"},"nodeType":"YulFunctionCall","src":"2902:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2895:6:22"},"nodeType":"YulFunctionCall","src":"2895:40:22"},"nodeType":"YulIf","src":"2892:60:22"},{"nodeType":"YulAssignment","src":"2961:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"2971:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2961:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2677:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2688:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2700:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2708:6:22","type":""}],"src":"2635:347:22"},{"body":{"nodeType":"YulBlock","src":"3127:668:22","statements":[{"body":{"nodeType":"YulBlock","src":"3174:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3183:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3186:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3176:6:22"},"nodeType":"YulFunctionCall","src":"3176:12:22"},"nodeType":"YulExpressionStatement","src":"3176:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3148:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3157:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3144:3:22"},"nodeType":"YulFunctionCall","src":"3144:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3169:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3140:3:22"},"nodeType":"YulFunctionCall","src":"3140:33:22"},"nodeType":"YulIf","src":"3137:53:22"},{"nodeType":"YulAssignment","src":"3199:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3228:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3209:18:22"},"nodeType":"YulFunctionCall","src":"3209:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3199:6:22"}]},{"nodeType":"YulAssignment","src":"3247:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3280:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3291:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3276:3:22"},"nodeType":"YulFunctionCall","src":"3276:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3257:18:22"},"nodeType":"YulFunctionCall","src":"3257:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3247:6:22"}]},{"nodeType":"YulAssignment","src":"3304:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:22"},"nodeType":"YulFunctionCall","src":"3327:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3314:12:22"},"nodeType":"YulFunctionCall","src":"3314:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3304:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3355:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3386:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3397:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3382:3:22"},"nodeType":"YulFunctionCall","src":"3382:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3369:12:22"},"nodeType":"YulFunctionCall","src":"3369:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3359:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3410:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3420:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3414:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3465:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3474:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3477:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3467:6:22"},"nodeType":"YulFunctionCall","src":"3467:12:22"},"nodeType":"YulExpressionStatement","src":"3467:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3453:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3461:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3450:2:22"},"nodeType":"YulFunctionCall","src":"3450:14:22"},"nodeType":"YulIf","src":"3447:34:22"},{"nodeType":"YulVariableDeclaration","src":"3490:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3504:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"3515:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3500:3:22"},"nodeType":"YulFunctionCall","src":"3500:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3494:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3570:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3579:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3582:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3572:6:22"},"nodeType":"YulFunctionCall","src":"3572:12:22"},"nodeType":"YulExpressionStatement","src":"3572:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3549:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3553:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3545:3:22"},"nodeType":"YulFunctionCall","src":"3545:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3560:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3541:3:22"},"nodeType":"YulFunctionCall","src":"3541:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3534:6:22"},"nodeType":"YulFunctionCall","src":"3534:35:22"},"nodeType":"YulIf","src":"3531:55:22"},{"nodeType":"YulVariableDeclaration","src":"3595:30:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3622:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3609:12:22"},"nodeType":"YulFunctionCall","src":"3609:16:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3599:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3652:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3661:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3664:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3654:6:22"},"nodeType":"YulFunctionCall","src":"3654:12:22"},"nodeType":"YulExpressionStatement","src":"3654:12:22"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3640:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3648:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3637:2:22"},"nodeType":"YulFunctionCall","src":"3637:14:22"},"nodeType":"YulIf","src":"3634:34:22"},{"body":{"nodeType":"YulBlock","src":"3718:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3727:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3730:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3720:6:22"},"nodeType":"YulFunctionCall","src":"3720:12:22"},"nodeType":"YulExpressionStatement","src":"3720:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3691:2:22"},{"name":"length","nodeType":"YulIdentifier","src":"3695:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3687:3:22"},"nodeType":"YulFunctionCall","src":"3687:15:22"},{"kind":"number","nodeType":"YulLiteral","src":"3704:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3683:3:22"},"nodeType":"YulFunctionCall","src":"3683:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3709:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3680:2:22"},"nodeType":"YulFunctionCall","src":"3680:37:22"},"nodeType":"YulIf","src":"3677:57:22"},{"nodeType":"YulAssignment","src":"3743:21:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3757:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3761:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:22"},"nodeType":"YulFunctionCall","src":"3753:11:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3743:6:22"}]},{"nodeType":"YulAssignment","src":"3773:16:22","value":{"name":"length","nodeType":"YulIdentifier","src":"3783:6:22"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3773:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3061:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3072:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3084:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3092:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3100:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3108:6:22","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3116:6:22","type":""}],"src":"2987:808:22"},{"body":{"nodeType":"YulBlock","src":"3887:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"3933:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3942:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3935:6:22"},"nodeType":"YulFunctionCall","src":"3935:12:22"},"nodeType":"YulExpressionStatement","src":"3935:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3908:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3917:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3904:3:22"},"nodeType":"YulFunctionCall","src":"3904:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3929:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3900:3:22"},"nodeType":"YulFunctionCall","src":"3900:32:22"},"nodeType":"YulIf","src":"3897:52:22"},{"nodeType":"YulAssignment","src":"3958:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3987:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3968:18:22"},"nodeType":"YulFunctionCall","src":"3968:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3958:6:22"}]},{"nodeType":"YulAssignment","src":"4006:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4039:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4050:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4035:3:22"},"nodeType":"YulFunctionCall","src":"4035:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4016:18:22"},"nodeType":"YulFunctionCall","src":"4016:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4006:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3845:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3856:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3868:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3876:6:22","type":""}],"src":"3800:260:22"},{"body":{"nodeType":"YulBlock","src":"4120:325:22","statements":[{"nodeType":"YulAssignment","src":"4130:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4144:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4147:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4140:3:22"},"nodeType":"YulFunctionCall","src":"4140:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4130:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4161:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4191:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4197:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4187:3:22"},"nodeType":"YulFunctionCall","src":"4187:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4165:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4238:31:22","statements":[{"nodeType":"YulAssignment","src":"4240:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4254:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4262:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4250:3:22"},"nodeType":"YulFunctionCall","src":"4250:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4240:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4218:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4211:6:22"},"nodeType":"YulFunctionCall","src":"4211:26:22"},"nodeType":"YulIf","src":"4208:61:22"},{"body":{"nodeType":"YulBlock","src":"4328:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4349:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4356:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4361:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4352:3:22"},"nodeType":"YulFunctionCall","src":"4352:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4342:6:22"},"nodeType":"YulFunctionCall","src":"4342:31:22"},"nodeType":"YulExpressionStatement","src":"4342:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4393:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4396:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4386:6:22"},"nodeType":"YulFunctionCall","src":"4386:15:22"},"nodeType":"YulExpressionStatement","src":"4386:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4421:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4424:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4414:6:22"},"nodeType":"YulFunctionCall","src":"4414:15:22"},"nodeType":"YulExpressionStatement","src":"4414:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4284:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4307:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4315:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4304:2:22"},"nodeType":"YulFunctionCall","src":"4304:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4281:2:22"},"nodeType":"YulFunctionCall","src":"4281:38:22"},"nodeType":"YulIf","src":"4278:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4100:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4109:6:22","type":""}],"src":"4065:380:22"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061012a5760003560e01c806370a08231116100ab578063b88d4fde1161006f578063b88d4fde146102df578063c87b56dd146102f2578063e985e9c514610312578063f04e283e14610348578063f2fde38b1461035b578063fee81cf41461036e57600080fd5b806370a082311461025b578063715018a6146102895780638da5cb5b1461029157806395d89b41146102aa578063a22cb465146102bf57600080fd5b806323b872dd116100f257806323b872dd14610205578063256929621461021857806342842e0e1461022057806354d1f13d146102335780636352211e1461023b57600080fd5b806301ffc9a71461012f57806306fdde0314610181578063081812fc146101a3578063095ea7b3146101db5780631249c58b146101f0575b600080fd5b34801561013b57600080fd5b5061016c61014a366004610ad7565b6301ffc9a760e09190911c9081146380ac58cd821417635b5e139f9091141790565b60405190151581526020015b60405180910390f35b34801561018d57600080fd5b506101966103a1565b6040516101789190610b08565b3480156101af57600080fd5b506101c36101be366004610b5d565b610433565b6040516001600160a01b039091168152602001610178565b6101ee6101e9366004610b8d565b610472565b005b3480156101fc57600080fd5b506101ee610481565b6101ee610213366004610bb7565b61048d565b6101ee6105a4565b6101ee61022e366004610bb7565b6105f4565b6101ee610621565b34801561024757600080fd5b506101c3610256366004610b5d565b61065d565b34801561026757600080fd5b5061027b610276366004610bf3565b61069b565b604051908152602001610178565b6101ee6106d6565b34801561029d57600080fd5b50638b78c6d819546101c3565b3480156102b657600080fd5b506101966106e8565b3480156102cb57600080fd5b506101ee6102da366004610c0e565b6106f7565b6101ee6102ed366004610c4a565b61074d565b3480156102fe57600080fd5b5061019661030d366004610b5d565b6107a8565b34801561031e57600080fd5b5061016c61032d366004610ce5565b601c52670a5a2e7a000000006008526000526030600c205490565b6101ee610356366004610bf3565b61083c565b6101ee610369366004610bf3565b61087c565b34801561037a57600080fd5b5061027b610389366004610bf3565b63389a75e1600c908152600091909152602090205490565b6060600280546103b090610d18565b80601f01602080910402602001604051908101604052809291908181526020018280546103dc90610d18565b80156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b5050505050905090565b600081600052673ec412a9852d173d60c11b601c52602060002082018201805460601b6104685763ceea21b66000526004601cfd5b6001015492915050565b61047d3383836108a3565b5050565b61048b3380610944565b565b6000818152673ec412a9852d173d60c11b3317601c52602090208101810180546001600160a01b0394851694938416938116919082861483026104eb57826104dd5763ceea21b66000526004601cfd5b63a11481006000526004601cfd5b846104fe5763ea553b346000526004601cfd5b85600052816001015492508233148633141761052c576030600c205461052c57634b6e7f186000526004601cfd5b821561053a57600082600101555b85851818905550601c600c8181208054600019019055600084905220805460010163ffffffff8116610574576301336cea6000526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a45b505050565b60006202a30067ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b6105ff83838361048d565b813b1561059f5761059f838383604051806020016040528060008152506109f2565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b6000818152673ec412a9852d173d60c11b601c526020902081018101546001600160a01b0316806106965763ceea21b66000526004601cfd5b919050565b6000816106b057638f4eb6046000526004601cfd5b673ec412a9852d173d60c11b601c528160005263ffffffff601c600c2054169050919050565b6106de610a7e565b61048b6000610a99565b6060600380546103b090610d18565b801515905081601c52670a5a2e7a0000000060085233600052806030600c2055806000528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a35050565b61075885858561048d565b833b156107a1576107a185858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f292505050565b5050505050565b6060600180546107b790610d18565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390610d18565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b50505050509050919050565b610844610a7e565b63389a75e1600c52806000526020600c20805442111561086c57636f5e88186000526004601cfd5b6000905561087981610a99565b50565b610884610a7e565b8060601b61089a57637448fbae6000526004601cfd5b61087981610a99565b60001960601c828116925083811693508160005283673ec412a9852d173d60c11b17601c52602060002082018201805482169150816108ea5763ceea21b66000526004601cfd5b81851485151761091057816000526030600c205461091057634b6e7f186000526004601cfd5b6001018390558183827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a450505050565b6001600160a01b0390911690816109635763ea553b346000526004601cfd5b80600052673ec412a9852d173d60c11b601c5260206000208101810180548060601b156109985763c991cbb16000526004601cfd5b831790556000829052601c600c20805460010163ffffffff81166109c4576301336cea6000526004601cfd5b9055808260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a45050565b60405163150b7a028082523360208301528560601b60601c604083015283606083015260808083015282518060a08401528015610a39578060c08401826020870160045afa505b60208360a48301601c860160008a5af1610a5c573d15610a5c573d6000843e3d83fd5b508060e01b825114610a765763d1a57ed66000526004601cfd5b505050505050565b638b78c6d81954331461048b576382b429006000526004601cfd5b638b78c6d81980546001600160a01b039092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355565b600060208284031215610ae957600080fd5b81356001600160e01b031981168114610b0157600080fd5b9392505050565b600060208083528351808285015260005b81811015610b3557858101830151858201604001528201610b19565b81811115610b47576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215610b6f57600080fd5b5035919050565b80356001600160a01b038116811461069657600080fd5b60008060408385031215610ba057600080fd5b610ba983610b76565b946020939093013593505050565b600080600060608486031215610bcc57600080fd5b610bd584610b76565b9250610be360208501610b76565b9150604084013590509250925092565b600060208284031215610c0557600080fd5b610b0182610b76565b60008060408385031215610c2157600080fd5b610c2a83610b76565b915060208301358015158114610c3f57600080fd5b809150509250929050565b600080600080600060808688031215610c6257600080fd5b610c6b86610b76565b9450610c7960208701610b76565b935060408601359250606086013567ffffffffffffffff80821115610c9d57600080fd5b818801915088601f830112610cb157600080fd5b813581811115610cc057600080fd5b896020828501011115610cd257600080fd5b9699959850939650602001949392505050565b60008060408385031215610cf857600080fd5b610d0183610b76565b9150610d0f60208401610b76565b90509250929050565b600181811c90821680610d2c57607f821691505b602082108103610d4c57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122078bb6e11b2cd9e512fc02fd3642e7afa335c537ec19941bf4b8a2ca76562ccd264736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xF04E283E EQ PUSH2 0x348 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xFEE81CF4 EQ PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x25692962 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x54D1F13D EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1F0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xAD7 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SWAP2 SWAP1 SWAP2 SHR SWAP1 DUP2 EQ PUSH4 0x80AC58CD DUP3 EQ OR PUSH4 0x5B5E139F SWAP1 SWAP2 EQ OR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0xB08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x433 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x178 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8D JUMP JUMPDEST PUSH2 0x472 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH2 0x481 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x5F4 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x621 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C3 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x178 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x6D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH4 0x8B78C6D8 NOT SLOAD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x6E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH2 0x2DA CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0xB5D JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x83C JUMP JUMPDEST PUSH2 0x1EE PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH2 0x87C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27B PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0xBF3 JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x3B0 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3DC SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x429 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x429 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x40C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD PUSH1 0x60 SHL PUSH2 0x468 JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x1 ADD SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x47D CALLER DUP4 DUP4 PUSH2 0x8A3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x48B CALLER DUP1 PUSH2 0x944 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL CALLER OR PUSH1 0x1C MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP5 SWAP4 DUP5 AND SWAP4 DUP2 AND SWAP2 SWAP1 DUP3 DUP7 EQ DUP4 MUL PUSH2 0x4EB JUMPI DUP3 PUSH2 0x4DD JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xA1148100 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP5 PUSH2 0x4FE JUMPI PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP6 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD SWAP3 POP DUP3 CALLER EQ DUP7 CALLER EQ OR PUSH2 0x52C JUMPI PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x52C JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP3 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 ADD SSTORE JUMPDEST DUP6 DUP6 XOR XOR SWAP1 SSTORE POP PUSH1 0x1C PUSH1 0xC DUP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x0 DUP5 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x574 JUMPI PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 SSTORE DUP1 DUP3 DUP5 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 CODESIZE LOG4 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2A300 PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP ADD SWAP1 POP PUSH4 0x389A75E1 PUSH1 0xC MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 PUSH1 0xC KECCAK256 SSTORE CALLER PUSH32 0xDBF36A107DA19E49527A7176A1BABF963B4B0FF8CDE35EE35D6CD8F1F9AC7E1D PUSH1 0x0 DUP1 LOG2 POP JUMP JUMPDEST PUSH2 0x5FF DUP4 DUP4 DUP4 PUSH2 0x48D JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9F2 JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC MSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xC KECCAK256 SSTORE CALLER PUSH32 0xFA7B8EAB7DA67F412CC9575ED43464468F9BFBAE89D1675917346CA6D8FE3C92 PUSH1 0x0 DUP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x696 JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x6B0 JUMPI PUSH4 0x8F4EB604 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE DUP2 PUSH1 0x0 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1C PUSH1 0xC KECCAK256 SLOAD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6DE PUSH2 0xA7E JUMP JUMPDEST PUSH2 0x48B PUSH1 0x0 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x3B0 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO ISZERO SWAP1 POP DUP2 PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x30 PUSH1 0xC KECCAK256 SSTORE DUP1 PUSH1 0x0 MSTORE DUP2 PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 POP POP JUMP JUMPDEST PUSH2 0x758 DUP6 DUP6 DUP6 PUSH2 0x48D JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x7A1 JUMPI PUSH2 0x7A1 DUP6 DUP6 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x9F2 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x7B7 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7E3 SWAP1 PUSH2 0xD18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x830 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x805 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x830 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x813 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x844 PUSH2 0xA7E JUMP JUMPDEST PUSH4 0x389A75E1 PUSH1 0xC MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0xC KECCAK256 DUP1 SLOAD TIMESTAMP GT ISZERO PUSH2 0x86C JUMPI PUSH4 0x6F5E8818 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 SSTORE PUSH2 0x879 DUP2 PUSH2 0xA99 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x884 PUSH2 0xA7E JUMP JUMPDEST DUP1 PUSH1 0x60 SHL PUSH2 0x89A JUMPI PUSH4 0x7448FBAE PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x879 DUP2 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x60 SHR DUP3 DUP2 AND SWAP3 POP DUP4 DUP2 AND SWAP4 POP DUP2 PUSH1 0x0 MSTORE DUP4 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD DUP3 AND SWAP2 POP DUP2 PUSH2 0x8EA JUMPI PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP2 DUP6 EQ DUP6 ISZERO OR PUSH2 0x910 JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x910 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x1 ADD DUP4 SWAP1 SSTORE DUP2 DUP4 DUP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 CODESIZE LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP2 PUSH2 0x963 JUMPI PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD DUP2 ADD DUP1 SLOAD DUP1 PUSH1 0x60 SHL ISZERO PUSH2 0x998 JUMPI PUSH4 0xC991CBB1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST DUP4 OR SWAP1 SSTORE PUSH1 0x0 DUP3 SWAP1 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x9C4 JUMPI PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 SSTORE DUP1 DUP3 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 CODESIZE LOG4 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x150B7A02 DUP1 DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP6 PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP4 ADD MSTORE DUP3 MLOAD DUP1 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 ISZERO PUSH2 0xA39 JUMPI DUP1 PUSH1 0xC0 DUP5 ADD DUP3 PUSH1 0x20 DUP8 ADD PUSH1 0x4 GAS STATICCALL POP JUMPDEST PUSH1 0x20 DUP4 PUSH1 0xA4 DUP4 ADD PUSH1 0x1C DUP7 ADD PUSH1 0x0 DUP11 GAS CALL PUSH2 0xA5C JUMPI RETURNDATASIZE ISZERO PUSH2 0xA5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP5 RETURNDATACOPY RETURNDATASIZE DUP4 REVERT JUMPDEST POP DUP1 PUSH1 0xE0 SHL DUP3 MLOAD EQ PUSH2 0xA76 JUMPI PUSH4 0xD1A57ED6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x8B78C6D8 NOT SLOAD CALLER EQ PUSH2 0x48B JUMPI PUSH4 0x82B42900 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x8B78C6D8 NOT DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB35 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xB19 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBA9 DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD5 DUP5 PUSH2 0xB76 JUMP JUMPDEST SWAP3 POP PUSH2 0xBE3 PUSH1 0x20 DUP6 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB01 DUP3 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2A DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC6B DUP7 PUSH2 0xB76 JUMP JUMPDEST SWAP5 POP PUSH2 0xC79 PUSH1 0x20 DUP8 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD01 DUP4 PUSH2 0xB76 JUMP JUMPDEST SWAP2 POP PUSH2 0xD0F PUSH1 0x20 DUP5 ADD PUSH2 0xB76 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xD2C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD4C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xBB6E11B2CD9E512FC02FD3642E7AFA335C537EC19941BF4B8A 0x2C 0xA7 PUSH6 0x62CCD264736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"437:2249:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15061:380:16;;;;;;;;;;-1:-1:-1;15061:380:16;;;;;:::i;:::-;15374:10;15239:3;15235:21;;;;15368:17;;;15393:10;15387:17;;15365:40;15413:10;15407:17;;;15362:63;;15061:380;;;;470:14:22;;463:22;445:41;;433:2;418:18;15061:380:16;;;;;;;;840:84:13;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;8181:532:16:-;;;;;;;;;;-1:-1:-1;8181:532:16;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1448:32:22;;;1430:51;;1418:2;1403:18;8181:532:16;1284:203:22;9007:119:16;;;;;;:::i;:::-;;:::i;:::-;;1749:81:13;;;;;;;;;;;;;:::i;10830:3001:16:-;;;;;;:::i;:::-;;:::i;9021:617:20:-;;;:::i;13902:198:16:-;;;;;;:::i;:::-;;:::i;9720:456:20:-;;;:::i;7039:332:16:-;;;;;;;;;;-1:-1:-1;7039:332:16;;;;;:::i;:::-;;:::i;7515:533::-;;;;;;;;;;-1:-1:-1;7515:533:16;;;;;:::i;:::-;;:::i;:::-;;;2599:25:22;;;2587:2;2572:18;7515:533:16;2453:177:22;8762:100:20;;;:::i;11408:182::-;;;;;;;;;;-1:-1:-1;;;11556:18:20;11408:182;;928:88:13;;;;;;;;;;;;;:::i;9749:726:16:-;;;;;;;;;;-1:-1:-1;9749:726:16;;;;;:::i;:::-;;:::i;14603:249::-;;;;;;:::i;:::-;;:::i;2578:106:13:-;;;;;;;;;;-1:-1:-1;2578:106:13;;;;;:::i;:::-;;:::i;9217:392:16:-;;;;;;;;;;-1:-1:-1;9217:392:16;;;;;:::i;:::-;9437:4;9430:22;9478:31;9472:4;9465:45;9337:11;9523:19;9587:4;9581;9571:21;9565:28;;9217:392;10363:708:20;;;;;;:::i;:::-;;:::i;8348:349::-;;;;;;:::i;:::-;;:::i;11693:435::-;;;;;;;;;;-1:-1:-1;11693:435:20;;;;;:::i;:::-;11963:19;11957:4;11950:33;;;11812:14;11996:26;;;;12106:4;12090:21;;12084:28;;11693:435;840:84:13;886:13;914:5;907:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;840:84;:::o;8181:532:16:-;8243:14;8348:2;8342:4;8335:16;-1:-1:-1;;;8371:4:16;8364:38;8468:4;8462;8452:21;8448:2;8444:30;8440:2;8436:39;8512:13;8506:20;8502:2;8498:29;8488:158;;8560:10;8554:4;8547:24;8627:4;8621;8614:18;8488:158;8679:1;8675:21;8669:28;;8181:532;-1:-1:-1;;8181:532:16:o;9007:119::-;9086:33;9095:10;9107:7;9116:2;9086:8;:33::i;:::-;9007:119;;:::o;1749:81:13:-;1778:47;1784:10;;1778:5;:47::i;:::-;1749:81::o;10830:3001:16:-;11107:1;11251:16;;;-1:-1:-1;;;11322:8:16;11293:38;11287:4;11280:52;11398:4;11382:21;;11374:30;;11366:39;;11441:20;;-1:-1:-1;;;;;11131:25:16;;;;11175:23;;;;11487:36;;;11366:39;11626:15;;;11615:27;;11605:328;;11672:5;11662:146;;11714:10;11708:4;11701:24;11785:4;11779;11772:18;11662:146;11838:10;11832:4;11825:24;11914:4;11908;11901:18;11605:328;12007:2;11997:135;;12042:10;12036:4;12029:24;12113:4;12107;12100:18;11997:135;12235:4;12229;12222:18;12293:13;12290:1;12286:21;12280:28;12257:51;;12443:15;12433:8;12430:29;12423:4;12413:8;12410:18;12407:53;12397:288;;12516:4;12510;12500:21;12494:28;12484:183;;12563:10;12557:4;12550:24;12640:4;12634;12627:18;12484:183;12760:15;12757:55;;;12808:1;12792:13;12789:1;12785:21;12778:32;12757:55;12924:13;;;12903:35;12881:58;;-1:-1:-1;13057:4:16;13051;13041:21;;;13107:22;;-1:-1:-1;;13103:30:16;13079:55;;-1:-1:-1;13225:16:16;;;13279:21;13348:20;;13131:1;13344:28;13424:20;13399:46;;13389:192;;13482:10;13476:4;13469:24;13558:4;13552;13545:18;13389:192;13598:42;;13769:2;13765;13759:4;13732:25;13726:4;13714:10;13709:63;13791:33;10830:3001;;;:::o;9021:617:20:-;9114:15;7972:9;9132:46;;:15;:46;9114:64;;9346:19;9340:4;9333:33;9396:8;9390:4;9383:22;9452:7;9445:4;9439;9429:21;9422:38;9599:8;9552:45;9549:1;9546;9541:67;9248:374;9021:617::o;13902:198:16:-;13999:26;14012:4;14018:2;14022;13999:12;:26::i;:::-;37098:14;;14035:58;;;14053:40;14076:4;14082:2;14086;14053:40;;;;;;;;;;;;:22;:40::i;9720:456:20:-;9922:19;9916:4;9909:33;9968:8;9962:4;9955:22;10020:1;10013:4;10007;9997:21;9990:32;10151:8;10105:44;10102:1;10099;10094:66;9720:456::o;7039:332:16:-;7097:14;16436:21;;;-1:-1:-1;;;16477:4:16;16470:38;16585:4;16569:21;;16561:30;;16553:39;;16547:46;-1:-1:-1;;;;;16531:64:16;;7220:135;;7269:10;7263:4;7256:24;7336:4;7330;7323:18;7220:135;7039:332;;;:::o;7515:533::-;7578:14;7738:5;7728:143;;7776:10;7770:4;7763:24;7852:4;7846;7839:18;7728:143;-1:-1:-1;;;7891:4:16;7884:38;7948:5;7942:4;7935:19;8011:20;8003:4;7997;7987:21;7981:28;7977:55;7967:65;;7515:533;;;:::o;8762:100:20:-;12517:13;:11;:13::i;:::-;8834:21:::1;8852:1;8834:9;:21::i;928:88:13:-:0;976:13;1004:7;997:14;;;;;:::i;9749:726:16:-;9964:10;9957:18;9950:26;9936:40;;10073:8;10067:4;10060:22;10108:31;10102:4;10095:45;10166:8;10160:4;10153:22;10218:10;10211:4;10205;10195:21;10188:41;10303:10;10297:4;10290:24;10448:8;10444:2;10440:17;10436:2;10432:26;10422:8;10387:33;10381:4;10375;10370:89;9749:726;;:::o;14603:249::-;14749:26;14762:4;14768:2;14772;14749:12;:26::i;:::-;37098:14;;14785:60;;;14803:42;14826:4;14832:2;14836;14840:4;;14803:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14803:22:16;;-1:-1:-1;;;14803:42:16:i;:::-;14603:249;;;;;:::o;2578:106:13:-;2638:13;2666;2659:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2578:106;;;:::o;10363:708:20:-;12517:13;:11;:13::i;:::-;10597:19:::1;10591:4;10584:33;10643:12;10637:4;10630:26;10705:4;10699;10689:21;10811:12;10805:19;10792:11;10789:36;10786:157;;;10857:10;10851:4;10844:24;10924:4;10918;10911:18;10786:157;11020:1;10999:23:::0;;11041::::1;11051:12:::0;11041:9:::1;:23::i;:::-;10363:708:::0;:::o;8348:349::-;12517:13;:11;:13::i;:::-;8520:8:::1;8516:2;8512:17;8502:150;;8562:10;8556:4;8549:24;8633:4;8627;8620:18;8502:150;8671:19;8681:8;8671:9;:19::i;27655:1442:16:-:0;27838:1;27834:6;27830:2;27826:15;27885:7;27869:14;27865:28;27854:39;;27932:2;27916:14;27912:23;27906:29;;28005:2;27999:4;27992:16;28063:2;-1:-1:-1;;;28034:32:16;28028:4;28021:46;28133:4;28127;28117:21;28113:2;28109:30;28105:2;28101:39;28192:13;28186:20;28170:14;28166:41;28153:54;;28281:5;28271:134;;28319:10;28313:4;28306:24;28386:4;28380;28373:18;28271:134;28588:5;28584:2;28581:13;28576:2;28569:10;28566:29;28556:280;;28628:5;28622:4;28615:19;28683:4;28677;28667:21;28661:28;28651:171;;28726:10;28720:4;28713:24;28799:4;28793;28786:18;28651:171;28930:1;28926:21;28919:38;;;29078:2;28949:7;29062:5;29035:25;29029:4;29017:10;29012:69;;27655:1442;;;:::o;19860:1682::-;-1:-1:-1;;;;;20088:20:16;;;;;20172:135;;20217:10;20211:4;20204:24;20288:4;20282;20275:18;20172:135;20373:2;20367:4;20360:16;-1:-1:-1;;;20396:4:16;20389:38;20493:4;20487;20477:21;20473:2;20469:30;20465:2;20461:39;20542:13;20536:20;20631:15;20627:2;20623:24;20620:146;;;20679:10;20673:4;20666:24;20747:4;20741;20734:18;20620:146;20839:23;;20817:46;;20952:4;20945:16;;;21013:4;21007;20997:21;21064:18;;21084:1;21060:26;21136:20;21113:44;;21103:190;;21194:10;21188:4;21181:24;21270:4;21264;21257:18;21103:190;21310:38;;21474:2;21470;21467:1;21440:25;21467:1;21422:10;21417:60;9007:119;;:::o;37319:1370::-;37556:4;37550:11;37606:10;37639:24;37636:1;37629:35;37698:8;37691:4;37688:1;37684:12;37677:30;37806:4;37802:2;37798:13;37794:2;37790:22;37783:4;37780:1;37776:12;37769:44;37847:2;37840:4;37837:1;37833:12;37826:24;37884:4;37877;37874:1;37870:12;37863:26;37917:4;37911:11;37956:1;37949:4;37946:1;37942:12;37935:23;37974:1;37971:71;;;38037:1;38030:4;38027:1;38023:12;38020:1;38013:4;38007;38003:15;38000:1;37993:5;37982:57;37978:62;37971:71;38158:4;38155:1;38148:4;38145:1;38141:12;38134:4;38131:1;38127:12;38124:1;38120:2;38113:5;38108:55;38098:313;;38186:16;38183:214;;;38314:16;38308:4;38305:1;38290:41;38362:16;38359:1;38352:27;38183:214;38098:313;38507:24;38502:3;38498:34;38494:1;38488:8;38485:48;38475:198;;38566:10;38560:4;38553:24;38654:4;38648;38641:18;38475:198;;;37319:1370;;;;:::o;7292:355:20:-;-1:-1:-1;;7498:18:20;7488:8;7485:32;7475:156;;7550:10;7544:4;7537:24;7612:4;7606;7599:18;6145:1089;-1:-1:-1;;7093:16:20;;-1:-1:-1;;;;;6941:26:20;;;;;;7053:38;7050:1;;7042:78;7177:27;6145:1089::o;14:286:22:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:22;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:22:o;497:597::-;609:4;638:2;667;656:9;649:21;699:6;693:13;742:6;737:2;726:9;722:18;715:34;767:1;777:140;791:6;788:1;785:13;777:140;;;886:14;;;882:23;;876:30;852:17;;;871:2;848:26;841:66;806:10;;777:140;;;935:6;932:1;929:13;926:91;;;1005:1;1000:2;991:6;980:9;976:22;972:31;965:42;926:91;-1:-1:-1;1078:2:22;1057:15;-1:-1:-1;;1053:29:22;1038:45;;;;1085:2;1034:54;;497:597;-1:-1:-1;;;497:597:22:o;1099:180::-;1158:6;1211:2;1199:9;1190:7;1186:23;1182:32;1179:52;;;1227:1;1224;1217:12;1179:52;-1:-1:-1;1250:23:22;;1099:180;-1:-1:-1;1099:180:22:o;1492:173::-;1560:20;;-1:-1:-1;;;;;1609:31:22;;1599:42;;1589:70;;1655:1;1652;1645:12;1670:254;1738:6;1746;1799:2;1787:9;1778:7;1774:23;1770:32;1767:52;;;1815:1;1812;1805:12;1767:52;1838:29;1857:9;1838:29;:::i;:::-;1828:39;1914:2;1899:18;;;;1886:32;;-1:-1:-1;;;1670:254:22:o;1929:328::-;2006:6;2014;2022;2075:2;2063:9;2054:7;2050:23;2046:32;2043:52;;;2091:1;2088;2081:12;2043:52;2114:29;2133:9;2114:29;:::i;:::-;2104:39;;2162:38;2196:2;2185:9;2181:18;2162:38;:::i;:::-;2152:48;;2247:2;2236:9;2232:18;2219:32;2209:42;;1929:328;;;;;:::o;2262:186::-;2321:6;2374:2;2362:9;2353:7;2349:23;2345:32;2342:52;;;2390:1;2387;2380:12;2342:52;2413:29;2432:9;2413:29;:::i;2635:347::-;2700:6;2708;2761:2;2749:9;2740:7;2736:23;2732:32;2729:52;;;2777:1;2774;2767:12;2729:52;2800:29;2819:9;2800:29;:::i;:::-;2790:39;;2879:2;2868:9;2864:18;2851:32;2926:5;2919:13;2912:21;2905:5;2902:32;2892:60;;2948:1;2945;2938:12;2892:60;2971:5;2961:15;;;2635:347;;;;;:::o;2987:808::-;3084:6;3092;3100;3108;3116;3169:3;3157:9;3148:7;3144:23;3140:33;3137:53;;;3186:1;3183;3176:12;3137:53;3209:29;3228:9;3209:29;:::i;:::-;3199:39;;3257:38;3291:2;3280:9;3276:18;3257:38;:::i;:::-;3247:48;;3342:2;3331:9;3327:18;3314:32;3304:42;;3397:2;3386:9;3382:18;3369:32;3420:18;3461:2;3453:6;3450:14;3447:34;;;3477:1;3474;3467:12;3447:34;3515:6;3504:9;3500:22;3490:32;;3560:7;3553:4;3549:2;3545:13;3541:27;3531:55;;3582:1;3579;3572:12;3531:55;3622:2;3609:16;3648:2;3640:6;3637:14;3634:34;;;3664:1;3661;3654:12;3634:34;3709:7;3704:2;3695:6;3691:2;3687:15;3683:24;3680:37;3677:57;;;3730:1;3727;3720:12;3677:57;2987:808;;;;-1:-1:-1;2987:808:22;;-1:-1:-1;3761:2:22;3753:11;;3783:6;2987:808;-1:-1:-1;;;2987:808:22:o;3800:260::-;3868:6;3876;3929:2;3917:9;3908:7;3904:23;3900:32;3897:52;;;3945:1;3942;3935:12;3897:52;3968:29;3987:9;3968:29;:::i;:::-;3958:39;;4016:38;4050:2;4039:9;4035:18;4016:38;:::i;:::-;4006:48;;3800:260;;;;;:::o;4065:380::-;4144:1;4140:12;;;;4187;;;4208:61;;4262:4;4254:6;4250:17;4240:27;;4208:61;4315:2;4307:6;4304:14;4284:18;4281:38;4278:161;;4361:10;4356:3;4352:20;4349:1;4342:31;4396:4;4393:1;4386:15;4424:4;4421:1;4414:15;4278:161;;4065:380;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"692800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"28894","balanceOf(address)":"2587","cancelOwnershipHandover()":"6407","completeOwnershipHandover(address)":"35486","getApproved(uint256)":"4687","isApprovedForAll(address,address)":"infinite","mint()":"50830","name()":"infinite","owner()":"2383","ownerOf(uint256)":"2634","ownershipHandoverExpiresAt(address)":"2654","renounceOwnership()":"infinite","requestOwnershipHandover()":"23487","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"24459","supportsInterface(bytes4)":"391","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28340"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","cancelOwnershipHandover()":"54d1f13d","completeOwnershipHandover(address)":"f04e283e","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mint()":"1249c58b","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","ownershipHandoverExpiresAt(address)":"fee81cf4","renounceOwnership()":"715018a6","requestOwnershipHandover()":"25692962","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"todo...\",\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"AlreadyInitialized()\":[{\"details\":\"Cannot double-initialize.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for token `id`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"stateVariables\":{\"_baseTokenURI\":{\"details\":\"ERC721 Base Token URI\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721All.sol\":\"ERC721All\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721All.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Written by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity 0.8.13;\\n\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../node_modules/solady/src/auth/Ownable.sol\\\";\\n\\n// import \\\"./lib/ERC721.sol\\\";\\nimport \\\"./lib/ERC721Solady.sol\\\";\\n\\n/**\\n * @dev todo...\\n */\\ncontract ERC721All is Ownable, ERC721 {\\n  mapping(uint256 => bool) internal _activeTokens;\\n\\n  /// @dev ERC721 Base Token URI\\n  string internal _baseTokenURI;\\n  string internal _name;\\n  string internal _symbol;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    string memory baseUri\\n  ) ERC721() Ownable() {\\n    _baseTokenURI = baseUri;\\n    _symbol = symbol;\\n    _name = name;\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  // function balanceOf(address owner) public view override returns (uint256) {\\n  //   require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n  //   if (_balances[owner] == 0 && _hasOwnToken(owner)) {\\n  //     return 1;\\n  //   }\\n  //   return _balances[owner];\\n  // }\\n\\n  // function ownerOf(uint256 tokenId) public view override returns (address) {\\n  //   require(_isTokenActive(tokenId), \\\"ERC721: invalid token ID\\\");\\n\\n  //   // If token has been transfered then _owners will be populated,\\n  //   // otherwise the token ID represents the initial owner\\n  //   address owner = _owners[tokenId];\\n  //   if (owner == address(0)) {\\n  //     owner = address(uint160(tokenId));\\n  //   }\\n  //   return owner;\\n  // }\\n\\n  function mint() public {\\n    _mint(msg.sender, uint256(uint160(msg.sender)));\\n  }\\n\\n  // function _mint(address receiver) internal {\\n  //   // Token ID == Minter Address\\n  //   uint256 tokenId = uint256(uint160(receiver));\\n\\n  //   require(receiver != address(0), \\\"ERC721: mint to the zero address\\\");\\n  //   require(!_isTokenActive(tokenId), \\\"ERC721: token already minted\\\");\\n\\n  //   // Mark Token as Active\\n  //   _activeTokens[tokenId] = true;\\n\\n  //   // Fire Transfer Event\\n  //   emit Transfer(address(0), receiver, tokenId);\\n  // }\\n\\n  // function _hasOwnToken(address owner) internal view returns (bool) {\\n  //   uint256 ownerTokenId = uint256(uint160(owner));\\n  //   address currentOwner = _owners[ownerTokenId];\\n  //   return (_isTokenActive(ownerTokenId) && (currentOwner == owner || currentOwner == address(0)));\\n  // }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    return _baseTokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x8f3c624ab9452a7c7b3a356eaa85a178519c583c2266e73e253b06dad995be3f\",\"license\":\"MIT\"},\"contracts/lib/ERC721Solady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    // function ownerOf(uint256 id) public view virtual returns (address result)\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        address tokenId = address(uint160(id));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, tokenId)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                if iszero(and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa37e21e66c6b404efe0c18c71da6239d685ec39af8470a3ac09463ab98465167\",\"license\":\"MIT\"},\"node_modules/solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n///\\n/// @dev Note:\\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\\n///\\n/// While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev Cannot double-initialize.\\n    error AlreadyInitialized();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by:\\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    bytes32 internal constant _OWNER_SLOT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                if sload(ownerSlot) {\\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(_OWNER_SLOT, newOwner)\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_OWNER_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc208cdd9de02bbf4b5edad18b88e23a2be7ff56d2287d5649329dc7cda64b9a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1931,"contract":"contracts/ERC721All.sol:ERC721All","label":"_activeTokens","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_bool)"},{"astId":1934,"contract":"contracts/ERC721All.sol:ERC721All","label":"_baseTokenURI","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1936,"contract":"contracts/ERC721All.sol:ERC721All","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":1938,"contract":"contracts/ERC721All.sol:ERC721All","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721i.sol":{"ERC721i":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseUri","type":"string"},{"internalType":"address","name":"minter","type":"address"},{"internalType":"uint256","name":"maxSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"fromAddress","type":"address"},{"indexed":true,"internalType":"address","name":"toAddress","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"preMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements a Pre-Mint version of {ERC721} that adds the ability to Pre-Mint all the token ids in the contract as assign an initial owner for each token id. On-chain state for Pre-Mint does not need to be initially stored if Max-Supply is known. Minting is a simple matter of assigning a balance to the pre-mint receiver, and modifying the \"read\" methods to account for the pre-mint receiver as owner. We use the Consecutive Transfer Method as defined in EIP-2309 to signal inital ownership. Almost everything else remains standard. We also default to the contract \"owner\" as the pre-mint receiver, but this can be changed.","events":{"ConsecutiveTransfer(uint256,uint256,address,address)":{"details":"EIP-2309: https://eips.ethereum.org/EIPS/eip-2309"}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection, as well as a `minter` and a `maxSupply` for pre-minting the collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"Override the ERC721 \"ownerOf\" function to account for the Pre-Mint Receiver."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}. Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}. note: Fix contributed by surfer77"},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"_baseTokenURI":{"details":"ERC721 Base Token URI"}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2067":{"entryPoint":null,"id":2067,"parameterSlots":5,"returnSlots":0},"@_2189":{"entryPoint":null,"id":2189,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_646":{"entryPoint":null,"id":646,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":178,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256_fromMemory":{"entryPoint":629,"id":null,"parameterSlots":2,"returnSlots":5},"extract_byte_array_length":{"entryPoint":820,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":424,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2419:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:821:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"body":{"nodeType":"YulBlock","src":"942:59:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:22"},"nodeType":"YulFunctionCall","src":"967:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:22"},"nodeType":"YulFunctionCall","src":"963:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:22"},"nodeType":"YulFunctionCall","src":"956:35:22"},"nodeType":"YulExpressionStatement","src":"956:35:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:22"},"nodeType":"YulFunctionCall","src":"924:9:22"},"nodeType":"YulIf","src":"921:80:22"},{"nodeType":"YulAssignment","src":"1010:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:885:22"},{"body":{"nodeType":"YulBlock","src":"1215:817:22","statements":[{"body":{"nodeType":"YulBlock","src":"1262:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1271:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1274:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1264:6:22"},"nodeType":"YulFunctionCall","src":"1264:12:22"},"nodeType":"YulExpressionStatement","src":"1264:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1236:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1232:3:22"},"nodeType":"YulFunctionCall","src":"1232:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1257:3:22","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1228:3:22"},"nodeType":"YulFunctionCall","src":"1228:33:22"},"nodeType":"YulIf","src":"1225:53:22"},{"nodeType":"YulVariableDeclaration","src":"1287:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1307:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1301:5:22"},"nodeType":"YulFunctionCall","src":"1301:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1291:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1326:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1344:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1348:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1340:3:22"},"nodeType":"YulFunctionCall","src":"1340:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1352:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1336:3:22"},"nodeType":"YulFunctionCall","src":"1336:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1330:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1381:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1390:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1393:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1383:6:22"},"nodeType":"YulFunctionCall","src":"1383:12:22"},"nodeType":"YulExpressionStatement","src":"1383:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1369:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1377:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1366:2:22"},"nodeType":"YulFunctionCall","src":"1366:14:22"},"nodeType":"YulIf","src":"1363:34:22"},{"nodeType":"YulAssignment","src":"1406:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1449:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1460:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1445:3:22"},"nodeType":"YulFunctionCall","src":"1445:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1469:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1416:28:22"},"nodeType":"YulFunctionCall","src":"1416:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1406:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1486:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1523:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1508:3:22"},"nodeType":"YulFunctionCall","src":"1508:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1502:5:22"},"nodeType":"YulFunctionCall","src":"1502:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1490:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1556:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1565:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1568:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1558:6:22"},"nodeType":"YulFunctionCall","src":"1558:12:22"},"nodeType":"YulExpressionStatement","src":"1558:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1542:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1552:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1539:2:22"},"nodeType":"YulFunctionCall","src":"1539:16:22"},"nodeType":"YulIf","src":"1536:36:22"},{"nodeType":"YulAssignment","src":"1581:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1624:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1635:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1620:3:22"},"nodeType":"YulFunctionCall","src":"1620:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1591:28:22"},"nodeType":"YulFunctionCall","src":"1591:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1581:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1663:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1689:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1700:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1685:3:22"},"nodeType":"YulFunctionCall","src":"1685:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1679:5:22"},"nodeType":"YulFunctionCall","src":"1679:25:22"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1667:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1733:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1742:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1745:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1735:6:22"},"nodeType":"YulFunctionCall","src":"1735:12:22"},"nodeType":"YulExpressionStatement","src":"1735:12:22"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1719:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1729:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1716:2:22"},"nodeType":"YulFunctionCall","src":"1716:16:22"},"nodeType":"YulIf","src":"1713:36:22"},{"nodeType":"YulAssignment","src":"1758:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1801:9:22"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1812:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1797:3:22"},"nodeType":"YulFunctionCall","src":"1797:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1823:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1768:28:22"},"nodeType":"YulFunctionCall","src":"1768:63:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1758:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1840:38:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1863:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1874:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1859:3:22"},"nodeType":"YulFunctionCall","src":"1859:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1853:5:22"},"nodeType":"YulFunctionCall","src":"1853:25:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1844:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1941:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1950:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1953:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1943:6:22"},"nodeType":"YulFunctionCall","src":"1943:12:22"},"nodeType":"YulExpressionStatement","src":"1943:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1900:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1911:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1926:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1931:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1922:3:22"},"nodeType":"YulFunctionCall","src":"1922:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1935:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1918:3:22"},"nodeType":"YulFunctionCall","src":"1918:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1907:3:22"},"nodeType":"YulFunctionCall","src":"1907:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1897:2:22"},"nodeType":"YulFunctionCall","src":"1897:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1890:6:22"},"nodeType":"YulFunctionCall","src":"1890:50:22"},"nodeType":"YulIf","src":"1887:70:22"},{"nodeType":"YulAssignment","src":"1966:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"1976:5:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1966:6:22"}]},{"nodeType":"YulAssignment","src":"1990:36:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2010:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2021:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2006:3:22"},"nodeType":"YulFunctionCall","src":"2006:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2000:5:22"},"nodeType":"YulFunctionCall","src":"2000:26:22"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1990:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1149:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1160:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1172:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1180:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1188:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1196:6:22","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1204:6:22","type":""}],"src":"1036:996:22"},{"body":{"nodeType":"YulBlock","src":"2092:325:22","statements":[{"nodeType":"YulAssignment","src":"2102:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2116:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2119:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2112:3:22"},"nodeType":"YulFunctionCall","src":"2112:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2102:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"2133:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2163:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"2169:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2159:3:22"},"nodeType":"YulFunctionCall","src":"2159:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2137:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2210:31:22","statements":[{"nodeType":"YulAssignment","src":"2212:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2226:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2234:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2222:3:22"},"nodeType":"YulFunctionCall","src":"2222:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2212:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2190:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2183:6:22"},"nodeType":"YulFunctionCall","src":"2183:26:22"},"nodeType":"YulIf","src":"2180:61:22"},{"body":{"nodeType":"YulBlock","src":"2300:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2321:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2333:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2324:3:22"},"nodeType":"YulFunctionCall","src":"2324:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2314:6:22"},"nodeType":"YulFunctionCall","src":"2314:31:22"},"nodeType":"YulExpressionStatement","src":"2314:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2365:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2368:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2358:6:22"},"nodeType":"YulFunctionCall","src":"2358:15:22"},"nodeType":"YulExpressionStatement","src":"2358:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2393:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2396:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2386:6:22"},"nodeType":"YulFunctionCall","src":"2386:15:22"},"nodeType":"YulExpressionStatement","src":"2386:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2256:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2279:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2287:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2276:2:22"},"nodeType":"YulFunctionCall","src":"2276:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2253:2:22"},"nodeType":"YulFunctionCall","src":"2253:38:22"},"nodeType":"YulIf","src":"2250:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2072:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2081:6:22","type":""}],"src":"2037:380:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_2), dataEnd)\n        let value := mload(add(headStart, 96))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value3 := value\n        value4 := mload(add(headStart, 128))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200189738038062001897833981016040819052620000349162000275565b84846200004133620000b2565b81516200005690600190602085019062000102565b5080516200006c90600290602084019062000102565b50508351620000849150600b90602086019062000102565b50600a55600980546001600160a01b0319166001600160a01b03929092169190911790555062000370915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620001109062000334565b90600052602060002090601f0160209004810192826200013457600085556200017f565b82601f106200014f57805160ff19168380011785556200017f565b828001600101855582156200017f579182015b828111156200017f57825182559160200191906001019062000162565b506200018d92915062000191565b5090565b5b808211156200018d576000815560010162000192565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d057600080fd5b81516001600160401b0380821115620001ed57620001ed620001a8565b604051601f8301601f19908116603f01168101908282118183101715620002185762000218620001a8565b816040528381526020925086838588010111156200023557600080fd5b600091505b838210156200025957858201830151818301840152908201906200023a565b838211156200026b5760008385830101525b9695505050505050565b600080600080600060a086880312156200028e57600080fd5b85516001600160401b0380821115620002a657600080fd5b620002b489838a01620001be565b96506020880151915080821115620002cb57600080fd5b620002d989838a01620001be565b95506040880151915080821115620002f057600080fd5b50620002ff88828901620001be565b606088015190945090506001600160a01b03811681146200031f57600080fd5b80925050608086015190509295509295909350565b600181811c908216806200034957607f821691505b6020821081036200036a57634e487b7160e01b600052602260045260246000fd5b50919050565b61151780620003806000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb4651461025b578063b88d4fde1461026e578063c87b56dd14610281578063e985e9c514610294578063f2fde38b146102d057600080fd5b80636352211e1461021457806370a0823114610227578063715018a61461023a5780638da5cb5b1461024257806395d89b411461025357600080fd5b806323b872dd116100f457806323b872dd146101c05780632f745c59146101d35780633cd29ac8146101e657806342842e0e146101ee5780634f6ccce71461020157600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046110b4565b6102e3565b60405190151581526020015b60405180910390f35b61016161030e565b6040516101509190611125565b61018161017c366004611138565b6103a0565b6040516001600160a01b039091168152602001610150565b6101ac6101a736600461116d565b6103c7565b005b600a545b604051908152602001610150565b6101ac6101ce366004611197565b6104e1565b6101b26101e136600461116d565b610512565b6101ac610639565b6101ac6101fc366004611197565b61064b565b6101b261020f366004611138565b610666565b610181610222366004611138565b6106d9565b6101b26102353660046111d3565b61071e565b6101ac6107a4565b6000546001600160a01b0316610181565b6101616107b6565b6101ac6102693660046111ee565b6107c5565b6101ac61027c366004611240565b6107d4565b61016161028f366004611138565b61080c565b6101446102a236600461131c565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6101ac6102de3660046111d3565b61081f565b60006001600160e01b0319821663780e9d6360e01b1480610308575061030882610898565b92915050565b60606001805461031d9061134f565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061134f565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ab826108e8565b506000908152600560205260409020546001600160a01b031690565b60006103d2826106d9565b9050806001600160a01b0316836001600160a01b0316036104445760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610460575061046081336102a2565b6104d25760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161043b565b6104dc8383610938565b505050565b6104eb33826109a6565b6105075760405162461bcd60e51b815260040161043b90611389565b6104dc838383610a25565b600061051d8361071e565b821061057f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161043b565b6009546001600160a01b03908116908416036106105760006105a0600a5490565b9050600060015b8281101561060c576009546001600160a01b03166105c4826106d9565b6001600160a01b0316036105fa576105dd6001836113ed565b9150846105eb600184611405565b036105fa579250610308915050565b806106048161141c565b9150506105a7565b5050505b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610641610bcc565b610649610c26565b565b6104dc838383604051806020016040528060008152506107d4565b6000600a5482106106ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161043b565b6103088260016113ed565b6000600a548211156106ee5761030882610c90565b6000828152600360205260409020546001600160a01b03168061030857506009546001600160a01b031692915050565b60006001600160a01b0382166107885760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161043b565b506001600160a01b031660009081526004602052604090205490565b6107ac610bcc565b6106496000610cf0565b60606002805461031d9061134f565b6107d0338383610d40565b5050565b6107de33836109a6565b6107fa5760405162461bcd60e51b815260040161043b90611389565b61080684848484610e0e565b50505050565b6060610817826108e8565b610308610e41565b610827610bcc565b6001600160a01b03811661088c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043b565b61089581610cf0565b50565b60006001600160e01b031982166380ac58cd60e01b14806108c957506001600160e01b03198216635b5e139f60e01b145b8061030857506301ffc9a760e01b6001600160e01b0319831614610308565b6108f181610e50565b6108955760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161043b565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061096d826106d9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109b2836106d9565b9050806001600160a01b0316846001600160a01b031614806109f957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610a1d5750836001600160a01b0316610a12846103a0565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a38826106d9565b6001600160a01b031614610a9c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161043b565b6001600160a01b038216610afe5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161043b565b610b09838383610e8f565b610b14600082610938565b6001600160a01b0383166000908152600460205260408120805460019290610b3d908490611405565b90915550506001600160a01b0382166000908152600460205260408120805460019290610b6b9084906113ed565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b031633146106495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043b565b600a54600980546001600160a01b0390811660009081526004602052604080822085905592549251929091169290916001917fdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d91610c8691815260200190565b60405180910390a4565b6000818152600360205260408120546001600160a01b0316806103085760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161043b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610da15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161043b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e19848484610a25565b610e2584848484610ebc565b6108065760405162461bcd60e51b815260040161043b90611435565b6060600b805461031d9061134f565b6000600a54821115610e7b576000828152600360205260409020546001600160a01b03161515610308565b600082118015610308575050600a54101590565b816001600160a01b0316836001600160a01b0316146104dc57610eb28382610fbd565b6104dc828261105a565b60006001600160a01b0384163b15610fb257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f00903390899088908890600401611487565b6020604051808303816000875af1925050508015610f3b575060408051601f3d908101601f19168201909252610f38918101906114c4565b60015b610f98573d808015610f69576040519150601f19603f3d011682016040523d82523d6000602084013e610f6e565b606091505b508051600003610f905760405162461bcd60e51b815260040161043b90611435565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a1d565b506001949350505050565b60006001610fca8461071e565b610fd49190611405565b600083815260086020526040902054909150808214611027576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60006110658361071e565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b6001600160e01b03198116811461089557600080fd5b6000602082840312156110c657600080fd5b81356110d18161109e565b9392505050565b6000815180845260005b818110156110fe576020818501810151868301820152016110e2565b81811115611110576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110d160208301846110d8565b60006020828403121561114a57600080fd5b5035919050565b80356001600160a01b038116811461116857600080fd5b919050565b6000806040838503121561118057600080fd5b61118983611151565b946020939093013593505050565b6000806000606084860312156111ac57600080fd5b6111b584611151565b92506111c360208501611151565b9150604084013590509250925092565b6000602082840312156111e557600080fd5b6110d182611151565b6000806040838503121561120157600080fd5b61120a83611151565b91506020830135801515811461121f57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561125657600080fd5b61125f85611151565b935061126d60208601611151565b925060408501359150606085013567ffffffffffffffff8082111561129157600080fd5b818701915087601f8301126112a557600080fd5b8135818111156112b7576112b761122a565b604051601f8201601f19908116603f011681019083821181831017156112df576112df61122a565b816040528281528a60208487010111156112f857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561132f57600080fd5b61133883611151565b915061134660208401611151565b90509250929050565b600181811c9082168061136357607f821691505b60208210810361138357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611400576114006113d7565b500190565b600082821015611417576114176113d7565b500390565b60006001820161142e5761142e6113d7565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906114ba908301846110d8565b9695505050505050565b6000602082840312156114d657600080fd5b81516110d18161109e56fea264697066735822122017f827a8c1d025bcc57d8e9f650c2eb969a77a0bd3192d2a907918594d41d78e64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1897 CODESIZE SUB DUP1 PUSH3 0x1897 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x275 JUMP JUMPDEST DUP5 DUP5 PUSH3 0x41 CALLER PUSH3 0xB2 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x56 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x102 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x6C SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x102 JUMP JUMPDEST POP POP DUP4 MLOAD PUSH3 0x84 SWAP2 POP PUSH1 0xB SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x102 JUMP JUMPDEST POP PUSH1 0xA SSTORE PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x370 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x110 SWAP1 PUSH3 0x334 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x134 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x17F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x14F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x17F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x17F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x17F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x162 JUMP JUMPDEST POP PUSH3 0x18D SWAP3 SWAP2 POP PUSH3 0x191 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x18D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x192 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1ED JUMPI PUSH3 0x1ED PUSH3 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x218 JUMPI PUSH3 0x218 PUSH3 0x1A8 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x259 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x23A JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x26B JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2B4 DUP10 DUP4 DUP11 ADD PUSH3 0x1BE JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x2CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2D9 DUP10 DUP4 DUP11 ADD PUSH3 0x1BE JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x2FF DUP9 DUP3 DUP10 ADD PUSH3 0x1BE JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x349 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x36A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1517 DUP1 PUSH3 0x380 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x3CD29AC8 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x10B4 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1197 JUMP JUMPDEST PUSH2 0x4E1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x639 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1197 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x7A4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x181 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x7B6 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x1240 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x80C JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x131C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x308 JUMPI POP PUSH2 0x308 DUP3 PUSH2 0x898 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x349 SWAP1 PUSH2 0x134F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x396 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x396 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x379 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB DUP3 PUSH2 0x8E8 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2 DUP3 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x444 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x460 JUMPI POP PUSH2 0x460 DUP2 CALLER PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x4D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 PUSH2 0x938 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4EB CALLER DUP3 PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x507 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 DUP4 PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51D DUP4 PUSH2 0x71E JUMP JUMPDEST DUP3 LT PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x74206F6620626F756E6473 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x610 JUMPI PUSH1 0x0 PUSH2 0x5A0 PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x60C JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5C4 DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x5FA JUMPI PUSH2 0x5DD PUSH1 0x1 DUP4 PUSH2 0x13ED JUMP JUMPDEST SWAP2 POP DUP5 PUSH2 0x5EB PUSH1 0x1 DUP5 PUSH2 0x1405 JUMP JUMPDEST SUB PUSH2 0x5FA JUMPI SWAP3 POP PUSH2 0x308 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH2 0x604 DUP2 PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5A7 JUMP JUMPDEST POP POP POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x641 PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x649 PUSH2 0xC26 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 LT PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7574206F6620626F756E6473 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x308 DUP3 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 GT ISZERO PUSH2 0x6EE JUMPI PUSH2 0x308 DUP3 PUSH2 0xC90 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x308 JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7AC PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x649 PUSH1 0x0 PUSH2 0xCF0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH2 0x7D0 CALLER DUP4 DUP4 PUSH2 0xD40 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7DE CALLER DUP4 PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x7FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x806 DUP5 DUP5 DUP5 DUP5 PUSH2 0xE0E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x817 DUP3 PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x308 PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x827 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x895 DUP2 PUSH2 0xCF0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8C9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x308 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x308 JUMP JUMPDEST PUSH2 0x8F1 DUP2 PUSH2 0xE50 JUMP JUMPDEST PUSH2 0x895 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x96D DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9B2 DUP4 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x9F9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA1D JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA12 DUP5 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA38 DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0xB09 DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xB14 PUSH1 0x0 DUP3 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xB3D SWAP1 DUP5 SWAP1 PUSH2 0x1405 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xB6B SWAP1 DUP5 SWAP1 PUSH2 0x13ED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 SWAP1 SSTORE SWAP3 SLOAD SWAP3 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 PUSH1 0x1 SWAP2 PUSH32 0xDEAA91B6123D068F5821D0FB0678463D1A8A6079FE8AF5DE3CE5E896DCF9133D SWAP2 PUSH2 0xC86 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x308 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xDA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xE19 DUP5 DUP5 DUP5 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0xE25 DUP5 DUP5 DUP5 DUP5 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x806 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 GT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x308 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x308 JUMPI POP POP PUSH1 0xA SLOAD LT ISZERO SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4DC JUMPI PUSH2 0xEB2 DUP4 DUP3 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x4DC DUP3 DUP3 PUSH2 0x105A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF00 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1487 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF3B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF38 SWAP2 DUP2 ADD SWAP1 PUSH2 0x14C4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF98 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xF90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1435 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA1D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xFCA DUP5 PUSH2 0x71E JUMP JUMPDEST PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x1405 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x1027 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1065 DUP4 PUSH2 0x71E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10D1 DUP2 PUSH2 0x109E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10FE JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x10E2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x10D1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x114A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B5 DUP5 PUSH2 0x1151 JUMP JUMPDEST SWAP3 POP PUSH2 0x11C3 PUSH1 0x20 DUP6 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D1 DUP3 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120A DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x121F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125F DUP6 PUSH2 0x1151 JUMP JUMPDEST SWAP4 POP PUSH2 0x126D PUSH1 0x20 DUP7 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x12B7 JUMPI PUSH2 0x12B7 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12DF JUMPI PUSH2 0x12DF PUSH2 0x122A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x132F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1338 DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH2 0x1346 PUSH1 0x20 DUP5 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1363 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1383 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1400 JUMPI PUSH2 0x1400 PUSH2 0x13D7 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1417 JUMPI PUSH2 0x1417 PUSH2 0x13D7 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x142E JUMPI PUSH2 0x142E PUSH2 0x13D7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x14BA SWAP1 DUP4 ADD DUP5 PUSH2 0x10D8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10D1 DUP2 PUSH2 0x109E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xF8 0x27 0xA8 0xC1 0xD0 0x25 0xBC 0xC5 PUSH30 0x8E9F650C2EB969A77A0BD3192D2A907918594D41D78E64736F6C63430008 0xD STOP CALLER ","sourceMap":"998:1546:14:-:0;;;1502:319;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1649:4;1655:6;936:32:0;719:10:6;936:18:0;:32::i;:::-;2303:13:15;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2326:17:15;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1685:23:14;;::::2;::::0;-1:-1:-1;1685:13:14::2;::::0;:23:::2;::::0;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;1763:10:14::2;:22:::0;1791:16:::2;:25:::0;;-1:-1:-1;;;;;;1791:25:14::2;-1:-1:-1::0;;;;;1791:25:14;;;::::2;::::0;;;::::2;::::0;;-1:-1:-1;998:1546:14;;-1:-1:-1;;998:1546:14;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;998:1546:14:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;998:1546:14;;;-1:-1:-1;998:1546:14;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:22:o;1036:996::-;1172:6;1180;1188;1196;1204;1257:3;1245:9;1236:7;1232:23;1228:33;1225:53;;;1274:1;1271;1264:12;1225:53;1301:16;;-1:-1:-1;;;;;1366:14:22;;;1363:34;;;1393:1;1390;1383:12;1363:34;1416:61;1469:7;1460:6;1449:9;1445:22;1416:61;:::i;:::-;1406:71;;1523:2;1512:9;1508:18;1502:25;1486:41;;1552:2;1542:8;1539:16;1536:36;;;1568:1;1565;1558:12;1536:36;1591:63;1646:7;1635:8;1624:9;1620:24;1591:63;:::i;:::-;1581:73;;1700:2;1689:9;1685:18;1679:25;1663:41;;1729:2;1719:8;1716:16;1713:36;;;1745:1;1742;1735:12;1713:36;;1768:63;1823:7;1812:8;1801:9;1797:24;1768:63;:::i;:::-;1874:2;1859:18;;1853:25;1758:73;;-1:-1:-1;1853:25:22;-1:-1:-1;;;;;;1907:31:22;;1897:42;;1887:70;;1953:1;1950;1943:12;1887:70;1976:5;1966:15;;;2021:3;2010:9;2006:19;2000:26;1990:36;;1036:996;;;;;;;;:::o;2037:380::-;2116:1;2112:12;;;;2159;;;2180:61;;2234:4;2226:6;2222:17;2212:27;;2180:61;2287:2;2279:6;2276:14;2256:18;2253:38;2250:161;;2333:10;2328:3;2324:20;2321:1;2314:31;2368:4;2365:1;2358:15;2396:4;2393:1;2386:15;2250:161;;2037:380;;;:::o;:::-;998:1546:14;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_addTokenToOwnerEnumeration_4008":{"entryPoint":4186,"id":4008,"parameterSlots":2,"returnSlots":0},"@_afterTokenTransfer_2990":{"entryPoint":null,"id":2990,"parameterSlots":3,"returnSlots":0},"@_approve_2858":{"entryPoint":2360,"id":2858,"parameterSlots":2,"returnSlots":0},"@_baseURI_2106":{"entryPoint":3649,"id":2106,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_2979":{"entryPoint":null,"id":2979,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_3978":{"entryPoint":3727,"id":3978,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_2968":{"entryPoint":3772,"id":2968,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":3020,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_2558":{"entryPoint":null,"id":2558,"parameterSlots":1,"returnSlots":1},"@_exists_3943":{"entryPoint":3664,"id":3943,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2591":{"entryPoint":2470,"id":2591,"parameterSlots":2,"returnSlots":1},"@_msgSender_646":{"entryPoint":null,"id":646,"parameterSlots":0,"returnSlots":1},"@_preMint_2088":{"entryPoint":3110,"id":2088,"parameterSlots":0,"returnSlots":0},"@_removeTokenFromOwnerEnumeration_4071":{"entryPoint":4029,"id":4071,"parameterSlots":2,"returnSlots":0},"@_requireMinted_2904":{"entryPoint":2280,"id":2904,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_2540":{"entryPoint":3598,"id":2540,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2890":{"entryPoint":3392,"id":2890,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":3312,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_2835":{"entryPoint":2597,"id":2835,"parameterSlots":3,"returnSlots":0},"@approve_2382":{"entryPoint":967,"id":2382,"parameterSlots":2,"returnSlots":0},"@balanceOf_2244":{"entryPoint":1822,"id":2244,"parameterSlots":1,"returnSlots":1},"@getApproved_2400":{"entryPoint":928,"id":2400,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2435":{"entryPoint":null,"id":2435,"parameterSlots":2,"returnSlots":1},"@name_2282":{"entryPoint":782,"id":2282,"parameterSlots":0,"returnSlots":1},"@ownerOf_2272":{"entryPoint":3216,"id":2272,"parameterSlots":1,"returnSlots":1},"@ownerOf_3913":{"entryPoint":1753,"id":3913,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@preMint_2097":{"entryPoint":1593,"id":2097,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":1956,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2481":{"entryPoint":1611,"id":2481,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2511":{"entryPoint":2004,"id":2511,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2417":{"entryPoint":1989,"id":2417,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2220":{"entryPoint":2200,"id":2220,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3760":{"entryPoint":739,"id":3760,"parameterSlots":1,"returnSlots":1},"@supportsInterface_908":{"entryPoint":null,"id":908,"parameterSlots":1,"returnSlots":1},"@symbol_2292":{"entryPoint":1974,"id":2292,"parameterSlots":0,"returnSlots":1},"@tokenByIndex_3871":{"entryPoint":1638,"id":3871,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_3840":{"entryPoint":1298,"id":3840,"parameterSlots":2,"returnSlots":1},"@tokenURI_2122":{"entryPoint":2060,"id":2122,"parameterSlots":1,"returnSlots":1},"@totalSupply_3850":{"entryPoint":null,"id":3850,"parameterSlots":0,"returnSlots":1},"@transferFrom_2462":{"entryPoint":1249,"id":2462,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":2079,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":4433,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4563,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4892,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4503,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":4672,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":4590,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4461,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4276,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":5316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4408,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":4312,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5255,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4389,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5173,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5001,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5101,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5125,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4943,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":5148,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5079,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4650,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":4254,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:11575:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:22","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:22"},"nodeType":"YulFunctionCall","src":"125:12:22"},"nodeType":"YulExpressionStatement","src":"125:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:22"},"nodeType":"YulFunctionCall","src":"99:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:22"},"nodeType":"YulFunctionCall","src":"88:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:22"},"nodeType":"YulFunctionCall","src":"78:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:22"},"nodeType":"YulFunctionCall","src":"71:51:22"},"nodeType":"YulIf","src":"68:71:22"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:22","type":""}],"src":"14:131:22"},{"body":{"nodeType":"YulBlock","src":"219:176:22","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:22"},"nodeType":"YulFunctionCall","src":"267:12:22"},"nodeType":"YulExpressionStatement","src":"267:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:22"},"nodeType":"YulFunctionCall","src":"236:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:22"},"nodeType":"YulFunctionCall","src":"232:32:22"},"nodeType":"YulIf","src":"229:52:22"},{"nodeType":"YulVariableDeclaration","src":"290:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:22"},"nodeType":"YulFunctionCall","src":"303:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:22"},"nodeType":"YulFunctionCall","src":"335:30:22"},"nodeType":"YulExpressionStatement","src":"335:30:22"},{"nodeType":"YulAssignment","src":"374:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:22","type":""}],"src":"150:245:22"},{"body":{"nodeType":"YulBlock","src":"495:92:22","statements":[{"nodeType":"YulAssignment","src":"505:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:22"},"nodeType":"YulFunctionCall","src":"513:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:22"},"nodeType":"YulFunctionCall","src":"565:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:22"},"nodeType":"YulFunctionCall","src":"558:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:22"},"nodeType":"YulFunctionCall","src":"540:41:22"},"nodeType":"YulExpressionStatement","src":"540:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:22","type":""}],"src":"400:187:22"},{"body":{"nodeType":"YulBlock","src":"642:422:22","statements":[{"nodeType":"YulVariableDeclaration","src":"652:26:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"666:5:22"},"nodeType":"YulFunctionCall","src":"666:12:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"656:6:22","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"694:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"699:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"687:6:22"},"nodeType":"YulFunctionCall","src":"687:19:22"},"nodeType":"YulExpressionStatement","src":"687:19:22"},{"nodeType":"YulVariableDeclaration","src":"715:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"724:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"719:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"786:110:22","statements":[{"nodeType":"YulVariableDeclaration","src":"800:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"810:4:22","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"804:2:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"842:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"847:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"838:3:22"},"nodeType":"YulFunctionCall","src":"838:11:22"},{"name":"_1","nodeType":"YulIdentifier","src":"851:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"834:3:22"},"nodeType":"YulFunctionCall","src":"834:20:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"870:5:22"},{"name":"i","nodeType":"YulIdentifier","src":"877:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"866:3:22"},"nodeType":"YulFunctionCall","src":"866:13:22"},{"name":"_1","nodeType":"YulIdentifier","src":"881:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:22"},"nodeType":"YulFunctionCall","src":"862:22:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"856:5:22"},"nodeType":"YulFunctionCall","src":"856:29:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"827:6:22"},"nodeType":"YulFunctionCall","src":"827:59:22"},"nodeType":"YulExpressionStatement","src":"827:59:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"745:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"748:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"742:2:22"},"nodeType":"YulFunctionCall","src":"742:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"756:21:22","statements":[{"nodeType":"YulAssignment","src":"758:17:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"767:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"770:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"763:3:22"},"nodeType":"YulFunctionCall","src":"763:12:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"758:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"738:3:22","statements":[]},"src":"734:162:22"},{"body":{"nodeType":"YulBlock","src":"930:62:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"959:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"964:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:22"},"nodeType":"YulFunctionCall","src":"955:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"973:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"951:3:22"},"nodeType":"YulFunctionCall","src":"951:27:22"},{"kind":"number","nodeType":"YulLiteral","src":"980:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"944:6:22"},"nodeType":"YulFunctionCall","src":"944:38:22"},"nodeType":"YulExpressionStatement","src":"944:38:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"911:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"914:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"908:2:22"},"nodeType":"YulFunctionCall","src":"908:13:22"},"nodeType":"YulIf","src":"905:87:22"},{"nodeType":"YulAssignment","src":"1001:57:22","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1016:3:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1029:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1037:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:22"},"nodeType":"YulFunctionCall","src":"1025:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1046:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1042:3:22"},"nodeType":"YulFunctionCall","src":"1042:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1021:3:22"},"nodeType":"YulFunctionCall","src":"1021:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1012:3:22"},"nodeType":"YulFunctionCall","src":"1012:39:22"},{"kind":"number","nodeType":"YulLiteral","src":"1053:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1008:3:22"},"nodeType":"YulFunctionCall","src":"1008:50:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1001:3:22"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"619:5:22","type":""},{"name":"pos","nodeType":"YulTypedName","src":"626:3:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"634:3:22","type":""}],"src":"592:472:22"},{"body":{"nodeType":"YulBlock","src":"1190:99:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1207:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1218:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1200:6:22"},"nodeType":"YulFunctionCall","src":"1200:21:22"},"nodeType":"YulExpressionStatement","src":"1200:21:22"},{"nodeType":"YulAssignment","src":"1230:53:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1256:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1268:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1279:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1264:3:22"},"nodeType":"YulFunctionCall","src":"1264:18:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1238:17:22"},"nodeType":"YulFunctionCall","src":"1238:45:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1230:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1159:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1170:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1181:4:22","type":""}],"src":"1069:220:22"},{"body":{"nodeType":"YulBlock","src":"1364:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1410:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1419:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1422:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1412:6:22"},"nodeType":"YulFunctionCall","src":"1412:12:22"},"nodeType":"YulExpressionStatement","src":"1412:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1385:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1394:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1381:3:22"},"nodeType":"YulFunctionCall","src":"1381:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1406:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1377:3:22"},"nodeType":"YulFunctionCall","src":"1377:32:22"},"nodeType":"YulIf","src":"1374:52:22"},{"nodeType":"YulAssignment","src":"1435:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1458:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1445:12:22"},"nodeType":"YulFunctionCall","src":"1445:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1435:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1330:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1341:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1353:6:22","type":""}],"src":"1294:180:22"},{"body":{"nodeType":"YulBlock","src":"1580:102:22","statements":[{"nodeType":"YulAssignment","src":"1590:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1602:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1613:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1598:3:22"},"nodeType":"YulFunctionCall","src":"1598:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1590:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1632:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1647:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1663:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1668:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1659:3:22"},"nodeType":"YulFunctionCall","src":"1659:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1672:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1655:3:22"},"nodeType":"YulFunctionCall","src":"1655:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1643:3:22"},"nodeType":"YulFunctionCall","src":"1643:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:22"},"nodeType":"YulFunctionCall","src":"1625:51:22"},"nodeType":"YulExpressionStatement","src":"1625:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1549:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1560:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1571:4:22","type":""}],"src":"1479:203:22"},{"body":{"nodeType":"YulBlock","src":"1736:124:22","statements":[{"nodeType":"YulAssignment","src":"1746:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1768:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1755:12:22"},"nodeType":"YulFunctionCall","src":"1755:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1838:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1847:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1850:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1840:6:22"},"nodeType":"YulFunctionCall","src":"1840:12:22"},"nodeType":"YulExpressionStatement","src":"1840:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1797:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1808:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1823:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1828:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1819:3:22"},"nodeType":"YulFunctionCall","src":"1819:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1832:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1815:3:22"},"nodeType":"YulFunctionCall","src":"1815:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1804:3:22"},"nodeType":"YulFunctionCall","src":"1804:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1794:2:22"},"nodeType":"YulFunctionCall","src":"1794:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1787:6:22"},"nodeType":"YulFunctionCall","src":"1787:50:22"},"nodeType":"YulIf","src":"1784:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1715:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1726:5:22","type":""}],"src":"1687:173:22"},{"body":{"nodeType":"YulBlock","src":"1952:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"1998:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2007:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2010:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2000:6:22"},"nodeType":"YulFunctionCall","src":"2000:12:22"},"nodeType":"YulExpressionStatement","src":"2000:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1973:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1982:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1969:3:22"},"nodeType":"YulFunctionCall","src":"1969:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1994:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1965:3:22"},"nodeType":"YulFunctionCall","src":"1965:32:22"},"nodeType":"YulIf","src":"1962:52:22"},{"nodeType":"YulAssignment","src":"2023:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2052:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2033:18:22"},"nodeType":"YulFunctionCall","src":"2033:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2023:6:22"}]},{"nodeType":"YulAssignment","src":"2071:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2098:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2109:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2094:3:22"},"nodeType":"YulFunctionCall","src":"2094:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2081:12:22"},"nodeType":"YulFunctionCall","src":"2081:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2071:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1941:6:22","type":""}],"src":"1865:254:22"},{"body":{"nodeType":"YulBlock","src":"2225:76:22","statements":[{"nodeType":"YulAssignment","src":"2235:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2247:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2258:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2243:3:22"},"nodeType":"YulFunctionCall","src":"2243:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2235:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2277:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2288:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2270:6:22"},"nodeType":"YulFunctionCall","src":"2270:25:22"},"nodeType":"YulExpressionStatement","src":"2270:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2194:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2205:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2216:4:22","type":""}],"src":"2124:177:22"},{"body":{"nodeType":"YulBlock","src":"2410:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"2456:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2465:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2468:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2458:6:22"},"nodeType":"YulFunctionCall","src":"2458:12:22"},"nodeType":"YulExpressionStatement","src":"2458:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2431:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2440:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2427:3:22"},"nodeType":"YulFunctionCall","src":"2427:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2452:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2423:3:22"},"nodeType":"YulFunctionCall","src":"2423:32:22"},"nodeType":"YulIf","src":"2420:52:22"},{"nodeType":"YulAssignment","src":"2481:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2510:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2491:18:22"},"nodeType":"YulFunctionCall","src":"2491:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2481:6:22"}]},{"nodeType":"YulAssignment","src":"2529:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2562:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2573:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2558:3:22"},"nodeType":"YulFunctionCall","src":"2558:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2539:18:22"},"nodeType":"YulFunctionCall","src":"2539:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2529:6:22"}]},{"nodeType":"YulAssignment","src":"2586:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2613:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2624:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2609:3:22"},"nodeType":"YulFunctionCall","src":"2609:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2596:12:22"},"nodeType":"YulFunctionCall","src":"2596:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2586:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2360:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2371:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2383:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2391:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2399:6:22","type":""}],"src":"2306:328:22"},{"body":{"nodeType":"YulBlock","src":"2709:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2755:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2764:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2767:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2757:6:22"},"nodeType":"YulFunctionCall","src":"2757:12:22"},"nodeType":"YulExpressionStatement","src":"2757:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2730:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2739:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2726:3:22"},"nodeType":"YulFunctionCall","src":"2726:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2751:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2722:3:22"},"nodeType":"YulFunctionCall","src":"2722:32:22"},"nodeType":"YulIf","src":"2719:52:22"},{"nodeType":"YulAssignment","src":"2780:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2809:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2790:18:22"},"nodeType":"YulFunctionCall","src":"2790:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2780:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2675:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2686:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2698:6:22","type":""}],"src":"2639:186:22"},{"body":{"nodeType":"YulBlock","src":"2914:263:22","statements":[{"body":{"nodeType":"YulBlock","src":"2960:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2969:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2972:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2962:6:22"},"nodeType":"YulFunctionCall","src":"2962:12:22"},"nodeType":"YulExpressionStatement","src":"2962:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2935:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2944:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2931:3:22"},"nodeType":"YulFunctionCall","src":"2931:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2956:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2927:3:22"},"nodeType":"YulFunctionCall","src":"2927:32:22"},"nodeType":"YulIf","src":"2924:52:22"},{"nodeType":"YulAssignment","src":"2985:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3014:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2995:18:22"},"nodeType":"YulFunctionCall","src":"2995:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2985:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3033:45:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3074:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:22"},"nodeType":"YulFunctionCall","src":"3059:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3046:12:22"},"nodeType":"YulFunctionCall","src":"3046:32:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3037:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3131:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3140:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3143:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3133:6:22"},"nodeType":"YulFunctionCall","src":"3133:12:22"},"nodeType":"YulExpressionStatement","src":"3133:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3100:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3121:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3114:6:22"},"nodeType":"YulFunctionCall","src":"3114:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3107:6:22"},"nodeType":"YulFunctionCall","src":"3107:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3097:2:22"},"nodeType":"YulFunctionCall","src":"3097:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3090:6:22"},"nodeType":"YulFunctionCall","src":"3090:40:22"},"nodeType":"YulIf","src":"3087:60:22"},{"nodeType":"YulAssignment","src":"3156:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"3166:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3156:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2872:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2883:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2895:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2903:6:22","type":""}],"src":"2830:347:22"},{"body":{"nodeType":"YulBlock","src":"3214:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3231:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3238:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3243:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3234:3:22"},"nodeType":"YulFunctionCall","src":"3234:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3224:6:22"},"nodeType":"YulFunctionCall","src":"3224:31:22"},"nodeType":"YulExpressionStatement","src":"3224:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3271:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3274:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3264:6:22"},"nodeType":"YulFunctionCall","src":"3264:15:22"},"nodeType":"YulExpressionStatement","src":"3264:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3295:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3298:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3288:6:22"},"nodeType":"YulFunctionCall","src":"3288:15:22"},"nodeType":"YulExpressionStatement","src":"3288:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3182:127:22"},{"body":{"nodeType":"YulBlock","src":"3444:1008:22","statements":[{"body":{"nodeType":"YulBlock","src":"3491:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3500:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3503:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3493:6:22"},"nodeType":"YulFunctionCall","src":"3493:12:22"},"nodeType":"YulExpressionStatement","src":"3493:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3465:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3474:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3461:3:22"},"nodeType":"YulFunctionCall","src":"3461:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3486:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3457:3:22"},"nodeType":"YulFunctionCall","src":"3457:33:22"},"nodeType":"YulIf","src":"3454:53:22"},{"nodeType":"YulAssignment","src":"3516:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3545:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3526:18:22"},"nodeType":"YulFunctionCall","src":"3526:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3516:6:22"}]},{"nodeType":"YulAssignment","src":"3564:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3597:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3608:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3593:3:22"},"nodeType":"YulFunctionCall","src":"3593:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3574:18:22"},"nodeType":"YulFunctionCall","src":"3574:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3564:6:22"}]},{"nodeType":"YulAssignment","src":"3621:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3648:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3659:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3644:3:22"},"nodeType":"YulFunctionCall","src":"3644:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3631:12:22"},"nodeType":"YulFunctionCall","src":"3631:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3621:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3672:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3703:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3714:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3699:3:22"},"nodeType":"YulFunctionCall","src":"3699:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3686:12:22"},"nodeType":"YulFunctionCall","src":"3686:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3676:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3727:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3737:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3731:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3782:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3791:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3794:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3784:6:22"},"nodeType":"YulFunctionCall","src":"3784:12:22"},"nodeType":"YulExpressionStatement","src":"3784:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3770:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3778:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3767:2:22"},"nodeType":"YulFunctionCall","src":"3767:14:22"},"nodeType":"YulIf","src":"3764:34:22"},{"nodeType":"YulVariableDeclaration","src":"3807:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3821:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"3832:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3817:3:22"},"nodeType":"YulFunctionCall","src":"3817:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3811:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3887:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3896:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3899:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3889:6:22"},"nodeType":"YulFunctionCall","src":"3889:12:22"},"nodeType":"YulExpressionStatement","src":"3889:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3866:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3870:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3862:3:22"},"nodeType":"YulFunctionCall","src":"3862:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3877:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3858:3:22"},"nodeType":"YulFunctionCall","src":"3858:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3851:6:22"},"nodeType":"YulFunctionCall","src":"3851:35:22"},"nodeType":"YulIf","src":"3848:55:22"},{"nodeType":"YulVariableDeclaration","src":"3912:26:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3935:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3922:12:22"},"nodeType":"YulFunctionCall","src":"3922:16:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3916:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3961:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3963:16:22"},"nodeType":"YulFunctionCall","src":"3963:18:22"},"nodeType":"YulExpressionStatement","src":"3963:18:22"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3953:2:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3957:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3950:2:22"},"nodeType":"YulFunctionCall","src":"3950:10:22"},"nodeType":"YulIf","src":"3947:36:22"},{"nodeType":"YulVariableDeclaration","src":"3992:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4006:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4002:3:22"},"nodeType":"YulFunctionCall","src":"4002:7:22"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3996:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4018:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4038:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4032:5:22"},"nodeType":"YulFunctionCall","src":"4032:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4022:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4050:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4072:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4096:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4100:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4092:3:22"},"nodeType":"YulFunctionCall","src":"4092:13:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4107:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4088:3:22"},"nodeType":"YulFunctionCall","src":"4088:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"4112:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4084:3:22"},"nodeType":"YulFunctionCall","src":"4084:31:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4117:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4080:3:22"},"nodeType":"YulFunctionCall","src":"4080:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4068:3:22"},"nodeType":"YulFunctionCall","src":"4068:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4054:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4180:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4182:16:22"},"nodeType":"YulFunctionCall","src":"4182:18:22"},"nodeType":"YulExpressionStatement","src":"4182:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4139:10:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4151:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4136:2:22"},"nodeType":"YulFunctionCall","src":"4136:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4159:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4171:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4156:2:22"},"nodeType":"YulFunctionCall","src":"4156:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4133:2:22"},"nodeType":"YulFunctionCall","src":"4133:46:22"},"nodeType":"YulIf","src":"4130:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4218:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4222:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4211:6:22"},"nodeType":"YulFunctionCall","src":"4211:22:22"},"nodeType":"YulExpressionStatement","src":"4211:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4249:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4257:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4242:6:22"},"nodeType":"YulFunctionCall","src":"4242:18:22"},"nodeType":"YulExpressionStatement","src":"4242:18:22"},{"body":{"nodeType":"YulBlock","src":"4306:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4315:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4318:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4308:6:22"},"nodeType":"YulFunctionCall","src":"4308:12:22"},"nodeType":"YulExpressionStatement","src":"4308:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4283:2:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4287:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4279:3:22"},"nodeType":"YulFunctionCall","src":"4279:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"4292:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4275:3:22"},"nodeType":"YulFunctionCall","src":"4275:20:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4297:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4272:2:22"},"nodeType":"YulFunctionCall","src":"4272:33:22"},"nodeType":"YulIf","src":"4269:53:22"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4348:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4356:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4344:3:22"},"nodeType":"YulFunctionCall","src":"4344:15:22"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4365:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4369:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4361:3:22"},"nodeType":"YulFunctionCall","src":"4361:11:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4374:2:22"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4331:12:22"},"nodeType":"YulFunctionCall","src":"4331:46:22"},"nodeType":"YulExpressionStatement","src":"4331:46:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4401:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4409:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4397:3:22"},"nodeType":"YulFunctionCall","src":"4397:15:22"},{"kind":"number","nodeType":"YulLiteral","src":"4414:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:22"},"nodeType":"YulFunctionCall","src":"4393:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"4419:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4386:6:22"},"nodeType":"YulFunctionCall","src":"4386:35:22"},"nodeType":"YulExpressionStatement","src":"4386:35:22"},{"nodeType":"YulAssignment","src":"4430:16:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4440:6:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4430:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3386:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3397:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3409:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3417:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3425:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3433:6:22","type":""}],"src":"3314:1138:22"},{"body":{"nodeType":"YulBlock","src":"4544:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"4590:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4599:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4602:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4592:6:22"},"nodeType":"YulFunctionCall","src":"4592:12:22"},"nodeType":"YulExpressionStatement","src":"4592:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4565:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4574:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4561:3:22"},"nodeType":"YulFunctionCall","src":"4561:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4586:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4557:3:22"},"nodeType":"YulFunctionCall","src":"4557:32:22"},"nodeType":"YulIf","src":"4554:52:22"},{"nodeType":"YulAssignment","src":"4615:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4644:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4625:18:22"},"nodeType":"YulFunctionCall","src":"4625:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4615:6:22"}]},{"nodeType":"YulAssignment","src":"4663:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4696:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4707:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4692:3:22"},"nodeType":"YulFunctionCall","src":"4692:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4673:18:22"},"nodeType":"YulFunctionCall","src":"4673:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4663:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4502:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4513:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4525:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4533:6:22","type":""}],"src":"4457:260:22"},{"body":{"nodeType":"YulBlock","src":"4777:325:22","statements":[{"nodeType":"YulAssignment","src":"4787:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4801:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4804:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4797:3:22"},"nodeType":"YulFunctionCall","src":"4797:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4787:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4818:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4848:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4854:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4844:3:22"},"nodeType":"YulFunctionCall","src":"4844:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4822:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4895:31:22","statements":[{"nodeType":"YulAssignment","src":"4897:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4911:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4919:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4907:3:22"},"nodeType":"YulFunctionCall","src":"4907:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4897:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4875:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4868:6:22"},"nodeType":"YulFunctionCall","src":"4868:26:22"},"nodeType":"YulIf","src":"4865:61:22"},{"body":{"nodeType":"YulBlock","src":"4985:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5006:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5013:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5018:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5009:3:22"},"nodeType":"YulFunctionCall","src":"5009:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4999:6:22"},"nodeType":"YulFunctionCall","src":"4999:31:22"},"nodeType":"YulExpressionStatement","src":"4999:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5050:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5053:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5043:6:22"},"nodeType":"YulFunctionCall","src":"5043:15:22"},"nodeType":"YulExpressionStatement","src":"5043:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5078:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5081:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5071:6:22"},"nodeType":"YulFunctionCall","src":"5071:15:22"},"nodeType":"YulExpressionStatement","src":"5071:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4941:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4964:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4972:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4961:2:22"},"nodeType":"YulFunctionCall","src":"4961:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4938:2:22"},"nodeType":"YulFunctionCall","src":"4938:38:22"},"nodeType":"YulIf","src":"4935:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4757:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4766:6:22","type":""}],"src":"4722:380:22"},{"body":{"nodeType":"YulBlock","src":"5281:223:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5298:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5309:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5291:6:22"},"nodeType":"YulFunctionCall","src":"5291:21:22"},"nodeType":"YulExpressionStatement","src":"5291:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5332:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5343:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5328:3:22"},"nodeType":"YulFunctionCall","src":"5328:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5348:2:22","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5321:6:22"},"nodeType":"YulFunctionCall","src":"5321:30:22"},"nodeType":"YulExpressionStatement","src":"5321:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5371:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5382:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5367:3:22"},"nodeType":"YulFunctionCall","src":"5367:18:22"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5387:34:22","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5360:6:22"},"nodeType":"YulFunctionCall","src":"5360:62:22"},"nodeType":"YulExpressionStatement","src":"5360:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5442:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5453:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5438:3:22"},"nodeType":"YulFunctionCall","src":"5438:18:22"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5458:3:22","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5431:6:22"},"nodeType":"YulFunctionCall","src":"5431:31:22"},"nodeType":"YulExpressionStatement","src":"5431:31:22"},{"nodeType":"YulAssignment","src":"5471:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5483:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5494:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5479:3:22"},"nodeType":"YulFunctionCall","src":"5479:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5471:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5258:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5272:4:22","type":""}],"src":"5107:397:22"},{"body":{"nodeType":"YulBlock","src":"5683:252:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5700:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5711:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5693:6:22"},"nodeType":"YulFunctionCall","src":"5693:21:22"},"nodeType":"YulExpressionStatement","src":"5693:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5734:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5745:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5730:3:22"},"nodeType":"YulFunctionCall","src":"5730:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5750:2:22","type":"","value":"62"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5723:6:22"},"nodeType":"YulFunctionCall","src":"5723:30:22"},"nodeType":"YulExpressionStatement","src":"5723:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5773:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5784:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5769:3:22"},"nodeType":"YulFunctionCall","src":"5769:18:22"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5789:34:22","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5762:6:22"},"nodeType":"YulFunctionCall","src":"5762:62:22"},"nodeType":"YulExpressionStatement","src":"5762:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5844:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5855:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5840:3:22"},"nodeType":"YulFunctionCall","src":"5840:18:22"},{"hexValue":"6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5860:32:22","type":"","value":"ken owner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5833:6:22"},"nodeType":"YulFunctionCall","src":"5833:60:22"},"nodeType":"YulExpressionStatement","src":"5833:60:22"},{"nodeType":"YulAssignment","src":"5902:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5914:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5925:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5910:3:22"},"nodeType":"YulFunctionCall","src":"5910:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5902:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5660:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5674:4:22","type":""}],"src":"5509:426:22"},{"body":{"nodeType":"YulBlock","src":"6114:236:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6131:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6142:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6124:6:22"},"nodeType":"YulFunctionCall","src":"6124:21:22"},"nodeType":"YulExpressionStatement","src":"6124:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6165:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6176:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6161:3:22"},"nodeType":"YulFunctionCall","src":"6161:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6181:2:22","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6154:6:22"},"nodeType":"YulFunctionCall","src":"6154:30:22"},"nodeType":"YulExpressionStatement","src":"6154:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6204:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6215:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6200:3:22"},"nodeType":"YulFunctionCall","src":"6200:18:22"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6220:34:22","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6193:6:22"},"nodeType":"YulFunctionCall","src":"6193:62:22"},"nodeType":"YulExpressionStatement","src":"6193:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6275:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6286:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6271:3:22"},"nodeType":"YulFunctionCall","src":"6271:18:22"},{"hexValue":"72206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6291:16:22","type":"","value":"r nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6264:6:22"},"nodeType":"YulFunctionCall","src":"6264:44:22"},"nodeType":"YulExpressionStatement","src":"6264:44:22"},{"nodeType":"YulAssignment","src":"6317:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6329:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6340:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:22"},"nodeType":"YulFunctionCall","src":"6325:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6317:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6091:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6105:4:22","type":""}],"src":"5940:410:22"},{"body":{"nodeType":"YulBlock","src":"6529:233:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6546:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6557:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6539:6:22"},"nodeType":"YulFunctionCall","src":"6539:21:22"},"nodeType":"YulExpressionStatement","src":"6539:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6580:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6591:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6576:3:22"},"nodeType":"YulFunctionCall","src":"6576:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6596:2:22","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6569:6:22"},"nodeType":"YulFunctionCall","src":"6569:30:22"},"nodeType":"YulExpressionStatement","src":"6569:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6619:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6630:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6615:3:22"},"nodeType":"YulFunctionCall","src":"6615:18:22"},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f75","kind":"string","nodeType":"YulLiteral","src":"6635:34:22","type":"","value":"ERC721Enumerable: owner index ou"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6608:6:22"},"nodeType":"YulFunctionCall","src":"6608:62:22"},"nodeType":"YulExpressionStatement","src":"6608:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6690:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6701:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6686:3:22"},"nodeType":"YulFunctionCall","src":"6686:18:22"},{"hexValue":"74206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"6706:13:22","type":"","value":"t of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6679:6:22"},"nodeType":"YulFunctionCall","src":"6679:41:22"},"nodeType":"YulExpressionStatement","src":"6679:41:22"},{"nodeType":"YulAssignment","src":"6729:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6741:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6752:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6737:3:22"},"nodeType":"YulFunctionCall","src":"6737:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6729:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6506:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6520:4:22","type":""}],"src":"6355:407:22"},{"body":{"nodeType":"YulBlock","src":"6799:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6816:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6823:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6828:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6819:3:22"},"nodeType":"YulFunctionCall","src":"6819:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6809:6:22"},"nodeType":"YulFunctionCall","src":"6809:31:22"},"nodeType":"YulExpressionStatement","src":"6809:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6856:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6859:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6849:6:22"},"nodeType":"YulFunctionCall","src":"6849:15:22"},"nodeType":"YulExpressionStatement","src":"6849:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6880:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6883:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6873:6:22"},"nodeType":"YulFunctionCall","src":"6873:15:22"},"nodeType":"YulExpressionStatement","src":"6873:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6767:127:22"},{"body":{"nodeType":"YulBlock","src":"6947:80:22","statements":[{"body":{"nodeType":"YulBlock","src":"6974:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6976:16:22"},"nodeType":"YulFunctionCall","src":"6976:18:22"},"nodeType":"YulExpressionStatement","src":"6976:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6963:1:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6970:1:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6966:3:22"},"nodeType":"YulFunctionCall","src":"6966:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6960:2:22"},"nodeType":"YulFunctionCall","src":"6960:13:22"},"nodeType":"YulIf","src":"6957:39:22"},{"nodeType":"YulAssignment","src":"7005:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7016:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"7019:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7012:3:22"},"nodeType":"YulFunctionCall","src":"7012:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7005:3:22"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6930:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"6933:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6939:3:22","type":""}],"src":"6899:128:22"},{"body":{"nodeType":"YulBlock","src":"7081:76:22","statements":[{"body":{"nodeType":"YulBlock","src":"7103:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7105:16:22"},"nodeType":"YulFunctionCall","src":"7105:18:22"},"nodeType":"YulExpressionStatement","src":"7105:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7097:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"7100:1:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7094:2:22"},"nodeType":"YulFunctionCall","src":"7094:8:22"},"nodeType":"YulIf","src":"7091:34:22"},{"nodeType":"YulAssignment","src":"7134:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7146:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"7149:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7142:3:22"},"nodeType":"YulFunctionCall","src":"7142:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"7134:4:22"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7063:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"7066:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"7072:4:22","type":""}],"src":"7032:125:22"},{"body":{"nodeType":"YulBlock","src":"7209:88:22","statements":[{"body":{"nodeType":"YulBlock","src":"7240:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7242:16:22"},"nodeType":"YulFunctionCall","src":"7242:18:22"},"nodeType":"YulExpressionStatement","src":"7242:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7225:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7236:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7232:3:22"},"nodeType":"YulFunctionCall","src":"7232:6:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7222:2:22"},"nodeType":"YulFunctionCall","src":"7222:17:22"},"nodeType":"YulIf","src":"7219:43:22"},{"nodeType":"YulAssignment","src":"7271:20:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7282:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"7289:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7278:3:22"},"nodeType":"YulFunctionCall","src":"7278:13:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"7271:3:22"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7191:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"7201:3:22","type":""}],"src":"7162:135:22"},{"body":{"nodeType":"YulBlock","src":"7476:234:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7493:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7504:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7486:6:22"},"nodeType":"YulFunctionCall","src":"7486:21:22"},"nodeType":"YulExpressionStatement","src":"7486:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7527:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7538:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7523:3:22"},"nodeType":"YulFunctionCall","src":"7523:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7543:2:22","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7516:6:22"},"nodeType":"YulFunctionCall","src":"7516:30:22"},"nodeType":"YulExpressionStatement","src":"7516:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7566:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7577:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7562:3:22"},"nodeType":"YulFunctionCall","src":"7562:18:22"},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f","kind":"string","nodeType":"YulLiteral","src":"7582:34:22","type":"","value":"ERC721Enumerable: global index o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7555:6:22"},"nodeType":"YulFunctionCall","src":"7555:62:22"},"nodeType":"YulExpressionStatement","src":"7555:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7637:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7648:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7633:3:22"},"nodeType":"YulFunctionCall","src":"7633:18:22"},{"hexValue":"7574206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"7653:14:22","type":"","value":"ut of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7626:6:22"},"nodeType":"YulFunctionCall","src":"7626:42:22"},"nodeType":"YulExpressionStatement","src":"7626:42:22"},{"nodeType":"YulAssignment","src":"7677:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7689:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7700:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7685:3:22"},"nodeType":"YulFunctionCall","src":"7685:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7677:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7453:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7467:4:22","type":""}],"src":"7302:408:22"},{"body":{"nodeType":"YulBlock","src":"7889:231:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7906:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7917:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7899:6:22"},"nodeType":"YulFunctionCall","src":"7899:21:22"},"nodeType":"YulExpressionStatement","src":"7899:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7940:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7951:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7936:3:22"},"nodeType":"YulFunctionCall","src":"7936:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7956:2:22","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7929:6:22"},"nodeType":"YulFunctionCall","src":"7929:30:22"},"nodeType":"YulExpressionStatement","src":"7929:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7979:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7990:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7975:3:22"},"nodeType":"YulFunctionCall","src":"7975:18:22"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7995:34:22","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7968:6:22"},"nodeType":"YulFunctionCall","src":"7968:62:22"},"nodeType":"YulExpressionStatement","src":"7968:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8050:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8061:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8046:3:22"},"nodeType":"YulFunctionCall","src":"8046:18:22"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8066:11:22","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8039:6:22"},"nodeType":"YulFunctionCall","src":"8039:39:22"},"nodeType":"YulExpressionStatement","src":"8039:39:22"},{"nodeType":"YulAssignment","src":"8087:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8099:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8110:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8095:3:22"},"nodeType":"YulFunctionCall","src":"8095:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8087:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7866:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7880:4:22","type":""}],"src":"7715:405:22"},{"body":{"nodeType":"YulBlock","src":"8299:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8316:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8327:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8309:6:22"},"nodeType":"YulFunctionCall","src":"8309:21:22"},"nodeType":"YulExpressionStatement","src":"8309:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8350:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8361:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8346:3:22"},"nodeType":"YulFunctionCall","src":"8346:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8366:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8339:6:22"},"nodeType":"YulFunctionCall","src":"8339:30:22"},"nodeType":"YulExpressionStatement","src":"8339:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8389:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8400:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8385:3:22"},"nodeType":"YulFunctionCall","src":"8385:18:22"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"8405:34:22","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8378:6:22"},"nodeType":"YulFunctionCall","src":"8378:62:22"},"nodeType":"YulExpressionStatement","src":"8378:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8460:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8471:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8456:3:22"},"nodeType":"YulFunctionCall","src":"8456:18:22"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"8476:8:22","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8449:6:22"},"nodeType":"YulFunctionCall","src":"8449:36:22"},"nodeType":"YulExpressionStatement","src":"8449:36:22"},{"nodeType":"YulAssignment","src":"8494:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8506:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8517:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8502:3:22"},"nodeType":"YulFunctionCall","src":"8502:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8494:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8276:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8290:4:22","type":""}],"src":"8125:402:22"},{"body":{"nodeType":"YulBlock","src":"8706:174:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8723:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8734:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8716:6:22"},"nodeType":"YulFunctionCall","src":"8716:21:22"},"nodeType":"YulExpressionStatement","src":"8716:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8757:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8768:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8753:3:22"},"nodeType":"YulFunctionCall","src":"8753:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8773:2:22","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8746:6:22"},"nodeType":"YulFunctionCall","src":"8746:30:22"},"nodeType":"YulExpressionStatement","src":"8746:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8796:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8807:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8792:3:22"},"nodeType":"YulFunctionCall","src":"8792:18:22"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"8812:26:22","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8785:6:22"},"nodeType":"YulFunctionCall","src":"8785:54:22"},"nodeType":"YulExpressionStatement","src":"8785:54:22"},{"nodeType":"YulAssignment","src":"8848:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8860:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8871:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8856:3:22"},"nodeType":"YulFunctionCall","src":"8856:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8848:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8683:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8697:4:22","type":""}],"src":"8532:348:22"},{"body":{"nodeType":"YulBlock","src":"9059:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9076:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9087:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9069:6:22"},"nodeType":"YulFunctionCall","src":"9069:21:22"},"nodeType":"YulExpressionStatement","src":"9069:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9110:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9121:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9106:3:22"},"nodeType":"YulFunctionCall","src":"9106:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9126:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9099:6:22"},"nodeType":"YulFunctionCall","src":"9099:30:22"},"nodeType":"YulExpressionStatement","src":"9099:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9149:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9160:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9145:3:22"},"nodeType":"YulFunctionCall","src":"9145:18:22"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"9165:34:22","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9138:6:22"},"nodeType":"YulFunctionCall","src":"9138:62:22"},"nodeType":"YulExpressionStatement","src":"9138:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9220:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9231:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9216:3:22"},"nodeType":"YulFunctionCall","src":"9216:18:22"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"9236:7:22","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9209:6:22"},"nodeType":"YulFunctionCall","src":"9209:35:22"},"nodeType":"YulExpressionStatement","src":"9209:35:22"},{"nodeType":"YulAssignment","src":"9253:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9265:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9276:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9261:3:22"},"nodeType":"YulFunctionCall","src":"9261:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9253:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9036:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9050:4:22","type":""}],"src":"8885:401:22"},{"body":{"nodeType":"YulBlock","src":"9465:226:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9482:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9493:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9475:6:22"},"nodeType":"YulFunctionCall","src":"9475:21:22"},"nodeType":"YulExpressionStatement","src":"9475:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9516:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9527:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9512:3:22"},"nodeType":"YulFunctionCall","src":"9512:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9532:2:22","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9505:6:22"},"nodeType":"YulFunctionCall","src":"9505:30:22"},"nodeType":"YulExpressionStatement","src":"9505:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9555:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9566:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9551:3:22"},"nodeType":"YulFunctionCall","src":"9551:18:22"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"9571:34:22","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9544:6:22"},"nodeType":"YulFunctionCall","src":"9544:62:22"},"nodeType":"YulExpressionStatement","src":"9544:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9626:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9637:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9622:3:22"},"nodeType":"YulFunctionCall","src":"9622:18:22"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"9642:6:22","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9615:6:22"},"nodeType":"YulFunctionCall","src":"9615:34:22"},"nodeType":"YulExpressionStatement","src":"9615:34:22"},{"nodeType":"YulAssignment","src":"9658:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9670:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9681:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9666:3:22"},"nodeType":"YulFunctionCall","src":"9666:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9658:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9442:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9456:4:22","type":""}],"src":"9291:400:22"},{"body":{"nodeType":"YulBlock","src":"9870:182:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9887:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9898:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9880:6:22"},"nodeType":"YulFunctionCall","src":"9880:21:22"},"nodeType":"YulExpressionStatement","src":"9880:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9921:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9932:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9917:3:22"},"nodeType":"YulFunctionCall","src":"9917:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9937:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9910:6:22"},"nodeType":"YulFunctionCall","src":"9910:30:22"},"nodeType":"YulExpressionStatement","src":"9910:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9960:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9971:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9956:3:22"},"nodeType":"YulFunctionCall","src":"9956:18:22"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9976:34:22","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9949:6:22"},"nodeType":"YulFunctionCall","src":"9949:62:22"},"nodeType":"YulExpressionStatement","src":"9949:62:22"},{"nodeType":"YulAssignment","src":"10020:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10032:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10043:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10028:3:22"},"nodeType":"YulFunctionCall","src":"10028:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10020:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9847:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9861:4:22","type":""}],"src":"9696:356:22"},{"body":{"nodeType":"YulBlock","src":"10231:175:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10248:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10259:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10241:6:22"},"nodeType":"YulFunctionCall","src":"10241:21:22"},"nodeType":"YulExpressionStatement","src":"10241:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10282:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10293:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10278:3:22"},"nodeType":"YulFunctionCall","src":"10278:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"10298:2:22","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10271:6:22"},"nodeType":"YulFunctionCall","src":"10271:30:22"},"nodeType":"YulExpressionStatement","src":"10271:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10321:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10332:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10317:3:22"},"nodeType":"YulFunctionCall","src":"10317:18:22"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"10337:27:22","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10310:6:22"},"nodeType":"YulFunctionCall","src":"10310:55:22"},"nodeType":"YulExpressionStatement","src":"10310:55:22"},{"nodeType":"YulAssignment","src":"10374:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10386:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10397:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10382:3:22"},"nodeType":"YulFunctionCall","src":"10382:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10374:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10208:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10222:4:22","type":""}],"src":"10057:349:22"},{"body":{"nodeType":"YulBlock","src":"10585:240:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10602:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10613:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10595:6:22"},"nodeType":"YulFunctionCall","src":"10595:21:22"},"nodeType":"YulExpressionStatement","src":"10595:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10636:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10647:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10632:3:22"},"nodeType":"YulFunctionCall","src":"10632:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"10652:2:22","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10625:6:22"},"nodeType":"YulFunctionCall","src":"10625:30:22"},"nodeType":"YulExpressionStatement","src":"10625:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10675:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10686:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10671:3:22"},"nodeType":"YulFunctionCall","src":"10671:18:22"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"10691:34:22","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10664:6:22"},"nodeType":"YulFunctionCall","src":"10664:62:22"},"nodeType":"YulExpressionStatement","src":"10664:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10746:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10757:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10742:3:22"},"nodeType":"YulFunctionCall","src":"10742:18:22"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"10762:20:22","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10735:6:22"},"nodeType":"YulFunctionCall","src":"10735:48:22"},"nodeType":"YulExpressionStatement","src":"10735:48:22"},{"nodeType":"YulAssignment","src":"10792:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10804:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10815:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10800:3:22"},"nodeType":"YulFunctionCall","src":"10800:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10792:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10562:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10576:4:22","type":""}],"src":"10411:414:22"},{"body":{"nodeType":"YulBlock","src":"11033:286:22","statements":[{"nodeType":"YulVariableDeclaration","src":"11043:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11061:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11066:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11057:3:22"},"nodeType":"YulFunctionCall","src":"11057:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"11070:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11053:3:22"},"nodeType":"YulFunctionCall","src":"11053:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11047:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11088:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11103:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"11111:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11099:3:22"},"nodeType":"YulFunctionCall","src":"11099:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11081:6:22"},"nodeType":"YulFunctionCall","src":"11081:34:22"},"nodeType":"YulExpressionStatement","src":"11081:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11135:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11146:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11131:3:22"},"nodeType":"YulFunctionCall","src":"11131:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11155:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"11163:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11151:3:22"},"nodeType":"YulFunctionCall","src":"11151:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11124:6:22"},"nodeType":"YulFunctionCall","src":"11124:43:22"},"nodeType":"YulExpressionStatement","src":"11124:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11187:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11198:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11183:3:22"},"nodeType":"YulFunctionCall","src":"11183:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"11203:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11176:6:22"},"nodeType":"YulFunctionCall","src":"11176:34:22"},"nodeType":"YulExpressionStatement","src":"11176:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11230:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11241:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11226:3:22"},"nodeType":"YulFunctionCall","src":"11226:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"11246:3:22","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11219:6:22"},"nodeType":"YulFunctionCall","src":"11219:31:22"},"nodeType":"YulExpressionStatement","src":"11219:31:22"},{"nodeType":"YulAssignment","src":"11259:54:22","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11285:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11297:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11308:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11293:3:22"},"nodeType":"YulFunctionCall","src":"11293:19:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11267:17:22"},"nodeType":"YulFunctionCall","src":"11267:46:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11259:4:22"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10978:9:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10989:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10997:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11005:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11013:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11024:4:22","type":""}],"src":"10830:489:22"},{"body":{"nodeType":"YulBlock","src":"11404:169:22","statements":[{"body":{"nodeType":"YulBlock","src":"11450:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11459:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11462:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11452:6:22"},"nodeType":"YulFunctionCall","src":"11452:12:22"},"nodeType":"YulExpressionStatement","src":"11452:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11425:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"11434:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11421:3:22"},"nodeType":"YulFunctionCall","src":"11421:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"11446:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11417:3:22"},"nodeType":"YulFunctionCall","src":"11417:32:22"},"nodeType":"YulIf","src":"11414:52:22"},{"nodeType":"YulVariableDeclaration","src":"11475:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11494:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11488:5:22"},"nodeType":"YulFunctionCall","src":"11488:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11479:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11537:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"11513:23:22"},"nodeType":"YulFunctionCall","src":"11513:30:22"},"nodeType":"YulExpressionStatement","src":"11513:30:22"},{"nodeType":"YulAssignment","src":"11552:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"11562:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11552:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11370:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11381:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11393:6:22","type":""}],"src":"11324:249:22"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), 0)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 62)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721Enumerable: owner index ou\")\n        mstore(add(headStart, 96), \"t of bounds\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721Enumerable: global index o\")\n        mstore(add(headStart, 96), \"ut of bounds\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061012c5760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb4651461025b578063b88d4fde1461026e578063c87b56dd14610281578063e985e9c514610294578063f2fde38b146102d057600080fd5b80636352211e1461021457806370a0823114610227578063715018a61461023a5780638da5cb5b1461024257806395d89b411461025357600080fd5b806323b872dd116100f457806323b872dd146101c05780632f745c59146101d35780633cd29ac8146101e657806342842e0e146101ee5780634f6ccce71461020157600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046110b4565b6102e3565b60405190151581526020015b60405180910390f35b61016161030e565b6040516101509190611125565b61018161017c366004611138565b6103a0565b6040516001600160a01b039091168152602001610150565b6101ac6101a736600461116d565b6103c7565b005b600a545b604051908152602001610150565b6101ac6101ce366004611197565b6104e1565b6101b26101e136600461116d565b610512565b6101ac610639565b6101ac6101fc366004611197565b61064b565b6101b261020f366004611138565b610666565b610181610222366004611138565b6106d9565b6101b26102353660046111d3565b61071e565b6101ac6107a4565b6000546001600160a01b0316610181565b6101616107b6565b6101ac6102693660046111ee565b6107c5565b6101ac61027c366004611240565b6107d4565b61016161028f366004611138565b61080c565b6101446102a236600461131c565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6101ac6102de3660046111d3565b61081f565b60006001600160e01b0319821663780e9d6360e01b1480610308575061030882610898565b92915050565b60606001805461031d9061134f565b80601f01602080910402602001604051908101604052809291908181526020018280546103499061134f565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ab826108e8565b506000908152600560205260409020546001600160a01b031690565b60006103d2826106d9565b9050806001600160a01b0316836001600160a01b0316036104445760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610460575061046081336102a2565b6104d25760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161043b565b6104dc8383610938565b505050565b6104eb33826109a6565b6105075760405162461bcd60e51b815260040161043b90611389565b6104dc838383610a25565b600061051d8361071e565b821061057f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161043b565b6009546001600160a01b03908116908416036106105760006105a0600a5490565b9050600060015b8281101561060c576009546001600160a01b03166105c4826106d9565b6001600160a01b0316036105fa576105dd6001836113ed565b9150846105eb600184611405565b036105fa579250610308915050565b806106048161141c565b9150506105a7565b5050505b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610641610bcc565b610649610c26565b565b6104dc838383604051806020016040528060008152506107d4565b6000600a5482106106ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161043b565b6103088260016113ed565b6000600a548211156106ee5761030882610c90565b6000828152600360205260409020546001600160a01b03168061030857506009546001600160a01b031692915050565b60006001600160a01b0382166107885760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161043b565b506001600160a01b031660009081526004602052604090205490565b6107ac610bcc565b6106496000610cf0565b60606002805461031d9061134f565b6107d0338383610d40565b5050565b6107de33836109a6565b6107fa5760405162461bcd60e51b815260040161043b90611389565b61080684848484610e0e565b50505050565b6060610817826108e8565b610308610e41565b610827610bcc565b6001600160a01b03811661088c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043b565b61089581610cf0565b50565b60006001600160e01b031982166380ac58cd60e01b14806108c957506001600160e01b03198216635b5e139f60e01b145b8061030857506301ffc9a760e01b6001600160e01b0319831614610308565b6108f181610e50565b6108955760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161043b565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061096d826106d9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109b2836106d9565b9050806001600160a01b0316846001600160a01b031614806109f957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610a1d5750836001600160a01b0316610a12846103a0565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a38826106d9565b6001600160a01b031614610a9c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161043b565b6001600160a01b038216610afe5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161043b565b610b09838383610e8f565b610b14600082610938565b6001600160a01b0383166000908152600460205260408120805460019290610b3d908490611405565b90915550506001600160a01b0382166000908152600460205260408120805460019290610b6b9084906113ed565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b031633146106495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043b565b600a54600980546001600160a01b0390811660009081526004602052604080822085905592549251929091169290916001917fdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d91610c8691815260200190565b60405180910390a4565b6000818152600360205260408120546001600160a01b0316806103085760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161043b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610da15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161043b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e19848484610a25565b610e2584848484610ebc565b6108065760405162461bcd60e51b815260040161043b90611435565b6060600b805461031d9061134f565b6000600a54821115610e7b576000828152600360205260409020546001600160a01b03161515610308565b600082118015610308575050600a54101590565b816001600160a01b0316836001600160a01b0316146104dc57610eb28382610fbd565b6104dc828261105a565b60006001600160a01b0384163b15610fb257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f00903390899088908890600401611487565b6020604051808303816000875af1925050508015610f3b575060408051601f3d908101601f19168201909252610f38918101906114c4565b60015b610f98573d808015610f69576040519150601f19603f3d011682016040523d82523d6000602084013e610f6e565b606091505b508051600003610f905760405162461bcd60e51b815260040161043b90611435565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a1d565b506001949350505050565b60006001610fca8461071e565b610fd49190611405565b600083815260086020526040902054909150808214611027576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60006110658361071e565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b6001600160e01b03198116811461089557600080fd5b6000602082840312156110c657600080fd5b81356110d18161109e565b9392505050565b6000815180845260005b818110156110fe576020818501810151868301820152016110e2565b81811115611110576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110d160208301846110d8565b60006020828403121561114a57600080fd5b5035919050565b80356001600160a01b038116811461116857600080fd5b919050565b6000806040838503121561118057600080fd5b61118983611151565b946020939093013593505050565b6000806000606084860312156111ac57600080fd5b6111b584611151565b92506111c360208501611151565b9150604084013590509250925092565b6000602082840312156111e557600080fd5b6110d182611151565b6000806040838503121561120157600080fd5b61120a83611151565b91506020830135801515811461121f57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561125657600080fd5b61125f85611151565b935061126d60208601611151565b925060408501359150606085013567ffffffffffffffff8082111561129157600080fd5b818701915087601f8301126112a557600080fd5b8135818111156112b7576112b761122a565b604051601f8201601f19908116603f011681019083821181831017156112df576112df61122a565b816040528281528a60208487010111156112f857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561132f57600080fd5b61133883611151565b915061134660208401611151565b90509250929050565b600181811c9082168061136357607f821691505b60208210810361138357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611400576114006113d7565b500190565b600082821015611417576114176113d7565b500390565b60006001820161142e5761142e6113d7565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906114ba908301846110d8565b9695505050505050565b6000602082840312156114d657600080fd5b81516110d18161109e56fea264697066735822122017f827a8c1d025bcc57d8e9f650c2eb969a77a0bd3192d2a907918594d41d78e64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x3CD29AC8 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x10B4 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1197 JUMP JUMPDEST PUSH2 0x4E1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x639 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1197 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x666 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x7A4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x181 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x7B6 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x1240 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x80C JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x131C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x308 JUMPI POP PUSH2 0x308 DUP3 PUSH2 0x898 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x349 SWAP1 PUSH2 0x134F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x396 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x396 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x379 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB DUP3 PUSH2 0x8E8 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2 DUP3 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x444 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x460 JUMPI POP PUSH2 0x460 DUP2 CALLER PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x4D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 PUSH2 0x938 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4EB CALLER DUP3 PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x507 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 DUP4 PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51D DUP4 PUSH2 0x71E JUMP JUMPDEST DUP3 LT PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x74206F6620626F756E6473 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x610 JUMPI PUSH1 0x0 PUSH2 0x5A0 PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x60C JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5C4 DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x5FA JUMPI PUSH2 0x5DD PUSH1 0x1 DUP4 PUSH2 0x13ED JUMP JUMPDEST SWAP2 POP DUP5 PUSH2 0x5EB PUSH1 0x1 DUP5 PUSH2 0x1405 JUMP JUMPDEST SUB PUSH2 0x5FA JUMPI SWAP3 POP PUSH2 0x308 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH2 0x604 DUP2 PUSH2 0x141C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5A7 JUMP JUMPDEST POP POP POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x641 PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x649 PUSH2 0xC26 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4DC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 LT PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x7574206F6620626F756E6473 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x308 DUP3 PUSH1 0x1 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 GT ISZERO PUSH2 0x6EE JUMPI PUSH2 0x308 DUP3 PUSH2 0xC90 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x308 JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7AC PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x649 PUSH1 0x0 PUSH2 0xCF0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH2 0x7D0 CALLER DUP4 DUP4 PUSH2 0xD40 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7DE CALLER DUP4 PUSH2 0x9A6 JUMP JUMPDEST PUSH2 0x7FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH2 0x806 DUP5 DUP5 DUP5 DUP5 PUSH2 0xE0E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x817 DUP3 PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x308 PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x827 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0x895 DUP2 PUSH2 0xCF0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8C9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x308 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x308 JUMP JUMPDEST PUSH2 0x8F1 DUP2 PUSH2 0xE50 JUMP JUMPDEST PUSH2 0x895 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x96D DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9B2 DUP4 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x9F9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA1D JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA12 DUP5 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA38 DUP3 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x43B JUMP JUMPDEST PUSH2 0xB09 DUP4 DUP4 DUP4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xB14 PUSH1 0x0 DUP3 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xB3D SWAP1 DUP5 SWAP1 PUSH2 0x1405 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xB6B SWAP1 DUP5 SWAP1 PUSH2 0x13ED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 SWAP1 SSTORE SWAP3 SLOAD SWAP3 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 PUSH1 0x1 SWAP2 PUSH32 0xDEAA91B6123D068F5821D0FB0678463D1A8A6079FE8AF5DE3CE5E896DCF9133D SWAP2 PUSH2 0xC86 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x308 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xDA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xE19 DUP5 DUP5 DUP5 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0xE25 DUP5 DUP5 DUP5 DUP5 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x806 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD DUP3 GT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x308 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x308 JUMPI POP POP PUSH1 0xA SLOAD LT ISZERO SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4DC JUMPI PUSH2 0xEB2 DUP4 DUP3 PUSH2 0xFBD JUMP JUMPDEST PUSH2 0x4DC DUP3 DUP3 PUSH2 0x105A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF00 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1487 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF3B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF38 SWAP2 DUP2 ADD SWAP1 PUSH2 0x14C4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF98 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xF90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43B SWAP1 PUSH2 0x1435 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA1D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xFCA DUP5 PUSH2 0x71E JUMP JUMPDEST PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x1405 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x1027 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1065 DUP4 PUSH2 0x71E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10D1 DUP2 PUSH2 0x109E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10FE JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x10E2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x10D1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x114A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B5 DUP5 PUSH2 0x1151 JUMP JUMPDEST SWAP3 POP PUSH2 0x11C3 PUSH1 0x20 DUP6 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D1 DUP3 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120A DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x121F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125F DUP6 PUSH2 0x1151 JUMP JUMPDEST SWAP4 POP PUSH2 0x126D PUSH1 0x20 DUP7 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x12B7 JUMPI PUSH2 0x12B7 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x12DF JUMPI PUSH2 0x12DF PUSH2 0x122A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x132F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1338 DUP4 PUSH2 0x1151 JUMP JUMPDEST SWAP2 POP PUSH2 0x1346 PUSH1 0x20 DUP5 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1363 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1383 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1400 JUMPI PUSH2 0x1400 PUSH2 0x13D7 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1417 JUMPI PUSH2 0x1417 PUSH2 0x13D7 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x142E JUMPI PUSH2 0x142E PUSH2 0x13D7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x14BA SWAP1 DUP4 ADD DUP5 PUSH2 0x10D8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10D1 DUP2 PUSH2 0x109E JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xF8 0x27 0xA8 0xC1 0xD0 0x25 0xBC 0xC5 PUSH30 0x8E9F650C2EB969A77A0BD3192D2A907918594D41D78E64736F6C63430008 0xD STOP CALLER ","sourceMap":"998:1546:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1680:216:17;;;;;;:::i;:::-;;:::i;:::-;;;565:14:22;;558:22;540:41;;528:2;513:18;1680:216:17;;;;;;;;3317:98:15;;;:::i;:::-;;;;;;;:::i;4775:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1643:32:22;;;1625:51;;1613:2;1598:18;4775:167:15;1479:203:22;4314:400:15;;;;;;:::i;:::-;;:::i;:::-;;2648:147:17;2780:10;;2648:147;;;2270:25:22;;;2258:2;2243:18;2648:147:17;2124:177:22;5452:327:15;;;;;;:::i;:::-;;:::i;2009:574:17:-;;;;;;:::i;:::-;;:::i;2223:59:14:-;;;:::i;5845:179:15:-;;;;;;:::i;:::-;;:::i;2861:265:17:-;;;;;;:::i;:::-;;:::i;3231:674::-;;;;;;:::i;:::-;;:::i;2776:204:15:-;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;:::i;1201:85::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;3479:102:15;;;:::i;5009:153::-;;;;;;:::i;:::-;;:::i;6090:315::-;;;;;;:::i;:::-;;:::i;2396:146:14:-;;;;;;:::i;:::-;;:::i;5228:162:15:-;;;;;;:::i;:::-;-1:-1:-1;;;;;5348:25:15;;;5325:4;5348:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5228:162;2074:198:0;;;;;;:::i;:::-;;:::i;1680:216:17:-;1782:4;-1:-1:-1;;;;;;1801:50:17;;-1:-1:-1;;;1801:50:17;;:90;;;1855:36;1879:11;1855:23;:36::i;:::-;1794:97;1680:216;-1:-1:-1;;1680:216:17:o;3317:98:15:-;3371:13;3403:5;3396:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3317:98;:::o;4775:167::-;4851:7;4870:23;4885:7;4870:14;:23::i;:::-;-1:-1:-1;4911:24:15;;;;:15;:24;;;;;;-1:-1:-1;;;;;4911:24:15;;4775:167::o;4314:400::-;4394:13;4410:16;4418:7;4410;:16::i;:::-;4394:32;;4450:5;-1:-1:-1;;;;;4444:11:15;:2;-1:-1:-1;;;;;4444:11:15;;4436:57;;;;-1:-1:-1;;;4436:57:15;;5309:2:22;4436:57:15;;;5291:21:22;5348:2;5328:18;;;5321:30;5387:34;5367:18;;;5360:62;-1:-1:-1;;;5438:18:22;;;5431:31;5479:19;;4436:57:15;;;;;;;;;719:10:6;-1:-1:-1;;;;;4525:21:15;;;;:62;;-1:-1:-1;4550:37:15;4567:5;719:10:6;5228:162:15;:::i;4550:37::-;4504:171;;;;-1:-1:-1;;;4504:171:15;;5711:2:22;4504:171:15;;;5693:21:22;5750:2;5730:18;;;5723:30;5789:34;5769:18;;;5762:62;5860:32;5840:18;;;5833:60;5910:19;;4504:171:15;5509:426:22;4504:171:15;4686:21;4695:2;4699:7;4686:8;:21::i;:::-;4384:330;4314:400;;:::o;5452:327::-;5641:41;719:10:6;5674:7:15;5641:18;:41::i;:::-;5633:100;;;;-1:-1:-1;;;5633:100:15;;;;;;;:::i;:::-;5744:28;5754:4;5760:2;5764:7;5744:9;:28::i;2009:574:17:-;2106:7;2137:23;2154:5;2137:16;:23::i;:::-;2129:5;:31;2121:87;;;;-1:-1:-1;;;2121:87:17;;6557:2:22;2121:87:17;;;6539:21:22;6596:2;6576:18;;;6569:30;6635:34;6615:18;;;6608:62;-1:-1:-1;;;6686:18:22;;;6679:41;6737:19;;2121:87:17;6355:407:22;2121:87:17;2235:16;;-1:-1:-1;;;;;2235:16:17;;;2218:34;;;;2214:326;;2262:14;2279:13;2780:10;;;2648:147;2279:13;2262:30;-1:-1:-1;2300:15:17;2344:1;2327:207;2351:6;2347:1;:10;2327:207;;;2400:16;;-1:-1:-1;;;;;2400:16:17;2378:10;2386:1;2378:7;:10::i;:::-;-1:-1:-1;;;;;2378:39:17;;2374:152;;2431:12;2442:1;2431:12;;:::i;:::-;;-1:-1:-1;2474:5:17;2459:11;2469:1;2431:12;2459:11;:::i;:::-;:20;2455:61;;2502:1;-1:-1:-1;2495:8:17;;-1:-1:-1;;2495:8:17;2455:61;2359:3;;;;:::i;:::-;;;;2327:207;;;;2254:286;;2214:326;-1:-1:-1;;;;;;2552:19:17;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;2009:574::o;2223:59:14:-;1094:13:0;:11;:13::i;:::-;2267:10:14::1;:8;:10::i;:::-;2223:59::o:0;5845:179:15:-;5978:39;5995:4;6001:2;6005:7;5978:39;;;;;;;;;;;;:16;:39::i;2861:265:17:-;2936:7;2967:10;;2959:5;:18;2951:75;;;;-1:-1:-1;;;2951:75:17;;7504:2:22;2951:75:17;;;7486:21:22;7543:2;7523:18;;;7516:30;7582:34;7562:18;;;7555:62;-1:-1:-1;;;7633:18:22;;;7626:42;7685:19;;2951:75:17;7302:408:22;2951:75:17;3112:9;:5;3120:1;3112:9;:::i;3231:674::-;3320:7;3426:10;;3416:7;:20;3412:70;;;3453:22;3467:7;3453:13;:22::i;3412:70::-;3777:14;3794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3794:16:17;;3816:66;;-1:-1:-1;3859:16:17;;-1:-1:-1;;;;;3859:16:17;3894:6;3231:674;-1:-1:-1;;3231:674:17:o;2776:204:15:-;2848:7;-1:-1:-1;;;;;2875:19:15;;2867:73;;;;-1:-1:-1;;;2867:73:15;;7917:2:22;2867:73:15;;;7899:21:22;7956:2;7936:18;;;7929:30;7995:34;7975:18;;;7968:62;-1:-1:-1;;;8046:18:22;;;8039:39;8095:19;;2867:73:15;7715:405:22;2867:73:15;-1:-1:-1;;;;;;2957:16:15;;;;;:9;:16;;;;;;;2776:204::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;3479:102:15:-:0;3535:13;3567:7;3560:14;;;;;:::i;5009:153::-;5103:52;719:10:6;5136:8:15;5146;5103:18;:52::i;:::-;5009:153;;:::o;6090:315::-;6258:41;719:10:6;6291:7:15;6258:18;:41::i;:::-;6250:100;;;;-1:-1:-1;;;6250:100:15;;;;;;;:::i;:::-;6360:38;6374:4;6380:2;6384:7;6393:4;6360:13;:38::i;:::-;6090:315;;;;:::o;2396:146:14:-;2469:13;2490:23;2505:7;2490:14;:23::i;:::-;2527:10;:8;:10::i;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;8327:2:22;2154:73:0::1;::::0;::::1;8309:21:22::0;8366:2;8346:18;;;8339:30;8405:34;8385:18;;;8378:62;-1:-1:-1;;;8456:18:22;;;8449:36;8502:19;;2154:73:0::1;8125:402:22::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;2417:300:15:-;2519:4;-1:-1:-1;;;;;;2554:40:15;;-1:-1:-1;;;2554:40:15;;:104;;-1:-1:-1;;;;;;;2610:48:15;;-1:-1:-1;;;2610:48:15;2554:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:8;;;2674:36:15;829:155:8;12550:133:15;12631:16;12639:7;12631;:16::i;:::-;12623:53;;;;-1:-1:-1;;;12623:53:15;;8734:2:22;12623:53:15;;;8716:21:22;8773:2;8753:18;;;8746:30;-1:-1:-1;;;8792:18:22;;;8785:54;8856:18;;12623:53:15;8532:348:22;11859:164:15;11933:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11933:29:15;-1:-1:-1;;;;;11933:29:15;;;;;;;;:24;;11986:16;11933:24;11986:7;:16::i;:::-;-1:-1:-1;;;;;11977:39:15;;;;;;;;;;;11859:164;;:::o;8157:254::-;8250:4;8266:13;8282:16;8290:7;8282;:16::i;:::-;8266:32;;8327:5;-1:-1:-1;;;;;8316:16:15;:7;-1:-1:-1;;;;;8316:16:15;;:52;;;-1:-1:-1;;;;;;5348:25:15;;;5325:4;5348:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;8336:32;8316:87;;;;8396:7;-1:-1:-1;;;;;8372:31:15;:20;8384:7;8372:11;:20::i;:::-;-1:-1:-1;;;;;8372:31:15;;8316:87;8308:96;8157:254;-1:-1:-1;;;;8157:254:15:o;11149:598::-;11296:4;-1:-1:-1;;;;;11276:24:15;:16;11284:7;11276;:16::i;:::-;-1:-1:-1;;;;;11276:24:15;;11268:74;;;;-1:-1:-1;;;11268:74:15;;9087:2:22;11268:74:15;;;9069:21:22;9126:2;9106:18;;;9099:30;9165:34;9145:18;;;9138:62;-1:-1:-1;;;9216:18:22;;;9209:35;9261:19;;11268:74:15;8885:401:22;11268:74:15;-1:-1:-1;;;;;11360:16:15;;11352:65;;;;-1:-1:-1;;;11352:65:15;;9493:2:22;11352:65:15;;;9475:21:22;9532:2;9512:18;;;9505:30;9571:34;9551:18;;;9544:62;-1:-1:-1;;;9622:18:22;;;9615:34;9666:19;;11352:65:15;9291:400:22;11352:65:15;11428:39;11449:4;11455:2;11459:7;11428:20;:39::i;:::-;11529:29;11546:1;11550:7;11529:8;:29::i;:::-;-1:-1:-1;;;;;11569:15:15;;;;;;:9;:15;;;;;:20;;11588:1;;11569:15;:20;;11588:1;;11569:20;:::i;:::-;;;;-1:-1:-1;;;;;;;11599:13:15;;;;;;:9;:13;;;;;:18;;11616:1;;11599:13;:18;;11616:1;;11599:18;:::i;:::-;;;;-1:-1:-1;;11627:16:15;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;11627:21:15;-1:-1:-1;;;;;11627:21:15;;;;;;;;;11664:27;;11627:16;;11664:27;;;;;;;4384:330;4314:400;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:6;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;9898:2:22;1414:68:0;;;9880:21:22;;;9917:18;;;9910:30;9976:34;9956:18;;;9949:62;10028:18;;1414:68:0;9696:356:22;1957:262:14;2085:10;;2065:16;;;-1:-1:-1;;;;;2065:16:14;;;2055:27;;;;:9;:27;;;;;;:40;;;2197:16;;2150:64;;2197:16;;;;;2055:27;;2065:16;;2150:64;;;;2270:25:22;;2258:2;2243:18;;2124:177;2150:64:14;;;;;;;;1957:262::o;3037:218:15:-;3109:7;3144:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3144:16:15;;3170:56;;;;-1:-1:-1;;;3170:56:15;;8734:2:22;3170:56:15;;;8716:21:22;8773:2;8753:18;;;8746:30;-1:-1:-1;;;8792:18:22;;;8785:54;8856:18;;3170:56:15;8532:348:22;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;12159:307:15:-;12309:8;-1:-1:-1;;;;;12300:17:15;:5;-1:-1:-1;;;;;12300:17:15;;12292:55;;;;-1:-1:-1;;;12292:55:15;;10259:2:22;12292:55:15;;;10241:21:22;10298:2;10278:18;;;10271:30;10337:27;10317:18;;;10310:55;10382:18;;12292:55:15;10057:349:22;12292:55:15;-1:-1:-1;;;;;12357:25:15;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;12357:46:15;;;;;;;;;;12418:41;;540::22;;;12418::15;;513:18:22;12418:41:15;;;;;;;12159:307;;;:::o;7266:305::-;7416:28;7426:4;7432:2;7436:7;7416:9;:28::i;:::-;7462:47;7485:4;7491:2;7495:7;7504:4;7462:22;:47::i;:::-;7454:110;;;;-1:-1:-1;;;7454:110:15;;;;;;;:::i;2286:106:14:-;2346:13;2374;2367:20;;;;;:::i;4014:373:17:-;4096:4;4199:10;;4189:7;:20;4185:70;;;7939:4:15;7962:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7962:16:15;:30;;4226:22:17;7874:125:15;4185:70:17;4355:1;4345:7;:11;:36;;;;-1:-1:-1;;4371:10:17;;-1:-1:-1;4360:21:17;;4014:373::o;4461:303::-;4646:2;-1:-1:-1;;;;;4638:10:17;:4;-1:-1:-1;;;;;4638:10:17;;4634:126;;4658:47;4691:4;4697:7;4658:32;:47::i;:::-;4713:40;4741:2;4745:7;4713:27;:40::i;13235:834:15:-;13384:4;-1:-1:-1;;;;;13404:14:15;;;:18;13400:663;;13442:71;;-1:-1:-1;;;13442:71:15;;-1:-1:-1;;;;;13442:36:15;;;;;:71;;719:10:6;;13493:4:15;;13499:7;;13508:4;;13442:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13442:71:15;;;;;;;;-1:-1:-1;;13442:71:15;;;;;;;;;;;;:::i;:::-;;;13438:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13680:6;:13;13697:1;13680:18;13676:321;;13722:60;;-1:-1:-1;;;13722:60:15;;;;;;;:::i;13676:321::-;13949:6;13943:13;13934:6;13930:2;13926:15;13919:38;13438:573;-1:-1:-1;;;;;;13563:51:15;-1:-1:-1;;;13563:51:15;;-1:-1:-1;13556:58:15;;13400:663;-1:-1:-1;14048:4:15;13235:834;;;;;;:::o;5134:910:17:-;5384:22;5434:1;5409:22;5426:4;5409:16;:22::i;:::-;:26;;;;:::i;:::-;5441:18;5462:26;;;:17;:26;;;;;;5384:51;;-1:-1:-1;5584:28:17;;;5580:301;;-1:-1:-1;;;;;5644:18:17;;5622:19;5644:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5687:30;;;;;;:44;;;5797:30;;:17;:30;;;;;:43;;;5580:301;-1:-1:-1;5966:26:17;;;;:17;:26;;;;;;;;5959:33;;;-1:-1:-1;;;;;6005:18:17;;;;;:12;:18;;;;;:34;;;;;;;5998:41;5134:910::o;4845:203::-;4925:14;4942:20;4959:2;4942:16;:20::i;:::-;-1:-1:-1;;;;;4968:16:17;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;5008:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;4845:203:17:o;14:131:22:-;-1:-1:-1;;;;;;88:32:22;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:22:o;592:472::-;634:3;672:5;666:12;699:6;694:3;687:19;724:1;734:162;748:6;745:1;742:13;734:162;;;810:4;866:13;;;862:22;;856:29;838:11;;;834:20;;827:59;763:12;734:162;;;914:6;911:1;908:13;905:87;;;980:1;973:4;964:6;959:3;955:16;951:27;944:38;905:87;-1:-1:-1;1046:2:22;1025:15;-1:-1:-1;;1021:29:22;1012:39;;;;1053:4;1008:50;;592:472;-1:-1:-1;;592:472:22:o;1069:220::-;1218:2;1207:9;1200:21;1181:4;1238:45;1279:2;1268:9;1264:18;1256:6;1238:45;:::i;1294:180::-;1353:6;1406:2;1394:9;1385:7;1381:23;1377:32;1374:52;;;1422:1;1419;1412:12;1374:52;-1:-1:-1;1445:23:22;;1294:180;-1:-1:-1;1294:180:22:o;1687:173::-;1755:20;;-1:-1:-1;;;;;1804:31:22;;1794:42;;1784:70;;1850:1;1847;1840:12;1784:70;1687:173;;;:::o;1865:254::-;1933:6;1941;1994:2;1982:9;1973:7;1969:23;1965:32;1962:52;;;2010:1;2007;2000:12;1962:52;2033:29;2052:9;2033:29;:::i;:::-;2023:39;2109:2;2094:18;;;;2081:32;;-1:-1:-1;;;1865:254:22:o;2306:328::-;2383:6;2391;2399;2452:2;2440:9;2431:7;2427:23;2423:32;2420:52;;;2468:1;2465;2458:12;2420:52;2491:29;2510:9;2491:29;:::i;:::-;2481:39;;2539:38;2573:2;2562:9;2558:18;2539:38;:::i;:::-;2529:48;;2624:2;2613:9;2609:18;2596:32;2586:42;;2306:328;;;;;:::o;2639:186::-;2698:6;2751:2;2739:9;2730:7;2726:23;2722:32;2719:52;;;2767:1;2764;2757:12;2719:52;2790:29;2809:9;2790:29;:::i;2830:347::-;2895:6;2903;2956:2;2944:9;2935:7;2931:23;2927:32;2924:52;;;2972:1;2969;2962:12;2924:52;2995:29;3014:9;2995:29;:::i;:::-;2985:39;;3074:2;3063:9;3059:18;3046:32;3121:5;3114:13;3107:21;3100:5;3097:32;3087:60;;3143:1;3140;3133:12;3087:60;3166:5;3156:15;;;2830:347;;;;;:::o;3182:127::-;3243:10;3238:3;3234:20;3231:1;3224:31;3274:4;3271:1;3264:15;3298:4;3295:1;3288:15;3314:1138;3409:6;3417;3425;3433;3486:3;3474:9;3465:7;3461:23;3457:33;3454:53;;;3503:1;3500;3493:12;3454:53;3526:29;3545:9;3526:29;:::i;:::-;3516:39;;3574:38;3608:2;3597:9;3593:18;3574:38;:::i;:::-;3564:48;;3659:2;3648:9;3644:18;3631:32;3621:42;;3714:2;3703:9;3699:18;3686:32;3737:18;3778:2;3770:6;3767:14;3764:34;;;3794:1;3791;3784:12;3764:34;3832:6;3821:9;3817:22;3807:32;;3877:7;3870:4;3866:2;3862:13;3858:27;3848:55;;3899:1;3896;3889:12;3848:55;3935:2;3922:16;3957:2;3953;3950:10;3947:36;;;3963:18;;:::i;:::-;4038:2;4032:9;4006:2;4092:13;;-1:-1:-1;;4088:22:22;;;4112:2;4084:31;4080:40;4068:53;;;4136:18;;;4156:22;;;4133:46;4130:72;;;4182:18;;:::i;:::-;4222:10;4218:2;4211:22;4257:2;4249:6;4242:18;4297:7;4292:2;4287;4283;4279:11;4275:20;4272:33;4269:53;;;4318:1;4315;4308:12;4269:53;4374:2;4369;4365;4361:11;4356:2;4348:6;4344:15;4331:46;4419:1;4414:2;4409;4401:6;4397:15;4393:24;4386:35;4440:6;4430:16;;;;;;;3314:1138;;;;;;;:::o;4457:260::-;4525:6;4533;4586:2;4574:9;4565:7;4561:23;4557:32;4554:52;;;4602:1;4599;4592:12;4554:52;4625:29;4644:9;4625:29;:::i;:::-;4615:39;;4673:38;4707:2;4696:9;4692:18;4673:38;:::i;:::-;4663:48;;4457:260;;;;;:::o;4722:380::-;4801:1;4797:12;;;;4844;;;4865:61;;4919:4;4911:6;4907:17;4897:27;;4865:61;4972:2;4964:6;4961:14;4941:18;4938:38;4935:161;;5018:10;5013:3;5009:20;5006:1;4999:31;5053:4;5050:1;5043:15;5081:4;5078:1;5071:15;4935:161;;4722:380;;;:::o;5940:410::-;6142:2;6124:21;;;6181:2;6161:18;;;6154:30;6220:34;6215:2;6200:18;;6193:62;-1:-1:-1;;;6286:2:22;6271:18;;6264:44;6340:3;6325:19;;5940:410::o;6767:127::-;6828:10;6823:3;6819:20;6816:1;6809:31;6859:4;6856:1;6849:15;6883:4;6880:1;6873:15;6899:128;6939:3;6970:1;6966:6;6963:1;6960:13;6957:39;;;6976:18;;:::i;:::-;-1:-1:-1;7012:9:22;;6899:128::o;7032:125::-;7072:4;7100:1;7097;7094:8;7091:34;;;7105:18;;:::i;:::-;-1:-1:-1;7142:9:22;;7032:125::o;7162:135::-;7201:3;7222:17;;;7219:43;;7242:18;;:::i;:::-;-1:-1:-1;7289:1:22;7278:13;;7162:135::o;10411:414::-;10613:2;10595:21;;;10652:2;10632:18;;;10625:30;10691:34;10686:2;10671:18;;10664:62;-1:-1:-1;;;10757:2:22;10742:18;;10735:48;10815:3;10800:19;;10411:414::o;10830:489::-;-1:-1:-1;;;;;11099:15:22;;;11081:34;;11151:15;;11146:2;11131:18;;11124:43;11198:2;11183:18;;11176:34;;;11246:3;11241:2;11226:18;;11219:31;;;11024:4;;11267:46;;11293:19;;11285:6;11267:46;:::i;:::-;11259:54;10830:489;-1:-1:-1;;;;;;10830:489:22:o;11324:249::-;11393:6;11446:2;11434:9;11425:7;11421:23;11417:32;11414:52;;;11462:1;11459;11452:12;11414:52;11494:9;11488:16;11513:30;11537:5;11513:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1079800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"6975","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2420","ownerOf(uint256)":"infinite","preMint()":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenByIndex(uint256)":"2595","tokenOfOwnerByIndex(address,uint256)":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"2393","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28443"},"internal":{"_baseURI()":"infinite","_preMint()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","preMint()":"3cd29ac8","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements a Pre-Mint version of {ERC721} that adds the ability to Pre-Mint all the token ids in the contract as assign an initial owner for each token id. On-chain state for Pre-Mint does not need to be initially stored if Max-Supply is known. Minting is a simple matter of assigning a balance to the pre-mint receiver, and modifying the \\\"read\\\" methods to account for the pre-mint receiver as owner. We use the Consecutive Transfer Method as defined in EIP-2309 to signal inital ownership. Almost everything else remains standard. We also default to the contract \\\"owner\\\" as the pre-mint receiver, but this can be changed.\",\"events\":{\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"EIP-2309: https://eips.ethereum.org/EIPS/eip-2309\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection, as well as a `minter` and a `maxSupply` for pre-minting the collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Override the ERC721 \\\"ownerOf\\\" function to account for the Pre-Mint Receiver.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. note: Fix contributed by surfer77\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_baseTokenURI\":{\"details\":\"ERC721 Base Token URI\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721i.sol\":\"ERC721i\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC721i.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Written by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/ERC721iEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements a Pre-Mint version of {ERC721} that adds the ability to Pre-Mint\\n * all the token ids in the contract as assign an initial owner for each token id.\\n *\\n * On-chain state for Pre-Mint does not need to be initially stored if Max-Supply is known.\\n * Minting is a simple matter of assigning a balance to the pre-mint receiver,\\n * and modifying the \\\"read\\\" methods to account for the pre-mint receiver as owner.\\n * We use the Consecutive Transfer Method as defined in EIP-2309 to signal inital ownership.\\n * Almost everything else remains standard.\\n * We also default to the contract \\\"owner\\\" as the pre-mint receiver, but this can be changed.\\n */\\ncontract ERC721i is\\n  Ownable,\\n  ERC721iEnumerable\\n{\\n  /// @dev EIP-2309: https://eips.ethereum.org/EIPS/eip-2309\\n  event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\\n\\n  /// @dev ERC721 Base Token URI\\n  string internal _baseTokenURI;\\n\\n  /**\\n    * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection,\\n    * as well as a `minter` and a `maxSupply` for pre-minting the collection.\\n    */\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    string memory baseUri,\\n    address minter,\\n    uint256 maxSupply\\n  )\\n    ERC721(name, symbol)\\n    Ownable()\\n  {\\n    _baseTokenURI = baseUri;\\n    // Set vars defined in ERC721iEnumerable.sol\\n    _maxSupply = maxSupply;\\n    _preMintReceiver = minter;\\n  }\\n\\n  /**\\n    * @dev Pre-mint the max-supply of token IDs to the minter account.\\n    * Token IDs are in base-1 sequential order.\\n    */\\n  function _preMint() internal {\\n    // Update balance for initial owner, defined in ERC721.sol\\n    _balances[_preMintReceiver] = _maxSupply;\\n\\n    // Emit the Consecutive Transfer Event\\n    emit ConsecutiveTransfer(1, _maxSupply, address(0), _preMintReceiver);\\n  }\\n\\n  function preMint() external onlyOwner {\\n    _preMint();\\n  }\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return _baseTokenURI;\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    _requireMinted(tokenId);\\n\\n    return _baseURI();\\n  }\\n}\\n\",\"keccak256\":\"0xc812b62a7b0125ffef824e0a9646ac24532c61ac8de98022ebad3a290f8b8e38\",\"license\":\"MIT\"},\"contracts/lib/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * NOTE:\\n *  The only changes made here are:\\n *    - change scope of \\\"_owners\\\" from private to internal\\n *    - change scope of \\\"_balances\\\" from private to internal\\n *    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"\\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\\n        _owners[tokenId] = _NULL_ADDRESS;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x726960336df673d5fd509dde21ba3bed24645291d201f74762b945fe4d5aa016\",\"license\":\"MIT\"},\"contracts/lib/ERC721iEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from: OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n *\\n * @dev This implementation also includes support for pre-minting a max-supply of tokens up-front.\\n *\\n * Note on pre-mint:\\n *  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.\\n *  For this reason, the \\\"allTokens\\\" state vars are unneccesary and have been removed.\\n *  Also defines 2 light-weight state vars: \\\"_preMintReceiver\\\" & \\\"_maxSupply\\\"\\n *  Overrides \\\"ownerOf\\\" & \\\"_exists\\\"\\n */\\nabstract contract ERC721iEnumerable is ERC721, IERC721Enumerable {\\n  // Mapping from owner to list of owned token IDs\\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n  // Mapping from token ID to index of the owner tokens list\\n  mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n  // Tracking for the Pre-Mint Receiver\\n  address internal _preMintReceiver;\\n\\n  // Max-Supply for Pre-Mint\\n  uint256 internal _maxSupply;\\n\\n  /**\\n    * @dev See {IERC165-supportsInterface}.\\n    *\\n    * Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable\\n    */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n    return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n    * note: Fix contributed by surfer77\\n    */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n    require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n    if (owner == address(_preMintReceiver)) {\\n      uint256 supply = totalSupply();\\n      uint256 matched = 0;\\n      for (uint256 i = 1; i < supply; i++) {\\n        if (ownerOf(i) == address(_preMintReceiver)) {\\n          matched += 1;\\n          if (matched - 1 == index) {\\n            return i;\\n          }\\n        }\\n      }\\n    }\\n    return _ownedTokens[owner][index];\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-totalSupply}.\\n    */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    // The Total Supply is simply the Max Supply\\n    return _maxSupply;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-tokenByIndex}.\\n    */\\n  function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n    require(index < _maxSupply, \\\"ERC721Enumerable: global index out of bounds\\\");\\n    // Array index is 0-based, whereas Token ID is 1-based (sequential).\\n    return index + 1;\\n  }\\n\\n  /**\\n    * @dev Override the ERC721 \\\"ownerOf\\\" function to account for the Pre-Mint Receiver.\\n    */\\n  function ownerOf(uint256 tokenId) public view virtual override(IERC721, ERC721) returns (address) {\\n    // Anything beyond the Pre-Minted supply will use the standard \\\"ownerOf\\\"\\n    if (tokenId > _maxSupply) {\\n      return super.ownerOf(tokenId);\\n    }\\n\\n    // Since we have Pre-Minted the Max-Supply to the \\\"Pre-Mint Receiver\\\" account, we know:\\n    //  - if the \\\"_owners\\\" mapping has not been assigned, then the owner is the Pre-Mint Receiver.\\n    //  - after the NFT is transferred, the \\\"_owners\\\" mapping will be updated with the new owner.\\n    address owner_ = _owners[tokenId];\\n    if (owner_ == address(0)) {\\n      owner_ = _preMintReceiver;\\n    }\\n    return owner_;\\n  }\\n\\n  /**\\n    * @dev Override the ERC721 \\\"_exists\\\" function to account for the Pre-Minted Max-Supply.\\n    */\\n  function _exists(uint256 tokenId) internal view virtual override(ERC721) returns (bool) {\\n    // Anything beyond the Pre-Minted supply will use the standard \\\"_exists\\\"\\n    if (tokenId > _maxSupply) {\\n      return super._exists(tokenId);\\n    }\\n\\n    // We know the Max-Supply has been Pre-Minted with Sequential Token IDs\\n    return (tokenId > 0 && tokenId <= _maxSupply);\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_beforeTokenTransfer}.\\n    */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    if (from != to) {\\n      _removeTokenFromOwnerEnumeration(from, tokenId);\\n      _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_addTokenToOwnerEnumeration}.\\n    */\\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n    uint256 length = ERC721.balanceOf(to);\\n    _ownedTokens[to][length] = tokenId;\\n    _ownedTokensIndex[tokenId] = length;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_removeTokenFromOwnerEnumeration}.\\n    */\\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n    // then delete the last slot (swap and pop).\\n\\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n    // When the token to delete is the last token, the swap operation is unnecessary\\n    if (tokenIndex != lastTokenIndex) {\\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n    }\\n\\n    // This also deletes the contents at the last position of the array\\n    delete _ownedTokensIndex[tokenId];\\n    delete _ownedTokens[from][lastTokenIndex];\\n  }\\n}\\n\",\"keccak256\":\"0x99b0f077ef320163c0100348d120946ea6fefa3d3f0148a8880e01d4a1924752\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/ERC721i.sol:ERC721i","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":2152,"contract":"contracts/ERC721i.sol:ERC721i","label":"_name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2154,"contract":"contracts/ERC721i.sol:ERC721i","label":"_symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2158,"contract":"contracts/ERC721i.sol:ERC721i","label":"_owners","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_address)"},{"astId":2162,"contract":"contracts/ERC721i.sol:ERC721i","label":"_balances","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":2166,"contract":"contracts/ERC721i.sol:ERC721i","label":"_tokenApprovals","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_address)"},{"astId":2172,"contract":"contracts/ERC721i.sol:ERC721i","label":"_operatorApprovals","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3728,"contract":"contracts/ERC721i.sol:ERC721i","label":"_ownedTokens","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":3732,"contract":"contracts/ERC721i.sol:ERC721i","label":"_ownedTokensIndex","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3734,"contract":"contracts/ERC721i.sol:ERC721i","label":"_preMintReceiver","offset":0,"slot":"9","type":"t_address"},{"astId":3736,"contract":"contracts/ERC721i.sol:ERC721i","label":"_maxSupply","offset":0,"slot":"10","type":"t_uint256"},{"astId":2034,"contract":"contracts/ERC721i.sol:ERC721i","label":"_baseTokenURI","offset":0,"slot":"11","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. NOTE:  The only changes made here are:    - change scope of \"_owners\" from private to internal    - change scope of \"_balances\" from private to internal    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2189":{"entryPoint":null,"id":2189,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":292,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":475,"id":null,"parameterSlots":2,"returnSlots":2},"extract_byte_array_length":{"entryPoint":581,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":270,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1985:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:821:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"body":{"nodeType":"YulBlock","src":"942:59:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:22"},"nodeType":"YulFunctionCall","src":"967:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:22"},"nodeType":"YulFunctionCall","src":"963:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:22"},"nodeType":"YulFunctionCall","src":"956:35:22"},"nodeType":"YulExpressionStatement","src":"956:35:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:22"},"nodeType":"YulFunctionCall","src":"924:9:22"},"nodeType":"YulIf","src":"921:80:22"},{"nodeType":"YulAssignment","src":"1010:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:885:22"},{"body":{"nodeType":"YulBlock","src":"1154:444:22","statements":[{"body":{"nodeType":"YulBlock","src":"1200:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1209:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1212:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1202:6:22"},"nodeType":"YulFunctionCall","src":"1202:12:22"},"nodeType":"YulExpressionStatement","src":"1202:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1175:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1184:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1171:3:22"},"nodeType":"YulFunctionCall","src":"1171:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1196:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1167:3:22"},"nodeType":"YulFunctionCall","src":"1167:32:22"},"nodeType":"YulIf","src":"1164:52:22"},{"nodeType":"YulVariableDeclaration","src":"1225:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1239:5:22"},"nodeType":"YulFunctionCall","src":"1239:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1229:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1264:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1282:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1278:3:22"},"nodeType":"YulFunctionCall","src":"1278:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1290:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1274:3:22"},"nodeType":"YulFunctionCall","src":"1274:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1268:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1319:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1328:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1331:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1321:6:22"},"nodeType":"YulFunctionCall","src":"1321:12:22"},"nodeType":"YulExpressionStatement","src":"1321:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1307:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1315:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1304:2:22"},"nodeType":"YulFunctionCall","src":"1304:14:22"},"nodeType":"YulIf","src":"1301:34:22"},{"nodeType":"YulAssignment","src":"1344:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1387:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1398:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1383:3:22"},"nodeType":"YulFunctionCall","src":"1383:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1407:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1354:28:22"},"nodeType":"YulFunctionCall","src":"1354:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1344:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1424:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:22"},"nodeType":"YulFunctionCall","src":"1446:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1440:5:22"},"nodeType":"YulFunctionCall","src":"1440:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1428:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1494:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1506:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1496:6:22"},"nodeType":"YulFunctionCall","src":"1496:12:22"},"nodeType":"YulExpressionStatement","src":"1496:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1480:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1490:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1477:2:22"},"nodeType":"YulFunctionCall","src":"1477:16:22"},"nodeType":"YulIf","src":"1474:36:22"},{"nodeType":"YulAssignment","src":"1519:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1562:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1573:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1558:3:22"},"nodeType":"YulFunctionCall","src":"1558:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1584:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1529:28:22"},"nodeType":"YulFunctionCall","src":"1529:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1519:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1112:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1123:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1135:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1143:6:22","type":""}],"src":"1036:562:22"},{"body":{"nodeType":"YulBlock","src":"1658:325:22","statements":[{"nodeType":"YulAssignment","src":"1668:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1682:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1685:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1678:3:22"},"nodeType":"YulFunctionCall","src":"1678:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1668:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1699:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1729:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1735:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1725:3:22"},"nodeType":"YulFunctionCall","src":"1725:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1703:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1776:31:22","statements":[{"nodeType":"YulAssignment","src":"1778:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1792:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1800:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1788:3:22"},"nodeType":"YulFunctionCall","src":"1788:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1778:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1756:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1749:6:22"},"nodeType":"YulFunctionCall","src":"1749:26:22"},"nodeType":"YulIf","src":"1746:61:22"},{"body":{"nodeType":"YulBlock","src":"1866:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1887:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1894:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1899:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1890:3:22"},"nodeType":"YulFunctionCall","src":"1890:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1880:6:22"},"nodeType":"YulFunctionCall","src":"1880:31:22"},"nodeType":"YulExpressionStatement","src":"1880:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1931:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1934:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1924:6:22"},"nodeType":"YulFunctionCall","src":"1924:15:22"},"nodeType":"YulExpressionStatement","src":"1924:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1952:6:22"},"nodeType":"YulFunctionCall","src":"1952:15:22"},"nodeType":"YulExpressionStatement","src":"1952:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1822:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1845:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1853:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1842:2:22"},"nodeType":"YulFunctionCall","src":"1842:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1819:2:22"},"nodeType":"YulFunctionCall","src":"1819:38:22"},"nodeType":"YulIf","src":"1816:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1638:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1647:6:22","type":""}],"src":"1603:380:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x13C5 CODESIZE SUB DUP1 PUSH3 0x13C5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x281 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1134 DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD2C JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDA JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDF5 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF56 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x934 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0xA02 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xFDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x87C PUSH1 0x0 DUP3 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x8A5 SWAP1 DUP5 SWAP1 PUSH2 0x1023 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x8D3 SWAP1 DUP5 SWAP1 PUSH2 0x103A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x995 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xA0D DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0xA19 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA42 DUP4 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA62 JUMPI PUSH2 0xA62 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA8C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA96 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xBBE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB0C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB44 SWAP2 DUP2 ADD SWAP1 PUSH2 0x10E1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1052 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC08 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC52 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC6A JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC7E JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC90 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD18 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBC DUP5 PUSH2 0xD58 JUMP JUMPDEST SWAP3 POP PUSH2 0xDCA PUSH1 0x20 DUP6 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE11 DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE66 DUP6 PUSH2 0xD58 JUMP JUMPDEST SWAP4 POP PUSH2 0xE74 PUSH1 0x20 DUP7 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEBE JUMPI PUSH2 0xEBE PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE6 PUSH2 0xE31 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF3F DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH2 0xF4D PUSH1 0x20 DUP5 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF6A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF8A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFF0 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1004 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1035 JUMPI PUSH2 0x1035 PUSH2 0x100D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x104D JUMPI PUSH2 0x104D PUSH2 0x100D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10D7 SWAP1 DUP4 ADD DUP5 PUSH2 0xD00 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xCA1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 PUSH14 0x8C4D23E167D7E5F5EA18FE7AF264 0xE5 0x4E KECCAK256 0xF 0x2F MLOAD 0xD0 0xE3 EXTCODESIZE SMOD SWAP5 DUP1 DUP1 PUSH14 0xC32F64736F6C634300080D003300 ","sourceMap":"1382:13860:15:-:0;;;2237:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2303:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2326:17:15;;;;:7;;:17;;;;;:::i;:::-;;2237:113;;1382:13860;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1382:13860:15;;;-1:-1:-1;1382:13860:15;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:22:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:22;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1382:13860:15;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2990":{"entryPoint":null,"id":2990,"parameterSlots":3,"returnSlots":0},"@_approve_2858":{"entryPoint":1707,"id":2858,"parameterSlots":2,"returnSlots":0},"@_baseURI_2340":{"entryPoint":null,"id":2340,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_2979":{"entryPoint":null,"id":2979,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_2968":{"entryPoint":2760,"id":2968,"parameterSlots":4,"returnSlots":1},"@_exists_2558":{"entryPoint":null,"id":2558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2591":{"entryPoint":1817,"id":2591,"parameterSlots":2,"returnSlots":1},"@_msgSender_646":{"entryPoint":null,"id":646,"parameterSlots":0,"returnSlots":1},"@_requireMinted_2904":{"entryPoint":1609,"id":2904,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_2540":{"entryPoint":2562,"id":2540,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2890":{"entryPoint":2356,"id":2890,"parameterSlots":3,"returnSlots":0},"@_transfer_2835":{"entryPoint":1944,"id":2835,"parameterSlots":3,"returnSlots":0},"@approve_2382":{"entryPoint":819,"id":2382,"parameterSlots":2,"returnSlots":0},"@balanceOf_2244":{"entryPoint":1273,"id":2244,"parameterSlots":1,"returnSlots":1},"@getApproved_2400":{"entryPoint":780,"id":2400,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2435":{"entryPoint":null,"id":2435,"parameterSlots":2,"returnSlots":1},"@log10_1624":{"entryPoint":3017,"id":1624,"parameterSlots":1,"returnSlots":1},"@name_2282":{"entryPoint":634,"id":2282,"parameterSlots":0,"returnSlots":1},"@ownerOf_2272":{"entryPoint":1177,"id":2272,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_2481":{"entryPoint":1150,"id":2481,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2511":{"entryPoint":1437,"id":2511,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2417":{"entryPoint":1422,"id":2417,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2220":{"entryPoint":552,"id":2220,"parameterSlots":1,"returnSlots":1},"@supportsInterface_908":{"entryPoint":null,"id":908,"parameterSlots":1,"returnSlots":1},"@symbol_2292":{"entryPoint":1407,"id":2292,"parameterSlots":0,"returnSlots":1},"@toString_715":{"entryPoint":2613,"id":715,"parameterSlots":1,"returnSlots":1},"@tokenURI_2331":{"entryPoint":1493,"id":2331,"parameterSlots":1,"returnSlots":1},"@transferFrom_2462":{"entryPoint":1101,"id":2462,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3416,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3546,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3875,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3486,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3655,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3573,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3444,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3255,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4321,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3391,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3328,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4062,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4260,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3372,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3984,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4154,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4131,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":3284,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3926,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4109,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3633,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3233,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10498:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:22","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:22"},"nodeType":"YulFunctionCall","src":"125:12:22"},"nodeType":"YulExpressionStatement","src":"125:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:22"},"nodeType":"YulFunctionCall","src":"99:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:22"},"nodeType":"YulFunctionCall","src":"88:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:22"},"nodeType":"YulFunctionCall","src":"78:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:22"},"nodeType":"YulFunctionCall","src":"71:51:22"},"nodeType":"YulIf","src":"68:71:22"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:22","type":""}],"src":"14:131:22"},{"body":{"nodeType":"YulBlock","src":"219:176:22","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:22"},"nodeType":"YulFunctionCall","src":"267:12:22"},"nodeType":"YulExpressionStatement","src":"267:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:22"},"nodeType":"YulFunctionCall","src":"236:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:22"},"nodeType":"YulFunctionCall","src":"232:32:22"},"nodeType":"YulIf","src":"229:52:22"},{"nodeType":"YulVariableDeclaration","src":"290:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:22"},"nodeType":"YulFunctionCall","src":"303:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:22"},"nodeType":"YulFunctionCall","src":"335:30:22"},"nodeType":"YulExpressionStatement","src":"335:30:22"},{"nodeType":"YulAssignment","src":"374:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:22","type":""}],"src":"150:245:22"},{"body":{"nodeType":"YulBlock","src":"495:92:22","statements":[{"nodeType":"YulAssignment","src":"505:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:22"},"nodeType":"YulFunctionCall","src":"513:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:22"},"nodeType":"YulFunctionCall","src":"565:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:22"},"nodeType":"YulFunctionCall","src":"558:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:22"},"nodeType":"YulFunctionCall","src":"540:41:22"},"nodeType":"YulExpressionStatement","src":"540:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:22","type":""}],"src":"400:187:22"},{"body":{"nodeType":"YulBlock","src":"645:205:22","statements":[{"nodeType":"YulVariableDeclaration","src":"655:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"664:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"659:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"724:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"749:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"754:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:22"},"nodeType":"YulFunctionCall","src":"745:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"768:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"773:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"764:3:22"},"nodeType":"YulFunctionCall","src":"764:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"758:5:22"},"nodeType":"YulFunctionCall","src":"758:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"738:6:22"},"nodeType":"YulFunctionCall","src":"738:39:22"},"nodeType":"YulExpressionStatement","src":"738:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"685:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"682:2:22"},"nodeType":"YulFunctionCall","src":"682:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"696:19:22","statements":[{"nodeType":"YulAssignment","src":"698:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"710:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:22"},"nodeType":"YulFunctionCall","src":"703:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"678:3:22","statements":[]},"src":"674:113:22"},{"body":{"nodeType":"YulBlock","src":"813:31:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"826:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"831:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:22"},"nodeType":"YulFunctionCall","src":"822:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"840:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:22"},"nodeType":"YulFunctionCall","src":"815:27:22"},"nodeType":"YulExpressionStatement","src":"815:27:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"802:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"805:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"799:2:22"},"nodeType":"YulFunctionCall","src":"799:13:22"},"nodeType":"YulIf","src":"796:48:22"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"623:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"628:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"633:6:22","type":""}],"src":"592:258:22"},{"body":{"nodeType":"YulBlock","src":"905:208:22","statements":[{"nodeType":"YulVariableDeclaration","src":"915:26:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"935:5:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:22"},"nodeType":"YulFunctionCall","src":"929:12:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"919:6:22","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"957:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"962:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"950:6:22"},"nodeType":"YulFunctionCall","src":"950:19:22"},"nodeType":"YulExpressionStatement","src":"950:19:22"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1004:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:22"},"nodeType":"YulFunctionCall","src":"1000:16:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1022:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"1027:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1018:3:22"},"nodeType":"YulFunctionCall","src":"1018:14:22"},{"name":"length","nodeType":"YulIdentifier","src":"1034:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"978:21:22"},"nodeType":"YulFunctionCall","src":"978:63:22"},"nodeType":"YulExpressionStatement","src":"978:63:22"},{"nodeType":"YulAssignment","src":"1050:57:22","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1065:3:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1078:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1086:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1074:3:22"},"nodeType":"YulFunctionCall","src":"1074:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1091:3:22"},"nodeType":"YulFunctionCall","src":"1091:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1070:3:22"},"nodeType":"YulFunctionCall","src":"1070:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1061:3:22"},"nodeType":"YulFunctionCall","src":"1061:39:22"},{"kind":"number","nodeType":"YulLiteral","src":"1102:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:22"},"nodeType":"YulFunctionCall","src":"1057:50:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1050:3:22"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"882:5:22","type":""},{"name":"pos","nodeType":"YulTypedName","src":"889:3:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"897:3:22","type":""}],"src":"855:258:22"},{"body":{"nodeType":"YulBlock","src":"1239:99:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1256:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1267:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1249:6:22"},"nodeType":"YulFunctionCall","src":"1249:21:22"},"nodeType":"YulExpressionStatement","src":"1249:21:22"},{"nodeType":"YulAssignment","src":"1279:53:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1317:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1328:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:22"},"nodeType":"YulFunctionCall","src":"1313:18:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1287:17:22"},"nodeType":"YulFunctionCall","src":"1287:45:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1279:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1219:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1230:4:22","type":""}],"src":"1118:220:22"},{"body":{"nodeType":"YulBlock","src":"1413:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:22"},"nodeType":"YulFunctionCall","src":"1461:12:22"},"nodeType":"YulExpressionStatement","src":"1461:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:22"},"nodeType":"YulFunctionCall","src":"1430:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:22"},"nodeType":"YulFunctionCall","src":"1426:32:22"},"nodeType":"YulIf","src":"1423:52:22"},{"nodeType":"YulAssignment","src":"1484:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1494:12:22"},"nodeType":"YulFunctionCall","src":"1494:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1379:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1390:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1402:6:22","type":""}],"src":"1343:180:22"},{"body":{"nodeType":"YulBlock","src":"1629:102:22","statements":[{"nodeType":"YulAssignment","src":"1639:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1651:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1647:3:22"},"nodeType":"YulFunctionCall","src":"1647:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1639:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1708:3:22"},"nodeType":"YulFunctionCall","src":"1708:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1721:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1704:3:22"},"nodeType":"YulFunctionCall","src":"1704:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1692:3:22"},"nodeType":"YulFunctionCall","src":"1692:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1674:6:22"},"nodeType":"YulFunctionCall","src":"1674:51:22"},"nodeType":"YulExpressionStatement","src":"1674:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:22","type":""}],"src":"1528:203:22"},{"body":{"nodeType":"YulBlock","src":"1785:124:22","statements":[{"nodeType":"YulAssignment","src":"1795:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1817:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:22"},"nodeType":"YulFunctionCall","src":"1804:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1795:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1887:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1896:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1889:6:22"},"nodeType":"YulFunctionCall","src":"1889:12:22"},"nodeType":"YulExpressionStatement","src":"1889:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1846:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1857:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1872:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1877:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1868:3:22"},"nodeType":"YulFunctionCall","src":"1868:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1881:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1864:3:22"},"nodeType":"YulFunctionCall","src":"1864:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1853:3:22"},"nodeType":"YulFunctionCall","src":"1853:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1843:2:22"},"nodeType":"YulFunctionCall","src":"1843:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1836:6:22"},"nodeType":"YulFunctionCall","src":"1836:50:22"},"nodeType":"YulIf","src":"1833:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1764:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:22","type":""}],"src":"1736:173:22"},{"body":{"nodeType":"YulBlock","src":"2001:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"2047:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2056:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2059:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2049:6:22"},"nodeType":"YulFunctionCall","src":"2049:12:22"},"nodeType":"YulExpressionStatement","src":"2049:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2022:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2031:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2018:3:22"},"nodeType":"YulFunctionCall","src":"2018:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2043:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2014:3:22"},"nodeType":"YulFunctionCall","src":"2014:32:22"},"nodeType":"YulIf","src":"2011:52:22"},{"nodeType":"YulAssignment","src":"2072:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2101:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2082:18:22"},"nodeType":"YulFunctionCall","src":"2082:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2072:6:22"}]},{"nodeType":"YulAssignment","src":"2120:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2158:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2143:3:22"},"nodeType":"YulFunctionCall","src":"2143:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2130:12:22"},"nodeType":"YulFunctionCall","src":"2130:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2120:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1990:6:22","type":""}],"src":"1914:254:22"},{"body":{"nodeType":"YulBlock","src":"2277:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"2323:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2332:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2335:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2325:6:22"},"nodeType":"YulFunctionCall","src":"2325:12:22"},"nodeType":"YulExpressionStatement","src":"2325:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2298:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2307:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2294:3:22"},"nodeType":"YulFunctionCall","src":"2294:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2319:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2290:3:22"},"nodeType":"YulFunctionCall","src":"2290:32:22"},"nodeType":"YulIf","src":"2287:52:22"},{"nodeType":"YulAssignment","src":"2348:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2377:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2358:18:22"},"nodeType":"YulFunctionCall","src":"2358:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2348:6:22"}]},{"nodeType":"YulAssignment","src":"2396:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2429:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2440:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2425:3:22"},"nodeType":"YulFunctionCall","src":"2425:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2406:18:22"},"nodeType":"YulFunctionCall","src":"2406:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2396:6:22"}]},{"nodeType":"YulAssignment","src":"2453:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2480:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2491:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:22"},"nodeType":"YulFunctionCall","src":"2476:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2463:12:22"},"nodeType":"YulFunctionCall","src":"2463:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2453:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2227:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2238:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2250:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2258:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2266:6:22","type":""}],"src":"2173:328:22"},{"body":{"nodeType":"YulBlock","src":"2576:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2622:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2631:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2634:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2624:6:22"},"nodeType":"YulFunctionCall","src":"2624:12:22"},"nodeType":"YulExpressionStatement","src":"2624:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2597:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2606:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2593:3:22"},"nodeType":"YulFunctionCall","src":"2593:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2618:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2589:3:22"},"nodeType":"YulFunctionCall","src":"2589:32:22"},"nodeType":"YulIf","src":"2586:52:22"},{"nodeType":"YulAssignment","src":"2647:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2676:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2657:18:22"},"nodeType":"YulFunctionCall","src":"2657:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2647:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2542:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2553:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2565:6:22","type":""}],"src":"2506:186:22"},{"body":{"nodeType":"YulBlock","src":"2798:76:22","statements":[{"nodeType":"YulAssignment","src":"2808:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2831:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2816:3:22"},"nodeType":"YulFunctionCall","src":"2816:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2808:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2850:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2861:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2843:6:22"},"nodeType":"YulFunctionCall","src":"2843:25:22"},"nodeType":"YulExpressionStatement","src":"2843:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2767:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2778:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2789:4:22","type":""}],"src":"2697:177:22"},{"body":{"nodeType":"YulBlock","src":"2963:263:22","statements":[{"body":{"nodeType":"YulBlock","src":"3009:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:22"},"nodeType":"YulFunctionCall","src":"3011:12:22"},"nodeType":"YulExpressionStatement","src":"3011:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2984:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2993:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2980:3:22"},"nodeType":"YulFunctionCall","src":"2980:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3005:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2976:3:22"},"nodeType":"YulFunctionCall","src":"2976:32:22"},"nodeType":"YulIf","src":"2973:52:22"},{"nodeType":"YulAssignment","src":"3034:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3044:18:22"},"nodeType":"YulFunctionCall","src":"3044:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3034:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3082:45:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:22"},"nodeType":"YulFunctionCall","src":"3108:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3095:12:22"},"nodeType":"YulFunctionCall","src":"3095:32:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3086:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3180:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:22"},"nodeType":"YulFunctionCall","src":"3182:12:22"},"nodeType":"YulExpressionStatement","src":"3182:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3149:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3170:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3163:6:22"},"nodeType":"YulFunctionCall","src":"3163:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3156:6:22"},"nodeType":"YulFunctionCall","src":"3156:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3146:2:22"},"nodeType":"YulFunctionCall","src":"3146:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3139:6:22"},"nodeType":"YulFunctionCall","src":"3139:40:22"},"nodeType":"YulIf","src":"3136:60:22"},{"nodeType":"YulAssignment","src":"3205:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"3215:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3205:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2921:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2932:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2944:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2952:6:22","type":""}],"src":"2879:347:22"},{"body":{"nodeType":"YulBlock","src":"3263:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3280:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3287:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3292:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3283:3:22"},"nodeType":"YulFunctionCall","src":"3283:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3273:6:22"},"nodeType":"YulFunctionCall","src":"3273:31:22"},"nodeType":"YulExpressionStatement","src":"3273:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3323:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3313:6:22"},"nodeType":"YulFunctionCall","src":"3313:15:22"},"nodeType":"YulExpressionStatement","src":"3313:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3344:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3347:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3337:6:22"},"nodeType":"YulFunctionCall","src":"3337:15:22"},"nodeType":"YulExpressionStatement","src":"3337:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3231:127:22"},{"body":{"nodeType":"YulBlock","src":"3493:1008:22","statements":[{"body":{"nodeType":"YulBlock","src":"3540:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3549:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3552:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3542:6:22"},"nodeType":"YulFunctionCall","src":"3542:12:22"},"nodeType":"YulExpressionStatement","src":"3542:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3514:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3523:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:22"},"nodeType":"YulFunctionCall","src":"3510:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3535:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3506:3:22"},"nodeType":"YulFunctionCall","src":"3506:33:22"},"nodeType":"YulIf","src":"3503:53:22"},{"nodeType":"YulAssignment","src":"3565:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3594:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3575:18:22"},"nodeType":"YulFunctionCall","src":"3575:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3565:6:22"}]},{"nodeType":"YulAssignment","src":"3613:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3646:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3657:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3642:3:22"},"nodeType":"YulFunctionCall","src":"3642:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3623:18:22"},"nodeType":"YulFunctionCall","src":"3623:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3613:6:22"}]},{"nodeType":"YulAssignment","src":"3670:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3697:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3708:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3693:3:22"},"nodeType":"YulFunctionCall","src":"3693:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3680:12:22"},"nodeType":"YulFunctionCall","src":"3680:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3670:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3721:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3752:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3763:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:22"},"nodeType":"YulFunctionCall","src":"3748:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3735:12:22"},"nodeType":"YulFunctionCall","src":"3735:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3725:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3776:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3786:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3780:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3831:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3840:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3843:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3833:6:22"},"nodeType":"YulFunctionCall","src":"3833:12:22"},"nodeType":"YulExpressionStatement","src":"3833:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3819:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3827:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3816:2:22"},"nodeType":"YulFunctionCall","src":"3816:14:22"},"nodeType":"YulIf","src":"3813:34:22"},{"nodeType":"YulVariableDeclaration","src":"3856:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3870:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"3881:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3866:3:22"},"nodeType":"YulFunctionCall","src":"3866:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3860:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:22"},"nodeType":"YulFunctionCall","src":"3938:12:22"},"nodeType":"YulExpressionStatement","src":"3938:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3915:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3919:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3911:3:22"},"nodeType":"YulFunctionCall","src":"3911:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3926:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3907:3:22"},"nodeType":"YulFunctionCall","src":"3907:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3900:6:22"},"nodeType":"YulFunctionCall","src":"3900:35:22"},"nodeType":"YulIf","src":"3897:55:22"},{"nodeType":"YulVariableDeclaration","src":"3961:26:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3984:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3971:12:22"},"nodeType":"YulFunctionCall","src":"3971:16:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3965:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4010:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4012:16:22"},"nodeType":"YulFunctionCall","src":"4012:18:22"},"nodeType":"YulExpressionStatement","src":"4012:18:22"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4002:2:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4006:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3999:2:22"},"nodeType":"YulFunctionCall","src":"3999:10:22"},"nodeType":"YulIf","src":"3996:36:22"},{"nodeType":"YulVariableDeclaration","src":"4041:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4051:3:22"},"nodeType":"YulFunctionCall","src":"4051:7:22"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4045:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4067:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4087:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4081:5:22"},"nodeType":"YulFunctionCall","src":"4081:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4071:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4099:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4121:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4145:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4149:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4141:3:22"},"nodeType":"YulFunctionCall","src":"4141:13:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4156:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4137:3:22"},"nodeType":"YulFunctionCall","src":"4137:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"4161:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:22"},"nodeType":"YulFunctionCall","src":"4133:31:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4166:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4129:3:22"},"nodeType":"YulFunctionCall","src":"4129:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:22"},"nodeType":"YulFunctionCall","src":"4117:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4103:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4229:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4231:16:22"},"nodeType":"YulFunctionCall","src":"4231:18:22"},"nodeType":"YulExpressionStatement","src":"4231:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4188:10:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4200:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4185:2:22"},"nodeType":"YulFunctionCall","src":"4185:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4208:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4220:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4205:2:22"},"nodeType":"YulFunctionCall","src":"4205:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4182:2:22"},"nodeType":"YulFunctionCall","src":"4182:46:22"},"nodeType":"YulIf","src":"4179:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4267:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4271:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4260:6:22"},"nodeType":"YulFunctionCall","src":"4260:22:22"},"nodeType":"YulExpressionStatement","src":"4260:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4298:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4306:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4291:6:22"},"nodeType":"YulFunctionCall","src":"4291:18:22"},"nodeType":"YulExpressionStatement","src":"4291:18:22"},{"body":{"nodeType":"YulBlock","src":"4355:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4364:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4367:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4357:6:22"},"nodeType":"YulFunctionCall","src":"4357:12:22"},"nodeType":"YulExpressionStatement","src":"4357:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4332:2:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4336:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:22"},"nodeType":"YulFunctionCall","src":"4328:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"4341:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4324:3:22"},"nodeType":"YulFunctionCall","src":"4324:20:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4346:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4321:2:22"},"nodeType":"YulFunctionCall","src":"4321:33:22"},"nodeType":"YulIf","src":"4318:53:22"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4397:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4405:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:22"},"nodeType":"YulFunctionCall","src":"4393:15:22"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4414:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4418:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4410:3:22"},"nodeType":"YulFunctionCall","src":"4410:11:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4423:2:22"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4380:12:22"},"nodeType":"YulFunctionCall","src":"4380:46:22"},"nodeType":"YulExpressionStatement","src":"4380:46:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4450:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4458:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:22"},"nodeType":"YulFunctionCall","src":"4446:15:22"},{"kind":"number","nodeType":"YulLiteral","src":"4463:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:22"},"nodeType":"YulFunctionCall","src":"4442:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"4468:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:22"},"nodeType":"YulFunctionCall","src":"4435:35:22"},"nodeType":"YulExpressionStatement","src":"4435:35:22"},{"nodeType":"YulAssignment","src":"4479:16:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4489:6:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4479:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3435:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3446:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3458:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3466:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3474:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3482:6:22","type":""}],"src":"3363:1138:22"},{"body":{"nodeType":"YulBlock","src":"4593:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"4639:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4648:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4651:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4641:6:22"},"nodeType":"YulFunctionCall","src":"4641:12:22"},"nodeType":"YulExpressionStatement","src":"4641:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4614:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4623:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4610:3:22"},"nodeType":"YulFunctionCall","src":"4610:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4635:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4606:3:22"},"nodeType":"YulFunctionCall","src":"4606:32:22"},"nodeType":"YulIf","src":"4603:52:22"},{"nodeType":"YulAssignment","src":"4664:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4693:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4674:18:22"},"nodeType":"YulFunctionCall","src":"4674:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4664:6:22"}]},{"nodeType":"YulAssignment","src":"4712:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4745:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4756:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4741:3:22"},"nodeType":"YulFunctionCall","src":"4741:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4722:18:22"},"nodeType":"YulFunctionCall","src":"4722:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4712:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4551:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4562:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4574:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4582:6:22","type":""}],"src":"4506:260:22"},{"body":{"nodeType":"YulBlock","src":"4826:325:22","statements":[{"nodeType":"YulAssignment","src":"4836:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4853:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4846:3:22"},"nodeType":"YulFunctionCall","src":"4846:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4836:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4867:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4897:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4903:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4893:3:22"},"nodeType":"YulFunctionCall","src":"4893:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4871:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4944:31:22","statements":[{"nodeType":"YulAssignment","src":"4946:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4960:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4968:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4956:3:22"},"nodeType":"YulFunctionCall","src":"4956:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4946:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4924:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4917:6:22"},"nodeType":"YulFunctionCall","src":"4917:26:22"},"nodeType":"YulIf","src":"4914:61:22"},{"body":{"nodeType":"YulBlock","src":"5034:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5055:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5062:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5067:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5058:3:22"},"nodeType":"YulFunctionCall","src":"5058:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5048:6:22"},"nodeType":"YulFunctionCall","src":"5048:31:22"},"nodeType":"YulExpressionStatement","src":"5048:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5099:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5102:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5092:6:22"},"nodeType":"YulFunctionCall","src":"5092:15:22"},"nodeType":"YulExpressionStatement","src":"5092:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5120:6:22"},"nodeType":"YulFunctionCall","src":"5120:15:22"},"nodeType":"YulExpressionStatement","src":"5120:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4990:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5013:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5021:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5010:2:22"},"nodeType":"YulFunctionCall","src":"5010:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4987:2:22"},"nodeType":"YulFunctionCall","src":"4987:38:22"},"nodeType":"YulIf","src":"4984:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4806:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4815:6:22","type":""}],"src":"4771:380:22"},{"body":{"nodeType":"YulBlock","src":"5330:223:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5358:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5340:6:22"},"nodeType":"YulFunctionCall","src":"5340:21:22"},"nodeType":"YulExpressionStatement","src":"5340:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5381:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5392:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5377:3:22"},"nodeType":"YulFunctionCall","src":"5377:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:22","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5370:6:22"},"nodeType":"YulFunctionCall","src":"5370:30:22"},"nodeType":"YulExpressionStatement","src":"5370:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5420:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5431:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5416:3:22"},"nodeType":"YulFunctionCall","src":"5416:18:22"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5436:34:22","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5409:6:22"},"nodeType":"YulFunctionCall","src":"5409:62:22"},"nodeType":"YulExpressionStatement","src":"5409:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5491:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5502:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5487:3:22"},"nodeType":"YulFunctionCall","src":"5487:18:22"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5507:3:22","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5480:6:22"},"nodeType":"YulFunctionCall","src":"5480:31:22"},"nodeType":"YulExpressionStatement","src":"5480:31:22"},{"nodeType":"YulAssignment","src":"5520:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5532:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5543:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5528:3:22"},"nodeType":"YulFunctionCall","src":"5528:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5520:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5307:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5321:4:22","type":""}],"src":"5156:397:22"},{"body":{"nodeType":"YulBlock","src":"5732:252:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5749:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5760:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5742:6:22"},"nodeType":"YulFunctionCall","src":"5742:21:22"},"nodeType":"YulExpressionStatement","src":"5742:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5783:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5794:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5779:3:22"},"nodeType":"YulFunctionCall","src":"5779:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:22","type":"","value":"62"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5772:6:22"},"nodeType":"YulFunctionCall","src":"5772:30:22"},"nodeType":"YulExpressionStatement","src":"5772:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5822:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5833:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5818:3:22"},"nodeType":"YulFunctionCall","src":"5818:18:22"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5838:34:22","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5811:6:22"},"nodeType":"YulFunctionCall","src":"5811:62:22"},"nodeType":"YulExpressionStatement","src":"5811:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5893:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5904:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5889:3:22"},"nodeType":"YulFunctionCall","src":"5889:18:22"},{"hexValue":"6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5909:32:22","type":"","value":"ken owner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5882:6:22"},"nodeType":"YulFunctionCall","src":"5882:60:22"},"nodeType":"YulExpressionStatement","src":"5882:60:22"},{"nodeType":"YulAssignment","src":"5951:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5963:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5974:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5959:3:22"},"nodeType":"YulFunctionCall","src":"5959:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5951:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5709:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5723:4:22","type":""}],"src":"5558:426:22"},{"body":{"nodeType":"YulBlock","src":"6163:236:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6180:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6191:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6173:6:22"},"nodeType":"YulFunctionCall","src":"6173:21:22"},"nodeType":"YulExpressionStatement","src":"6173:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6214:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6225:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6210:3:22"},"nodeType":"YulFunctionCall","src":"6210:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6230:2:22","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6203:6:22"},"nodeType":"YulFunctionCall","src":"6203:30:22"},"nodeType":"YulExpressionStatement","src":"6203:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6253:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6264:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6249:3:22"},"nodeType":"YulFunctionCall","src":"6249:18:22"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6269:34:22","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6242:6:22"},"nodeType":"YulFunctionCall","src":"6242:62:22"},"nodeType":"YulExpressionStatement","src":"6242:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6324:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6335:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6320:3:22"},"nodeType":"YulFunctionCall","src":"6320:18:22"},{"hexValue":"72206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6340:16:22","type":"","value":"r nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6313:6:22"},"nodeType":"YulFunctionCall","src":"6313:44:22"},"nodeType":"YulExpressionStatement","src":"6313:44:22"},{"nodeType":"YulAssignment","src":"6366:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6378:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6389:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6374:3:22"},"nodeType":"YulFunctionCall","src":"6374:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6366:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6140:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6154:4:22","type":""}],"src":"5989:410:22"},{"body":{"nodeType":"YulBlock","src":"6578:174:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6595:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6606:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6588:6:22"},"nodeType":"YulFunctionCall","src":"6588:21:22"},"nodeType":"YulExpressionStatement","src":"6588:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6629:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6640:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6625:3:22"},"nodeType":"YulFunctionCall","src":"6625:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6645:2:22","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6618:6:22"},"nodeType":"YulFunctionCall","src":"6618:30:22"},"nodeType":"YulExpressionStatement","src":"6618:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6668:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6679:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6664:3:22"},"nodeType":"YulFunctionCall","src":"6664:18:22"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6684:26:22","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6657:6:22"},"nodeType":"YulFunctionCall","src":"6657:54:22"},"nodeType":"YulExpressionStatement","src":"6657:54:22"},{"nodeType":"YulAssignment","src":"6720:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6732:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6743:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6728:3:22"},"nodeType":"YulFunctionCall","src":"6728:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6720:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6555:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6569:4:22","type":""}],"src":"6404:348:22"},{"body":{"nodeType":"YulBlock","src":"6931:231:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6948:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6959:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6941:6:22"},"nodeType":"YulFunctionCall","src":"6941:21:22"},"nodeType":"YulExpressionStatement","src":"6941:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6982:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6993:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6978:3:22"},"nodeType":"YulFunctionCall","src":"6978:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6998:2:22","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6971:6:22"},"nodeType":"YulFunctionCall","src":"6971:30:22"},"nodeType":"YulExpressionStatement","src":"6971:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7021:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7032:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7017:3:22"},"nodeType":"YulFunctionCall","src":"7017:18:22"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7037:34:22","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7010:6:22"},"nodeType":"YulFunctionCall","src":"7010:62:22"},"nodeType":"YulExpressionStatement","src":"7010:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7092:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7103:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7088:3:22"},"nodeType":"YulFunctionCall","src":"7088:18:22"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7108:11:22","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7081:6:22"},"nodeType":"YulFunctionCall","src":"7081:39:22"},"nodeType":"YulExpressionStatement","src":"7081:39:22"},{"nodeType":"YulAssignment","src":"7129:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7141:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7152:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7137:3:22"},"nodeType":"YulFunctionCall","src":"7137:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7129:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6908:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6922:4:22","type":""}],"src":"6757:405:22"},{"body":{"nodeType":"YulBlock","src":"7354:283:22","statements":[{"nodeType":"YulVariableDeclaration","src":"7364:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7384:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7378:5:22"},"nodeType":"YulFunctionCall","src":"7378:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7368:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7426:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"7434:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7422:3:22"},"nodeType":"YulFunctionCall","src":"7422:17:22"},{"name":"pos","nodeType":"YulIdentifier","src":"7441:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"7446:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7400:21:22"},"nodeType":"YulFunctionCall","src":"7400:53:22"},"nodeType":"YulExpressionStatement","src":"7400:53:22"},{"nodeType":"YulVariableDeclaration","src":"7462:29:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7479:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"7484:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7475:3:22"},"nodeType":"YulFunctionCall","src":"7475:16:22"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7466:5:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7500:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7522:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7516:5:22"},"nodeType":"YulFunctionCall","src":"7516:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7504:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7564:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"7572:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7560:3:22"},"nodeType":"YulFunctionCall","src":"7560:17:22"},{"name":"end_1","nodeType":"YulIdentifier","src":"7579:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"7586:8:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7538:21:22"},"nodeType":"YulFunctionCall","src":"7538:57:22"},"nodeType":"YulExpressionStatement","src":"7538:57:22"},{"nodeType":"YulAssignment","src":"7604:27:22","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7615:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"7622:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7611:3:22"},"nodeType":"YulFunctionCall","src":"7611:20:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7604:3:22"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7322:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7327:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7335:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7346:3:22","type":""}],"src":"7167:470:22"},{"body":{"nodeType":"YulBlock","src":"7816:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7833:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7844:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7826:6:22"},"nodeType":"YulFunctionCall","src":"7826:21:22"},"nodeType":"YulExpressionStatement","src":"7826:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7867:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7878:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7863:3:22"},"nodeType":"YulFunctionCall","src":"7863:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7883:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7856:6:22"},"nodeType":"YulFunctionCall","src":"7856:30:22"},"nodeType":"YulExpressionStatement","src":"7856:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7906:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7917:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7902:3:22"},"nodeType":"YulFunctionCall","src":"7902:18:22"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"7922:34:22","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7895:6:22"},"nodeType":"YulFunctionCall","src":"7895:62:22"},"nodeType":"YulExpressionStatement","src":"7895:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7977:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7988:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7973:3:22"},"nodeType":"YulFunctionCall","src":"7973:18:22"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"7993:7:22","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7966:6:22"},"nodeType":"YulFunctionCall","src":"7966:35:22"},"nodeType":"YulExpressionStatement","src":"7966:35:22"},{"nodeType":"YulAssignment","src":"8010:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8022:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8033:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8018:3:22"},"nodeType":"YulFunctionCall","src":"8018:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8010:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7793:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7807:4:22","type":""}],"src":"7642:401:22"},{"body":{"nodeType":"YulBlock","src":"8222:226:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8239:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8250:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8232:6:22"},"nodeType":"YulFunctionCall","src":"8232:21:22"},"nodeType":"YulExpressionStatement","src":"8232:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8273:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8284:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8269:3:22"},"nodeType":"YulFunctionCall","src":"8269:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8289:2:22","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8262:6:22"},"nodeType":"YulFunctionCall","src":"8262:30:22"},"nodeType":"YulExpressionStatement","src":"8262:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8312:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8323:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8308:3:22"},"nodeType":"YulFunctionCall","src":"8308:18:22"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8328:34:22","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8301:6:22"},"nodeType":"YulFunctionCall","src":"8301:62:22"},"nodeType":"YulExpressionStatement","src":"8301:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8383:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8394:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8379:3:22"},"nodeType":"YulFunctionCall","src":"8379:18:22"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8399:6:22","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8372:6:22"},"nodeType":"YulFunctionCall","src":"8372:34:22"},"nodeType":"YulExpressionStatement","src":"8372:34:22"},{"nodeType":"YulAssignment","src":"8415:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8427:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8438:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:22"},"nodeType":"YulFunctionCall","src":"8423:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8415:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8199:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8213:4:22","type":""}],"src":"8048:400:22"},{"body":{"nodeType":"YulBlock","src":"8485:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8502:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8509:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8514:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8505:3:22"},"nodeType":"YulFunctionCall","src":"8505:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8495:6:22"},"nodeType":"YulFunctionCall","src":"8495:31:22"},"nodeType":"YulExpressionStatement","src":"8495:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8542:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8545:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8535:6:22"},"nodeType":"YulFunctionCall","src":"8535:15:22"},"nodeType":"YulExpressionStatement","src":"8535:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8566:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8569:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8559:6:22"},"nodeType":"YulFunctionCall","src":"8559:15:22"},"nodeType":"YulExpressionStatement","src":"8559:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8453:127:22"},{"body":{"nodeType":"YulBlock","src":"8634:76:22","statements":[{"body":{"nodeType":"YulBlock","src":"8656:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8658:16:22"},"nodeType":"YulFunctionCall","src":"8658:18:22"},"nodeType":"YulExpressionStatement","src":"8658:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8650:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"8653:1:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8647:2:22"},"nodeType":"YulFunctionCall","src":"8647:8:22"},"nodeType":"YulIf","src":"8644:34:22"},{"nodeType":"YulAssignment","src":"8687:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8699:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"8702:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8695:3:22"},"nodeType":"YulFunctionCall","src":"8695:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"8687:4:22"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8616:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"8619:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"8625:4:22","type":""}],"src":"8585:125:22"},{"body":{"nodeType":"YulBlock","src":"8763:80:22","statements":[{"body":{"nodeType":"YulBlock","src":"8790:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8792:16:22"},"nodeType":"YulFunctionCall","src":"8792:18:22"},"nodeType":"YulExpressionStatement","src":"8792:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8779:1:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8786:1:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8782:3:22"},"nodeType":"YulFunctionCall","src":"8782:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8776:2:22"},"nodeType":"YulFunctionCall","src":"8776:13:22"},"nodeType":"YulIf","src":"8773:39:22"},{"nodeType":"YulAssignment","src":"8821:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8832:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"8835:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8828:3:22"},"nodeType":"YulFunctionCall","src":"8828:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"8821:3:22"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8746:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"8749:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8755:3:22","type":""}],"src":"8715:128:22"},{"body":{"nodeType":"YulBlock","src":"9022:175:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9039:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9050:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9032:6:22"},"nodeType":"YulFunctionCall","src":"9032:21:22"},"nodeType":"YulExpressionStatement","src":"9032:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9073:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9084:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9069:3:22"},"nodeType":"YulFunctionCall","src":"9069:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9089:2:22","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9062:6:22"},"nodeType":"YulFunctionCall","src":"9062:30:22"},"nodeType":"YulExpressionStatement","src":"9062:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9112:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9123:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9108:3:22"},"nodeType":"YulFunctionCall","src":"9108:18:22"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"9128:27:22","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9101:6:22"},"nodeType":"YulFunctionCall","src":"9101:55:22"},"nodeType":"YulExpressionStatement","src":"9101:55:22"},{"nodeType":"YulAssignment","src":"9165:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9177:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9188:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9173:3:22"},"nodeType":"YulFunctionCall","src":"9173:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9165:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8999:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9013:4:22","type":""}],"src":"8848:349:22"},{"body":{"nodeType":"YulBlock","src":"9376:240:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9393:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9404:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9386:6:22"},"nodeType":"YulFunctionCall","src":"9386:21:22"},"nodeType":"YulExpressionStatement","src":"9386:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9427:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9438:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9423:3:22"},"nodeType":"YulFunctionCall","src":"9423:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9443:2:22","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9416:6:22"},"nodeType":"YulFunctionCall","src":"9416:30:22"},"nodeType":"YulExpressionStatement","src":"9416:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9466:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9477:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9462:3:22"},"nodeType":"YulFunctionCall","src":"9462:18:22"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9482:34:22","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9455:6:22"},"nodeType":"YulFunctionCall","src":"9455:62:22"},"nodeType":"YulExpressionStatement","src":"9455:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9537:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9548:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9533:3:22"},"nodeType":"YulFunctionCall","src":"9533:18:22"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9553:20:22","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9526:6:22"},"nodeType":"YulFunctionCall","src":"9526:48:22"},"nodeType":"YulExpressionStatement","src":"9526:48:22"},{"nodeType":"YulAssignment","src":"9583:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9595:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9606:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9591:3:22"},"nodeType":"YulFunctionCall","src":"9591:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9583:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9353:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9367:4:22","type":""}],"src":"9202:414:22"},{"body":{"nodeType":"YulBlock","src":"9653:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9670:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9677:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9682:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9673:3:22"},"nodeType":"YulFunctionCall","src":"9673:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9663:6:22"},"nodeType":"YulFunctionCall","src":"9663:31:22"},"nodeType":"YulExpressionStatement","src":"9663:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9710:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9713:4:22","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9703:6:22"},"nodeType":"YulFunctionCall","src":"9703:15:22"},"nodeType":"YulExpressionStatement","src":"9703:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9734:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9737:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9727:6:22"},"nodeType":"YulFunctionCall","src":"9727:15:22"},"nodeType":"YulExpressionStatement","src":"9727:15:22"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9621:127:22"},{"body":{"nodeType":"YulBlock","src":"9956:286:22","statements":[{"nodeType":"YulVariableDeclaration","src":"9966:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9984:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9989:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9980:3:22"},"nodeType":"YulFunctionCall","src":"9980:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"9993:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9976:3:22"},"nodeType":"YulFunctionCall","src":"9976:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9970:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10011:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10026:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"10034:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10022:3:22"},"nodeType":"YulFunctionCall","src":"10022:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10004:6:22"},"nodeType":"YulFunctionCall","src":"10004:34:22"},"nodeType":"YulExpressionStatement","src":"10004:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10058:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10069:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10054:3:22"},"nodeType":"YulFunctionCall","src":"10054:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10078:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"10086:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10074:3:22"},"nodeType":"YulFunctionCall","src":"10074:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10047:6:22"},"nodeType":"YulFunctionCall","src":"10047:43:22"},"nodeType":"YulExpressionStatement","src":"10047:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10110:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10121:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10106:3:22"},"nodeType":"YulFunctionCall","src":"10106:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"10126:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10099:6:22"},"nodeType":"YulFunctionCall","src":"10099:34:22"},"nodeType":"YulExpressionStatement","src":"10099:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10153:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10164:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10149:3:22"},"nodeType":"YulFunctionCall","src":"10149:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"10169:3:22","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10142:6:22"},"nodeType":"YulFunctionCall","src":"10142:31:22"},"nodeType":"YulExpressionStatement","src":"10142:31:22"},{"nodeType":"YulAssignment","src":"10182:54:22","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10208:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10220:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10231:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10216:3:22"},"nodeType":"YulFunctionCall","src":"10216:19:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10190:17:22"},"nodeType":"YulFunctionCall","src":"10190:46:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10182:4:22"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9901:9:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9912:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9920:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9928:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9936:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9947:4:22","type":""}],"src":"9753:489:22"},{"body":{"nodeType":"YulBlock","src":"10327:169:22","statements":[{"body":{"nodeType":"YulBlock","src":"10373:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10382:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10385:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10375:6:22"},"nodeType":"YulFunctionCall","src":"10375:12:22"},"nodeType":"YulExpressionStatement","src":"10375:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10348:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"10357:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10344:3:22"},"nodeType":"YulFunctionCall","src":"10344:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"10369:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10340:3:22"},"nodeType":"YulFunctionCall","src":"10340:32:22"},"nodeType":"YulIf","src":"10337:52:22"},{"nodeType":"YulVariableDeclaration","src":"10398:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10417:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10411:5:22"},"nodeType":"YulFunctionCall","src":"10411:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10402:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10460:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10436:23:22"},"nodeType":"YulFunctionCall","src":"10436:30:22"},"nodeType":"YulExpressionStatement","src":"10436:30:22"},{"nodeType":"YulAssignment","src":"10475:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"10485:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10475:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10293:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10304:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10316:6:22","type":""}],"src":"10247:249:22"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 62)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD2C JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9E JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDA JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDF5 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF56 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x934 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0xA02 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xFDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x87C PUSH1 0x0 DUP3 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x8A5 SWAP1 DUP5 SWAP1 PUSH2 0x1023 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x8D3 SWAP1 DUP5 SWAP1 PUSH2 0x103A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x995 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xA0D DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0xA19 DUP5 DUP5 DUP5 DUP5 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1052 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA42 DUP4 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA62 JUMPI PUSH2 0xA62 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA8C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA96 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xBBE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB0C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x10A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB44 SWAP2 DUP2 ADD SWAP1 PUSH2 0x10E1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1052 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC08 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC52 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC6A JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC7E JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC90 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCEF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD18 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBC DUP5 PUSH2 0xD58 JUMP JUMPDEST SWAP3 POP PUSH2 0xDCA PUSH1 0x20 DUP6 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE11 DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE66 DUP6 PUSH2 0xD58 JUMP JUMPDEST SWAP4 POP PUSH2 0xE74 PUSH1 0x20 DUP7 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEBE JUMPI PUSH2 0xEBE PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE6 PUSH2 0xE31 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF3F DUP4 PUSH2 0xD58 JUMP JUMPDEST SWAP2 POP PUSH2 0xF4D PUSH1 0x20 DUP5 ADD PUSH2 0xD58 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF6A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF8A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFF0 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1004 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xCD4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1035 JUMPI PUSH2 0x1035 PUSH2 0x100D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x104D JUMPI PUSH2 0x104D PUSH2 0x100D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10D7 SWAP1 DUP4 ADD DUP5 PUSH2 0xD00 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xCA1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 PUSH14 0x8C4D23E167D7E5F5EA18FE7AF264 0xE5 0x4E KECCAK256 0xF 0x2F MLOAD 0xD0 0xE3 EXTCODESIZE SMOD SWAP5 DUP1 DUP1 PUSH14 0xC32F64736F6C634300080D003300 ","sourceMap":"1382:13860:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2417:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:22;;558:22;540:41;;528:2;513:18;2417:300:15;;;;;;;;3317:98;;;:::i;:::-;;;;;;;:::i;4775:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:22;;;1674:51;;1662:2;1647:18;4775:167:15;1528:203:22;4314:400:15;;;;;;:::i;:::-;;:::i;:::-;;5452:327;;;;;;:::i;:::-;;:::i;5845:179::-;;;;;;:::i;:::-;;:::i;3037:218::-;;;;;;:::i;:::-;;:::i;2776:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2843:25:22;;;2831:2;2816:18;2776:204:15;2697:177:22;3479:102:15;;;:::i;5009:153::-;;;;;;:::i;:::-;;:::i;6090:315::-;;;;;;:::i;:::-;;:::i;3647:276::-;;;;;;:::i;:::-;;:::i;5228:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;5348:25:15;;;5325:4;5348:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5228:162;2417:300;2519:4;-1:-1:-1;;;;;;2554:40:15;;-1:-1:-1;;;2554:40:15;;:104;;-1:-1:-1;;;;;;;2610:48:15;;-1:-1:-1;;;2610:48:15;2554:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:8;;;2674:36:15;2535:175;2417:300;-1:-1:-1;;2417:300:15:o;3317:98::-;3371:13;3403:5;3396:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3317:98;:::o;4775:167::-;4851:7;4870:23;4885:7;4870:14;:23::i;:::-;-1:-1:-1;4911:24:15;;;;:15;:24;;;;;;-1:-1:-1;;;;;4911:24:15;;4775:167::o;4314:400::-;4394:13;4410:16;4418:7;4410;:16::i;:::-;4394:32;;4450:5;-1:-1:-1;;;;;4444:11:15;:2;-1:-1:-1;;;;;4444:11:15;;4436:57;;;;-1:-1:-1;;;4436:57:15;;5358:2:22;4436:57:15;;;5340:21:22;5397:2;5377:18;;;5370:30;5436:34;5416:18;;;5409:62;-1:-1:-1;;;5487:18:22;;;5480:31;5528:19;;4436:57:15;;;;;;;;;719:10:6;-1:-1:-1;;;;;4525:21:15;;;;:62;;-1:-1:-1;4550:37:15;4567:5;719:10:6;5228:162:15;:::i;4550:37::-;4504:171;;;;-1:-1:-1;;;4504:171:15;;5760:2:22;4504:171:15;;;5742:21:22;5799:2;5779:18;;;5772:30;5838:34;5818:18;;;5811:62;5909:32;5889:18;;;5882:60;5959:19;;4504:171:15;5558:426:22;4504:171:15;4686:21;4695:2;4699:7;4686:8;:21::i;:::-;4384:330;4314:400;;:::o;5452:327::-;5641:41;719:10:6;5674:7:15;5641:18;:41::i;:::-;5633:100;;;;-1:-1:-1;;;5633:100:15;;;;;;;:::i;:::-;5744:28;5754:4;5760:2;5764:7;5744:9;:28::i;5845:179::-;5978:39;5995:4;6001:2;6005:7;5978:39;;;;;;;;;;;;:16;:39::i;3037:218::-;3109:7;3144:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3144:16:15;;3170:56;;;;-1:-1:-1;;;3170:56:15;;6606:2:22;3170:56:15;;;6588:21:22;6645:2;6625:18;;;6618:30;-1:-1:-1;;;6664:18:22;;;6657:54;6728:18;;3170:56:15;6404:348:22;2776:204:15;2848:7;-1:-1:-1;;;;;2875:19:15;;2867:73;;;;-1:-1:-1;;;2867:73:15;;6959:2:22;2867:73:15;;;6941:21:22;6998:2;6978:18;;;6971:30;7037:34;7017:18;;;7010:62;-1:-1:-1;;;7088:18:22;;;7081:39;7137:19;;2867:73:15;6757:405:22;2867:73:15;-1:-1:-1;;;;;;2957:16:15;;;;;:9;:16;;;;;;;2776:204::o;3479:102::-;3535:13;3567:7;3560:14;;;;;:::i;5009:153::-;5103:52;719:10:6;5136:8:15;5146;5103:18;:52::i;:::-;5009:153;;:::o;6090:315::-;6258:41;719:10:6;6291:7:15;6258:18;:41::i;:::-;6250:100;;;;-1:-1:-1;;;6250:100:15;;;;;;;:::i;:::-;6360:38;6374:4;6380:2;6384:7;6393:4;6360:13;:38::i;:::-;6090:315;;;;:::o;3647:276::-;3720:13;3745:23;3760:7;3745:14;:23::i;:::-;3779:21;3803:10;4241:9;;;;;;;;;-1:-1:-1;4241:9:15;;;4165:92;3803:10;3779:34;;3854:1;3836:7;3830:21;:25;:86;;;;;;;;;;;;;;;;;3882:7;3891:18;:7;:16;:18::i;:::-;3865:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3830:86;3823:93;3647:276;-1:-1:-1;;;3647:276:15:o;12550:133::-;7939:4;7962:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7962:16:15;12623:53;;;;-1:-1:-1;;;12623:53:15;;6606:2:22;12623:53:15;;;6588:21:22;6645:2;6625:18;;;6618:30;-1:-1:-1;;;6664:18:22;;;6657:54;6728:18;;12623:53:15;6404:348:22;12623:53:15;12550:133;:::o;11859:164::-;11933:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11933:29:15;-1:-1:-1;;;;;11933:29:15;;;;;;;;:24;;11986:16;11933:24;11986:7;:16::i;:::-;-1:-1:-1;;;;;11977:39:15;;;;;;;;;;;11859:164;;:::o;8157:254::-;8250:4;8266:13;8282:16;8290:7;8282;:16::i;:::-;8266:32;;8327:5;-1:-1:-1;;;;;8316:16:15;:7;-1:-1:-1;;;;;8316:16:15;;:52;;;-1:-1:-1;;;;;;5348:25:15;;;5325:4;5348:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;8336:32;8316:87;;;;8396:7;-1:-1:-1;;;;;8372:31:15;:20;8384:7;8372:11;:20::i;:::-;-1:-1:-1;;;;;8372:31:15;;8316:87;8308:96;8157:254;-1:-1:-1;;;;8157:254:15:o;11149:598::-;11296:4;-1:-1:-1;;;;;11276:24:15;:16;11284:7;11276;:16::i;:::-;-1:-1:-1;;;;;11276:24:15;;11268:74;;;;-1:-1:-1;;;11268:74:15;;7844:2:22;11268:74:15;;;7826:21:22;7883:2;7863:18;;;7856:30;7922:34;7902:18;;;7895:62;-1:-1:-1;;;7973:18:22;;;7966:35;8018:19;;11268:74:15;7642:401:22;11268:74:15;-1:-1:-1;;;;;11360:16:15;;11352:65;;;;-1:-1:-1;;;11352:65:15;;8250:2:22;11352:65:15;;;8232:21:22;8289:2;8269:18;;;8262:30;8328:34;8308:18;;;8301:62;-1:-1:-1;;;8379:18:22;;;8372:34;8423:19;;11352:65:15;8048:400:22;11352:65:15;11529:29;11546:1;11550:7;11529:8;:29::i;:::-;-1:-1:-1;;;;;11569:15:15;;;;;;:9;:15;;;;;:20;;11588:1;;11569:15;:20;;11588:1;;11569:20;:::i;:::-;;;;-1:-1:-1;;;;;;;11599:13:15;;;;;;:9;:13;;;;;:18;;11616:1;;11599:13;:18;;11616:1;;11599:18;:::i;:::-;;;;-1:-1:-1;;11627:16:15;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;11627:21:15;-1:-1:-1;;;;;11627:21:15;;;;;;;;;11664:27;;11627:16;;11664:27;;;;;;;4384:330;4314:400;;:::o;12159:307::-;12309:8;-1:-1:-1;;;;;12300:17:15;:5;-1:-1:-1;;;;;12300:17:15;;12292:55;;;;-1:-1:-1;;;12292:55:15;;9050:2:22;12292:55:15;;;9032:21:22;9089:2;9069:18;;;9062:30;9128:27;9108:18;;;9101:55;9173:18;;12292:55:15;8848:349:22;12292:55:15;-1:-1:-1;;;;;12357:25:15;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;12357:46:15;;;;;;;;;;12418:41;;540::22;;;12418::15;;513:18:22;12418:41:15;;;;;;;12159:307;;;:::o;7266:305::-;7416:28;7426:4;7432:2;7436:7;7416:9;:28::i;:::-;7462:47;7485:4;7491:2;7495:7;7504:4;7462:22;:47::i;:::-;7454:110;;;;-1:-1:-1;;;7454:110:15;;;;;;;:::i;447:696:7:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:7;-1:-1:-1;604:41:7;-1:-1:-1;765:28:7;;;781:2;765:28;820:280;-1:-1:-1;;851:5:7;-1:-1:-1;;;985:2:7;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:7;820:280;1064:21;-1:-1:-1;1120:6:7;447:696;-1:-1:-1;;;447:696:7:o;13235:834:15:-;13384:4;-1:-1:-1;;;;;13404:14:15;;;:18;13400:663;;13442:71;;-1:-1:-1;;;13442:71:15;;-1:-1:-1;;;;;13442:36:15;;;;;:71;;719:10:6;;13493:4:15;;13499:7;;13508:4;;13442:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13442:71:15;;;;;;;;-1:-1:-1;;13442:71:15;;;;;;;;;;;;:::i;:::-;;;13438:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13680:6;:13;13697:1;13680:18;13676:321;;13722:60;;-1:-1:-1;;;13722:60:15;;;;;;;:::i;13676:321::-;13949:6;13943:13;13934:6;13930:2;13926:15;13919:38;13438:573;-1:-1:-1;;;;;;13563:51:15;-1:-1:-1;;;13563:51:15;;-1:-1:-1;13556:58:15;;13400:663;-1:-1:-1;14048:4:15;13235:834;;;;;;:::o;10139:916:10:-;10192:7;;-1:-1:-1;;;10267:17:10;;10263:103;;-1:-1:-1;;;10304:17:10;;;-1:-1:-1;10349:2:10;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:10;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:10;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:10;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:10;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:10;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:10:o;14:131:22:-;-1:-1:-1;;;;;;88:32:22;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:22;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:22;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:22:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:22;;1343:180;-1:-1:-1;1343:180:22:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:22;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:22:o;2173:328::-;2250:6;2258;2266;2319:2;2307:9;2298:7;2294:23;2290:32;2287:52;;;2335:1;2332;2325:12;2287:52;2358:29;2377:9;2358:29;:::i;:::-;2348:39;;2406:38;2440:2;2429:9;2425:18;2406:38;:::i;:::-;2396:48;;2491:2;2480:9;2476:18;2463:32;2453:42;;2173:328;;;;;:::o;2506:186::-;2565:6;2618:2;2606:9;2597:7;2593:23;2589:32;2586:52;;;2634:1;2631;2624:12;2586:52;2657:29;2676:9;2657:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;;3708:2;3697:9;3693:18;3680:32;3670:42;;3763:2;3752:9;3748:18;3735:32;3786:18;3827:2;3819:6;3816:14;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:22;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5989:410::-;6191:2;6173:21;;;6230:2;6210:18;;;6203:30;6269:34;6264:2;6249:18;;6242:62;-1:-1:-1;;;6335:2:22;6320:18;;6313:44;6389:3;6374:19;;5989:410::o;7167:470::-;7346:3;7384:6;7378:13;7400:53;7446:6;7441:3;7434:4;7426:6;7422:17;7400:53;:::i;:::-;7516:13;;7475:16;;;;7538:57;7516:13;7475:16;7572:4;7560:17;;7538:57;:::i;:::-;7611:20;;7167:470;-1:-1:-1;;;;7167:470:22:o;8453:127::-;8514:10;8509:3;8505:20;8502:1;8495:31;8545:4;8542:1;8535:15;8569:4;8566:1;8559:15;8585:125;8625:4;8653:1;8650;8647:8;8644:34;;;8658:18;;:::i;:::-;-1:-1:-1;8695:9:22;;8585:125::o;8715:128::-;8755:3;8786:1;8782:6;8779:1;8776:13;8773:39;;;8792:18;;:::i;:::-;-1:-1:-1;8828:9:22;;8715:128::o;9202:414::-;9404:2;9386:21;;;9443:2;9423:18;;;9416:30;9482:34;9477:2;9462:18;;9455:62;-1:-1:-1;;;9548:2:22;9533:18;;9526:48;9606:3;9591:19;;9202:414::o;9753:489::-;-1:-1:-1;;;;;10022:15:22;;;10004:34;;10074:15;;10069:2;10054:18;;10047:43;10121:2;10106:18;;10099:34;;;10169:3;10164:2;10149:18;;10142:31;;;9947:4;;10190:46;;10216:19;;10208:6;10190:46;:::i;:::-;10182:54;9753:489;-1:-1:-1;;;;;;9753:489:22:o;10247:249::-;10316:6;10369:2;10357:9;10348:7;10344:23;10340:32;10337:52;;;10385:1;10382;10375:12;10337:52;10417:9;10411:16;10436:30;10460:5;10436:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"880800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"4769","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2561","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"511","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. NOTE:  The only changes made here are:    - change scope of \\\"_owners\\\" from private to internal    - change scope of \\\"_balances\\\" from private to internal    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/lib/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * NOTE:\\n *  The only changes made here are:\\n *    - change scope of \\\"_owners\\\" from private to internal\\n *    - change scope of \\\"_balances\\\" from private to internal\\n *    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"\\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\\n        _owners[tokenId] = _NULL_ADDRESS;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x726960336df673d5fd509dde21ba3bed24645291d201f74762b945fe4d5aa016\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2152,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2154,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2158,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2162,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2166,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2172,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/ERC721Solady.sol":{"ERC721":{"abi":[{"inputs":[],"name":"AccountBalanceOverflow","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"NotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TokenAlreadyExists","type":"error"},{"inputs":[],"name":"TokenDoesNotExist","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"isApproved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"isApproved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"errors":{"AccountBalanceOverflow()":[{"details":"The recipient's balance has overflowed."}],"BalanceQueryForZeroAddress()":[{"details":"Cannot query the balance for the zero address."}],"NotOwnerNorApproved()":[{"details":"Only the token owner or an approved account can manage the token."}],"TokenAlreadyExists()":[{"details":"The token already exists."}],"TokenDoesNotExist()":[{"details":"The token does not exist."}],"TransferFromIncorrectOwner()":[{"details":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"details":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"details":"Cannot mint or transfer to the zero address."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `account` to manage the `id` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables `operator` to manage all of their tokens."},"Transfer(address,address,uint256)":{"details":"Emitted when token `id` is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."},"getApproved(uint256)":{"details":"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."},"isApprovedForAll(address,address)":{"details":"Returns whether `operator` is approved to manage the tokens of `owner`."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of token `id`. Requirements: - Token `id` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, id, \"\")`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for token `id`."},"transferFrom(address,address,uint256)":{"details":"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."}},"stateVariables":{"_APPROVAL_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"Approval(address,address,uint256)\"))`."},"_APPROVAL_FOR_ALL_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`."},"_ERC721_MASTER_SLOT_SEED":{"details":"The ownership data slot of `id` is given by: ```     mstore(0x00, id)     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20))) ``` Bits Layout: - [0..159]   `addr` - [160..255] `extraData` The approved address slot is given by: `add(1, ownershipSlot)`. See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip The balance slot of `owner` is given by: ```     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     mstore(0x00, owner)     let balanceSlot := keccak256(0x0c, 0x1c) ``` Bits Layout: - [0..31]   `balance` - [32..255] `aux` The `operator` approval slot of `owner` is given by: ```     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))     mstore(0x00, owner)     let operatorApprovalSlot := keccak256(0x0c, 0x30) ```"},"_ERC721_MASTER_SLOT_SEED_MASKED":{"details":"Pre-shifted and pre-masked constant."},"_MAX_ACCOUNT_BALANCE":{"details":"An account can hold up to 4294967295 tokens."},"_TRANSFER_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"Transfer(address,address,uint256)\"))`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `account` to manage the `id` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when token `id` is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for token `id`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"}},\"stateVariables\":{\"_APPROVAL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\"},\"_APPROVAL_FOR_ALL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\"},\"_ERC721_MASTER_SLOT_SEED\":{\"details\":\"The ownership data slot of `id` is given by: ```     mstore(0x00, id)     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20))) ``` Bits Layout: - [0..159]   `addr` - [160..255] `extraData` The approved address slot is given by: `add(1, ownershipSlot)`. See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip The balance slot of `owner` is given by: ```     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     mstore(0x00, owner)     let balanceSlot := keccak256(0x0c, 0x1c) ``` Bits Layout: - [0..31]   `balance` - [32..255] `aux` The `operator` approval slot of `owner` is given by: ```     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))     mstore(0x00, owner)     let operatorApprovalSlot := keccak256(0x0c, 0x30) ```\"},\"_ERC721_MASTER_SLOT_SEED_MASKED\":{\"details\":\"Pre-shifted and pre-masked constant.\"},\"_MAX_ACCOUNT_BALANCE\":{\"details\":\"An account can hold up to 4294967295 tokens.\"},\"_TRANSFER_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"- Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/ERC721Solady.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/ERC721Solady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    // function ownerOf(uint256 id) public view virtual returns (address result)\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        address tokenId = address(uint160(id));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, tokenId)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                if iszero(and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa37e21e66c6b404efe0c18c71da6239d685ec39af8470a3ac09463ab98465167\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"- Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.","version":1}}},"contracts/lib/ERC721iEnumerable.sol":{"ERC721iEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.This implementation also includes support for pre-minting a max-supply of tokens up-front. Note on pre-mint:  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.  For this reason, the \"allTokens\" state vars are unneccesary and have been removed.  Also defines 2 light-weight state vars: \"_preMintReceiver\" & \"_maxSupply\"  Overrides \"ownerOf\" & \"_exists\"","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"Override the ERC721 \"ownerOf\" function to account for the Pre-Mint Receiver."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}. Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}. note: Fix contributed by surfer77"},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.This implementation also includes support for pre-minting a max-supply of tokens up-front. Note on pre-mint:  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.  For this reason, the \\\"allTokens\\\" state vars are unneccesary and have been removed.  Also defines 2 light-weight state vars: \\\"_preMintReceiver\\\" & \\\"_maxSupply\\\"  Overrides \\\"ownerOf\\\" & \\\"_exists\\\"\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"Override the ERC721 \\\"ownerOf\\\" function to account for the Pre-Mint Receiver.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. note: Fix contributed by surfer77\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/ERC721iEnumerable.sol\":\"ERC721iEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/lib/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * NOTE:\\n *  The only changes made here are:\\n *    - change scope of \\\"_owners\\\" from private to internal\\n *    - change scope of \\\"_balances\\\" from private to internal\\n *    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"\\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\\n        _owners[tokenId] = _NULL_ADDRESS;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x726960336df673d5fd509dde21ba3bed24645291d201f74762b945fe4d5aa016\",\"license\":\"MIT\"},\"contracts/lib/ERC721iEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from: OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n *\\n * @dev This implementation also includes support for pre-minting a max-supply of tokens up-front.\\n *\\n * Note on pre-mint:\\n *  Assumes a Max-Supply which is entirely pre-minted to initial address with sequential Token IDs.\\n *  For this reason, the \\\"allTokens\\\" state vars are unneccesary and have been removed.\\n *  Also defines 2 light-weight state vars: \\\"_preMintReceiver\\\" & \\\"_maxSupply\\\"\\n *  Overrides \\\"ownerOf\\\" & \\\"_exists\\\"\\n */\\nabstract contract ERC721iEnumerable is ERC721, IERC721Enumerable {\\n  // Mapping from owner to list of owned token IDs\\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n  // Mapping from token ID to index of the owner tokens list\\n  mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n  // Tracking for the Pre-Mint Receiver\\n  address internal _preMintReceiver;\\n\\n  // Max-Supply for Pre-Mint\\n  uint256 internal _maxSupply;\\n\\n  /**\\n    * @dev See {IERC165-supportsInterface}.\\n    *\\n    * Note on Pre-Mint: this implementation maintains the exact same interface for IERC721Enumerable\\n    */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n    return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n    * note: Fix contributed by surfer77\\n    */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n    require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n    if (owner == address(_preMintReceiver)) {\\n      uint256 supply = totalSupply();\\n      uint256 matched = 0;\\n      for (uint256 i = 1; i < supply; i++) {\\n        if (ownerOf(i) == address(_preMintReceiver)) {\\n          matched += 1;\\n          if (matched - 1 == index) {\\n            return i;\\n          }\\n        }\\n      }\\n    }\\n    return _ownedTokens[owner][index];\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-totalSupply}.\\n    */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    // The Total Supply is simply the Max Supply\\n    return _maxSupply;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-tokenByIndex}.\\n    */\\n  function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n    require(index < _maxSupply, \\\"ERC721Enumerable: global index out of bounds\\\");\\n    // Array index is 0-based, whereas Token ID is 1-based (sequential).\\n    return index + 1;\\n  }\\n\\n  /**\\n    * @dev Override the ERC721 \\\"ownerOf\\\" function to account for the Pre-Mint Receiver.\\n    */\\n  function ownerOf(uint256 tokenId) public view virtual override(IERC721, ERC721) returns (address) {\\n    // Anything beyond the Pre-Minted supply will use the standard \\\"ownerOf\\\"\\n    if (tokenId > _maxSupply) {\\n      return super.ownerOf(tokenId);\\n    }\\n\\n    // Since we have Pre-Minted the Max-Supply to the \\\"Pre-Mint Receiver\\\" account, we know:\\n    //  - if the \\\"_owners\\\" mapping has not been assigned, then the owner is the Pre-Mint Receiver.\\n    //  - after the NFT is transferred, the \\\"_owners\\\" mapping will be updated with the new owner.\\n    address owner_ = _owners[tokenId];\\n    if (owner_ == address(0)) {\\n      owner_ = _preMintReceiver;\\n    }\\n    return owner_;\\n  }\\n\\n  /**\\n    * @dev Override the ERC721 \\\"_exists\\\" function to account for the Pre-Minted Max-Supply.\\n    */\\n  function _exists(uint256 tokenId) internal view virtual override(ERC721) returns (bool) {\\n    // Anything beyond the Pre-Minted supply will use the standard \\\"_exists\\\"\\n    if (tokenId > _maxSupply) {\\n      return super._exists(tokenId);\\n    }\\n\\n    // We know the Max-Supply has been Pre-Minted with Sequential Token IDs\\n    return (tokenId > 0 && tokenId <= _maxSupply);\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_beforeTokenTransfer}.\\n    */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    if (from != to) {\\n      _removeTokenFromOwnerEnumeration(from, tokenId);\\n      _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_addTokenToOwnerEnumeration}.\\n    */\\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n    uint256 length = ERC721.balanceOf(to);\\n    _ownedTokens[to][length] = tokenId;\\n    _ownedTokensIndex[tokenId] = length;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Enumerable-_removeTokenFromOwnerEnumeration}.\\n    */\\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n    // then delete the last slot (swap and pop).\\n\\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n    // When the token to delete is the last token, the swap operation is unnecessary\\n    if (tokenIndex != lastTokenIndex) {\\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n    }\\n\\n    // This also deletes the contents at the last position of the array\\n    delete _ownedTokensIndex[tokenId];\\n    delete _ownedTokens[from][lastTokenIndex];\\n  }\\n}\\n\",\"keccak256\":\"0x99b0f077ef320163c0100348d120946ea6fefa3d3f0148a8880e01d4a1924752\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2152,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2154,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2158,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2162,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2166,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2172,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3728,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_ownedTokens","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":3732,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_ownedTokensIndex","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3734,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_preMintReceiver","offset":0,"slot":"8","type":"t_address"},{"astId":3736,"contract":"contracts/lib/ERC721iEnumerable.sol:ERC721iEnumerable","label":"_maxSupply","offset":0,"slot":"9","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"erc721a/contracts/ERC721A.sol":{"ERC721A":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721) Non-Fungible Token Standard, including the Metadata extension. Optimized for lower gas during batch mints. Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...) starting from `_startTokenId()`. Assumptions: - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply. - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC721A","version":1},"evm":{"bytecode":{"functionDebugData":{"@_4210":{"entryPoint":null,"id":4210,"parameterSlots":2,"returnSlots":0},"@_startTokenId_4219":{"entryPoint":null,"id":4219,"parameterSlots":0,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":296,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":479,"id":null,"parameterSlots":2,"returnSlots":2},"extract_byte_array_length":{"entryPoint":585,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":274,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1985:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:821:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"body":{"nodeType":"YulBlock","src":"942:59:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:22"},"nodeType":"YulFunctionCall","src":"967:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:22"},"nodeType":"YulFunctionCall","src":"963:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:22"},"nodeType":"YulFunctionCall","src":"956:35:22"},"nodeType":"YulExpressionStatement","src":"956:35:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:22"},"nodeType":"YulFunctionCall","src":"924:9:22"},"nodeType":"YulIf","src":"921:80:22"},{"nodeType":"YulAssignment","src":"1010:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:885:22"},{"body":{"nodeType":"YulBlock","src":"1154:444:22","statements":[{"body":{"nodeType":"YulBlock","src":"1200:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1209:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1212:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1202:6:22"},"nodeType":"YulFunctionCall","src":"1202:12:22"},"nodeType":"YulExpressionStatement","src":"1202:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1175:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1184:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1171:3:22"},"nodeType":"YulFunctionCall","src":"1171:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1196:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1167:3:22"},"nodeType":"YulFunctionCall","src":"1167:32:22"},"nodeType":"YulIf","src":"1164:52:22"},{"nodeType":"YulVariableDeclaration","src":"1225:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1239:5:22"},"nodeType":"YulFunctionCall","src":"1239:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1229:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1264:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1282:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1278:3:22"},"nodeType":"YulFunctionCall","src":"1278:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1290:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1274:3:22"},"nodeType":"YulFunctionCall","src":"1274:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1268:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1319:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1328:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1331:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1321:6:22"},"nodeType":"YulFunctionCall","src":"1321:12:22"},"nodeType":"YulExpressionStatement","src":"1321:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1307:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1315:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1304:2:22"},"nodeType":"YulFunctionCall","src":"1304:14:22"},"nodeType":"YulIf","src":"1301:34:22"},{"nodeType":"YulAssignment","src":"1344:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1387:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1398:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1383:3:22"},"nodeType":"YulFunctionCall","src":"1383:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1407:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1354:28:22"},"nodeType":"YulFunctionCall","src":"1354:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1344:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1424:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:22"},"nodeType":"YulFunctionCall","src":"1446:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1440:5:22"},"nodeType":"YulFunctionCall","src":"1440:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1428:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1494:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1506:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1496:6:22"},"nodeType":"YulFunctionCall","src":"1496:12:22"},"nodeType":"YulExpressionStatement","src":"1496:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1480:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1490:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1477:2:22"},"nodeType":"YulFunctionCall","src":"1477:16:22"},"nodeType":"YulIf","src":"1474:36:22"},{"nodeType":"YulAssignment","src":"1519:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1562:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1573:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1558:3:22"},"nodeType":"YulFunctionCall","src":"1558:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1584:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1529:28:22"},"nodeType":"YulFunctionCall","src":"1529:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1519:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1112:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1123:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1135:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1143:6:22","type":""}],"src":"1036:562:22"},{"body":{"nodeType":"YulBlock","src":"1658:325:22","statements":[{"nodeType":"YulAssignment","src":"1668:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1682:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1685:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1678:3:22"},"nodeType":"YulFunctionCall","src":"1678:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1668:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1699:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1729:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1735:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1725:3:22"},"nodeType":"YulFunctionCall","src":"1725:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1703:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1776:31:22","statements":[{"nodeType":"YulAssignment","src":"1778:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1792:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1800:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1788:3:22"},"nodeType":"YulFunctionCall","src":"1788:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1778:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1756:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1749:6:22"},"nodeType":"YulFunctionCall","src":"1749:26:22"},"nodeType":"YulIf","src":"1746:61:22"},{"body":{"nodeType":"YulBlock","src":"1866:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1887:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1894:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1899:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1890:3:22"},"nodeType":"YulFunctionCall","src":"1890:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1880:6:22"},"nodeType":"YulFunctionCall","src":"1880:31:22"},"nodeType":"YulExpressionStatement","src":"1880:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1931:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1934:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1924:6:22"},"nodeType":"YulFunctionCall","src":"1924:15:22"},"nodeType":"YulExpressionStatement","src":"1924:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1952:6:22"},"nodeType":"YulFunctionCall","src":"1952:15:22"},"nodeType":"YulExpressionStatement","src":"1952:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1822:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1845:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1853:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1842:2:22"},"nodeType":"YulFunctionCall","src":"1842:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1819:2:22"},"nodeType":"YulFunctionCall","src":"1819:38:22"},"nodeType":"YulIf","src":"1816:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1638:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1647:6:22","type":""}],"src":"1603:380:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFF3 CODESIZE SUB DUP1 PUSH3 0xFF3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DF JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x285 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7A SWAP1 PUSH3 0x249 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9E JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB9 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xCC JUMP JUMPDEST POP PUSH3 0xF7 SWAP3 SWAP2 POP PUSH3 0xFB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF7 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xFC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x157 PUSH3 0x112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x182 JUMPI PUSH3 0x182 PUSH3 0x112 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1C3 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A4 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D5 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x219 DUP7 DUP4 DUP8 ADD PUSH3 0x128 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x128 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD5E DUP1 PUSH3 0x295 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x139 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xA3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xA83 JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x69A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xB56 JUMP JUMPDEST PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x75F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x2F1 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x30C JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC65 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xC65 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP3 PUSH2 0x640 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x42C JUMPI PUSH2 0x40F DUP2 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x817 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x513 JUMPI PUSH2 0x4F6 DUP7 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5D7 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5D5 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x63B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x715 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C DUP3 PUSH2 0x817 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC65 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x720 DUP5 DUP5 DUP5 PUSH2 0x488 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x759 JUMPI PUSH2 0x73C DUP5 DUP5 DUP5 DUP5 PUSH2 0x87E JUMP JUMPDEST PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76A DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x79E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7E9 JUMP JUMPDEST DUP1 PUSH2 0x7C8 DUP5 PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D9 SWAP3 SWAP2 SWAP1 PUSH2 0xC9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30C JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x863 JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x8B3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8EB SWAP2 DUP2 ADD SWAP1 PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x94C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0x983 JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9FE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9E6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x759 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA27 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA9F DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACB DUP5 PUSH2 0xA67 JUMP JUMPDEST SWAP3 POP PUSH2 0xAD9 PUSH1 0x20 DUP6 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP3 PUSH2 0xA67 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB20 DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB75 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP4 POP PUSH2 0xB83 PUSH1 0x20 DUP7 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBCD JUMPI PUSH2 0xBCD PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBF5 JUMPI PUSH2 0xBF5 PUSH2 0xB40 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4E DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH2 0xC5C PUSH1 0x20 DUP5 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC79 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC99 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xCB1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xCC5 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xD01 SWAP1 DUP4 ADD DUP5 PUSH2 0xA0F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH6 0xE1043C860337 SAR OR ISZERO SSTORE GASLIMIT 0x2C 0xB0 BALANCE DUP4 0xE 0xA7 0xA7 0xD7 PUSH10 0x2D7F24CB1846475FFF24 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"895:40452:18:-:0;;;4946:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5012:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;5035:17:18;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;5482:7:18;5062:31;;-1:-1:-1;895:40452:18;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;895:40452:18;;;-1:-1:-1;895:40452:18;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:22:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:22;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;895:40452:18;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfers_5080":{"entryPoint":null,"id":5080,"parameterSlots":4,"returnSlots":0},"@_baseURI_4477":{"entryPoint":null,"id":4477,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfers_5067":{"entryPoint":null,"id":5067,"parameterSlots":4,"returnSlots":0},"@_checkContractOnERC721Received_5135":{"entryPoint":2174,"id":5135,"parameterSlots":4,"returnSlots":1},"@_exists_4819":{"entryPoint":2032,"id":4819,"parameterSlots":1,"returnSlots":1},"@_extraData_5641":{"entryPoint":null,"id":5641,"parameterSlots":3,"returnSlots":1},"@_getApprovedSlotAndAddress_4852":{"entryPoint":null,"id":4852,"parameterSlots":1,"returnSlots":2},"@_isSenderApprovedOrOwner_4833":{"entryPoint":null,"id":4833,"parameterSlots":3,"returnSlots":1},"@_msgSenderERC721A_5684":{"entryPoint":null,"id":5684,"parameterSlots":0,"returnSlots":1},"@_nextExtraData_5674":{"entryPoint":null,"id":5674,"parameterSlots":3,"returnSlots":1},"@_packOwnershipData_4671":{"entryPoint":null,"id":4671,"parameterSlots":2,"returnSlots":1},"@_packedOwnershipOf_4605":{"entryPoint":2071,"id":4605,"parameterSlots":1,"returnSlots":1},"@_startTokenId_4219":{"entryPoint":null,"id":4219,"parameterSlots":0,"returnSlots":1},"@_toString_5694":{"entryPoint":2409,"id":5694,"parameterSlots":1,"returnSlots":1},"@approve_4726":{"entryPoint":1000,"id":4726,"parameterSlots":2,"returnSlots":0},"@balanceOf_4292":{"entryPoint":1611,"id":4292,"parameterSlots":1,"returnSlots":1},"@getApproved_4749":{"entryPoint":932,"id":4749,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_4793":{"entryPoint":null,"id":4793,"parameterSlots":2,"returnSlots":1},"@name_4415":{"entryPoint":786,"id":4415,"parameterSlots":0,"returnSlots":1},"@ownerOf_4497":{"entryPoint":1600,"id":4497,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_5016":{"entryPoint":1568,"id":5016,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_5054":{"entryPoint":1813,"id":5054,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_4775":{"entryPoint":1705,"id":4775,"parameterSlots":2,"returnSlots":0},"@supportsInterface_4405":{"entryPoint":704,"id":4405,"parameterSlots":1,"returnSlots":1},"@symbol_4425":{"entryPoint":1690,"id":4425,"parameterSlots":0,"returnSlots":1},"@tokenURI_4468":{"entryPoint":1887,"id":4468,"parameterSlots":1,"returnSlots":1},"@totalSupply_4244":{"entryPoint":null,"id":4244,"parameterSlots":0,"returnSlots":1},"@transferFrom_4997":{"entryPoint":1160,"id":4997,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":2663,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2793,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3122,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2733,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":2902,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":2820,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2691,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2502,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":3339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2638,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":2575,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3231,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3278,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2619,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":2531,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3173,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":2880,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":2477,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6376:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:22","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:22"},"nodeType":"YulFunctionCall","src":"125:12:22"},"nodeType":"YulExpressionStatement","src":"125:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:22"},"nodeType":"YulFunctionCall","src":"99:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:22"},"nodeType":"YulFunctionCall","src":"88:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:22"},"nodeType":"YulFunctionCall","src":"78:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:22"},"nodeType":"YulFunctionCall","src":"71:51:22"},"nodeType":"YulIf","src":"68:71:22"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:22","type":""}],"src":"14:131:22"},{"body":{"nodeType":"YulBlock","src":"219:176:22","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:22"},"nodeType":"YulFunctionCall","src":"267:12:22"},"nodeType":"YulExpressionStatement","src":"267:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:22"},"nodeType":"YulFunctionCall","src":"236:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:22"},"nodeType":"YulFunctionCall","src":"232:32:22"},"nodeType":"YulIf","src":"229:52:22"},{"nodeType":"YulVariableDeclaration","src":"290:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:22"},"nodeType":"YulFunctionCall","src":"303:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:22"},"nodeType":"YulFunctionCall","src":"335:30:22"},"nodeType":"YulExpressionStatement","src":"335:30:22"},{"nodeType":"YulAssignment","src":"374:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:22","type":""}],"src":"150:245:22"},{"body":{"nodeType":"YulBlock","src":"495:92:22","statements":[{"nodeType":"YulAssignment","src":"505:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:22"},"nodeType":"YulFunctionCall","src":"513:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:22"},"nodeType":"YulFunctionCall","src":"565:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:22"},"nodeType":"YulFunctionCall","src":"558:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:22"},"nodeType":"YulFunctionCall","src":"540:41:22"},"nodeType":"YulExpressionStatement","src":"540:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:22","type":""}],"src":"400:187:22"},{"body":{"nodeType":"YulBlock","src":"645:205:22","statements":[{"nodeType":"YulVariableDeclaration","src":"655:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"664:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"659:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"724:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"749:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"754:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:22"},"nodeType":"YulFunctionCall","src":"745:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"768:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"773:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"764:3:22"},"nodeType":"YulFunctionCall","src":"764:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"758:5:22"},"nodeType":"YulFunctionCall","src":"758:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"738:6:22"},"nodeType":"YulFunctionCall","src":"738:39:22"},"nodeType":"YulExpressionStatement","src":"738:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"685:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"682:2:22"},"nodeType":"YulFunctionCall","src":"682:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"696:19:22","statements":[{"nodeType":"YulAssignment","src":"698:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"710:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:22"},"nodeType":"YulFunctionCall","src":"703:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"678:3:22","statements":[]},"src":"674:113:22"},{"body":{"nodeType":"YulBlock","src":"813:31:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"826:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"831:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:22"},"nodeType":"YulFunctionCall","src":"822:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"840:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:22"},"nodeType":"YulFunctionCall","src":"815:27:22"},"nodeType":"YulExpressionStatement","src":"815:27:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"802:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"805:6:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"799:2:22"},"nodeType":"YulFunctionCall","src":"799:13:22"},"nodeType":"YulIf","src":"796:48:22"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"623:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"628:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"633:6:22","type":""}],"src":"592:258:22"},{"body":{"nodeType":"YulBlock","src":"905:208:22","statements":[{"nodeType":"YulVariableDeclaration","src":"915:26:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"935:5:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:22"},"nodeType":"YulFunctionCall","src":"929:12:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"919:6:22","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"957:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"962:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"950:6:22"},"nodeType":"YulFunctionCall","src":"950:19:22"},"nodeType":"YulExpressionStatement","src":"950:19:22"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1004:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:22"},"nodeType":"YulFunctionCall","src":"1000:16:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1022:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"1027:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1018:3:22"},"nodeType":"YulFunctionCall","src":"1018:14:22"},{"name":"length","nodeType":"YulIdentifier","src":"1034:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"978:21:22"},"nodeType":"YulFunctionCall","src":"978:63:22"},"nodeType":"YulExpressionStatement","src":"978:63:22"},{"nodeType":"YulAssignment","src":"1050:57:22","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1065:3:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1078:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1086:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1074:3:22"},"nodeType":"YulFunctionCall","src":"1074:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1091:3:22"},"nodeType":"YulFunctionCall","src":"1091:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1070:3:22"},"nodeType":"YulFunctionCall","src":"1070:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1061:3:22"},"nodeType":"YulFunctionCall","src":"1061:39:22"},{"kind":"number","nodeType":"YulLiteral","src":"1102:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:22"},"nodeType":"YulFunctionCall","src":"1057:50:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1050:3:22"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"882:5:22","type":""},{"name":"pos","nodeType":"YulTypedName","src":"889:3:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"897:3:22","type":""}],"src":"855:258:22"},{"body":{"nodeType":"YulBlock","src":"1239:99:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1256:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1267:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1249:6:22"},"nodeType":"YulFunctionCall","src":"1249:21:22"},"nodeType":"YulExpressionStatement","src":"1249:21:22"},{"nodeType":"YulAssignment","src":"1279:53:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1317:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1328:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:22"},"nodeType":"YulFunctionCall","src":"1313:18:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1287:17:22"},"nodeType":"YulFunctionCall","src":"1287:45:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1279:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1219:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1230:4:22","type":""}],"src":"1118:220:22"},{"body":{"nodeType":"YulBlock","src":"1413:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:22"},"nodeType":"YulFunctionCall","src":"1461:12:22"},"nodeType":"YulExpressionStatement","src":"1461:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:22"},"nodeType":"YulFunctionCall","src":"1430:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:22"},"nodeType":"YulFunctionCall","src":"1426:32:22"},"nodeType":"YulIf","src":"1423:52:22"},{"nodeType":"YulAssignment","src":"1484:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1494:12:22"},"nodeType":"YulFunctionCall","src":"1494:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1379:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1390:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1402:6:22","type":""}],"src":"1343:180:22"},{"body":{"nodeType":"YulBlock","src":"1629:102:22","statements":[{"nodeType":"YulAssignment","src":"1639:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1651:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1647:3:22"},"nodeType":"YulFunctionCall","src":"1647:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1639:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1708:3:22"},"nodeType":"YulFunctionCall","src":"1708:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1721:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1704:3:22"},"nodeType":"YulFunctionCall","src":"1704:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1692:3:22"},"nodeType":"YulFunctionCall","src":"1692:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1674:6:22"},"nodeType":"YulFunctionCall","src":"1674:51:22"},"nodeType":"YulExpressionStatement","src":"1674:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:22","type":""}],"src":"1528:203:22"},{"body":{"nodeType":"YulBlock","src":"1785:124:22","statements":[{"nodeType":"YulAssignment","src":"1795:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1817:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:22"},"nodeType":"YulFunctionCall","src":"1804:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1795:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1887:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1896:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1889:6:22"},"nodeType":"YulFunctionCall","src":"1889:12:22"},"nodeType":"YulExpressionStatement","src":"1889:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1846:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1857:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1872:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1877:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1868:3:22"},"nodeType":"YulFunctionCall","src":"1868:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"1881:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1864:3:22"},"nodeType":"YulFunctionCall","src":"1864:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1853:3:22"},"nodeType":"YulFunctionCall","src":"1853:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1843:2:22"},"nodeType":"YulFunctionCall","src":"1843:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1836:6:22"},"nodeType":"YulFunctionCall","src":"1836:50:22"},"nodeType":"YulIf","src":"1833:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1764:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:22","type":""}],"src":"1736:173:22"},{"body":{"nodeType":"YulBlock","src":"2001:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"2047:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2056:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2059:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2049:6:22"},"nodeType":"YulFunctionCall","src":"2049:12:22"},"nodeType":"YulExpressionStatement","src":"2049:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2022:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2031:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2018:3:22"},"nodeType":"YulFunctionCall","src":"2018:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2043:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2014:3:22"},"nodeType":"YulFunctionCall","src":"2014:32:22"},"nodeType":"YulIf","src":"2011:52:22"},{"nodeType":"YulAssignment","src":"2072:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2101:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2082:18:22"},"nodeType":"YulFunctionCall","src":"2082:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2072:6:22"}]},{"nodeType":"YulAssignment","src":"2120:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2158:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2143:3:22"},"nodeType":"YulFunctionCall","src":"2143:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2130:12:22"},"nodeType":"YulFunctionCall","src":"2130:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2120:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1990:6:22","type":""}],"src":"1914:254:22"},{"body":{"nodeType":"YulBlock","src":"2274:76:22","statements":[{"nodeType":"YulAssignment","src":"2284:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2296:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2307:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2292:3:22"},"nodeType":"YulFunctionCall","src":"2292:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2284:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2337:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2319:6:22"},"nodeType":"YulFunctionCall","src":"2319:25:22"},"nodeType":"YulExpressionStatement","src":"2319:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2243:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2254:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2265:4:22","type":""}],"src":"2173:177:22"},{"body":{"nodeType":"YulBlock","src":"2459:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"2505:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2514:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2517:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2507:6:22"},"nodeType":"YulFunctionCall","src":"2507:12:22"},"nodeType":"YulExpressionStatement","src":"2507:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2480:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2489:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2476:3:22"},"nodeType":"YulFunctionCall","src":"2476:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2501:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2472:3:22"},"nodeType":"YulFunctionCall","src":"2472:32:22"},"nodeType":"YulIf","src":"2469:52:22"},{"nodeType":"YulAssignment","src":"2530:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2559:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2540:18:22"},"nodeType":"YulFunctionCall","src":"2540:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2530:6:22"}]},{"nodeType":"YulAssignment","src":"2578:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2622:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2607:3:22"},"nodeType":"YulFunctionCall","src":"2607:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2588:18:22"},"nodeType":"YulFunctionCall","src":"2588:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2578:6:22"}]},{"nodeType":"YulAssignment","src":"2635:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2662:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2673:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2658:3:22"},"nodeType":"YulFunctionCall","src":"2658:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2645:12:22"},"nodeType":"YulFunctionCall","src":"2645:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2635:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2409:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2420:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2432:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2440:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2448:6:22","type":""}],"src":"2355:328:22"},{"body":{"nodeType":"YulBlock","src":"2758:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2804:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2813:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2816:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2806:6:22"},"nodeType":"YulFunctionCall","src":"2806:12:22"},"nodeType":"YulExpressionStatement","src":"2806:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2779:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2788:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2775:3:22"},"nodeType":"YulFunctionCall","src":"2775:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2800:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2771:3:22"},"nodeType":"YulFunctionCall","src":"2771:32:22"},"nodeType":"YulIf","src":"2768:52:22"},{"nodeType":"YulAssignment","src":"2829:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2858:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2839:18:22"},"nodeType":"YulFunctionCall","src":"2839:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2829:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2724:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2735:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2747:6:22","type":""}],"src":"2688:186:22"},{"body":{"nodeType":"YulBlock","src":"2963:263:22","statements":[{"body":{"nodeType":"YulBlock","src":"3009:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:22"},"nodeType":"YulFunctionCall","src":"3011:12:22"},"nodeType":"YulExpressionStatement","src":"3011:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2984:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2993:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2980:3:22"},"nodeType":"YulFunctionCall","src":"2980:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3005:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2976:3:22"},"nodeType":"YulFunctionCall","src":"2976:32:22"},"nodeType":"YulIf","src":"2973:52:22"},{"nodeType":"YulAssignment","src":"3034:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3044:18:22"},"nodeType":"YulFunctionCall","src":"3044:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3034:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3082:45:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:22"},"nodeType":"YulFunctionCall","src":"3108:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3095:12:22"},"nodeType":"YulFunctionCall","src":"3095:32:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3086:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3180:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:22"},"nodeType":"YulFunctionCall","src":"3182:12:22"},"nodeType":"YulExpressionStatement","src":"3182:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3149:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3170:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3163:6:22"},"nodeType":"YulFunctionCall","src":"3163:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3156:6:22"},"nodeType":"YulFunctionCall","src":"3156:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3146:2:22"},"nodeType":"YulFunctionCall","src":"3146:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3139:6:22"},"nodeType":"YulFunctionCall","src":"3139:40:22"},"nodeType":"YulIf","src":"3136:60:22"},{"nodeType":"YulAssignment","src":"3205:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"3215:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3205:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2921:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2932:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2944:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2952:6:22","type":""}],"src":"2879:347:22"},{"body":{"nodeType":"YulBlock","src":"3263:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3280:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3287:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3292:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3283:3:22"},"nodeType":"YulFunctionCall","src":"3283:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3273:6:22"},"nodeType":"YulFunctionCall","src":"3273:31:22"},"nodeType":"YulExpressionStatement","src":"3273:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3323:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3313:6:22"},"nodeType":"YulFunctionCall","src":"3313:15:22"},"nodeType":"YulExpressionStatement","src":"3313:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3344:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3347:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3337:6:22"},"nodeType":"YulFunctionCall","src":"3337:15:22"},"nodeType":"YulExpressionStatement","src":"3337:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3231:127:22"},{"body":{"nodeType":"YulBlock","src":"3493:1008:22","statements":[{"body":{"nodeType":"YulBlock","src":"3540:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3549:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3552:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3542:6:22"},"nodeType":"YulFunctionCall","src":"3542:12:22"},"nodeType":"YulExpressionStatement","src":"3542:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3514:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3523:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:22"},"nodeType":"YulFunctionCall","src":"3510:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3535:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3506:3:22"},"nodeType":"YulFunctionCall","src":"3506:33:22"},"nodeType":"YulIf","src":"3503:53:22"},{"nodeType":"YulAssignment","src":"3565:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3594:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3575:18:22"},"nodeType":"YulFunctionCall","src":"3575:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3565:6:22"}]},{"nodeType":"YulAssignment","src":"3613:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3646:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3657:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3642:3:22"},"nodeType":"YulFunctionCall","src":"3642:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3623:18:22"},"nodeType":"YulFunctionCall","src":"3623:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3613:6:22"}]},{"nodeType":"YulAssignment","src":"3670:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3697:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3708:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3693:3:22"},"nodeType":"YulFunctionCall","src":"3693:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3680:12:22"},"nodeType":"YulFunctionCall","src":"3680:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3670:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"3721:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3752:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3763:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:22"},"nodeType":"YulFunctionCall","src":"3748:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3735:12:22"},"nodeType":"YulFunctionCall","src":"3735:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3725:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3776:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3786:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3780:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3831:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3840:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3843:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3833:6:22"},"nodeType":"YulFunctionCall","src":"3833:12:22"},"nodeType":"YulExpressionStatement","src":"3833:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3819:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"3827:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3816:2:22"},"nodeType":"YulFunctionCall","src":"3816:14:22"},"nodeType":"YulIf","src":"3813:34:22"},{"nodeType":"YulVariableDeclaration","src":"3856:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3870:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"3881:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3866:3:22"},"nodeType":"YulFunctionCall","src":"3866:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3860:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:22"},"nodeType":"YulFunctionCall","src":"3938:12:22"},"nodeType":"YulExpressionStatement","src":"3938:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3915:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"3919:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3911:3:22"},"nodeType":"YulFunctionCall","src":"3911:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3926:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3907:3:22"},"nodeType":"YulFunctionCall","src":"3907:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3900:6:22"},"nodeType":"YulFunctionCall","src":"3900:35:22"},"nodeType":"YulIf","src":"3897:55:22"},{"nodeType":"YulVariableDeclaration","src":"3961:26:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3984:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3971:12:22"},"nodeType":"YulFunctionCall","src":"3971:16:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3965:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4010:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4012:16:22"},"nodeType":"YulFunctionCall","src":"4012:18:22"},"nodeType":"YulExpressionStatement","src":"4012:18:22"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4002:2:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4006:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3999:2:22"},"nodeType":"YulFunctionCall","src":"3999:10:22"},"nodeType":"YulIf","src":"3996:36:22"},{"nodeType":"YulVariableDeclaration","src":"4041:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4051:3:22"},"nodeType":"YulFunctionCall","src":"4051:7:22"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4045:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4067:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4087:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4081:5:22"},"nodeType":"YulFunctionCall","src":"4081:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4071:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4099:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4121:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4145:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4149:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4141:3:22"},"nodeType":"YulFunctionCall","src":"4141:13:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4156:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4137:3:22"},"nodeType":"YulFunctionCall","src":"4137:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"4161:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:22"},"nodeType":"YulFunctionCall","src":"4133:31:22"},{"name":"_4","nodeType":"YulIdentifier","src":"4166:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4129:3:22"},"nodeType":"YulFunctionCall","src":"4129:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:22"},"nodeType":"YulFunctionCall","src":"4117:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4103:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4229:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4231:16:22"},"nodeType":"YulFunctionCall","src":"4231:18:22"},"nodeType":"YulExpressionStatement","src":"4231:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4188:10:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4200:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4185:2:22"},"nodeType":"YulFunctionCall","src":"4185:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4208:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4220:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4205:2:22"},"nodeType":"YulFunctionCall","src":"4205:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4182:2:22"},"nodeType":"YulFunctionCall","src":"4182:46:22"},"nodeType":"YulIf","src":"4179:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4267:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4271:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4260:6:22"},"nodeType":"YulFunctionCall","src":"4260:22:22"},"nodeType":"YulExpressionStatement","src":"4260:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4298:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4306:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4291:6:22"},"nodeType":"YulFunctionCall","src":"4291:18:22"},"nodeType":"YulExpressionStatement","src":"4291:18:22"},{"body":{"nodeType":"YulBlock","src":"4355:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4364:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4367:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4357:6:22"},"nodeType":"YulFunctionCall","src":"4357:12:22"},"nodeType":"YulExpressionStatement","src":"4357:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4332:2:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4336:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:22"},"nodeType":"YulFunctionCall","src":"4328:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"4341:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4324:3:22"},"nodeType":"YulFunctionCall","src":"4324:20:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4346:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4321:2:22"},"nodeType":"YulFunctionCall","src":"4321:33:22"},"nodeType":"YulIf","src":"4318:53:22"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4397:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4405:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:22"},"nodeType":"YulFunctionCall","src":"4393:15:22"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4414:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"4418:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4410:3:22"},"nodeType":"YulFunctionCall","src":"4410:11:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4423:2:22"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4380:12:22"},"nodeType":"YulFunctionCall","src":"4380:46:22"},"nodeType":"YulExpressionStatement","src":"4380:46:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4450:6:22"},{"name":"_3","nodeType":"YulIdentifier","src":"4458:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:22"},"nodeType":"YulFunctionCall","src":"4446:15:22"},{"kind":"number","nodeType":"YulLiteral","src":"4463:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:22"},"nodeType":"YulFunctionCall","src":"4442:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"4468:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:22"},"nodeType":"YulFunctionCall","src":"4435:35:22"},"nodeType":"YulExpressionStatement","src":"4435:35:22"},{"nodeType":"YulAssignment","src":"4479:16:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4489:6:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4479:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3435:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3446:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3458:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3466:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3474:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3482:6:22","type":""}],"src":"3363:1138:22"},{"body":{"nodeType":"YulBlock","src":"4593:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"4639:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4648:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4651:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4641:6:22"},"nodeType":"YulFunctionCall","src":"4641:12:22"},"nodeType":"YulExpressionStatement","src":"4641:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4614:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4623:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4610:3:22"},"nodeType":"YulFunctionCall","src":"4610:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4635:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4606:3:22"},"nodeType":"YulFunctionCall","src":"4606:32:22"},"nodeType":"YulIf","src":"4603:52:22"},{"nodeType":"YulAssignment","src":"4664:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4693:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4674:18:22"},"nodeType":"YulFunctionCall","src":"4674:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4664:6:22"}]},{"nodeType":"YulAssignment","src":"4712:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4745:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4756:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4741:3:22"},"nodeType":"YulFunctionCall","src":"4741:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4722:18:22"},"nodeType":"YulFunctionCall","src":"4722:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4712:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4551:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4562:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4574:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4582:6:22","type":""}],"src":"4506:260:22"},{"body":{"nodeType":"YulBlock","src":"4826:325:22","statements":[{"nodeType":"YulAssignment","src":"4836:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4853:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4846:3:22"},"nodeType":"YulFunctionCall","src":"4846:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4836:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4867:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4897:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4903:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4893:3:22"},"nodeType":"YulFunctionCall","src":"4893:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4871:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4944:31:22","statements":[{"nodeType":"YulAssignment","src":"4946:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4960:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4968:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4956:3:22"},"nodeType":"YulFunctionCall","src":"4956:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4946:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4924:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4917:6:22"},"nodeType":"YulFunctionCall","src":"4917:26:22"},"nodeType":"YulIf","src":"4914:61:22"},{"body":{"nodeType":"YulBlock","src":"5034:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5055:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5062:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5067:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5058:3:22"},"nodeType":"YulFunctionCall","src":"5058:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5048:6:22"},"nodeType":"YulFunctionCall","src":"5048:31:22"},"nodeType":"YulExpressionStatement","src":"5048:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5099:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5102:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5092:6:22"},"nodeType":"YulFunctionCall","src":"5092:15:22"},"nodeType":"YulExpressionStatement","src":"5092:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5120:6:22"},"nodeType":"YulFunctionCall","src":"5120:15:22"},"nodeType":"YulExpressionStatement","src":"5120:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4990:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5013:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5021:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5010:2:22"},"nodeType":"YulFunctionCall","src":"5010:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4987:2:22"},"nodeType":"YulFunctionCall","src":"4987:38:22"},"nodeType":"YulIf","src":"4984:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4806:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4815:6:22","type":""}],"src":"4771:380:22"},{"body":{"nodeType":"YulBlock","src":"5343:283:22","statements":[{"nodeType":"YulVariableDeclaration","src":"5353:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5373:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5367:5:22"},"nodeType":"YulFunctionCall","src":"5367:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5357:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5415:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5423:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5411:3:22"},"nodeType":"YulFunctionCall","src":"5411:17:22"},{"name":"pos","nodeType":"YulIdentifier","src":"5430:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"5435:6:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5389:21:22"},"nodeType":"YulFunctionCall","src":"5389:53:22"},"nodeType":"YulExpressionStatement","src":"5389:53:22"},{"nodeType":"YulVariableDeclaration","src":"5451:29:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5468:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"5473:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5464:3:22"},"nodeType":"YulFunctionCall","src":"5464:16:22"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"5455:5:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5489:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5511:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5505:5:22"},"nodeType":"YulFunctionCall","src":"5505:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"5493:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5553:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5561:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5549:3:22"},"nodeType":"YulFunctionCall","src":"5549:17:22"},{"name":"end_1","nodeType":"YulIdentifier","src":"5568:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"5575:8:22"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5527:21:22"},"nodeType":"YulFunctionCall","src":"5527:57:22"},"nodeType":"YulExpressionStatement","src":"5527:57:22"},{"nodeType":"YulAssignment","src":"5593:27:22","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"5604:5:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"5611:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5600:3:22"},"nodeType":"YulFunctionCall","src":"5600:20:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5593:3:22"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5311:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5316:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5324:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5335:3:22","type":""}],"src":"5156:470:22"},{"body":{"nodeType":"YulBlock","src":"5834:286:22","statements":[{"nodeType":"YulVariableDeclaration","src":"5844:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5862:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5867:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5858:3:22"},"nodeType":"YulFunctionCall","src":"5858:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"5871:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5854:3:22"},"nodeType":"YulFunctionCall","src":"5854:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5848:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5889:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5904:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"5912:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5900:3:22"},"nodeType":"YulFunctionCall","src":"5900:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5882:6:22"},"nodeType":"YulFunctionCall","src":"5882:34:22"},"nodeType":"YulExpressionStatement","src":"5882:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5936:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5947:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5932:3:22"},"nodeType":"YulFunctionCall","src":"5932:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5956:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"5964:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5952:3:22"},"nodeType":"YulFunctionCall","src":"5952:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:22"},"nodeType":"YulFunctionCall","src":"5925:43:22"},"nodeType":"YulExpressionStatement","src":"5925:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5988:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5999:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5984:3:22"},"nodeType":"YulFunctionCall","src":"5984:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"6004:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5977:6:22"},"nodeType":"YulFunctionCall","src":"5977:34:22"},"nodeType":"YulExpressionStatement","src":"5977:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6031:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6042:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6027:3:22"},"nodeType":"YulFunctionCall","src":"6027:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6047:3:22","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6020:6:22"},"nodeType":"YulFunctionCall","src":"6020:31:22"},"nodeType":"YulExpressionStatement","src":"6020:31:22"},{"nodeType":"YulAssignment","src":"6060:54:22","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6086:6:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6098:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6109:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6094:3:22"},"nodeType":"YulFunctionCall","src":"6094:19:22"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6068:17:22"},"nodeType":"YulFunctionCall","src":"6068:46:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6060:4:22"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5779:9:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5790:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5798:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5806:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5814:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5825:4:22","type":""}],"src":"5631:489:22"},{"body":{"nodeType":"YulBlock","src":"6205:169:22","statements":[{"body":{"nodeType":"YulBlock","src":"6251:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6260:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6263:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6253:6:22"},"nodeType":"YulFunctionCall","src":"6253:12:22"},"nodeType":"YulExpressionStatement","src":"6253:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6226:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"6235:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6222:3:22"},"nodeType":"YulFunctionCall","src":"6222:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"6247:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6218:3:22"},"nodeType":"YulFunctionCall","src":"6218:32:22"},"nodeType":"YulIf","src":"6215:52:22"},{"nodeType":"YulVariableDeclaration","src":"6276:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6295:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6289:5:22"},"nodeType":"YulFunctionCall","src":"6289:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6280:5:22","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6338:5:22"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"6314:23:22"},"nodeType":"YulFunctionCall","src":"6314:30:22"},"nodeType":"YulExpressionStatement","src":"6314:30:22"},{"nodeType":"YulAssignment","src":"6353:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"6363:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6353:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6171:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6182:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6194:6:22","type":""}],"src":"6125:249:22"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100dd5760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb46514610224578063b88d4fde14610244578063c87b56dd14610257578063e985e9c51461027757600080fd5b80636352211e146101cf57806370a08231146101ef57806395d89b411461020f57600080fd5b8063095ea7b3116100bb578063095ea7b31461017157806318160ddd1461018657806323b872dd146101a957806342842e0e146101bc57600080fd5b806301ffc9a7146100e257806306fdde0314610117578063081812fc14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046109c6565b6102c0565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610312565b60405161010e9190610a3b565b34801561014557600080fd5b50610159610154366004610a4e565b6103a4565b6040516001600160a01b03909116815260200161010e565b61018461017f366004610a83565b6103e8565b005b34801561019257600080fd5b50600154600054035b60405190815260200161010e565b6101846101b7366004610aad565b610488565b6101846101ca366004610aad565b610620565b3480156101db57600080fd5b506101596101ea366004610a4e565b610640565b3480156101fb57600080fd5b5061019b61020a366004610ae9565b61064b565b34801561021b57600080fd5b5061012c61069a565b34801561023057600080fd5b5061018461023f366004610b04565b6106a9565b610184610252366004610b56565b610715565b34801561026357600080fd5b5061012c610272366004610a4e565b61075f565b34801561028357600080fd5b50610102610292366004610c32565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b0319831614806102f157506380ac58cd60e01b6001600160e01b03198316145b8061030c5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606002805461032190610c65565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610c65565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b60006103af826107f0565b6103cc576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006103f382610640565b9050336001600160a01b0382161461042c5761040f8133610292565b61042c576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061049382610817565b9050836001600160a01b0316816001600160a01b0316146104c65760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610513576104f68633610292565b61051357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661053a57604051633a954ecd60e21b815260040160405180910390fd5b801561054557600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036105d7576001840160008181526004602052604081205490036105d55760005481146105d55760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b61063b83838360405180602001604052806000815250610715565b505050565b600061030c82610817565b60006001600160a01b038216610674576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b60606003805461032190610c65565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610720848484610488565b6001600160a01b0383163b156107595761073c8484848461087e565b610759576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061076a826107f0565b61078757604051630a14c4b560e41b815260040160405180910390fd5b600061079e60408051602081019091526000815290565b905080516000036107be57604051806020016040528060008152506107e9565b806107c884610969565b6040516020016107d9929190610c9f565b6040516020818303038152906040525b9392505050565b600080548210801561030c575050600090815260046020526040902054600160e01b161590565b6000816000548110156108655760008181526004602052604081205490600160e01b82169003610863575b806000036107e9575060001901600081815260046020526040902054610842565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906108b3903390899088908890600401610cce565b6020604051808303816000875af19250505080156108ee575060408051601f3d908101601f191682019092526108eb91810190610d0b565b60015b61094c573d80801561091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b508051600003610944576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806109835750819003601f19909101908152919050565b6001600160e01b0319811681146109c357600080fd5b50565b6000602082840312156109d857600080fd5b81356107e9816109ad565b60005b838110156109fe5781810151838201526020016109e6565b838111156107595750506000910152565b60008151808452610a278160208601602086016109e3565b601f01601f19169290920160200192915050565b6020815260006107e96020830184610a0f565b600060208284031215610a6057600080fd5b5035919050565b80356001600160a01b0381168114610a7e57600080fd5b919050565b60008060408385031215610a9657600080fd5b610a9f83610a67565b946020939093013593505050565b600080600060608486031215610ac257600080fd5b610acb84610a67565b9250610ad960208501610a67565b9150604084013590509250925092565b600060208284031215610afb57600080fd5b6107e982610a67565b60008060408385031215610b1757600080fd5b610b2083610a67565b915060208301358015158114610b3557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610b6c57600080fd5b610b7585610a67565b9350610b8360208601610a67565b925060408501359150606085013567ffffffffffffffff80821115610ba757600080fd5b818701915087601f830112610bbb57600080fd5b813581811115610bcd57610bcd610b40565b604051601f8201601f19908116603f01168101908382118183101715610bf557610bf5610b40565b816040528281528a6020848701011115610c0e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610c4557600080fd5b610c4e83610a67565b9150610c5c60208401610a67565b90509250929050565b600181811c90821680610c7957607f821691505b602082108103610c9957634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610cb18184602088016109e3565b835190830190610cc58183602088016109e3565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d0190830184610a0f565b9695505050505050565b600060208284031215610d1d57600080fd5b81516107e9816109ad56fea26469706673582212209465e1043c8603371d171555452cb031830ea7a7d7692d7f24cb1846475fff2464736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x139 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xA3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xA83 JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x69A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xB56 JUMP JUMPDEST PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x75F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x2F1 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x30C JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC65 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xC65 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP3 PUSH2 0x640 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x42C JUMPI PUSH2 0x40F DUP2 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x817 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x513 JUMPI PUSH2 0x4F6 DUP7 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5D7 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5D5 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x63B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x715 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C DUP3 PUSH2 0x817 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC65 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x720 DUP5 DUP5 DUP5 PUSH2 0x488 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x759 JUMPI PUSH2 0x73C DUP5 DUP5 DUP5 DUP5 PUSH2 0x87E JUMP JUMPDEST PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76A DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x79E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7E9 JUMP JUMPDEST DUP1 PUSH2 0x7C8 DUP5 PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D9 SWAP3 SWAP2 SWAP1 PUSH2 0xC9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30C JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x863 JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x8B3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8EB SWAP2 DUP2 ADD SWAP1 PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x94C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0x983 JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9FE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9E6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x759 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA27 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA9F DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACB DUP5 PUSH2 0xA67 JUMP JUMPDEST SWAP3 POP PUSH2 0xAD9 PUSH1 0x20 DUP6 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP3 PUSH2 0xA67 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB20 DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB75 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP4 POP PUSH2 0xB83 PUSH1 0x20 DUP7 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBCD JUMPI PUSH2 0xBCD PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBF5 JUMPI PUSH2 0xBF5 PUSH2 0xB40 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4E DUP4 PUSH2 0xA67 JUMP JUMPDEST SWAP2 POP PUSH2 0xC5C PUSH1 0x20 DUP5 ADD PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC79 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC99 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xCB1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xCC5 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xD01 SWAP1 DUP4 ADD DUP5 PUSH2 0xA0F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH6 0xE1043C860337 SAR OR ISZERO SSTORE GASLIMIT 0x2C 0xB0 BALANCE DUP4 0xE 0xA7 0xA7 0xD7 PUSH10 0x2D7F24CB1846475FFF24 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"895:40452:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9155:630;;;;;;;;;;-1:-1:-1;9155:630:18;;;;;:::i;:::-;;:::i;:::-;;;565:14:22;;558:22;540:41;;528:2;513:18;9155:630:18;;;;;;;;10039:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;16360:214::-;;;;;;;;;;-1:-1:-1;16360:214:18;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:22;;;1674:51;;1662:2;1647:18;16360:214:18;1528:203:22;15812:398:18;;;;;;:::i;:::-;;:::i;:::-;;5894:317;;;;;;;;;;-1:-1:-1;6164:12:18;;5955:7;6148:13;:28;5894:317;;;2319:25:22;;;2307:2;2292:18;5894:317:18;2173:177:22;19903:2764:18;;;;;;:::i;:::-;;:::i;22758:187::-;;;;;;:::i;:::-;;:::i;11391:150::-;;;;;;;;;;-1:-1:-1;11391:150:18;;;;;:::i;:::-;;:::i;7045:230::-;;;;;;;;;;-1:-1:-1;7045:230:18;;;;;:::i;:::-;;:::i;10208:102::-;;;;;;;;;;;;;:::i;16901:231::-;;;;;;;;;;-1:-1:-1;16901:231:18;;;;;:::i;:::-;;:::i;23526:396::-;;;;;;:::i;:::-;;:::i;10411:313::-;;;;;;;;;;-1:-1:-1;10411:313:18;;;;;:::i;:::-;;:::i;17282:162::-;;;;;;;;;;-1:-1:-1;17282:162:18;;;;;:::i;:::-;-1:-1:-1;;;;;17402:25:18;;;17379:4;17402:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;17282:162;9155:630;9240:4;-1:-1:-1;;;;;;;;;9558:25:18;;;;:101;;-1:-1:-1;;;;;;;;;;9634:25:18;;;9558:101;:177;;;-1:-1:-1;;;;;;;;;;9710:25:18;;;9558:177;9539:196;9155:630;-1:-1:-1;;9155:630:18:o;10039:98::-;10093:13;10125:5;10118:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10039:98;:::o;16360:214::-;16436:7;16460:16;16468:7;16460;:16::i;:::-;16455:64;;16485:34;;-1:-1:-1;;;16485:34:18;;;;;;;;;;;16455:64;-1:-1:-1;16537:24:18;;;;:15;:24;;;;;:30;-1:-1:-1;;;;;16537:30:18;;16360:214::o;15812:398::-;15900:13;15916:16;15924:7;15916;:16::i;:::-;15900:32;-1:-1:-1;39523:10:18;-1:-1:-1;;;;;15947:28:18;;;15943:172;;15994:44;16011:5;39523:10;17282:162;:::i;15994:44::-;15989:126;;16065:35;;-1:-1:-1;;;16065:35:18;;;;;;;;;;;15989:126;16125:24;;;;:15;:24;;;;;;:35;;-1:-1:-1;;;;;;16125:35:18;-1:-1:-1;;;;;16125:35:18;;;;;;;;;16175:28;;16125:24;;16175:28;;;;;;;15890:320;15812:398;;:::o;19903:2764::-;20040:27;20070;20089:7;20070:18;:27::i;:::-;20040:57;;20153:4;-1:-1:-1;;;;;20112:45:18;20128:19;-1:-1:-1;;;;;20112:45:18;;20108:86;;20166:28;;-1:-1:-1;;;20166:28:18;;;;;;;;;;;20108:86;20206:27;19036:24;;;:15;:24;;;;;19260:26;;39523:10;18673:30;;;-1:-1:-1;;;;;18370:28:18;;18651:20;;;18648:56;20389:179;;20481:43;20498:4;39523:10;17282:162;:::i;20481:43::-;20476:92;;20533:35;;-1:-1:-1;;;20533:35:18;;;;;;;;;;;20476:92;-1:-1:-1;;;;;20583:16:18;;20579:52;;20608:23;;-1:-1:-1;;;20608:23:18;;;;;;;;;;;20579:52;20774:15;20771:157;;;20912:1;20891:19;20884:30;20771:157;-1:-1:-1;;;;;21300:24:18;;;;;;;:18;:24;;;;;;21298:26;;-1:-1:-1;;21298:26:18;;;21368:22;;;;;;;;;21366:24;;-1:-1:-1;21366:24:18;;;14703:11;14678:23;14674:41;14661:63;-1:-1:-1;;;14661:63:18;21654:26;;;;:17;:26;;;;;:172;;;;-1:-1:-1;;;21943:47:18;;:52;;21939:617;;22047:1;22037:11;;22015:19;22168:30;;;:17;:30;;;;;;:35;;22164:378;;22304:13;;22289:11;:28;22285:239;;22449:30;;;;:17;:30;;;;;:52;;;22285:239;21997:559;21939:617;22600:7;22596:2;-1:-1:-1;;;;;22581:27:18;22590:4;-1:-1:-1;;;;;22581:27:18;;;;;;;;;;;20030:2637;;;19903:2764;;;:::o;22758:187::-;22899:39;22916:4;22922:2;22926:7;22899:39;;;;;;;;;;;;:16;:39::i;:::-;22758:187;;;:::o;11391:150::-;11463:7;11505:27;11524:7;11505:18;:27::i;7045:230::-;7117:7;-1:-1:-1;;;;;7140:19:18;;7136:60;;7168:28;;-1:-1:-1;;;7168:28:18;;;;;;;;;;;7136:60;-1:-1:-1;;;;;;7213:25:18;;;;;:18;:25;;;;;;1360:13;7213:55;;7045:230::o;10208:102::-;10264:13;10296:7;10289:14;;;;;:::i;16901:231::-;39523:10;16995:39;;;;:18;:39;;;;;;;;-1:-1:-1;;;;;16995:49:18;;;;;;;;;;;;:60;;-1:-1:-1;;16995:60:18;;;;;;;;;;17070:55;;540:41:22;;;16995:49:18;;39523:10;17070:55;;513:18:22;17070:55:18;;;;;;;16901:231;;:::o;23526:396::-;23695:31;23708:4;23714:2;23718:7;23695:12;:31::i;:::-;-1:-1:-1;;;;;23740:14:18;;;:19;23736:180;;23778:56;23809:4;23815:2;23819:7;23828:5;23778:30;:56::i;:::-;23773:143;;23861:40;;-1:-1:-1;;;23861:40:18;;;;;;;;;;;23773:143;23526:396;;;;:::o;10411:313::-;10484:13;10514:16;10522:7;10514;:16::i;:::-;10509:59;;10539:29;;-1:-1:-1;;;10539:29:18;;;;;;;;;;;10509:59;10579:21;10603:10;11045:9;;;;;;;;;-1:-1:-1;11045:9:18;;;10969:92;10603:10;10579:34;;10636:7;10630:21;10655:1;10630:26;:87;;;;;;;;;;;;;;;;;10683:7;10692:18;10702:7;10692:9;:18::i;:::-;10666:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10630:87;10623:94;10411:313;-1:-1:-1;;;10411:313:18:o;17693:277::-;17758:4;17845:13;;17835:7;:23;17793:151;;;;-1:-1:-1;;17895:26:18;;;;:17;:26;;;;;;-1:-1:-1;;;17895:44:18;:49;;17693:277::o;12515:1249::-;12582:7;12616;12714:13;;12707:4;:20;12703:997;;;12751:14;12768:23;;;:17;:23;;;;;;;-1:-1:-1;;;12855:24:18;;:29;;12851:831;;13510:111;13517:6;13527:1;13517:11;13510:111;;-1:-1:-1;;;13587:6:18;13569:25;;;;:17;:25;;;;;;13510:111;;12851:831;12729:971;12703:997;13726:31;;-1:-1:-1;;;13726:31:18;;;;;;;;;;;25948:697;26126:88;;-1:-1:-1;;;26126:88:18;;26106:4;;-1:-1:-1;;;;;26126:45:18;;;;;:88;;39523:10;;26193:4;;26199:7;;26208:5;;26126:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26126:88:18;;;;;;;;-1:-1:-1;;26126:88:18;;;;;;;;;;;;:::i;:::-;;;26122:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26404:6;:13;26421:1;26404:18;26400:229;;26449:40;;-1:-1:-1;;;26449:40:18;;;;;;;;;;;26400:229;26589:6;26583:13;26574:6;26570:2;26566:15;26559:38;26122:517;-1:-1:-1;;;;;;26282:64:18;-1:-1:-1;;;26282:64:18;;-1:-1:-1;25948:697:18;;;;;;:::o;39637:1708::-;39702:17;40130:4;40123;40117:11;40113:22;40220:1;40214:4;40207:15;40293:4;40290:1;40286:12;40279:19;;;40373:1;40368:3;40361:14;40474:3;40708:5;40690:419;40755:1;40750:3;40746:11;40739:18;;40923:2;40917:4;40913:13;40909:2;40905:22;40900:3;40892:36;41015:2;41005:13;;41070:25;40690:419;41070:25;-1:-1:-1;41137:13:18;;;-1:-1:-1;;41250:14:18;;;41310:19;;;41250:14;39637:1708;-1:-1:-1;39637:1708:18:o;14:131:22:-;-1:-1:-1;;;;;;88:32:22;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:22;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:22;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:22:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:22;;1343:180;-1:-1:-1;1343:180:22:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:22;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:22:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:186::-;2747:6;2800:2;2788:9;2779:7;2775:23;2771:32;2768:52;;;2816:1;2813;2806:12;2768:52;2839:29;2858:9;2839:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;;3708:2;3697:9;3693:18;3680:32;3670:42;;3763:2;3752:9;3748:18;3735:32;3786:18;3827:2;3819:6;3816:14;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:22;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5156:470::-;5335:3;5373:6;5367:13;5389:53;5435:6;5430:3;5423:4;5415:6;5411:17;5389:53;:::i;:::-;5505:13;;5464:16;;;;5527:57;5505:13;5464:16;5561:4;5549:17;;5527:57;:::i;:::-;5600:20;;5156:470;-1:-1:-1;;;;5156:470:22:o;5631:489::-;-1:-1:-1;;;;;5900:15:22;;;5882:34;;5952:15;;5947:2;5932:18;;5925:43;5999:2;5984:18;;5977:34;;;6047:3;6042:2;6027:18;;6020:31;;;5825:4;;6068:46;;6094:19;;6086:6;6068:46;:::i;:::-;6060:54;5631:489;-1:-1:-1;;;;;;5631:489:22:o;6125:249::-;6194:6;6247:2;6235:9;6226:7;6222:23;6218:32;6215:52;;;6263:1;6260;6253:12;6215:52;6295:9;6289:16;6314:30;6338:5;6314:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"684400","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2640","getApproved(uint256)":"6925","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26607","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"4432","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfers(address,address,uint256,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfers(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_burn(uint256,bool)":"infinite","_checkContractOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"4337","_extraData(address,address,uint24)":"infinite","_getApprovedSlotAndAddress(uint256)":"infinite","_getAux(address)":"infinite","_initializeOwnershipAt(uint256)":"infinite","_isSenderApprovedOrOwner(address,address,address)":"infinite","_mint(address,uint256)":"infinite","_mintERC2309(address,uint256)":"infinite","_msgSenderERC721A()":"infinite","_nextExtraData(address,address,uint256)":"infinite","_nextInitializedFlag(uint256)":"infinite","_nextTokenId()":"infinite","_numberBurned(address)":"infinite","_numberMinted(address)":"infinite","_ownershipAt(uint256)":"infinite","_ownershipOf(uint256)":"infinite","_packOwnershipData(address,uint256)":"infinite","_packedOwnershipOf(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_setAux(address,uint64)":"infinite","_setExtraDataAt(uint256,uint24)":"infinite","_startTokenId()":"infinite","_toString(uint256)":"infinite","_totalBurned()":"infinite","_totalMinted()":"infinite","_unpackedOwnership(uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721) Non-Fungible Token Standard, including the Metadata extension. Optimized for lower gas during batch mints. Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...) starting from `_startTokenId()`. Assumptions: - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply. - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721A\",\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4164,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_currentIndex","offset":0,"slot":"0","type":"t_uint256"},{"astId":4166,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_burnCounter","offset":0,"slot":"1","type":"t_uint256"},{"astId":4168,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":4170,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":4174,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_packedOwnerships","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4178,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_packedAddressData","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":4183,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_tokenApprovals","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(TokenApprovalRef)4096_storage)"},{"astId":4189,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_operatorApprovals","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(TokenApprovalRef)4096_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC721A.TokenApprovalRef)","numberOfBytes":"32","value":"t_struct(TokenApprovalRef)4096_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(TokenApprovalRef)4096_storage":{"encoding":"inplace","label":"struct ERC721A.TokenApprovalRef","members":[{"astId":4095,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"value","offset":0,"slot":"0","type":"t_address"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{},"version":1}},"ERC721A__IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of ERC721 token receiver.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721 token receiver.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A__IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"erc721a/contracts/IERC721A.sol":{"IERC721A":{"abi":[{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Interface of ERC721A.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"ConsecutiveTransfer(uint256,uint256,address,address)":{"details":"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721A.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{},"version":1}}},"node_modules/solady/src/auth/Ownable.sol":{"Ownable":{"abi":[{"inputs":[],"name":"AlreadyInitialized","type":"error"},{"inputs":[],"name":"NewOwnerIsZeroAddress","type":"error"},{"inputs":[],"name":"NoHandoverRequest","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"cancelOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"completeOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"ownershipHandoverExpiresAt","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"requestOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"author":"Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)","details":"Note: This implementation does NOT auto-initialize the owner to `msg.sender`. You MUST call the `_initializeOwner` in the constructor / initializer. While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility, the nomenclature for the 2-step ownership handover may be unique to this codebase.","errors":{"AlreadyInitialized()":[{"details":"Cannot double-initialize."}],"NewOwnerIsZeroAddress()":[{"details":"The `newOwner` cannot be the zero address."}],"NoHandoverRequest()":[{"details":"The `pendingOwner` does not have a valid handover request."}],"Unauthorized()":[{"details":"The caller is not authorized to call the function."}]},"events":{"OwnershipHandoverCanceled(address)":{"details":"The ownership handover to `pendingOwner` has been canceled."},"OwnershipHandoverRequested(address)":{"details":"An ownership handover to `pendingOwner` has been requested."},"OwnershipTransferred(address,address)":{"details":"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."}},"kind":"dev","methods":{"cancelOwnershipHandover()":{"details":"Cancels the two-step ownership handover to the caller, if any."},"completeOwnershipHandover(address)":{"details":"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."},"owner()":{"details":"Returns the owner of the contract."},"ownershipHandoverExpiresAt(address)":{"details":"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."},"renounceOwnership()":{"details":"Allows the owner to renounce their ownership."},"requestOwnershipHandover()":{"details":"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default."},"transferOwnership(address)":{"details":"Allows the owner to transfer the ownership to `newOwner`."}},"stateVariables":{"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`."},"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`."},"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipTransferred(address,address)\"))`."},"_OWNER_SLOT":{"details":"The owner slot is given by: `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`. It is intentionally chosen to be a high value to avoid collision with lower slots. The choice of manual storage layout is to enable compatibility with both regular and upgradeable contracts."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cancelOwnershipHandover()":"54d1f13d","completeOwnershipHandover(address)":"f04e283e","owner()":"8da5cb5b","ownershipHandoverExpiresAt(address)":"fee81cf4","renounceOwnership()":"715018a6","requestOwnershipHandover()":"25692962","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\",\"details\":\"Note: This implementation does NOT auto-initialize the owner to `msg.sender`. You MUST call the `_initializeOwner` in the constructor / initializer. While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility, the nomenclature for the 2-step ownership handover may be unique to this codebase.\",\"errors\":{\"AlreadyInitialized()\":[{\"details\":\"Cannot double-initialize.\"}],\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"}},\"kind\":\"dev\",\"methods\":{\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"stateVariables\":{\"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\"},\"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\"},\"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\"},\"_OWNER_SLOT\":{\"details\":\"The owner slot is given by: `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`. It is intentionally chosen to be a high value to avoid collision with lower slots. The choice of manual storage layout is to enable compatibility with both regular and upgradeable contracts.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple single owner authorization mixin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/solady/src/auth/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n///\\n/// @dev Note:\\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\\n///\\n/// While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev Cannot double-initialize.\\n    error AlreadyInitialized();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by:\\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    bytes32 internal constant _OWNER_SLOT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                if sload(ownerSlot) {\\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(_OWNER_SLOT, newOwner)\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_OWNER_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc208cdd9de02bbf4b5edad18b88e23a2be7ff56d2287d5649329dc7cda64b9a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Simple single owner authorization mixin.","version":1}}},"solady/src/auth/Ownable.sol":{"Ownable":{"abi":[{"inputs":[],"name":"AlreadyInitialized","type":"error"},{"inputs":[],"name":"NewOwnerIsZeroAddress","type":"error"},{"inputs":[],"name":"NoHandoverRequest","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pendingOwner","type":"address"}],"name":"OwnershipHandoverRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"cancelOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"completeOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"result","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pendingOwner","type":"address"}],"name":"ownershipHandoverExpiresAt","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"requestOwnershipHandover","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"author":"Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)","details":"Note: This implementation does NOT auto-initialize the owner to `msg.sender`. You MUST call the `_initializeOwner` in the constructor / initializer. While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility, the nomenclature for the 2-step ownership handover may be unique to this codebase.","errors":{"AlreadyInitialized()":[{"details":"Cannot double-initialize."}],"NewOwnerIsZeroAddress()":[{"details":"The `newOwner` cannot be the zero address."}],"NoHandoverRequest()":[{"details":"The `pendingOwner` does not have a valid handover request."}],"Unauthorized()":[{"details":"The caller is not authorized to call the function."}]},"events":{"OwnershipHandoverCanceled(address)":{"details":"The ownership handover to `pendingOwner` has been canceled."},"OwnershipHandoverRequested(address)":{"details":"An ownership handover to `pendingOwner` has been requested."},"OwnershipTransferred(address,address)":{"details":"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."}},"kind":"dev","methods":{"cancelOwnershipHandover()":{"details":"Cancels the two-step ownership handover to the caller, if any."},"completeOwnershipHandover(address)":{"details":"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."},"owner()":{"details":"Returns the owner of the contract."},"ownershipHandoverExpiresAt(address)":{"details":"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."},"renounceOwnership()":{"details":"Allows the owner to renounce their ownership."},"requestOwnershipHandover()":{"details":"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default."},"transferOwnership(address)":{"details":"Allows the owner to transfer the ownership to `newOwner`."}},"stateVariables":{"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`."},"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`."},"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE":{"details":"`keccak256(bytes(\"OwnershipTransferred(address,address)\"))`."},"_OWNER_SLOT":{"details":"The owner slot is given by: `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`. It is intentionally chosen to be a high value to avoid collision with lower slots. The choice of manual storage layout is to enable compatibility with both regular and upgradeable contracts."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cancelOwnershipHandover()":"54d1f13d","completeOwnershipHandover(address)":"f04e283e","owner()":"8da5cb5b","ownershipHandoverExpiresAt(address)":"fee81cf4","renounceOwnership()":"715018a6","requestOwnershipHandover()":"25692962","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\",\"details\":\"Note: This implementation does NOT auto-initialize the owner to `msg.sender`. You MUST call the `_initializeOwner` in the constructor / initializer. While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility, the nomenclature for the 2-step ownership handover may be unique to this codebase.\",\"errors\":{\"AlreadyInitialized()\":[{\"details\":\"Cannot double-initialize.\"}],\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"}},\"kind\":\"dev\",\"methods\":{\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"stateVariables\":{\"_OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\"},\"_OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\"},\"_OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\"},\"_OWNER_SLOT\":{\"details\":\"The owner slot is given by: `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`. It is intentionally chosen to be a high value to avoid collision with lower slots. The choice of manual storage layout is to enable compatibility with both regular and upgradeable contracts.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple single owner authorization mixin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solady/src/auth/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n///\\n/// @dev Note:\\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\\n///\\n/// While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev Cannot double-initialize.\\n    error AlreadyInitialized();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by:\\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    bytes32 internal constant _OWNER_SLOT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                if sload(ownerSlot) {\\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(_OWNER_SLOT, newOwner)\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_OWNER_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc208cdd9de02bbf4b5edad18b88e23a2be7ff56d2287d5649329dc7cda64b9a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Simple single owner authorization mixin.","version":1}}}}}}