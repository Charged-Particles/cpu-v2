{"id":"e7a523144ead89b0801158692bb4561d","_format":"hh-sol-build-info-1","solcVersion":"0.8.13","solcLongVersion":"0.8.13+commit.abaa5c0e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ERC721All.sol":{"content":"// SPDX-License-Identifier: MIT\n// Written by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./lib/ERC721.sol\";\n\n/**\n * @dev todo...\n */\ncontract ERC721All is Ownable, ERC721 {\n  mapping(uint256 => bool) internal _activeTokens;\n\n  constructor(string memory name, string memory symbol) ERC721(name, symbol) Ownable() {}\n\n  /**\n   * @dev Overrides {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n    if (_balances[owner] == 0 && _hasOwnToken(owner)) {\n      return 1;\n    }\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Overrides {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    require(_isTokenActive(tokenId), \"ERC721: invalid token ID\");\n\n    // If token has been transfered then _owners will be populated,\n    // otherwise the token ID represents the initial owner\n    address owner = _owners[tokenId];\n    if (owner == address(0)) {\n      owner = address(uint160(tokenId));\n    }\n    return owner;\n  }\n\n  function mint() public {\n    _mint(_msgSender());\n  }\n\n  function _mint(address receiver) internal {\n    // Token ID == Minter Address\n    uint256 tokenId = uint256(uint160(receiver));\n\n    require(receiver != address(0), \"ERC721: mint to the zero address\");\n    require(!_isTokenActive(tokenId), \"ERC721: token already minted\");\n\n    // Mark Token as Active\n    _activeTokens[tokenId] = true;\n\n    // Fire Transfer Event\n    emit Transfer(address(0), receiver, tokenId);\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override {\n    require(ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n    require(to != address(0), \"ERC721: transfer to the zero address\");\n\n    _beforeTokenTransfer(from, to, tokenId);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId);\n\n    // Only if token has previously been transfered after mint\n    if (_owners[tokenId] != address(0)) {\n      _balances[from] -= 1;\n    }\n    _balances[to] += 1;\n    _owners[tokenId] = to;\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfer(from, to, tokenId);\n  }\n\n  function _hasOwnToken(address owner) internal view returns (bool) {\n    uint256 ownerTokenId = uint256(uint160(owner));\n    address currentOwner = _owners[ownerTokenId];\n    return (_isTokenActive(ownerTokenId) && (currentOwner == owner || currentOwner == address(0)));\n  }\n\n  function _isTokenActive(uint256 tokenId) internal view returns (bool) {\n    // Check if Token is Active and Not Burned\n    return (_activeTokens[tokenId] && _owners[tokenId] != _NULL_ADDRESS);\n  }\n}\n"},"contracts/lib/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n// Modified by: Rob Secord (https://twitter.com/robsecord)\n// Co-founder @ Charged Particles - Visit: https://charged.fi\n// Co-founder @ Taggr             - Visit: https://taggr.io\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n *\n * NOTE:\n *  The only changes made here are:\n *    - change scope of \"_owners\" from private to internal\n *    - change scope of \"_balances\" from private to internal\n *    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) internal _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) internal _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\n        _owners[tokenId] = _NULL_ADDRESS;\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[625],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":626,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":625,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,625],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[890],"IERC721":[228]},"id":229,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":229,"sourceUnit":891,"src":"133:47:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":117,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":890,"src":"271:7:1"},"id":118,"nodeType":"InheritanceSpecifier","src":"271:7:1"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"182:67:1","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":228,"linearizedBaseContracts":[228,890],"name":"IERC721","nameLocation":"260:7:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"285:88:1","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":127,"name":"Transfer","nameLocation":"384:8:1","nodeType":"EventDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:1","nodeType":"VariableDeclaration","scope":127,"src":"393:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":123,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:1","nodeType":"VariableDeclaration","scope":127,"src":"415:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":125,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:1","nodeType":"VariableDeclaration","scope":127,"src":"435:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:1"},"src":"378:82:1"},{"anonymous":false,"documentation":{"id":128,"nodeType":"StructuredDocumentation","src":"466:94:1","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":136,"name":"Approval","nameLocation":"571:8:1","nodeType":"EventDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:1","nodeType":"VariableDeclaration","scope":136,"src":"580:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":132,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:1","nodeType":"VariableDeclaration","scope":136,"src":"603:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":134,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:1","nodeType":"VariableDeclaration","scope":136,"src":"629:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:1"},"src":"565:89:1"},{"anonymous":false,"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"660:117:1","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":145,"name":"ApprovalForAll","nameLocation":"788:14:1","nodeType":"EventDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:1","nodeType":"VariableDeclaration","scope":145,"src":"803:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:1","nodeType":"VariableDeclaration","scope":145,"src":"826:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":143,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:1","nodeType":"VariableDeclaration","scope":145,"src":"852:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":142,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:1"},"src":"782:85:1"},{"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"873:76:1","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":153,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:1","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"owner","nameLocation":"981:5:1","nodeType":"VariableDeclaration","scope":153,"src":"973:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:1"},"returnParameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"balance","nameLocation":"1019:7:1","nodeType":"VariableDeclaration","scope":153,"src":"1011:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":150,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:1"},"scope":228,"src":"954:74:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"1034:131:1","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":161,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:1","nodeType":"VariableDeclaration","scope":161,"src":"1187:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:1"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"owner","nameLocation":"1235:5:1","nodeType":"VariableDeclaration","scope":161,"src":"1227:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:1"},"scope":228,"src":"1170:72:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"1248:556:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":173,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:1","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"from","nameLocation":"1843:4:1","nodeType":"VariableDeclaration","scope":173,"src":"1835:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"to","nameLocation":"1857:2:1","nodeType":"VariableDeclaration","scope":173,"src":"1849:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:1","nodeType":"VariableDeclaration","scope":173,"src":"1861:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"data","nameLocation":"1893:4:1","nodeType":"VariableDeclaration","scope":173,"src":"1878:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":169,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[],"src":"1907:0:1"},"scope":228,"src":"1809:99:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":174,"nodeType":"StructuredDocumentation","src":"1914:687:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":183,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:1","nodeType":"FunctionDefinition","parameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"from","nameLocation":"2640:4:1","nodeType":"VariableDeclaration","scope":183,"src":"2632:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"to","nameLocation":"2654:2:1","nodeType":"VariableDeclaration","scope":183,"src":"2646:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:1","nodeType":"VariableDeclaration","scope":183,"src":"2658:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:1"},"returnParameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"2683:0:1"},"scope":228,"src":"2606:78:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"2690:732:1","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:1","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"from","nameLocation":"3457:4:1","nodeType":"VariableDeclaration","scope":193,"src":"3449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"to","nameLocation":"3471:2:1","nodeType":"VariableDeclaration","scope":193,"src":"3463:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:1","nodeType":"VariableDeclaration","scope":193,"src":"3475:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:1"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"3500:0:1"},"scope":228,"src":"3427:74:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"3507:452:1","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":201,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:1","nodeType":"FunctionDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"to","nameLocation":"3989:2:1","nodeType":"VariableDeclaration","scope":201,"src":"3981:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":198,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:1","nodeType":"VariableDeclaration","scope":201,"src":"3993:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:1"},"returnParameters":{"id":200,"nodeType":"ParameterList","parameters":[],"src":"4018:0:1"},"scope":228,"src":"3964:55:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"4025:309:1","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":209,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:1","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"operator","nameLocation":"4374:8:1","nodeType":"VariableDeclaration","scope":209,"src":"4366:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"approved","nameLocation":"4389:8:1","nodeType":"VariableDeclaration","scope":209,"src":"4384:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":205,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:1"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"4407:0:1"},"scope":228,"src":"4339:69:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"4414:139:1","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":217,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:1","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:1","nodeType":"VariableDeclaration","scope":217,"src":"4579:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:1"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"operator","nameLocation":"4627:8:1","nodeType":"VariableDeclaration","scope":217,"src":"4619:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:1"},"scope":228,"src":"4558:79:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"4643:138:1","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:1","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"owner","nameLocation":"4820:5:1","nodeType":"VariableDeclaration","scope":227,"src":"4812:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"operator","nameLocation":"4835:8:1","nodeType":"VariableDeclaration","scope":227,"src":"4827:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:1"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"4868:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:1"},"scope":228,"src":"4786:88:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":229,"src":"250:4626:1","usedErrors":[]}],"src":"108:4769:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[246]},"id":247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":230,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"141:152:2","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":246,"linearizedBaseContracts":[246],"name":"IERC721Receiver","nameLocation":"304:15:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"326:493:2","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":245,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:2","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"operator","nameLocation":"867:8:2","nodeType":"VariableDeclaration","scope":245,"src":"859:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":236,"mutability":"mutable","name":"from","nameLocation":"893:4:2","nodeType":"VariableDeclaration","scope":245,"src":"885:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":235,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:2","nodeType":"VariableDeclaration","scope":245,"src":"907:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"data","nameLocation":"947:4:2","nodeType":"VariableDeclaration","scope":245,"src":"932:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:2"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"976:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":242,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:2"},"scope":246,"src":"824:160:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":247,"src":"294:692:2","usedErrors":[]}],"src":"116:871:2"},"id":2},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[890],"IERC721":[228],"IERC721Metadata":[273]},"id":274,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":274,"sourceUnit":229,"src":"137:24:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":251,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"326:7:3"},"id":252,"nodeType":"InheritanceSpecifier","src":"326:7:3"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"163:133:3","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":273,"linearizedBaseContracts":[273,228,890],"name":"IERC721Metadata","nameLocation":"307:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"340:58:3","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":258,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:3","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"416:2:3"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"442:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":255,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:3"},"scope":273,"src":"403:54:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"463:60:3","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":264,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:3","nodeType":"FunctionDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"543:2:3"},"returnParameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":264,"src":"569:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":261,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:3"},"scope":273,"src":"528:56:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":265,"nodeType":"StructuredDocumentation","src":"590:90:3","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":272,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:3","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:3","nodeType":"VariableDeclaration","scope":272,"src":"703:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":272,"src":"743:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":269,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:3"},"scope":273,"src":"685:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":274,"src":"297:463:3","usedErrors":[]}],"src":"112:649:3"},"id":3},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[603]},"id":604,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":275,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":276,"nodeType":"StructuredDocumentation","src":"126:67:4","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":603,"linearizedBaseContracts":[603],"name":"Address","nameLocation":"202:7:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":290,"nodeType":"Block","src":"1478:254:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":284,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"1702:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1702:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1702:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":283,"id":289,"nodeType":"Return","src":"1695:30:4"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"216:1191:4","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:4","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"account","nameLocation":"1440:7:4","nodeType":"VariableDeclaration","scope":291,"src":"1432:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:4"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":291,"src":"1472:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":281,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:4"},"scope":603,"src":"1412:320:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":324,"nodeType":"Block","src":"2718:241:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":302,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$603","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$603","typeString":"library Address"}],"id":301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:4","typeDescriptions":{}}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2736:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":305,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"2761:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":309,"nodeType":"ExpressionStatement","src":"2728:73:4"},{"assignments":[311,null],"declarations":[{"constant":false,"id":311,"mutability":"mutable","name":"success","nameLocation":"2818:7:4","nodeType":"VariableDeclaration","scope":324,"src":"2813:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":310,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":318,"initialValue":{"arguments":[{"hexValue":"","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":312,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2831:9:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2831:14:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":314,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"2853:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2831:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:4"},{"expression":{"arguments":[{"id":320,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2882:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":319,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2874:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":323,"nodeType":"ExpressionStatement","src":"2874:78:4"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"1738:904:4","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":325,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:4","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:4","nodeType":"VariableDeclaration","scope":325,"src":"2666:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"amount","nameLocation":"2701:6:4","nodeType":"VariableDeclaration","scope":325,"src":"2693:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:4"},"returnParameters":{"id":298,"nodeType":"ParameterList","parameters":[],"src":"2718:0:4"},"scope":603,"src":"2647:312:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":342,"nodeType":"Block","src":"3790:96:4","statements":[{"expression":{"arguments":[{"id":336,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"3829:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":337,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3837:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":335,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[383,427],"referencedDeclaration":427,"src":"3807:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3807:72:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":334,"id":341,"nodeType":"Return","src":"3800:79:4"}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"2965:731:4","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":343,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:4","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"target","nameLocation":"3731:6:4","nodeType":"VariableDeclaration","scope":343,"src":"3723:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":327,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"data","nameLocation":"3752:4:4","nodeType":"VariableDeclaration","scope":343,"src":"3739:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":329,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:4"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":343,"src":"3776:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":332,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:4"},"scope":603,"src":"3701:185:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":362,"nodeType":"Block","src":"4255:76:4","statements":[{"expression":{"arguments":[{"id":356,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"4294:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":357,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"4302:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":359,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"4311:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":355,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[383,427],"referencedDeclaration":427,"src":"4272:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":354,"id":361,"nodeType":"Return","src":"4265:59:4"}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"3892:211:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":363,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:4","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"target","nameLocation":"4147:6:4","nodeType":"VariableDeclaration","scope":363,"src":"4139:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":345,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"data","nameLocation":"4176:4:4","nodeType":"VariableDeclaration","scope":363,"src":"4163:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":347,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:4","nodeType":"VariableDeclaration","scope":363,"src":"4190:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":349,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:4"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"4241:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:4"},"scope":603,"src":"4108:223:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"4806:111:4","statements":[{"expression":{"arguments":[{"id":376,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4845:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":377,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"4853:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"4859:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":375,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[383,427],"referencedDeclaration":427,"src":"4823:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":374,"id":381,"nodeType":"Return","src":"4816:94:4"}]},"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"4337:351:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:4","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"target","nameLocation":"4732:6:4","nodeType":"VariableDeclaration","scope":383,"src":"4724:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"data","nameLocation":"4753:4:4","nodeType":"VariableDeclaration","scope":383,"src":"4740:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":367,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"value","nameLocation":"4767:5:4","nodeType":"VariableDeclaration","scope":383,"src":"4759:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":369,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:4"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"4792:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":372,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:4"},"scope":603,"src":"4693:224:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":426,"nodeType":"Block","src":"5344:267:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":400,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$603","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$603","typeString":"library Address"}],"id":399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":398,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:4","typeDescriptions":{}}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5362:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5362:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"5387:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":397,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5354:81:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":407,"nodeType":"ExpressionStatement","src":"5354:81:4"},{"assignments":[409,411],"declarations":[{"constant":false,"id":409,"mutability":"mutable","name":"success","nameLocation":"5451:7:4","nodeType":"VariableDeclaration","scope":426,"src":"5446:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":408,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:4","nodeType":"VariableDeclaration","scope":426,"src":"5460:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":410,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":418,"initialValue":{"arguments":[{"id":416,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"5513:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":412,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"5487:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5487:11:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"5506:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5487:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:4"},{"expression":{"arguments":[{"id":420,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"5562:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":421,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"5570:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":422,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"5579:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":423,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"5591:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":419,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"5535:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5535:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":396,"id":425,"nodeType":"Return","src":"5528:76:4"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"4923:237:4","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":427,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:4","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"target","nameLocation":"5213:6:4","nodeType":"VariableDeclaration","scope":427,"src":"5205:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"data","nameLocation":"5242:4:4","nodeType":"VariableDeclaration","scope":427,"src":"5229:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":387,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"value","nameLocation":"5264:5:4","nodeType":"VariableDeclaration","scope":427,"src":"5256:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:4","nodeType":"VariableDeclaration","scope":427,"src":"5279:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":391,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:4"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":427,"src":"5330:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":394,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:4"},"scope":603,"src":"5165:446:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":443,"nodeType":"Block","src":"5888:97:4","statements":[{"expression":{"arguments":[{"id":438,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"5924:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":439,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"5932:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":437,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[444,473],"referencedDeclaration":473,"src":"5905:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5905:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":436,"id":442,"nodeType":"Return","src":"5898:80:4"}]},"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"5617:166:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":444,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:4","nodeType":"FunctionDefinition","parameters":{"id":433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"target","nameLocation":"5824:6:4","nodeType":"VariableDeclaration","scope":444,"src":"5816:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":432,"mutability":"mutable","name":"data","nameLocation":"5845:4:4","nodeType":"VariableDeclaration","scope":444,"src":"5832:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":431,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:4"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":444,"src":"5874:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":434,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:4"},"scope":603,"src":"5788:197:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":472,"nodeType":"Block","src":"6327:168:4","statements":[{"assignments":[457,459],"declarations":[{"constant":false,"id":457,"mutability":"mutable","name":"success","nameLocation":"6343:7:4","nodeType":"VariableDeclaration","scope":472,"src":"6338:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":456,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:4","nodeType":"VariableDeclaration","scope":472,"src":"6352:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":458,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":464,"initialValue":{"arguments":[{"id":462,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"6397:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":460,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6379:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:4","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6379:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:4"},{"expression":{"arguments":[{"id":466,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6446:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":467,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"6454:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":468,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"6463:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":469,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6475:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":465,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6419:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":455,"id":471,"nodeType":"Return","src":"6412:76:4"}]},"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"5991:173:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":473,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:4","nodeType":"FunctionDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"target","nameLocation":"6214:6:4","nodeType":"VariableDeclaration","scope":473,"src":"6206:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"data","nameLocation":"6243:4:4","nodeType":"VariableDeclaration","scope":473,"src":"6230:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":448,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":451,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:4","nodeType":"VariableDeclaration","scope":473,"src":"6257:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":450,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:4"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":473,"src":"6313:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":453,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:4"},"scope":603,"src":"6169:326:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":489,"nodeType":"Block","src":"6771:101:4","statements":[{"expression":{"arguments":[{"id":484,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"6809:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"6817:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":483,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[490,519],"referencedDeclaration":519,"src":"6788:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6788:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":482,"id":488,"nodeType":"Return","src":"6781:84:4"}]},"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"6501:168:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":490,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:4","nodeType":"FunctionDefinition","parameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"target","nameLocation":"6712:6:4","nodeType":"VariableDeclaration","scope":490,"src":"6704:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"data","nameLocation":"6733:4:4","nodeType":"VariableDeclaration","scope":490,"src":"6720:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":477,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:4"},"returnParameters":{"id":482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":490,"src":"6757:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":480,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:4"},"scope":603,"src":"6674:198:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"7213:170:4","statements":[{"assignments":[503,505],"declarations":[{"constant":false,"id":503,"mutability":"mutable","name":"success","nameLocation":"7229:7:4","nodeType":"VariableDeclaration","scope":518,"src":"7224:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":502,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:4","nodeType":"VariableDeclaration","scope":518,"src":"7238:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":504,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":510,"initialValue":{"arguments":[{"id":508,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"7285:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":506,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"7265:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:4","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7265:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:4"},{"expression":{"arguments":[{"id":512,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"7334:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"7342:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":514,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"7351:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":515,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"7363:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":511,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"7307:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7307:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":501,"id":517,"nodeType":"Return","src":"7300:76:4"}]},"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"6878:175:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:4","nodeType":"FunctionDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"target","nameLocation":"7105:6:4","nodeType":"VariableDeclaration","scope":519,"src":"7097:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"data","nameLocation":"7134:4:4","nodeType":"VariableDeclaration","scope":519,"src":"7121:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":494,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:4","nodeType":"VariableDeclaration","scope":519,"src":"7148:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":496,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:4"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":519,"src":"7199:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":499,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:4"},"scope":603,"src":"7058:325:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"7865:434:4","statements":[{"condition":{"id":533,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7879:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":555,"nodeType":"Block","src":"8235:58:4","statements":[{"expression":{"arguments":[{"id":551,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"8257:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":552,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"8269:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":550,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"8249:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8249:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"ExpressionStatement","src":"8249:33:4"}]},"id":556,"nodeType":"IfStatement","src":"7875:418:4","trueBody":{"id":549,"nodeType":"Block","src":"7888:341:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"7906:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7906:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":546,"nodeType":"IfStatement","src":"7902:286:4","trueBody":{"id":545,"nodeType":"Block","src":"7930:258:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":540,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"8132:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":539,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"8121:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8121:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":538,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8113:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":544,"nodeType":"ExpressionStatement","src":"8113:60:4"}]}},{"expression":{"id":547,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"8208:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":532,"id":548,"nodeType":"Return","src":"8201:17:4"}]}}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"7389:277:4","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:4","nodeType":"FunctionDefinition","parameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"target","nameLocation":"7724:6:4","nodeType":"VariableDeclaration","scope":558,"src":"7716:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"success","nameLocation":"7745:7:4","nodeType":"VariableDeclaration","scope":558,"src":"7740:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":523,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:4","nodeType":"VariableDeclaration","scope":558,"src":"7762:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":525,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:4","nodeType":"VariableDeclaration","scope":558,"src":"7795:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":527,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:4"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"7851:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:4"},"scope":603,"src":"7671:628:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":581,"nodeType":"Block","src":"8680:135:4","statements":[{"condition":{"id":570,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"8694:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":579,"nodeType":"Block","src":"8751:58:4","statements":[{"expression":{"arguments":[{"id":575,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"8773:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":576,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"8785:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":574,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"8765:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":578,"nodeType":"ExpressionStatement","src":"8765:33:4"}]},"id":580,"nodeType":"IfStatement","src":"8690:119:4","trueBody":{"id":573,"nodeType":"Block","src":"8703:42:4","statements":[{"expression":{"id":571,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"8724:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":569,"id":572,"nodeType":"Return","src":"8717:17:4"}]}}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"8305:210:4","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":582,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:4","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"success","nameLocation":"8560:7:4","nodeType":"VariableDeclaration","scope":582,"src":"8555:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":560,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:4","nodeType":"VariableDeclaration","scope":582,"src":"8577:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":562,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:4","nodeType":"VariableDeclaration","scope":582,"src":"8610:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":564,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:4"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":582,"src":"8666:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":567,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:4"},"scope":603,"src":"8520:295:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"8904:457:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":589,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8980:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8980:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":599,"nodeType":"Block","src":"9310:45:4","statements":[{"expression":{"arguments":[{"id":596,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"9331:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":595,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":598,"nodeType":"ExpressionStatement","src":"9324:20:4"}]},"id":600,"nodeType":"IfStatement","src":"8976:379:4","trueBody":{"id":594,"nodeType":"Block","src":"9003:301:4","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:4","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:4","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:4"},"nodeType":"YulFunctionCall","src":"9202:17:4"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:4","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:4"},"nodeType":"YulFunctionCall","src":"9243:19:4"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:4"},"nodeType":"YulFunctionCall","src":"9236:44:4"},"nodeType":"YulExpressionStatement","src":"9236:44:4"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":584,"isOffset":false,"isSlot":false,"src":"9208:10:4","valueSize":1},{"declaration":584,"isOffset":false,"isSlot":false,"src":"9251:10:4","valueSize":1}],"id":593,"nodeType":"InlineAssembly","src":"9152:142:4"}]}}]},"id":602,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:4","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:4","nodeType":"VariableDeclaration","scope":602,"src":"8838:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":583,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:4","nodeType":"VariableDeclaration","scope":602,"src":"8863:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":585,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:4"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[],"src":"8904:0:4"},"scope":603,"src":"8821:540:4","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":604,"src":"194:9169:4","usedErrors":[]}],"src":"101:9263:4"},"id":4},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[625]},"id":626,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":605,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:5"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":606,"nodeType":"StructuredDocumentation","src":"111:496:5","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":625,"linearizedBaseContracts":[625],"name":"Context","nameLocation":"626:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":614,"nodeType":"Block","src":"702:34:5","statements":[{"expression":{"expression":{"id":611,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":610,"id":613,"nodeType":"Return","src":"712:17:5"}]},"id":615,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:5","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"659:2:5"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":615,"src":"693:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:5"},"scope":625,"src":"640:96:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"809:32:5","statements":[{"expression":{"expression":{"id":620,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":619,"id":622,"nodeType":"Return","src":"819:15:5"}]},"id":624,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:5","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"759:2:5"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"793:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":617,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:5"},"scope":625,"src":"742:99:5","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":626,"src":"608:235:5","usedErrors":[]}],"src":"86:758:5"},"id":5},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1756],"SignedMath":[1861],"Strings":[854]},"id":855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":627,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:6"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":855,"sourceUnit":1757,"src":"126:25:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":855,"sourceUnit":1862,"src":"152:31:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"185:34:6","text":" @dev String operations."},"fullyImplemented":true,"id":854,"linearizedBaseContracts":[854],"name":"Strings","nameLocation":"228:7:6","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":633,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:6","nodeType":"VariableDeclaration","scope":854,"src":"242:54:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":631,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:6","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":636,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:6","nodeType":"VariableDeclaration","scope":854,"src":"302:43:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":634,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:6","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":683,"nodeType":"Block","src":"518:625:6","statements":[{"id":682,"nodeType":"UncheckedBlock","src":"528:609:6","statements":[{"assignments":[645],"declarations":[{"constant":false,"id":645,"mutability":"mutable","name":"length","nameLocation":"560:6:6","nodeType":"VariableDeclaration","scope":682,"src":"552:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":652,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"580:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":646,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"569:4:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1756_$","typeString":"type(library Math)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"569:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"569:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:6"},{"assignments":[654],"declarations":[{"constant":false,"id":654,"mutability":"mutable","name":"buffer","nameLocation":"618:6:6","nodeType":"VariableDeclaration","scope":682,"src":"604:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":653,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":659,"initialValue":{"arguments":[{"id":657,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"638:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":655,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"627:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:6"},{"assignments":[661],"declarations":[{"constant":false,"id":661,"mutability":"mutable","name":"ptr","nameLocation":"667:3:6","nodeType":"VariableDeclaration","scope":682,"src":"659:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":662,"nodeType":"VariableDeclarationStatement","src":"659:11:6"},{"AST":{"nodeType":"YulBlock","src":"740:67:6","statements":[{"nodeType":"YulAssignment","src":"758:35:6","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:6","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:6"},"nodeType":"YulFunctionCall","src":"777:15:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:6"},"nodeType":"YulFunctionCall","src":"765:28:6"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:6"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":654,"isOffset":false,"isSlot":false,"src":"769:6:6","valueSize":1},{"declaration":645,"isOffset":false,"isSlot":false,"src":"785:6:6","valueSize":1},{"declaration":661,"isOffset":false,"isSlot":false,"src":"758:3:6","valueSize":1}],"id":663,"nodeType":"InlineAssembly","src":"731:76:6"},{"body":{"id":678,"nodeType":"Block","src":"833:267:6","statements":[{"expression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:6","subExpression":{"id":665,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"851:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":667,"nodeType":"ExpressionStatement","src":"851:5:6"},{"AST":{"nodeType":"YulBlock","src":"934:84:6","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:6"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:6","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:6"},"nodeType":"YulFunctionCall","src":"974:14:6"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:6"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:6"},"nodeType":"YulFunctionCall","src":"969:30:6"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:6"},"nodeType":"YulFunctionCall","src":"956:44:6"},"nodeType":"YulExpressionStatement","src":"956:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":633,"isOffset":false,"isSlot":false,"src":"990:8:6","valueSize":1},{"declaration":661,"isOffset":false,"isSlot":false,"src":"964:3:6","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"978:5:6","valueSize":1}],"id":668,"nodeType":"InlineAssembly","src":"925:93:6"},{"expression":{"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"1035:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":672,"nodeType":"ExpressionStatement","src":"1035:11:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"1068:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":677,"nodeType":"IfStatement","src":"1064:21:6","trueBody":{"id":676,"nodeType":"Break","src":"1080:5:6"}}]},"condition":{"hexValue":"74727565","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":679,"nodeType":"WhileStatement","src":"820:280:6"},{"expression":{"id":680,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"1120:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":643,"id":681,"nodeType":"Return","src":"1113:13:6"}]}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"352:90:6","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":684,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:6","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"value","nameLocation":"473:5:6","nodeType":"VariableDeclaration","scope":684,"src":"465:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":638,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:6"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":684,"src":"503:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":641,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:6"},"scope":854,"src":"447:696:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":711,"nodeType":"Block","src":"1313:103:6","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"1354:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:6","trueExpression":{"hexValue":"2d","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"1400:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":703,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"1385:10:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1861_$","typeString":"type(library SignedMath)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1860,"src":"1385:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1385:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":702,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[684,712],"referencedDeclaration":684,"src":"1376:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1376:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":694,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1337:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":692,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:6","typeDescriptions":{}}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1330:79:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":691,"id":710,"nodeType":"Return","src":"1323:86:6"}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"1149:89:6","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":712,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:6","nodeType":"FunctionDefinition","parameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"value","nameLocation":"1268:5:6","nodeType":"VariableDeclaration","scope":712,"src":"1261:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":686,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:6"},"returnParameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"1298:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":689,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:6"},"scope":854,"src":"1243:173:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":731,"nodeType":"Block","src":"1595:100:6","statements":[{"id":730,"nodeType":"UncheckedBlock","src":"1605:84:6","statements":[{"expression":{"arguments":[{"id":721,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"1648:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"1667:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":722,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"1655:4:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1756_$","typeString":"type(library Math)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1716,"src":"1655:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1655:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":720,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[732,808,828],"referencedDeclaration":808,"src":"1636:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1636:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":719,"id":729,"nodeType":"Return","src":"1629:49:6"}]}]},"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"1422:94:6","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":732,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:6","nodeType":"FunctionDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"value","nameLocation":"1550:5:6","nodeType":"VariableDeclaration","scope":732,"src":"1542:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:6"},"returnParameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":732,"src":"1580:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":717,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:6"},"scope":854,"src":"1521:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":807,"nodeType":"Block","src":"1908:347:6","statements":[{"assignments":[743],"declarations":[{"constant":false,"id":743,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:6","nodeType":"VariableDeclaration","scope":807,"src":"1918:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":742,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":752,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":747,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1954:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":744,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1940:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:6"},{"expression":{"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":753,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"1975:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":755,"indexExpression":{"hexValue":"30","id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":758,"nodeType":"ExpressionStatement","src":"1975:15:6"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":759,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"2000:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":761,"indexExpression":{"hexValue":"31","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":764,"nodeType":"ExpressionStatement","src":"2000:15:6"},{"body":{"id":793,"nodeType":"Block","src":"2070:83:6","statements":[{"expression":{"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":779,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"2084:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":781,"indexExpression":{"id":780,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2091:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":782,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2096:8:6","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":786,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"2105:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:6","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":788,"nodeType":"ExpressionStatement","src":"2084:33:6"},{"expression":{"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"2131:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":792,"nodeType":"ExpressionStatement","src":"2131:11:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":773,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2058:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":794,"initializationExpression":{"assignments":[766],"declarations":[{"constant":false,"id":766,"mutability":"mutable","name":"i","nameLocation":"2038:1:6","nodeType":"VariableDeclaration","scope":794,"src":"2030:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":772,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":768,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"2046:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:6"},"loopExpression":{"expression":{"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:6","subExpression":{"id":776,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2067:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":778,"nodeType":"ExpressionStatement","src":"2065:3:6"},"nodeType":"ForStatement","src":"2025:128:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"2170:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":795,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2162:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":801,"nodeType":"ExpressionStatement","src":"2162:55:6"},{"expression":{"arguments":[{"id":804,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"2241:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":802,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:6","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2234:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":741,"id":806,"nodeType":"Return","src":"2227:21:6"}]},"documentation":{"id":733,"nodeType":"StructuredDocumentation","src":"1701:112:6","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":808,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:6","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"value","nameLocation":"1847:5:6","nodeType":"VariableDeclaration","scope":808,"src":"1839:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"length","nameLocation":"1862:6:6","nodeType":"VariableDeclaration","scope":808,"src":"1854:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:6"},"returnParameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":808,"src":"1893:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":739,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:6"},"scope":854,"src":"1818:437:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":827,"nodeType":"Block","src":"2480:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":821,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2525:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":819,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:6","typeDescriptions":{}}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:6","typeDescriptions":{}}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":824,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"2533:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":816,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[732,808,828],"referencedDeclaration":808,"src":"2497:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2497:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":815,"id":826,"nodeType":"Return","src":"2490:59:6"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"2261:141:6","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":828,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:6","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"addr","nameLocation":"2436:4:6","nodeType":"VariableDeclaration","scope":828,"src":"2428:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:6"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":828,"src":"2465:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":813,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:6"},"scope":854,"src":"2407:149:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":852,"nodeType":"Block","src":"2711:66:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":841,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"2744:1:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":839,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:6","typeDescriptions":{}}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2738:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":838,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"2767:1:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":845,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:6","typeDescriptions":{}}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2761:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":844,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2751:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":837,"id":851,"nodeType":"Return","src":"2721:49:6"}]},"documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"2562:66:6","text":" @dev Returns true if the two strings are equal."},"id":853,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:6","nodeType":"FunctionDefinition","parameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"a","nameLocation":"2662:1:6","nodeType":"VariableDeclaration","scope":853,"src":"2648:15:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":830,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"b","nameLocation":"2679:1:6","nodeType":"VariableDeclaration","scope":853,"src":"2665:15:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":832,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:6"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":853,"src":"2705:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":835,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:6"},"scope":854,"src":"2633:144:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":855,"src":"220:2559:6","usedErrors":[]}],"src":"101:2679:6"},"id":6},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[878],"IERC165":[890]},"id":879,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":856,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":879,"sourceUnit":891,"src":"124:23:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":859,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":890,"src":"754:7:7"},"id":860,"nodeType":"InheritanceSpecifier","src":"754:7:7"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"149:576:7","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":878,"linearizedBaseContracts":[878,890],"name":"ERC165","nameLocation":"744:6:7","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[889],"body":{"id":876,"nodeType":"Block","src":"920:64:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":869,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"937:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":871,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"957:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$890_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$890_$","typeString":"type(contract IERC165)"}],"id":870,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$890","typeString":"type(contract IERC165)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":868,"id":875,"nodeType":"Return","src":"930:47:7"}]},"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"768:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":877,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:7","nodeType":"FunctionDefinition","overrides":{"id":865,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:7"},"parameters":{"id":864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:7","nodeType":"VariableDeclaration","scope":877,"src":"856:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":862,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:7"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":877,"src":"914:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":866,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:7"},"scope":878,"src":"829:155:7","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":879,"src":"726:260:7","usedErrors":[]}],"src":"99:888:7"},"id":7},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[890]},"id":891,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":880,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"125:279:8","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":890,"linearizedBaseContracts":[890],"name":"IERC165","nameLocation":"415:7:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":882,"nodeType":"StructuredDocumentation","src":"429:340:8","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":889,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:8","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:8","nodeType":"VariableDeclaration","scope":889,"src":"801:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":883,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:8"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"844:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:8"},"scope":890,"src":"774:76:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":891,"src":"405:447:8","usedErrors":[]}],"src":"100:753:8"},"id":8},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1756]},"id":1757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":892,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":893,"nodeType":"StructuredDocumentation","src":"128:73:9","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1756,"linearizedBaseContracts":[1756],"name":"Math","nameLocation":"210:4:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":897,"members":[{"id":894,"name":"Down","nameLocation":"245:4:9","nodeType":"EnumValue","src":"245:4:9"},{"id":895,"name":"Up","nameLocation":"287:2:9","nodeType":"EnumValue","src":"287:2:9"},{"id":896,"name":"Zero","nameLocation":"318:4:9","nodeType":"EnumValue","src":"318:4:9"}],"name":"Rounding","nameLocation":"226:8:9","nodeType":"EnumDefinition","src":"221:122:9"},{"body":{"id":914,"nodeType":"Block","src":"480:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":907,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"497:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":908,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"501:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":911,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"509:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:9","trueExpression":{"id":910,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"505:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":906,"id":913,"nodeType":"Return","src":"490:20:9"}]},"documentation":{"id":898,"nodeType":"StructuredDocumentation","src":"349:59:9","text":" @dev Returns the largest of two numbers."},"id":915,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:9","nodeType":"FunctionDefinition","parameters":{"id":903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"a","nameLocation":"434:1:9","nodeType":"VariableDeclaration","scope":915,"src":"426:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":899,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":902,"mutability":"mutable","name":"b","nameLocation":"445:1:9","nodeType":"VariableDeclaration","scope":915,"src":"437:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:9"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":915,"src":"471:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:9"},"scope":1756,"src":"413:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":932,"nodeType":"Block","src":"655:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":925,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"672:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":926,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"676:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"684:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:9","trueExpression":{"id":928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"680:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":924,"id":931,"nodeType":"Return","src":"665:20:9"}]},"documentation":{"id":916,"nodeType":"StructuredDocumentation","src":"523:60:9","text":" @dev Returns the smallest of two numbers."},"id":933,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:9","nodeType":"FunctionDefinition","parameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"a","nameLocation":"609:1:9","nodeType":"VariableDeclaration","scope":933,"src":"601:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"b","nameLocation":"620:1:9","nodeType":"VariableDeclaration","scope":933,"src":"612:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:9"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":933,"src":"646:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":922,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:9"},"scope":1756,"src":"588:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":955,"nodeType":"Block","src":"876:82:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"931:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":944,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"935:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"941:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":948,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"945:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":950,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":942,"id":954,"nodeType":"Return","src":"923:28:9"}]},"documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"698:102:9","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":956,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:9","nodeType":"FunctionDefinition","parameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"a","nameLocation":"830:1:9","nodeType":"VariableDeclaration","scope":956,"src":"822:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"b","nameLocation":"841:1:9","nodeType":"VariableDeclaration","scope":956,"src":"833:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":937,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:9"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":956,"src":"867:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":940,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:9"},"scope":1756,"src":"805:153:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":980,"nodeType":"Block","src":"1228:123:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":966,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1316:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":970,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1330:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":974,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"1339:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:9","trueExpression":{"hexValue":"30","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":965,"id":979,"nodeType":"Return","src":"1309:35:9"}]},"documentation":{"id":957,"nodeType":"StructuredDocumentation","src":"964:188:9","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":981,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:9","nodeType":"FunctionDefinition","parameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":959,"mutability":"mutable","name":"a","nameLocation":"1182:1:9","nodeType":"VariableDeclaration","scope":981,"src":"1174:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":958,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":961,"mutability":"mutable","name":"b","nameLocation":"1193:1:9","nodeType":"VariableDeclaration","scope":981,"src":"1185:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":960,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:9"},"returnParameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":981,"src":"1219:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:9"},"scope":1756,"src":"1157:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1103,"nodeType":"Block","src":"1765:4115:9","statements":[{"id":1102,"nodeType":"UncheckedBlock","src":"1775:4099:9","statements":[{"assignments":[994],"declarations":[{"constant":false,"id":994,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:9","nodeType":"VariableDeclaration","scope":1102,"src":"2096:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":995,"nodeType":"VariableDeclarationStatement","src":"2096:13:9"},{"assignments":[997],"declarations":[{"constant":false,"id":997,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:9","nodeType":"VariableDeclaration","scope":1102,"src":"2168:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":996,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":998,"nodeType":"VariableDeclarationStatement","src":"2168:13:9"},{"AST":{"nodeType":"YulBlock","src":"2248:157:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:9"},"nodeType":"YulFunctionCall","src":"2289:6:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:9"},"nodeType":"YulFunctionCall","src":"2276:20:9"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:9"},"nodeType":"YulFunctionCall","src":"2322:9:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:9"}]},{"nodeType":"YulAssignment","src":"2348:43:9","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:9"},"nodeType":"YulFunctionCall","src":"2361:14:9"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:9"},"nodeType":"YulFunctionCall","src":"2377:13:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:9"},"nodeType":"YulFunctionCall","src":"2357:34:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":994,"isOffset":false,"isSlot":false,"src":"2313:5:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"2369:5:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"2384:5:9","valueSize":1},{"declaration":997,"isOffset":false,"isSlot":false,"src":"2348:5:9","valueSize":1},{"declaration":984,"isOffset":false,"isSlot":false,"src":"2283:1:9","valueSize":1},{"declaration":984,"isOffset":false,"isSlot":false,"src":"2326:1:9","valueSize":1},{"declaration":986,"isOffset":false,"isSlot":false,"src":"2286:1:9","valueSize":1},{"declaration":986,"isOffset":false,"isSlot":false,"src":"2329:1:9","valueSize":1}],"id":999,"nodeType":"InlineAssembly","src":"2239:166:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1000,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"2486:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1008,"nodeType":"IfStatement","src":"2482:368:9","trueBody":{"id":1007,"nodeType":"Block","src":"2498:352:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1003,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"2816:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1004,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"2824:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":992,"id":1006,"nodeType":"Return","src":"2809:26:9"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1010,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"2960:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1011,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"2974:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1009,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1015,"nodeType":"ExpressionStatement","src":"2952:53:9"},{"assignments":[1017],"declarations":[{"constant":false,"id":1017,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:9","nodeType":"VariableDeclaration","scope":1102,"src":"3261:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1018,"nodeType":"VariableDeclarationStatement","src":"3261:17:9"},{"AST":{"nodeType":"YulBlock","src":"3301:291:9","statements":[{"nodeType":"YulAssignment","src":"3370:38:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:9"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:9"},"nodeType":"YulFunctionCall","src":"3383:25:9"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:9"}]},{"nodeType":"YulAssignment","src":"3490:41:9","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:9"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:9"},"nodeType":"YulFunctionCall","src":"3510:20:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:9"},"nodeType":"YulFunctionCall","src":"3499:32:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:9"}]},{"nodeType":"YulAssignment","src":"3548:30:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:9"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:9"},"nodeType":"YulFunctionCall","src":"3557:21:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":988,"isOffset":false,"isSlot":false,"src":"3396:11:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"3524:5:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"3548:5:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"3561:5:9","valueSize":1},{"declaration":997,"isOffset":false,"isSlot":false,"src":"3490:5:9","valueSize":1},{"declaration":997,"isOffset":false,"isSlot":false,"src":"3503:5:9","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"3370:9:9","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"3513:9:9","valueSize":1},{"declaration":1017,"isOffset":false,"isSlot":false,"src":"3568:9:9","valueSize":1},{"declaration":984,"isOffset":false,"isSlot":false,"src":"3390:1:9","valueSize":1},{"declaration":986,"isOffset":false,"isSlot":false,"src":"3393:1:9","valueSize":1}],"id":1019,"nodeType":"InlineAssembly","src":"3292:300:9"},{"assignments":[1021],"declarations":[{"constant":false,"id":1021,"mutability":"mutable","name":"twos","nameLocation":"3907:4:9","nodeType":"VariableDeclaration","scope":1102,"src":"3899:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1029,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1022,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3914:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:9","subExpression":{"id":1023,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3930:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1027,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:9"},{"AST":{"nodeType":"YulBlock","src":"3969:362:9","statements":[{"nodeType":"YulAssignment","src":"4034:37:9","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:9"},"nodeType":"YulFunctionCall","src":"4049:22:9"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:9"}]},{"nodeType":"YulAssignment","src":"4138:25:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:9"},"nodeType":"YulFunctionCall","src":"4147:16:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:9"}]},{"nodeType":"YulAssignment","src":"4278:39:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:9","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:9"},"nodeType":"YulFunctionCall","src":"4294:12:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:9"},"nodeType":"YulFunctionCall","src":"4290:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:9"},"nodeType":"YulFunctionCall","src":"4286:31:9"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":988,"isOffset":false,"isSlot":false,"src":"4034:11:9","valueSize":1},{"declaration":988,"isOffset":false,"isSlot":false,"src":"4053:11:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"4138:5:9","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"4151:5:9","valueSize":1},{"declaration":1021,"isOffset":false,"isSlot":false,"src":"4066:4:9","valueSize":1},{"declaration":1021,"isOffset":false,"isSlot":false,"src":"4158:4:9","valueSize":1},{"declaration":1021,"isOffset":false,"isSlot":false,"src":"4278:4:9","valueSize":1},{"declaration":1021,"isOffset":false,"isSlot":false,"src":"4301:4:9","valueSize":1},{"declaration":1021,"isOffset":false,"isSlot":false,"src":"4308:4:9","valueSize":1}],"id":1030,"nodeType":"InlineAssembly","src":"3960:371:9"},{"expression":{"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1031,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4397:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1032,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"4406:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1033,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"4414:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1036,"nodeType":"ExpressionStatement","src":"4397:21:9"},{"assignments":[1038],"declarations":[{"constant":false,"id":1038,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:9","nodeType":"VariableDeclaration","scope":1102,"src":"4736:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1037,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1045,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1040,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"4759:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:9"},{"expression":{"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1046,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"4992:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5007:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1049,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5021:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1053,"nodeType":"ExpressionStatement","src":"4992:36:9"},{"expression":{"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1054,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5061:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1056,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5076:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1057,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5090:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1061,"nodeType":"ExpressionStatement","src":"5061:36:9"},{"expression":{"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5131:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1064,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5146:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1065,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5160:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1069,"nodeType":"ExpressionStatement","src":"5131:36:9"},{"expression":{"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1070,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5201:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5216:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1073,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5230:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1077,"nodeType":"ExpressionStatement","src":"5201:36:9"},{"expression":{"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1078,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5271:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1080,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5286:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1081,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5300:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1085,"nodeType":"ExpressionStatement","src":"5271:36:9"},{"expression":{"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1086,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5342:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"5357:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1089,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5371:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1093,"nodeType":"ExpressionStatement","src":"5342:36:9"},{"expression":{"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5812:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1095,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"5821:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1096,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5829:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1099,"nodeType":"ExpressionStatement","src":"5812:24:9"},{"expression":{"id":1100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5857:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":992,"id":1101,"nodeType":"Return","src":"5850:13:9"}]}]},"documentation":{"id":982,"nodeType":"StructuredDocumentation","src":"1357:305:9","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1104,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:9","nodeType":"FunctionDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"mutability":"mutable","name":"x","nameLocation":"1691:1:9","nodeType":"VariableDeclaration","scope":1104,"src":"1683:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"y","nameLocation":"1702:1:9","nodeType":"VariableDeclaration","scope":1104,"src":"1694:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":985,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:9","nodeType":"VariableDeclaration","scope":1104,"src":"1705:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:9"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"result","nameLocation":"1757:6:9","nodeType":"VariableDeclaration","scope":1104,"src":"1749:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:9"},"scope":1756,"src":"1667:4213:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1147,"nodeType":"Block","src":"6122:189:9","statements":[{"assignments":[1120],"declarations":[{"constant":false,"id":1120,"mutability":"mutable","name":"result","nameLocation":"6140:6:9","nodeType":"VariableDeclaration","scope":1147,"src":"6132:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1126,"initialValue":{"arguments":[{"id":1122,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6156:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1123,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"6159:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1124,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"6162:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1121,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1104,1148],"referencedDeclaration":1104,"src":"6149:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6149:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1127,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"6188:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1128,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"6200:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$897_$","typeString":"type(enum Math.Rounding)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":895,"src":"6200:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"src":"6188:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1132,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6222:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1133,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"6225:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1134,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"6228:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1131,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:9","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6215:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1144,"nodeType":"IfStatement","src":"6184:98:9","trueBody":{"id":1143,"nodeType":"Block","src":"6246:36:9","statements":[{"expression":{"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6260:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1142,"nodeType":"ExpressionStatement","src":"6260:11:9"}]}},{"expression":{"id":1145,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"6298:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1118,"id":1146,"nodeType":"Return","src":"6291:13:9"}]},"documentation":{"id":1105,"nodeType":"StructuredDocumentation","src":"5886:121:9","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1148,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:9","nodeType":"FunctionDefinition","parameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1107,"mutability":"mutable","name":"x","nameLocation":"6036:1:9","nodeType":"VariableDeclaration","scope":1148,"src":"6028:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"y","nameLocation":"6047:1:9","nodeType":"VariableDeclaration","scope":1148,"src":"6039:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:9","nodeType":"VariableDeclaration","scope":1148,"src":"6050:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1114,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:9","nodeType":"VariableDeclaration","scope":1148,"src":"6071:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"typeName":{"id":1113,"nodeType":"UserDefinedTypeName","pathNode":{"id":1112,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"6071:8:9"},"referencedDeclaration":897,"src":"6071:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:9"},"returnParameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1148,"src":"6113:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:9"},"scope":1756,"src":"6012:299:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1259,"nodeType":"Block","src":"6587:1585:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1156,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"6601:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1162,"nodeType":"IfStatement","src":"6597:45:9","trueBody":{"id":1161,"nodeType":"Block","src":"6609:33:9","statements":[{"expression":{"hexValue":"30","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1155,"id":1160,"nodeType":"Return","src":"6623:8:9"}]}},{"assignments":[1164],"declarations":[{"constant":false,"id":1164,"mutability":"mutable","name":"result","nameLocation":"7329:6:9","nodeType":"VariableDeclaration","scope":1259,"src":"7321:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1163,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1173,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1167,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7349:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1166,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1428,1464],"referencedDeclaration":1428,"src":"7344:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:9"},{"id":1258,"nodeType":"UncheckedBlock","src":"7758:408:9","statements":[{"expression":{"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7782:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1175,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7792:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1176,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7801:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1177,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7805:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1184,"nodeType":"ExpressionStatement","src":"7782:35:9"},{"expression":{"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7831:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1186,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7841:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7850:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1188,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7854:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1191,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1195,"nodeType":"ExpressionStatement","src":"7831:35:9"},{"expression":{"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1196,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7880:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1197,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7890:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1198,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7899:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7903:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1206,"nodeType":"ExpressionStatement","src":"7880:35:9"},{"expression":{"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7929:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7939:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1209,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7948:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1210,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7952:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1217,"nodeType":"ExpressionStatement","src":"7929:35:9"},{"expression":{"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1218,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7978:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"7988:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1220,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7997:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8001:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1228,"nodeType":"ExpressionStatement","src":"7978:35:9"},{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8027:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1230,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8037:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8046:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1232,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8050:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"nodeType":"ExpressionStatement","src":"8027:35:9"},{"expression":{"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8076:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8086:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1242,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8095:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1243,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8099:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1246,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1250,"nodeType":"ExpressionStatement","src":"8076:35:9"},{"expression":{"arguments":[{"id":1252,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8136:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8144:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1254,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8148:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1251,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"8132:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1155,"id":1257,"nodeType":"Return","src":"8125:30:9"}]}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"6317:208:9","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1260,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:9","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"a","nameLocation":"6552:1:9","nodeType":"VariableDeclaration","scope":1260,"src":"6544:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1150,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:9"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1260,"src":"6578:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:9"},"scope":1756,"src":"6530:1642:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1295,"nodeType":"Block","src":"8348:161:9","statements":[{"id":1294,"nodeType":"UncheckedBlock","src":"8358:145:9","statements":[{"assignments":[1272],"declarations":[{"constant":false,"id":1272,"mutability":"mutable","name":"result","nameLocation":"8390:6:9","nodeType":"VariableDeclaration","scope":1294,"src":"8382:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1276,"initialValue":{"arguments":[{"id":1274,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"8404:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1273,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1260,1296],"referencedDeclaration":1260,"src":"8399:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"8427:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1278,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"8437:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1279,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"8449:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$897_$","typeString":"type(enum Math.Rounding)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":895,"src":"8449:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"src":"8437:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"8464:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"8473:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1285,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"8482:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:9","trueExpression":{"hexValue":"31","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1270,"id":1293,"nodeType":"Return","src":"8420:72:9"}]}]},"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"8178:89:9","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1296,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:9","nodeType":"FunctionDefinition","parameters":{"id":1267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"a","nameLocation":"8294:1:9","nodeType":"VariableDeclaration","scope":1296,"src":"8286:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:9","nodeType":"VariableDeclaration","scope":1296,"src":"8297:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"typeName":{"id":1265,"nodeType":"UserDefinedTypeName","pathNode":{"id":1264,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"8297:8:9"},"referencedDeclaration":897,"src":"8297:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:9"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1296,"src":"8339:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:9"},"scope":1756,"src":"8272:237:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1427,"nodeType":"Block","src":"8694:922:9","statements":[{"assignments":[1305],"declarations":[{"constant":false,"id":1305,"mutability":"mutable","name":"result","nameLocation":"8712:6:9","nodeType":"VariableDeclaration","scope":1427,"src":"8704:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1304,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1307,"initialValue":{"hexValue":"30","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:9"},{"id":1424,"nodeType":"UncheckedBlock","src":"8732:855:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"8760:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1322,"nodeType":"IfStatement","src":"8756:99:9","trueBody":{"id":1321,"nodeType":"Block","src":"8778:77:9","statements":[{"expression":{"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"8796:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1316,"nodeType":"ExpressionStatement","src":"8796:13:9"},{"expression":{"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"8827:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1320,"nodeType":"ExpressionStatement","src":"8827:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"8872:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1337,"nodeType":"IfStatement","src":"8868:96:9","trueBody":{"id":1336,"nodeType":"Block","src":"8889:75:9","statements":[{"expression":{"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"8907:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1331,"nodeType":"ExpressionStatement","src":"8907:12:9"},{"expression":{"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"8937:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1335,"nodeType":"ExpressionStatement","src":"8937:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"8981:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1352,"nodeType":"IfStatement","src":"8977:96:9","trueBody":{"id":1351,"nodeType":"Block","src":"8998:75:9","statements":[{"expression":{"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9016:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1346,"nodeType":"ExpressionStatement","src":"9016:12:9"},{"expression":{"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9046:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1350,"nodeType":"ExpressionStatement","src":"9046:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9090:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1367,"nodeType":"IfStatement","src":"9086:96:9","trueBody":{"id":1366,"nodeType":"Block","src":"9107:75:9","statements":[{"expression":{"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9125:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1361,"nodeType":"ExpressionStatement","src":"9125:12:9"},{"expression":{"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9155:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1365,"nodeType":"ExpressionStatement","src":"9155:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9199:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1382,"nodeType":"IfStatement","src":"9195:93:9","trueBody":{"id":1381,"nodeType":"Block","src":"9215:73:9","statements":[{"expression":{"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9233:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1376,"nodeType":"ExpressionStatement","src":"9233:11:9"},{"expression":{"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9262:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1380,"nodeType":"ExpressionStatement","src":"9262:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9305:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1397,"nodeType":"IfStatement","src":"9301:93:9","trueBody":{"id":1396,"nodeType":"Block","src":"9321:73:9","statements":[{"expression":{"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9339:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1391,"nodeType":"ExpressionStatement","src":"9339:11:9"},{"expression":{"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9368:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1395,"nodeType":"ExpressionStatement","src":"9368:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9411:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1412,"nodeType":"IfStatement","src":"9407:93:9","trueBody":{"id":1411,"nodeType":"Block","src":"9427:73:9","statements":[{"expression":{"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9445:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1406,"nodeType":"ExpressionStatement","src":"9445:11:9"},{"expression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1407,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9474:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1410,"nodeType":"ExpressionStatement","src":"9474:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9517:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1423,"nodeType":"IfStatement","src":"9513:64:9","trueBody":{"id":1422,"nodeType":"Block","src":"9533:44:9","statements":[{"expression":{"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1418,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9551:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1421,"nodeType":"ExpressionStatement","src":"9551:11:9"}]}}]},{"expression":{"id":1425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"9603:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1303,"id":1426,"nodeType":"Return","src":"9596:13:9"}]},"documentation":{"id":1297,"nodeType":"StructuredDocumentation","src":"8515:113:9","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:9","nodeType":"FunctionDefinition","parameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"value","nameLocation":"8655:5:9","nodeType":"VariableDeclaration","scope":1428,"src":"8647:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:9"},"returnParameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1428,"src":"8685:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:9"},"scope":1756,"src":"8633:983:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1463,"nodeType":"Block","src":"9849:165:9","statements":[{"id":1462,"nodeType":"UncheckedBlock","src":"9859:149:9","statements":[{"assignments":[1440],"declarations":[{"constant":false,"id":1440,"mutability":"mutable","name":"result","nameLocation":"9891:6:9","nodeType":"VariableDeclaration","scope":1462,"src":"9883:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1444,"initialValue":{"arguments":[{"id":1442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"9905:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1441,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1428,1464],"referencedDeclaration":1428,"src":"9900:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9900:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"9932:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1446,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"9942:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1447,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"9954:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$897_$","typeString":"type(enum Math.Rounding)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":895,"src":"9954:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"src":"9942:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"9974:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"9983:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:9","trueExpression":{"hexValue":"31","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1438,"id":1461,"nodeType":"Return","src":"9925:72:9"}]}]},"documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"9622:142:9","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1464,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:9","nodeType":"FunctionDefinition","parameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"value","nameLocation":"9791:5:9","nodeType":"VariableDeclaration","scope":1464,"src":"9783:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:9","nodeType":"VariableDeclaration","scope":1464,"src":"9798:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"typeName":{"id":1433,"nodeType":"UserDefinedTypeName","pathNode":{"id":1432,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"9798:8:9"},"referencedDeclaration":897,"src":"9798:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:9"},"returnParameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1464,"src":"9840:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:9"},"scope":1756,"src":"9769:245:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"10201:854:9","statements":[{"assignments":[1473],"declarations":[{"constant":false,"id":1473,"mutability":"mutable","name":"result","nameLocation":"10219:6:9","nodeType":"VariableDeclaration","scope":1592,"src":"10211:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1475,"initialValue":{"hexValue":"30","id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:9"},{"id":1589,"nodeType":"UncheckedBlock","src":"10239:787:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10267:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1492,"nodeType":"IfStatement","src":"10263:103:9","trueBody":{"id":1491,"nodeType":"Block","src":"10286:80:9","statements":[{"expression":{"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10304:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"nodeType":"ExpressionStatement","src":"10304:17:9"},{"expression":{"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10339:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1490,"nodeType":"ExpressionStatement","src":"10339:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10383:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1509,"nodeType":"IfStatement","src":"10379:103:9","trueBody":{"id":1508,"nodeType":"Block","src":"10402:80:9","statements":[{"expression":{"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10420:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1503,"nodeType":"ExpressionStatement","src":"10420:17:9"},{"expression":{"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1504,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10455:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1507,"nodeType":"ExpressionStatement","src":"10455:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10499:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1526,"nodeType":"IfStatement","src":"10495:103:9","trueBody":{"id":1525,"nodeType":"Block","src":"10518:80:9","statements":[{"expression":{"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10536:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1520,"nodeType":"ExpressionStatement","src":"10536:17:9"},{"expression":{"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10571:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1524,"nodeType":"ExpressionStatement","src":"10571:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10615:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1543,"nodeType":"IfStatement","src":"10611:100:9","trueBody":{"id":1542,"nodeType":"Block","src":"10633:78:9","statements":[{"expression":{"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10651:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1537,"nodeType":"ExpressionStatement","src":"10651:16:9"},{"expression":{"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10685:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1541,"nodeType":"ExpressionStatement","src":"10685:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10728:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1560,"nodeType":"IfStatement","src":"10724:100:9","trueBody":{"id":1559,"nodeType":"Block","src":"10746:78:9","statements":[{"expression":{"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10764:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1554,"nodeType":"ExpressionStatement","src":"10764:16:9"},{"expression":{"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10798:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1558,"nodeType":"ExpressionStatement","src":"10798:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10841:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1577,"nodeType":"IfStatement","src":"10837:100:9","trueBody":{"id":1576,"nodeType":"Block","src":"10859:78:9","statements":[{"expression":{"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10877:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1571,"nodeType":"ExpressionStatement","src":"10877:16:9"},{"expression":{"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10911:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1575,"nodeType":"ExpressionStatement","src":"10911:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"10954:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1588,"nodeType":"IfStatement","src":"10950:66:9","trueBody":{"id":1587,"nodeType":"Block","src":"10972:44:9","statements":[{"expression":{"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"10990:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1586,"nodeType":"ExpressionStatement","src":"10990:11:9"}]}}]},{"expression":{"id":1590,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"11042:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1471,"id":1591,"nodeType":"Return","src":"11035:13:9"}]},"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"10020:114:9","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:9","nodeType":"FunctionDefinition","parameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"value","nameLocation":"10162:5:9","nodeType":"VariableDeclaration","scope":1593,"src":"10154:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:9"},"returnParameters":{"id":1471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"10192:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:9"},"scope":1756,"src":"10139:916:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1628,"nodeType":"Block","src":"11290:167:9","statements":[{"id":1627,"nodeType":"UncheckedBlock","src":"11300:151:9","statements":[{"assignments":[1605],"declarations":[{"constant":false,"id":1605,"mutability":"mutable","name":"result","nameLocation":"11332:6:9","nodeType":"VariableDeclaration","scope":1627,"src":"11324:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1609,"initialValue":{"arguments":[{"id":1607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"11347:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1606,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1593,1629],"referencedDeclaration":1593,"src":"11341:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11341:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"11374:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1611,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"11384:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1612,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"11396:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$897_$","typeString":"type(enum Math.Rounding)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":895,"src":"11396:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"src":"11384:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"11417:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"11426:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:9","trueExpression":{"hexValue":"31","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1603,"id":1626,"nodeType":"Return","src":"11367:73:9"}]}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"11061:143:9","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1629,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:9","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"value","nameLocation":"11232:5:9","nodeType":"VariableDeclaration","scope":1629,"src":"11224:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:9","nodeType":"VariableDeclaration","scope":1629,"src":"11239:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"typeName":{"id":1598,"nodeType":"UserDefinedTypeName","pathNode":{"id":1597,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"11239:8:9"},"referencedDeclaration":897,"src":"11239:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:9"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"11281:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:9"},"scope":1756,"src":"11209:248:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1715,"nodeType":"Block","src":"11771:600:9","statements":[{"assignments":[1638],"declarations":[{"constant":false,"id":1638,"mutability":"mutable","name":"result","nameLocation":"11789:6:9","nodeType":"VariableDeclaration","scope":1715,"src":"11781:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1640,"initialValue":{"hexValue":"30","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:9"},{"id":1712,"nodeType":"UncheckedBlock","src":"11809:533:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"11837:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1655,"nodeType":"IfStatement","src":"11833:98:9","trueBody":{"id":1654,"nodeType":"Block","src":"11855:76:9","statements":[{"expression":{"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"11873:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1649,"nodeType":"ExpressionStatement","src":"11873:13:9"},{"expression":{"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1650,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"11904:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1653,"nodeType":"ExpressionStatement","src":"11904:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"11948:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1670,"nodeType":"IfStatement","src":"11944:95:9","trueBody":{"id":1669,"nodeType":"Block","src":"11965:74:9","statements":[{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"11983:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1664,"nodeType":"ExpressionStatement","src":"11983:12:9"},{"expression":{"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1665,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12013:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1668,"nodeType":"ExpressionStatement","src":"12013:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"12056:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1685,"nodeType":"IfStatement","src":"12052:95:9","trueBody":{"id":1684,"nodeType":"Block","src":"12073:74:9","statements":[{"expression":{"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"12091:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1679,"nodeType":"ExpressionStatement","src":"12091:12:9"},{"expression":{"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12121:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1683,"nodeType":"ExpressionStatement","src":"12121:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"12164:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1700,"nodeType":"IfStatement","src":"12160:95:9","trueBody":{"id":1699,"nodeType":"Block","src":"12181:74:9","statements":[{"expression":{"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"12199:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1694,"nodeType":"ExpressionStatement","src":"12199:12:9"},{"expression":{"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1695,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12229:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1698,"nodeType":"ExpressionStatement","src":"12229:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1701,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"12272:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1711,"nodeType":"IfStatement","src":"12268:64:9","trueBody":{"id":1710,"nodeType":"Block","src":"12288:44:9","statements":[{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1706,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12306:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1709,"nodeType":"ExpressionStatement","src":"12306:11:9"}]}}]},{"expression":{"id":1713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12358:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1636,"id":1714,"nodeType":"Return","src":"12351:13:9"}]},"documentation":{"id":1630,"nodeType":"StructuredDocumentation","src":"11463:240:9","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1716,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:9","nodeType":"FunctionDefinition","parameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"value","nameLocation":"11732:5:9","nodeType":"VariableDeclaration","scope":1716,"src":"11724:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:9"},"returnParameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1716,"src":"11762:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:9"},"scope":1756,"src":"11708:663:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1754,"nodeType":"Block","src":"12608:174:9","statements":[{"id":1753,"nodeType":"UncheckedBlock","src":"12618:158:9","statements":[{"assignments":[1728],"declarations":[{"constant":false,"id":1728,"mutability":"mutable","name":"result","nameLocation":"12650:6:9","nodeType":"VariableDeclaration","scope":1753,"src":"12642:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1727,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1732,"initialValue":{"arguments":[{"id":1730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"12666:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1729,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1716,1755],"referencedDeclaration":1716,"src":"12659:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12659:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"12693:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1734,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"12703:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1735,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"12715:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$897_$","typeString":"type(enum Math.Rounding)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":895,"src":"12715:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"src":"12703:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1739,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"12736:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"12751:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:9","trueExpression":{"hexValue":"31","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1750,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1726,"id":1752,"nodeType":"Return","src":"12686:79:9"}]}]},"documentation":{"id":1717,"nodeType":"StructuredDocumentation","src":"12377:144:9","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1755,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:9","nodeType":"FunctionDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"value","nameLocation":"12550:5:9","nodeType":"VariableDeclaration","scope":1755,"src":"12542:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:9","nodeType":"VariableDeclaration","scope":1755,"src":"12557:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"},"typeName":{"id":1721,"nodeType":"UserDefinedTypeName","pathNode":{"id":1720,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":897,"src":"12557:8:9"},"referencedDeclaration":897,"src":"12557:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$897","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:9"},"returnParameters":{"id":1726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1755,"src":"12599:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1724,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:9"},"scope":1756,"src":"12526:256:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1757,"src":"202:12582:9","usedErrors":[]}],"src":"103:12682:9"},"id":9},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1861]},"id":1862,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1758,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"134:80:10","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1861,"linearizedBaseContracts":[1861],"name":"SignedMath","nameLocation":"223:10:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1776,"nodeType":"Block","src":"375:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1769,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"392:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1770,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"396:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1773,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"404:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:10","trueExpression":{"id":1772,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"400:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1768,"id":1775,"nodeType":"Return","src":"385:20:10"}]},"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"240:66:10","text":" @dev Returns the largest of two signed numbers."},"id":1777,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:10","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"a","nameLocation":"331:1:10","nodeType":"VariableDeclaration","scope":1777,"src":"324:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1761,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"b","nameLocation":"341:1:10","nodeType":"VariableDeclaration","scope":1777,"src":"334:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1763,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:10"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1777,"src":"367:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1766,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:10"},"scope":1861,"src":"311:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1794,"nodeType":"Block","src":"554:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1787,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"571:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1788,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"575:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1791,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"583:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:10","trueExpression":{"id":1790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"579:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1786,"id":1793,"nodeType":"Return","src":"564:20:10"}]},"documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"418:67:10","text":" @dev Returns the smallest of two signed numbers."},"id":1795,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:10","nodeType":"FunctionDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"mutability":"mutable","name":"a","nameLocation":"510:1:10","nodeType":"VariableDeclaration","scope":1795,"src":"503:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1779,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"b","nameLocation":"520:1:10","nodeType":"VariableDeclaration","scope":1795,"src":"513:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1781,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:10"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1795,"src":"546:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1784,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:10"},"scope":1861,"src":"490:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1838,"nodeType":"Block","src":"796:162:10","statements":[{"assignments":[1806],"declarations":[{"constant":false,"id":1806,"mutability":"mutable","name":"x","nameLocation":"865:1:10","nodeType":"VariableDeclaration","scope":1838,"src":"858:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1805,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1819,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"870:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1808,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"874:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"881:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1812,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"885:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1814,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:10"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1820,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"910:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1825,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"930:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:10","typeDescriptions":{}}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"922:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1821,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:10","typeDescriptions":{}}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1830,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"944:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1831,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"948:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1833,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1835,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1804,"id":1837,"nodeType":"Return","src":"903:48:10"}]},"documentation":{"id":1796,"nodeType":"StructuredDocumentation","src":"597:126:10","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1839,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:10","nodeType":"FunctionDefinition","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"a","nameLocation":"752:1:10","nodeType":"VariableDeclaration","scope":1839,"src":"745:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1797,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"b","nameLocation":"762:1:10","nodeType":"VariableDeclaration","scope":1839,"src":"755:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1799,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:10"},"returnParameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1839,"src":"788:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1802,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:10"},"scope":1861,"src":"728:230:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1859,"nodeType":"Block","src":"1102:158:10","statements":[{"id":1858,"nodeType":"UncheckedBlock","src":"1112:142:10","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1849,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1227:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:10","subExpression":{"id":1853,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1241:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:10","trueExpression":{"id":1852,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"1236:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{}}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1219:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1846,"id":1857,"nodeType":"Return","src":"1212:31:10"}]}]},"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"964:78:10","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:10","nodeType":"FunctionDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"n","nameLocation":"1067:1:10","nodeType":"VariableDeclaration","scope":1860,"src":"1060:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1841,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:10"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1860,"src":"1093:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:10"},"scope":1861,"src":"1047:213:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1862,"src":"215:1047:10","usedErrors":[]}],"src":"109:1154:10"},"id":10},"contracts/ERC721All.sol":{"ast":{"absolutePath":"contracts/ERC721All.sol","exportedSymbols":{"Address":[603],"Context":[625],"ERC165":[878],"ERC721":[3039],"ERC721All":[2171],"IERC165":[890],"IERC721":[228],"IERC721Metadata":[273],"IERC721Receiver":[246],"Math":[1756],"Ownable":[112],"SignedMath":[1861],"Strings":[854]},"id":2172,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1863,"literals":["solidity","0.8",".13"],"nodeType":"PragmaDirective","src":"213:23:11"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1864,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2172,"sourceUnit":113,"src":"238:52:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/ERC721.sol","file":"./lib/ERC721.sol","id":1865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2172,"sourceUnit":3040,"src":"292:26:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1867,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"366:7:11"},"id":1868,"nodeType":"InheritanceSpecifier","src":"366:7:11"},{"baseName":{"id":1869,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":3039,"src":"375:6:11"},"id":1870,"nodeType":"InheritanceSpecifier","src":"375:6:11"}],"canonicalName":"ERC721All","contractDependencies":[],"contractKind":"contract","documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"320:23:11","text":" @dev todo..."},"fullyImplemented":true,"id":2171,"linearizedBaseContracts":[2171,3039,273,228,878,890,112,625],"name":"ERC721All","nameLocation":"353:9:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1874,"mutability":"mutable","name":"_activeTokens","nameLocation":"420:13:11","nodeType":"VariableDeclaration","scope":2171,"src":"386:47:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":1873,"keyType":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"394:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"386:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":1872,"name":"bool","nodeType":"ElementaryTypeName","src":"405:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"523:2:11","statements":[]},"id":1888,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1881,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"499:4:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1882,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"505:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":1883,"kind":"baseConstructorSpecifier","modifierName":{"id":1880,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":3039,"src":"492:6:11"},"nodeType":"ModifierInvocation","src":"492:20:11"},{"arguments":[],"id":1885,"kind":"baseConstructorSpecifier","modifierName":{"id":1884,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"513:7:11"},"nodeType":"ModifierInvocation","src":"513:9:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"name","nameLocation":"464:4:11","nodeType":"VariableDeclaration","scope":1888,"src":"450:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1875,"name":"string","nodeType":"ElementaryTypeName","src":"450:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"symbol","nameLocation":"484:6:11","nodeType":"VariableDeclaration","scope":1888,"src":"470:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1877,"name":"string","nodeType":"ElementaryTypeName","src":"470:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"449:42:11"},"returnParameters":{"id":1886,"nodeType":"ParameterList","parameters":[],"src":"523:0:11"},"scope":2171,"src":"438:87:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2292],"body":{"id":1924,"nodeType":"Block","src":"655:191:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"669:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"686:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"678:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1899,"name":"address","nodeType":"ElementaryTypeName","src":"678:7:11","typeDescriptions":{}}},"id":1902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"678:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"669:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"690:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1897,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"661:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"661:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1906,"nodeType":"ExpressionStatement","src":"661:73:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1907,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"744:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1909,"indexExpression":{"id":1908,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"754:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"744:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"764:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"744:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":1913,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"782:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1912,"name":"_hasOwnToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"769:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"769:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"744:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1919,"nodeType":"IfStatement","src":"740:73:11","trueBody":{"id":1918,"nodeType":"Block","src":"790:23:11","statements":[{"expression":{"hexValue":"31","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":1896,"id":1917,"nodeType":"Return","src":"798:8:11"}]}},{"expression":{"baseExpression":{"id":1920,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"825:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1922,"indexExpression":{"id":1921,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"835:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"825:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1896,"id":1923,"nodeType":"Return","src":"818:23:11"}]},"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"529:50:11","text":" @dev Overrides {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1925,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"591:9:11","nodeType":"FunctionDefinition","overrides":{"id":1893,"nodeType":"OverrideSpecifier","overrides":[],"src":"628:8:11"},"parameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"owner","nameLocation":"609:5:11","nodeType":"VariableDeclaration","scope":1925,"src":"601:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1890,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"600:15:11"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1925,"src":"646:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:11"},"scope":2171,"src":"582:264:11","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2320],"body":{"id":1967,"nodeType":"Block","src":"974:333:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1936,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1003:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1935,"name":"_isTokenActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"988:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"988:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1013:26:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1934,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"980:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"980:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1940,"nodeType":"ExpressionStatement","src":"980:60:11"},{"assignments":[1942],"declarations":[{"constant":false,"id":1942,"mutability":"mutable","name":"owner","nameLocation":"1182:5:11","nodeType":"VariableDeclaration","scope":1967,"src":"1174:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1941,"name":"address","nodeType":"ElementaryTypeName","src":"1174:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1946,"initialValue":{"baseExpression":{"id":1943,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"1190:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1945,"indexExpression":{"id":1944,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1198:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1190:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1174:32:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"1216:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1225:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1948,"name":"address","nodeType":"ElementaryTypeName","src":"1225:7:11","typeDescriptions":{}}},"id":1951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1225:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1216:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1964,"nodeType":"IfStatement","src":"1212:73:11","trueBody":{"id":1963,"nodeType":"Block","src":"1237:48:11","statements":[{"expression":{"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1953,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"1245:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1958,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1269:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1261:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1956,"name":"uint160","nodeType":"ElementaryTypeName","src":"1261:7:11","typeDescriptions":{}}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1261:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1253:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1954,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:11","typeDescriptions":{}}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1253:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1245:33:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1962,"nodeType":"ExpressionStatement","src":"1245:33:11"}]}},{"expression":{"id":1965,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"1297:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1933,"id":1966,"nodeType":"Return","src":"1290:12:11"}]},"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"850:48:11","text":" @dev Overrides {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"910:7:11","nodeType":"FunctionDefinition","overrides":{"id":1930,"nodeType":"OverrideSpecifier","overrides":[],"src":"947:8:11"},"parameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"tokenId","nameLocation":"926:7:11","nodeType":"VariableDeclaration","scope":1968,"src":"918:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"917:17:11"},"returnParameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"965:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1931,"name":"address","nodeType":"ElementaryTypeName","src":"965:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"964:9:11"},"scope":2171,"src":"901:406:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1976,"nodeType":"Block","src":"1334:30:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1972,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1346:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1346:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1971,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[2026,2749],"referencedDeclaration":2026,"src":"1340:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1340:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1975,"nodeType":"ExpressionStatement","src":"1340:19:11"}]},"functionSelector":"1249c58b","id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1320:4:11","nodeType":"FunctionDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[],"src":"1324:2:11"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[],"src":"1334:0:11"},"scope":2171,"src":"1311:53:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2025,"nodeType":"Block","src":"1410:376:11","statements":[{"assignments":[1983],"declarations":[{"constant":false,"id":1983,"mutability":"mutable","name":"tokenId","nameLocation":"1458:7:11","nodeType":"VariableDeclaration","scope":2025,"src":"1450:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1982,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1991,"initialValue":{"arguments":[{"arguments":[{"id":1988,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"1484:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1476:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1986,"name":"uint160","nodeType":"ElementaryTypeName","src":"1476:7:11","typeDescriptions":{}}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1476:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1468:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:11","typeDescriptions":{}}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1468:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1450:44:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1993,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"1509:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1529:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1521:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1994,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:11","typeDescriptions":{}}},"id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1521:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1509:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1533:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":1992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1501:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1501:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2001,"nodeType":"ExpressionStatement","src":"1501:67:11"},{"expression":{"arguments":[{"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1582:24:11","subExpression":{"arguments":[{"id":2004,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"1598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2003,"name":"_isTokenActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"1583:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1583:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1608:30:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1574:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1574:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2009,"nodeType":"ExpressionStatement","src":"1574:65:11"},{"expression":{"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2010,"name":"_activeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"1674:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2012,"indexExpression":{"id":2011,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"1688:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1674:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1674:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2015,"nodeType":"ExpressionStatement","src":"1674:29:11"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1751:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"1751:7:11","typeDescriptions":{}}},"id":2020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1751:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2021,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"1763:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2022,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"1773:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2016,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"1742:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1742:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2024,"nodeType":"EmitStatement","src":"1737:44:11"}]},"id":2026,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"1377:5:11","nodeType":"FunctionDefinition","parameters":{"id":1980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1979,"mutability":"mutable","name":"receiver","nameLocation":"1391:8:11","nodeType":"VariableDeclaration","scope":2026,"src":"1383:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1978,"name":"address","nodeType":"ElementaryTypeName","src":"1383:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1382:18:11"},"returnParameters":{"id":1981,"nodeType":"ParameterList","parameters":[],"src":"1410:0:11"},"scope":2171,"src":"1368:418:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2883],"body":{"id":2109,"nodeType":"Block","src":"1886:560:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2038,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"1908:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2037,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[1968],"referencedDeclaration":1968,"src":"1900:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1900:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2040,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"1920:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1900:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1926:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2036,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1892:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1892:74:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2044,"nodeType":"ExpressionStatement","src":"1892:74:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2046,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"1980:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1994:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1986:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2047,"name":"address","nodeType":"ElementaryTypeName","src":"1986:7:11","typeDescriptions":{}}},"id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1986:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1980:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1998:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2045,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1972:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1972:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2054,"nodeType":"ExpressionStatement","src":"1972:65:11"},{"expression":{"arguments":[{"id":2056,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2065:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2057,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"2071:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2058,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2075:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2055,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"2044:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2044:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2060,"nodeType":"ExpressionStatement","src":"2044:39:11"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2154:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2146:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:11","typeDescriptions":{}}},"id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2146:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2066,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2158:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2061,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"2137:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2137:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2068,"nodeType":"ExpressionStatement","src":"2137:29:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2069,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"2240:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2071,"indexExpression":{"id":2070,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2248:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2240:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2268:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2260:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"2260:7:11","typeDescriptions":{}}},"id":2075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2260:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2240:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2084,"nodeType":"IfStatement","src":"2236:71:11","trueBody":{"id":2083,"nodeType":"Block","src":"2272:35:11","statements":[{"expression":{"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2077,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"2280:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2079,"indexExpression":{"id":2078,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2290:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2280:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2299:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2280:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"nodeType":"ExpressionStatement","src":"2280:20:11"}]}},{"expression":{"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2085,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"2312:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2087,"indexExpression":{"id":2086,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"2322:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2312:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2329:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2312:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2090,"nodeType":"ExpressionStatement","src":"2312:18:11"},{"expression":{"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2091,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"2336:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2093,"indexExpression":{"id":2092,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2344:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2336:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2094,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"2355:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2336:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2096,"nodeType":"ExpressionStatement","src":"2336:21:11"},{"eventCall":{"arguments":[{"id":2098,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2378:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2099,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"2384:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2100,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2388:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2097,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"2369:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2369:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2102,"nodeType":"EmitStatement","src":"2364:32:11"},{"expression":{"arguments":[{"id":2104,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2423:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2105,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"2429:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2106,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"2433:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2103,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"2403:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2403:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2108,"nodeType":"ExpressionStatement","src":"2403:38:11"}]},"id":2110,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"1799:9:11","nodeType":"FunctionDefinition","overrides":{"id":2034,"nodeType":"OverrideSpecifier","overrides":[],"src":"1877:8:11"},"parameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"from","nameLocation":"1822:4:11","nodeType":"VariableDeclaration","scope":2110,"src":"1814:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"1814:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"to","nameLocation":"1840:2:11","nodeType":"VariableDeclaration","scope":2110,"src":"1832:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"1832:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"tokenId","nameLocation":"1856:7:11","nodeType":"VariableDeclaration","scope":2110,"src":"1848:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1808:59:11"},"returnParameters":{"id":2035,"nodeType":"ParameterList","parameters":[],"src":"1886:0:11"},"scope":2171,"src":"1790:656:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2150,"nodeType":"Block","src":"2516:207:11","statements":[{"assignments":[2118],"declarations":[{"constant":false,"id":2118,"mutability":"mutable","name":"ownerTokenId","nameLocation":"2530:12:11","nodeType":"VariableDeclaration","scope":2150,"src":"2522:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"2522:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2126,"initialValue":{"arguments":[{"arguments":[{"id":2123,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2561:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2553:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2121,"name":"uint160","nodeType":"ElementaryTypeName","src":"2553:7:11","typeDescriptions":{}}},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2553:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2545:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2119,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:11","typeDescriptions":{}}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2545:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2522:46:11"},{"assignments":[2128],"declarations":[{"constant":false,"id":2128,"mutability":"mutable","name":"currentOwner","nameLocation":"2582:12:11","nodeType":"VariableDeclaration","scope":2150,"src":"2574:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2127,"name":"address","nodeType":"ElementaryTypeName","src":"2574:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2132,"initialValue":{"baseExpression":{"id":2129,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"2597:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2131,"indexExpression":{"id":2130,"name":"ownerTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2605:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2597:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2574:44:11"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2134,"name":"ownerTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2647:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2133,"name":"_isTokenActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"2632:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2632:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2136,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"2665:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2137,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2681:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2665:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"2690:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2714:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2706:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"2706:7:11","typeDescriptions":{}}},"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2706:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2690:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2665:51:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2664:53:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2632:85:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2631:87:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2116,"id":2149,"nodeType":"Return","src":"2624:94:11"}]},"id":2151,"implemented":true,"kind":"function","modifiers":[],"name":"_hasOwnToken","nameLocation":"2459:12:11","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"owner","nameLocation":"2480:5:11","nodeType":"VariableDeclaration","scope":2151,"src":"2472:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"2472:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2471:15:11"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2151,"src":"2510:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2114,"name":"bool","nodeType":"ElementaryTypeName","src":"2510:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2509:6:11"},"scope":2171,"src":"2450:273:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2169,"nodeType":"Block","src":"2797:126:11","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2158,"name":"_activeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"2858:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2160,"indexExpression":{"id":2159,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2872:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2858:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2161,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"2884:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2163,"indexExpression":{"id":2162,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2892:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2884:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2164,"name":"_NULL_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2904:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2884:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2858:59:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2167,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2857:61:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2157,"id":2168,"nodeType":"Return","src":"2850:68:11"}]},"id":2170,"implemented":true,"kind":"function","modifiers":[],"name":"_isTokenActive","nameLocation":"2736:14:11","nodeType":"FunctionDefinition","parameters":{"id":2154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"tokenId","nameLocation":"2759:7:11","nodeType":"VariableDeclaration","scope":2170,"src":"2751:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2152,"name":"uint256","nodeType":"ElementaryTypeName","src":"2751:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2750:17:11"},"returnParameters":{"id":2157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2170,"src":"2791:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2155,"name":"bool","nodeType":"ElementaryTypeName","src":"2791:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2790:6:11"},"scope":2171,"src":"2727:196:11","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2172,"src":"344:2581:11","usedErrors":[]}],"src":"213:2713:11"},"id":11},"contracts/lib/ERC721.sol":{"ast":{"absolutePath":"contracts/lib/ERC721.sol","exportedSymbols":{"Address":[603],"Context":[625],"ERC165":[878],"ERC721":[3039],"IERC165":[890],"IERC721":[228],"IERC721Metadata":[273],"IERC721Receiver":[246],"Math":[1756],"SignedMath":[1861],"Strings":[854]},"id":3040,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2173,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"302:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":2174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":229,"src":"327:58:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","id":2175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":247,"src":"386:66:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","id":2176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":274,"src":"453:77:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":604,"src":"531:51:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2178,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":626,"src":"583:51:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":855,"src":"635:51:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":2180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3040,"sourceUnit":879,"src":"687:64:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2182,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":625,"src":"1401:7:12"},"id":2183,"nodeType":"InheritanceSpecifier","src":"1401:7:12"},{"baseName":{"id":2184,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":878,"src":"1410:6:12"},"id":2185,"nodeType":"InheritanceSpecifier","src":"1410:6:12"},{"baseName":{"id":2186,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"1418:7:12"},"id":2187,"nodeType":"InheritanceSpecifier","src":"1418:7:12"},{"baseName":{"id":2188,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1427:15:12"},"id":2189,"nodeType":"InheritanceSpecifier","src":"1427:15:12"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":2181,"nodeType":"StructuredDocumentation","src":"753:628:12","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}.\n NOTE:\n  The only changes made here are:\n    - change scope of \"_owners\" from private to internal\n    - change scope of \"_balances\" from private to internal\n    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"\n    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)"},"fullyImplemented":true,"id":3039,"linearizedBaseContracts":[3039,273,228,878,890,625],"name":"ERC721","nameLocation":"1391:6:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2192,"libraryName":{"id":2190,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":603,"src":"1455:7:12"},"nodeType":"UsingForDirective","src":"1449:26:12","typeName":{"id":2191,"name":"address","nodeType":"ElementaryTypeName","src":"1467:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2195,"libraryName":{"id":2193,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":854,"src":"1486:7:12"},"nodeType":"UsingForDirective","src":"1480:26:12","typeName":{"id":2194,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":2198,"mutability":"constant","name":"_NULL_ADDRESS","nameLocation":"1538:13:12","nodeType":"VariableDeclaration","scope":3039,"src":"1512:84:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2196,"name":"address","nodeType":"ElementaryTypeName","src":"1512:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303064456144","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1554:42:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x000000000000000000000000000000000000dEaD"},"visibility":"internal"},{"constant":false,"id":2200,"mutability":"mutable","name":"_name","nameLocation":"1636:5:12","nodeType":"VariableDeclaration","scope":3039,"src":"1621:20:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2199,"name":"string","nodeType":"ElementaryTypeName","src":"1621:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2202,"mutability":"mutable","name":"_symbol","nameLocation":"1683:7:12","nodeType":"VariableDeclaration","scope":3039,"src":"1668:22:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2201,"name":"string","nodeType":"ElementaryTypeName","src":"1668:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2206,"mutability":"mutable","name":"_owners","nameLocation":"1780:7:12","nodeType":"VariableDeclaration","scope":3039,"src":"1743:44:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2205,"keyType":{"id":2203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1751:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1743:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"1762:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2210,"mutability":"mutable","name":"_balances","nameLocation":"1875:9:12","nodeType":"VariableDeclaration","scope":3039,"src":"1838:46:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2209,"keyType":{"id":2207,"name":"address","nodeType":"ElementaryTypeName","src":"1846:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1838:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2208,"name":"uint256","nodeType":"ElementaryTypeName","src":"1857:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1976:15:12","nodeType":"VariableDeclaration","scope":3039,"src":"1940:51:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2213,"keyType":{"id":2211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1948:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1940:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2212,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2220,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"2099:18:12","nodeType":"VariableDeclaration","scope":3039,"src":"2046:71:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":2219,"keyType":{"id":2215,"name":"address","nodeType":"ElementaryTypeName","src":"2054:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2046:44:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":2218,"keyType":{"id":2216,"name":"address","nodeType":"ElementaryTypeName","src":"2073:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2065:24:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2217,"name":"bool","nodeType":"ElementaryTypeName","src":"2084:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":2236,"nodeType":"Block","src":"2293:57:12","statements":[{"expression":{"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2228,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"2303:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2229,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2311:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2303:13:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2231,"nodeType":"ExpressionStatement","src":"2303:13:12"},{"expression":{"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2232,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"2326:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2233,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2336:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2326:17:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2235,"nodeType":"ExpressionStatement","src":"2326:17:12"}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"2124:108:12","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":2237,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"name_","nameLocation":"2263:5:12","nodeType":"VariableDeclaration","scope":2237,"src":"2249:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2222,"name":"string","nodeType":"ElementaryTypeName","src":"2249:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"symbol_","nameLocation":"2284:7:12","nodeType":"VariableDeclaration","scope":2237,"src":"2270:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2224,"name":"string","nodeType":"ElementaryTypeName","src":"2270:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2248:44:12"},"returnParameters":{"id":2227,"nodeType":"ParameterList","parameters":[],"src":"2293:0:12"},"scope":3039,"src":"2237:113:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[877,889],"body":{"id":2267,"nodeType":"Block","src":"2525:192:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"2554:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2250,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"2574:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$228_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$228_$","typeString":"type(contract IERC721)"}],"id":2249,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2569:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2569:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$228","typeString":"type(contract IERC721)"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2569:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2554:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"2610:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2256,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"2630:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$273_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$273_$","typeString":"type(contract IERC721Metadata)"}],"id":2255,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2625:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2625:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$273","typeString":"type(contract IERC721Metadata)"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2625:33:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2610:48:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2554:104:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2263,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"2698:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2261,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2674:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$3039_$","typeString":"type(contract super ERC721)"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":877,"src":"2674:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2674:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2554:156:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2247,"id":2266,"nodeType":"Return","src":"2535:175:12"}]},"documentation":{"id":2238,"nodeType":"StructuredDocumentation","src":"2356:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2426:17:12","nodeType":"FunctionDefinition","overrides":{"id":2244,"nodeType":"OverrideSpecifier","overrides":[{"id":2242,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":878,"src":"2493:6:12"},{"id":2243,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":890,"src":"2501:7:12"}],"src":"2484:25:12"},"parameters":{"id":2241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2240,"mutability":"mutable","name":"interfaceId","nameLocation":"2451:11:12","nodeType":"VariableDeclaration","scope":2268,"src":"2444:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2239,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2444:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2443:20:12"},"returnParameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2268,"src":"2519:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2245,"name":"bool","nodeType":"ElementaryTypeName","src":"2519:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2518:6:12"},"scope":3039,"src":"2417:300:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[153],"body":{"id":2291,"nodeType":"Block","src":"2857:123:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2875:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2892:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2884:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"2884:7:12","typeDescriptions":{}}},"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2884:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2875:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2896:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":2277,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2867:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2867:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2286,"nodeType":"ExpressionStatement","src":"2867:73:12"},{"expression":{"baseExpression":{"id":2287,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"2957:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2289,"indexExpression":{"id":2288,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2967:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2957:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2276,"id":2290,"nodeType":"Return","src":"2950:23:12"}]},"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"2723:48:12","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":2292,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2785:9:12","nodeType":"FunctionDefinition","overrides":{"id":2273,"nodeType":"OverrideSpecifier","overrides":[],"src":"2830:8:12"},"parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"owner","nameLocation":"2803:5:12","nodeType":"VariableDeclaration","scope":2292,"src":"2795:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2270,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2794:15:12"},"returnParameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2292,"src":"2848:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2274,"name":"uint256","nodeType":"ElementaryTypeName","src":"2848:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2847:9:12"},"scope":3039,"src":"2776:204:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[161],"body":{"id":2319,"nodeType":"Block","src":"3118:137:12","statements":[{"assignments":[2302],"declarations":[{"constant":false,"id":2302,"mutability":"mutable","name":"owner","nameLocation":"3136:5:12","nodeType":"VariableDeclaration","scope":2319,"src":"3128:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2301,"name":"address","nodeType":"ElementaryTypeName","src":"3128:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2306,"initialValue":{"baseExpression":{"id":2303,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"3144:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2305,"indexExpression":{"id":2304,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"3152:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3144:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3128:32:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2308,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"3178:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3195:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3187:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2309,"name":"address","nodeType":"ElementaryTypeName","src":"3187:7:12","typeDescriptions":{}}},"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3187:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3178:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3199:26:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3170:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3170:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"ExpressionStatement","src":"3170:56:12"},{"expression":{"id":2317,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"3243:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2300,"id":2318,"nodeType":"Return","src":"3236:12:12"}]},"documentation":{"id":2293,"nodeType":"StructuredDocumentation","src":"2986:46:12","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3046:7:12","nodeType":"FunctionDefinition","overrides":{"id":2297,"nodeType":"OverrideSpecifier","overrides":[],"src":"3091:8:12"},"parameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"mutability":"mutable","name":"tokenId","nameLocation":"3062:7:12","nodeType":"VariableDeclaration","scope":2320,"src":"3054:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"3054:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3053:17:12"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"3109:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2298,"name":"address","nodeType":"ElementaryTypeName","src":"3109:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3108:9:12"},"scope":3039,"src":"3037:218:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[258],"body":{"id":2329,"nodeType":"Block","src":"3386:29:12","statements":[{"expression":{"id":2327,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"3403:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2326,"id":2328,"nodeType":"Return","src":"3396:12:12"}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"3261:51:12","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":2330,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"3326:4:12","nodeType":"FunctionDefinition","overrides":{"id":2323,"nodeType":"OverrideSpecifier","overrides":[],"src":"3353:8:12"},"parameters":{"id":2322,"nodeType":"ParameterList","parameters":[],"src":"3330:2:12"},"returnParameters":{"id":2326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2330,"src":"3371:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2324,"name":"string","nodeType":"ElementaryTypeName","src":"3371:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3370:15:12"},"scope":3039,"src":"3317:98:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[264],"body":{"id":2339,"nodeType":"Block","src":"3550:31:12","statements":[{"expression":{"id":2337,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"3567:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2336,"id":2338,"nodeType":"Return","src":"3560:14:12"}]},"documentation":{"id":2331,"nodeType":"StructuredDocumentation","src":"3421:53:12","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3488:6:12","nodeType":"FunctionDefinition","overrides":{"id":2333,"nodeType":"OverrideSpecifier","overrides":[],"src":"3517:8:12"},"parameters":{"id":2332,"nodeType":"ParameterList","parameters":[],"src":"3494:2:12"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"3535:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2334,"name":"string","nodeType":"ElementaryTypeName","src":"3535:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3534:15:12"},"scope":3039,"src":"3479:102:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[272],"body":{"id":2378,"nodeType":"Block","src":"3735:188:12","statements":[{"expression":{"arguments":[{"id":2350,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"3760:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2349,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"3745:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3745:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"3745:23:12"},{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"baseURI","nameLocation":"3793:7:12","nodeType":"VariableDeclaration","scope":2378,"src":"3779:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2353,"name":"string","nodeType":"ElementaryTypeName","src":"3779:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2357,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2355,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"3803:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3803:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3779:34:12"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2360,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"3836:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3830:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2358,"name":"bytes","nodeType":"ElementaryTypeName","src":"3830:5:12","typeDescriptions":{}}},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3830:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3830:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3830:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3914:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3830:86:12","trueExpression":{"arguments":[{"arguments":[{"id":2369,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"3882:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2370,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"3891:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":684,"src":"3891:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3891:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2367,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3865:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3865:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3865:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3858:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2365,"name":"string","nodeType":"ElementaryTypeName","src":"3858:6:12","typeDescriptions":{}}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3858:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2348,"id":2377,"nodeType":"Return","src":"3823:93:12"}]},"documentation":{"id":2341,"nodeType":"StructuredDocumentation","src":"3587:55:12","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2379,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3656:8:12","nodeType":"FunctionDefinition","overrides":{"id":2345,"nodeType":"OverrideSpecifier","overrides":[],"src":"3702:8:12"},"parameters":{"id":2344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2343,"mutability":"mutable","name":"tokenId","nameLocation":"3673:7:12","nodeType":"VariableDeclaration","scope":2379,"src":"3665:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2342,"name":"uint256","nodeType":"ElementaryTypeName","src":"3665:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3664:17:12"},"returnParameters":{"id":2348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2347,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2379,"src":"3720:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2346,"name":"string","nodeType":"ElementaryTypeName","src":"3720:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3719:15:12"},"scope":3039,"src":"3647:276:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2387,"nodeType":"Block","src":"4231:26:12","statements":[{"expression":{"hexValue":"","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4248:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2384,"id":2386,"nodeType":"Return","src":"4241:9:12"}]},"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"3929:231:12","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":2388,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"4174:8:12","nodeType":"FunctionDefinition","parameters":{"id":2381,"nodeType":"ParameterList","parameters":[],"src":"4182:2:12"},"returnParameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2388,"src":"4216:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2382,"name":"string","nodeType":"ElementaryTypeName","src":"4216:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4215:15:12"},"scope":3039,"src":"4165:92:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[201],"body":{"id":2429,"nodeType":"Block","src":"4384:330:12","statements":[{"assignments":[2398],"declarations":[{"constant":false,"id":2398,"mutability":"mutable","name":"owner","nameLocation":"4402:5:12","nodeType":"VariableDeclaration","scope":2429,"src":"4394:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2397,"name":"address","nodeType":"ElementaryTypeName","src":"4394:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2402,"initialValue":{"arguments":[{"id":2400,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"4418:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2399,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"4410:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4410:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4394:32:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"4444:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2405,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"4450:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4444:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4457:35:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":2403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4436:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4436:57:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2409,"nodeType":"ExpressionStatement","src":"4436:57:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2411,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4525:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4525:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2413,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"4541:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4525:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"4567:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2417,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4574:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4574:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2415,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"4550:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4550:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4525:62:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4601:64:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","typeString":"literal_string \"ERC721: approve caller is not token owner nor approved for all\""},"value":"ERC721: approve caller is not token owner nor approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","typeString":"literal_string \"ERC721: approve caller is not token owner nor approved for all\""}],"id":2410,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4504:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4504:171:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2423,"nodeType":"ExpressionStatement","src":"4504:171:12"},{"expression":{"arguments":[{"id":2425,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"4695:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2426,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"4699:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2424,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"4686:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4686:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2428,"nodeType":"ExpressionStatement","src":"4686:21:12"}]},"documentation":{"id":2389,"nodeType":"StructuredDocumentation","src":"4263:46:12","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":2430,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4323:7:12","nodeType":"FunctionDefinition","overrides":{"id":2395,"nodeType":"OverrideSpecifier","overrides":[],"src":"4375:8:12"},"parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"mutability":"mutable","name":"to","nameLocation":"4339:2:12","nodeType":"VariableDeclaration","scope":2430,"src":"4331:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2390,"name":"address","nodeType":"ElementaryTypeName","src":"4331:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"tokenId","nameLocation":"4351:7:12","nodeType":"VariableDeclaration","scope":2430,"src":"4343:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"4343:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4330:29:12"},"returnParameters":{"id":2396,"nodeType":"ParameterList","parameters":[],"src":"4384:0:12"},"scope":3039,"src":"4314:400:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[217],"body":{"id":2447,"nodeType":"Block","src":"4860:82:12","statements":[{"expression":{"arguments":[{"id":2440,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"4885:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2439,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4870:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4870:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2442,"nodeType":"ExpressionStatement","src":"4870:23:12"},{"expression":{"baseExpression":{"id":2443,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"4911:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2445,"indexExpression":{"id":2444,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"4927:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4911:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2438,"id":2446,"nodeType":"Return","src":"4904:31:12"}]},"documentation":{"id":2431,"nodeType":"StructuredDocumentation","src":"4720:50:12","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":2448,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4784:11:12","nodeType":"FunctionDefinition","overrides":{"id":2435,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:12"},"parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"tokenId","nameLocation":"4804:7:12","nodeType":"VariableDeclaration","scope":2448,"src":"4796:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2432,"name":"uint256","nodeType":"ElementaryTypeName","src":"4796:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4795:17:12"},"returnParameters":{"id":2438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2448,"src":"4851:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4850:9:12"},"scope":3039,"src":"4775:167:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[209],"body":{"id":2464,"nodeType":"Block","src":"5093:69:12","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2458,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"5122:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5122:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2460,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"5136:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2461,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"5146:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2457,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"5103:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5103:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2463,"nodeType":"ExpressionStatement","src":"5103:52:12"}]},"documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"4948:56:12","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":2465,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5018:17:12","nodeType":"FunctionDefinition","overrides":{"id":2455,"nodeType":"OverrideSpecifier","overrides":[],"src":"5084:8:12"},"parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"operator","nameLocation":"5044:8:12","nodeType":"VariableDeclaration","scope":2465,"src":"5036:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2450,"name":"address","nodeType":"ElementaryTypeName","src":"5036:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"approved","nameLocation":"5059:8:12","nodeType":"VariableDeclaration","scope":2465,"src":"5054:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2452,"name":"bool","nodeType":"ElementaryTypeName","src":"5054:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5035:33:12"},"returnParameters":{"id":2456,"nodeType":"ParameterList","parameters":[],"src":"5093:0:12"},"scope":3039,"src":"5009:153:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[227],"body":{"id":2482,"nodeType":"Block","src":"5331:59:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2476,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"5348:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2478,"indexExpression":{"id":2477,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"5367:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5348:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2480,"indexExpression":{"id":2479,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"5374:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5348:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2475,"id":2481,"nodeType":"Return","src":"5341:42:12"}]},"documentation":{"id":2466,"nodeType":"StructuredDocumentation","src":"5168:55:12","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":2483,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5237:16:12","nodeType":"FunctionDefinition","overrides":{"id":2472,"nodeType":"OverrideSpecifier","overrides":[],"src":"5307:8:12"},"parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"owner","nameLocation":"5262:5:12","nodeType":"VariableDeclaration","scope":2483,"src":"5254:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2467,"name":"address","nodeType":"ElementaryTypeName","src":"5254:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"operator","nameLocation":"5277:8:12","nodeType":"VariableDeclaration","scope":2483,"src":"5269:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"5269:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5253:33:12"},"returnParameters":{"id":2475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2483,"src":"5325:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2473,"name":"bool","nodeType":"ElementaryTypeName","src":"5325:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5324:6:12"},"scope":3039,"src":"5228:162:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[193],"body":{"id":2509,"nodeType":"Block","src":"5571:208:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2496,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"5660:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5660:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2498,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"5674:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2495,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"5641:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5641:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5684:48:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""},"value":"ERC721: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""}],"id":2494,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5633:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5633:100:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2502,"nodeType":"ExpressionStatement","src":"5633:100:12"},{"expression":{"arguments":[{"id":2504,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"5754:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2505,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"5760:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2506,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"5764:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2503,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"5744:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5744:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2508,"nodeType":"ExpressionStatement","src":"5744:28:12"}]},"documentation":{"id":2484,"nodeType":"StructuredDocumentation","src":"5396:51:12","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":2510,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5461:12:12","nodeType":"FunctionDefinition","overrides":{"id":2492,"nodeType":"OverrideSpecifier","overrides":[],"src":"5562:8:12"},"parameters":{"id":2491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"from","nameLocation":"5491:4:12","nodeType":"VariableDeclaration","scope":2510,"src":"5483:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2485,"name":"address","nodeType":"ElementaryTypeName","src":"5483:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2488,"mutability":"mutable","name":"to","nameLocation":"5513:2:12","nodeType":"VariableDeclaration","scope":2510,"src":"5505:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"5505:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2490,"mutability":"mutable","name":"tokenId","nameLocation":"5533:7:12","nodeType":"VariableDeclaration","scope":2510,"src":"5525:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"5525:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5473:73:12"},"returnParameters":{"id":2493,"nodeType":"ParameterList","parameters":[],"src":"5571:0:12"},"scope":3039,"src":"5452:327:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[183],"body":{"id":2528,"nodeType":"Block","src":"5968:56:12","statements":[{"expression":{"arguments":[{"id":2522,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"5995:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2523,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"6001:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2524,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"6005:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6014:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2521,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2529,2559],"referencedDeclaration":2559,"src":"5978:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5978:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2527,"nodeType":"ExpressionStatement","src":"5978:39:12"}]},"documentation":{"id":2511,"nodeType":"StructuredDocumentation","src":"5785:55:12","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":2529,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5854:16:12","nodeType":"FunctionDefinition","overrides":{"id":2519,"nodeType":"OverrideSpecifier","overrides":[],"src":"5959:8:12"},"parameters":{"id":2518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2513,"mutability":"mutable","name":"from","nameLocation":"5888:4:12","nodeType":"VariableDeclaration","scope":2529,"src":"5880:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"5880:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"to","nameLocation":"5910:2:12","nodeType":"VariableDeclaration","scope":2529,"src":"5902:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"5902:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"tokenId","nameLocation":"5930:7:12","nodeType":"VariableDeclaration","scope":2529,"src":"5922:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2516,"name":"uint256","nodeType":"ElementaryTypeName","src":"5922:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5870:73:12"},"returnParameters":{"id":2520,"nodeType":"ParameterList","parameters":[],"src":"5968:0:12"},"scope":3039,"src":"5845:179:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[173],"body":{"id":2558,"nodeType":"Block","src":"6240:165:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2544,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"6277:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6277:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2546,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"6291:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2543,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"6258:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6258:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f766564","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6301:48:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""},"value":"ERC721: caller is not token owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","typeString":"literal_string \"ERC721: caller is not token owner nor approved\""}],"id":2542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6250:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6250:100:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2550,"nodeType":"ExpressionStatement","src":"6250:100:12"},{"expression":{"arguments":[{"id":2552,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"6374:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2553,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"6380:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2554,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"6384:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2555,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"6393:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2551,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6360:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6360:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2557,"nodeType":"ExpressionStatement","src":"6360:38:12"}]},"documentation":{"id":2530,"nodeType":"StructuredDocumentation","src":"6030:55:12","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":2559,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6099:16:12","nodeType":"FunctionDefinition","overrides":{"id":2540,"nodeType":"OverrideSpecifier","overrides":[],"src":"6231:8:12"},"parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2532,"mutability":"mutable","name":"from","nameLocation":"6133:4:12","nodeType":"VariableDeclaration","scope":2559,"src":"6125:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2531,"name":"address","nodeType":"ElementaryTypeName","src":"6125:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2534,"mutability":"mutable","name":"to","nameLocation":"6155:2:12","nodeType":"VariableDeclaration","scope":2559,"src":"6147:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2533,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2536,"mutability":"mutable","name":"tokenId","nameLocation":"6175:7:12","nodeType":"VariableDeclaration","scope":2559,"src":"6167:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"6167:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2538,"mutability":"mutable","name":"data","nameLocation":"6205:4:12","nodeType":"VariableDeclaration","scope":2559,"src":"6192:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2537,"name":"bytes","nodeType":"ElementaryTypeName","src":"6192:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6115:100:12"},"returnParameters":{"id":2541,"nodeType":"ParameterList","parameters":[],"src":"6240:0:12"},"scope":3039,"src":"6090:315:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2587,"nodeType":"Block","src":"7406:165:12","statements":[{"expression":{"arguments":[{"id":2572,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"7426:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2573,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"7432:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2574,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7436:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2571,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"7416:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7416:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2576,"nodeType":"ExpressionStatement","src":"7416:28:12"},{"expression":{"arguments":[{"arguments":[{"id":2579,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"7485:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2580,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"7491:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2581,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7495:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2582,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"7504:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2578,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"7462:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7462:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7511:52:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2577,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7454:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7454:110:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2586,"nodeType":"ExpressionStatement","src":"7454:110:12"}]},"documentation":{"id":2560,"nodeType":"StructuredDocumentation","src":"6411:850:12","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2588,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"7275:13:12","nodeType":"FunctionDefinition","parameters":{"id":2569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"from","nameLocation":"7306:4:12","nodeType":"VariableDeclaration","scope":2588,"src":"7298:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"7298:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2564,"mutability":"mutable","name":"to","nameLocation":"7328:2:12","nodeType":"VariableDeclaration","scope":2588,"src":"7320:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2563,"name":"address","nodeType":"ElementaryTypeName","src":"7320:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"tokenId","nameLocation":"7348:7:12","nodeType":"VariableDeclaration","scope":2588,"src":"7340:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"7340:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"data","nameLocation":"7378:4:12","nodeType":"VariableDeclaration","scope":2588,"src":"7365:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2567,"name":"bytes","nodeType":"ElementaryTypeName","src":"7365:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7288:100:12"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[],"src":"7406:0:12"},"scope":3039,"src":"7266:305:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2605,"nodeType":"Block","src":"7945:54:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2596,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"7962:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2598,"indexExpression":{"id":2597,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"7970:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7962:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7990:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7982:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2599,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:12","typeDescriptions":{}}},"id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7982:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7962:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2595,"id":2604,"nodeType":"Return","src":"7955:37:12"}]},"documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"7577:292:12","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":2606,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7883:7:12","nodeType":"FunctionDefinition","parameters":{"id":2592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"tokenId","nameLocation":"7899:7:12","nodeType":"VariableDeclaration","scope":2606,"src":"7891:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2590,"name":"uint256","nodeType":"ElementaryTypeName","src":"7891:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7890:17:12"},"returnParameters":{"id":2595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2606,"src":"7939:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2593,"name":"bool","nodeType":"ElementaryTypeName","src":"7939:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7938:6:12"},"scope":3039,"src":"7874:125:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2638,"nodeType":"Block","src":"8256:155:12","statements":[{"assignments":[2617],"declarations":[{"constant":false,"id":2617,"mutability":"mutable","name":"owner","nameLocation":"8274:5:12","nodeType":"VariableDeclaration","scope":2638,"src":"8266:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"8266:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2621,"initialValue":{"arguments":[{"id":2619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"8290:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2618,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"8282:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8282:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8266:32:12"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"8316:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2623,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"8327:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8316:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2626,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"8353:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2627,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"8360:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2625,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8336:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8336:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8316:52:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2631,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"8384:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2630,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8372:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8372:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2633,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"8396:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8372:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8316:87:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2636,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8315:89:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2615,"id":2637,"nodeType":"Return","src":"8308:96:12"}]},"documentation":{"id":2607,"nodeType":"StructuredDocumentation","src":"8005:147:12","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2639,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"8166:18:12","nodeType":"FunctionDefinition","parameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"spender","nameLocation":"8193:7:12","nodeType":"VariableDeclaration","scope":2639,"src":"8185:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"8185:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"tokenId","nameLocation":"8210:7:12","nodeType":"VariableDeclaration","scope":2639,"src":"8202:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"8202:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8184:34:12"},"returnParameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2639,"src":"8250:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2613,"name":"bool","nodeType":"ElementaryTypeName","src":"8250:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8249:6:12"},"scope":3039,"src":"8157:254:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2653,"nodeType":"Block","src":"8806:43:12","statements":[{"expression":{"arguments":[{"id":2648,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"8826:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2649,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"8830:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8839:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2647,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2654,2683],"referencedDeclaration":2683,"src":"8816:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8816:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2652,"nodeType":"ExpressionStatement","src":"8816:26:12"}]},"documentation":{"id":2640,"nodeType":"StructuredDocumentation","src":"8417:319:12","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2654,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8750:9:12","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2642,"mutability":"mutable","name":"to","nameLocation":"8768:2:12","nodeType":"VariableDeclaration","scope":2654,"src":"8760:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2641,"name":"address","nodeType":"ElementaryTypeName","src":"8760:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"tokenId","nameLocation":"8780:7:12","nodeType":"VariableDeclaration","scope":2654,"src":"8772:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"8772:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8759:29:12"},"returnParameters":{"id":2646,"nodeType":"ParameterList","parameters":[],"src":"8806:0:12"},"scope":3039,"src":"8741:108:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2682,"nodeType":"Block","src":"9184:195:12","statements":[{"expression":{"arguments":[{"id":2665,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"9200:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2666,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"9204:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2664,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"9194:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9194:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2668,"nodeType":"ExpressionStatement","src":"9194:18:12"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9274:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9266:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2671,"name":"address","nodeType":"ElementaryTypeName","src":"9266:7:12","typeDescriptions":{}}},"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9266:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2675,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"9278:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2676,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"9282:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2677,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"9291:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2670,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"9243:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9243:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9310:52:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2669,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9222:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9222:150:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2681,"nodeType":"ExpressionStatement","src":"9222:150:12"}]},"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"8855:210:12","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2683,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"9079:9:12","nodeType":"FunctionDefinition","parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"to","nameLocation":"9106:2:12","nodeType":"VariableDeclaration","scope":2683,"src":"9098:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"9098:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:12","nodeType":"VariableDeclaration","scope":2683,"src":"9118:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2661,"mutability":"mutable","name":"data","nameLocation":"9156:4:12","nodeType":"VariableDeclaration","scope":2683,"src":"9143:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2660,"name":"bytes","nodeType":"ElementaryTypeName","src":"9143:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9088:78:12"},"returnParameters":{"id":2663,"nodeType":"ParameterList","parameters":[],"src":"9184:0:12"},"scope":3039,"src":"9070:309:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2748,"nodeType":"Block","src":"9762:366:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2692,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"9780:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9794:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9786:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2693,"name":"address","nodeType":"ElementaryTypeName","src":"9786:7:12","typeDescriptions":{}}},"id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9786:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9780:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9798:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2691,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9772:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9772:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2700,"nodeType":"ExpressionStatement","src":"9772:61:12"},{"expression":{"arguments":[{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9851:17:12","subExpression":{"arguments":[{"id":2703,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"9860:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2702,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"9852:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9852:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9870:30:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2701,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9843:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9843:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2708,"nodeType":"ExpressionStatement","src":"9843:58:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9941:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9933:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2710,"name":"address","nodeType":"ElementaryTypeName","src":"9933:7:12","typeDescriptions":{}}},"id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9933:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2714,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"9945:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2715,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"9949:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2709,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"9912:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9912:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2717,"nodeType":"ExpressionStatement","src":"9912:45:12"},{"expression":{"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2718,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"9968:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2720,"indexExpression":{"id":2719,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"9978:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9968:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9968:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2723,"nodeType":"ExpressionStatement","src":"9968:18:12"},{"expression":{"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2724,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"9996:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2726,"indexExpression":{"id":2725,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"10004:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9996:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2727,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"10015:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9996:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2729,"nodeType":"ExpressionStatement","src":"9996:21:12"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10050:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10042:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2731,"name":"address","nodeType":"ElementaryTypeName","src":"10042:7:12","typeDescriptions":{}}},"id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10042:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2735,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"10054:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"10058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2730,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"10033:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10033:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"EmitStatement","src":"10028:38:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10105:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10097:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2740,"name":"address","nodeType":"ElementaryTypeName","src":"10097:7:12","typeDescriptions":{}}},"id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10097:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2744,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"10109:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2745,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"10113:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2739,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"10077:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10077:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2747,"nodeType":"ExpressionStatement","src":"10077:44:12"}]},"documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"9385:311:12","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2749,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9710:5:12","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2686,"mutability":"mutable","name":"to","nameLocation":"9724:2:12","nodeType":"VariableDeclaration","scope":2749,"src":"9716:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2685,"name":"address","nodeType":"ElementaryTypeName","src":"9716:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2688,"mutability":"mutable","name":"tokenId","nameLocation":"9736:7:12","nodeType":"VariableDeclaration","scope":2749,"src":"9728:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"9728:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9715:29:12"},"returnParameters":{"id":2690,"nodeType":"ParameterList","parameters":[],"src":"9762:0:12"},"scope":3039,"src":"9701:427:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2808,"nodeType":"Block","src":"10394:431:12","statements":[{"assignments":[2756],"declarations":[{"constant":false,"id":2756,"mutability":"mutable","name":"owner","nameLocation":"10412:5:12","nodeType":"VariableDeclaration","scope":2808,"src":"10404:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2755,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2760,"initialValue":{"arguments":[{"id":2758,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10428:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2757,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"10420:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10420:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10404:32:12"},{"expression":{"arguments":[{"id":2762,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"10468:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10483:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10475:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2763,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:12","typeDescriptions":{}}},"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10475:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2767,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10487:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2761,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"10447:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10447:48:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2769,"nodeType":"ExpressionStatement","src":"10447:48:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10542:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2771,"name":"address","nodeType":"ElementaryTypeName","src":"10542:7:12","typeDescriptions":{}}},"id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10542:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10554:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2770,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"10533:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10533:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2777,"nodeType":"ExpressionStatement","src":"10533:29:12"},{"expression":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2778,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"10573:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2780,"indexExpression":{"id":2779,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"10583:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10573:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10593:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10573:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2783,"nodeType":"ExpressionStatement","src":"10573:21:12"},{"expression":{"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2784,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"10676:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2786,"indexExpression":{"id":2785,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10684:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10676:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2787,"name":"_NULL_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"10695:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10676:32:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2789,"nodeType":"ExpressionStatement","src":"10676:32:12"},{"eventCall":{"arguments":[{"id":2791,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"10733:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10740:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2792,"name":"address","nodeType":"ElementaryTypeName","src":"10740:7:12","typeDescriptions":{}}},"id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10740:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2796,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10752:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2790,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"10724:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10724:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2798,"nodeType":"EmitStatement","src":"10719:41:12"},{"expression":{"arguments":[{"id":2800,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"10791:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10806:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10798:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2801,"name":"address","nodeType":"ElementaryTypeName","src":"10798:7:12","typeDescriptions":{}}},"id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10798:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2805,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"10810:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2799,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"10771:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10771:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2807,"nodeType":"ExpressionStatement","src":"10771:47:12"}]},"documentation":{"id":2750,"nodeType":"StructuredDocumentation","src":"10134:206:12","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2809,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10354:5:12","nodeType":"FunctionDefinition","parameters":{"id":2753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2752,"mutability":"mutable","name":"tokenId","nameLocation":"10368:7:12","nodeType":"VariableDeclaration","scope":2809,"src":"10360:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"10360:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10359:17:12"},"returnParameters":{"id":2754,"nodeType":"ParameterList","parameters":[],"src":"10394:0:12"},"scope":3039,"src":"10345:480:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"11258:489:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2821,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11284:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2820,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"11276:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11276:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2823,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"11296:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11276:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11302:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2819,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11268:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11268:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2827,"nodeType":"ExpressionStatement","src":"11268:74:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11360:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11374:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11366:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"11366:7:12","typeDescriptions":{}}},"id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11366:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11360:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11378:38:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2828,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11352:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11352:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2837,"nodeType":"ExpressionStatement","src":"11352:65:12"},{"expression":{"arguments":[{"id":2839,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"11449:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2840,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11455:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2841,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11459:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2838,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"11428:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11428:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2843,"nodeType":"ExpressionStatement","src":"11428:39:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11546:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11538:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2845,"name":"address","nodeType":"ElementaryTypeName","src":"11538:7:12","typeDescriptions":{}}},"id":2848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11538:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2849,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11550:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2844,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"11529:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11529:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2851,"nodeType":"ExpressionStatement","src":"11529:29:12"},{"expression":{"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2852,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"11569:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2854,"indexExpression":{"id":2853,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"11579:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11569:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11588:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11569:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2857,"nodeType":"ExpressionStatement","src":"11569:20:12"},{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2858,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"11599:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2860,"indexExpression":{"id":2859,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11609:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11599:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11599:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"11599:18:12"},{"expression":{"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2864,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"11627:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2866,"indexExpression":{"id":2865,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11635:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11627:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2867,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11646:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11627:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2869,"nodeType":"ExpressionStatement","src":"11627:21:12"},{"eventCall":{"arguments":[{"id":2871,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"11673:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2872,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11679:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2873,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11683:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2870,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"11664:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11664:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2875,"nodeType":"EmitStatement","src":"11659:32:12"},{"expression":{"arguments":[{"id":2877,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"11722:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2878,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11728:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2879,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11732:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2876,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"11702:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11702:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2881,"nodeType":"ExpressionStatement","src":"11702:38:12"}]},"documentation":{"id":2810,"nodeType":"StructuredDocumentation","src":"10831:313:12","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11158:9:12","nodeType":"FunctionDefinition","parameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"from","nameLocation":"11185:4:12","nodeType":"VariableDeclaration","scope":2883,"src":"11177:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2811,"name":"address","nodeType":"ElementaryTypeName","src":"11177:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2814,"mutability":"mutable","name":"to","nameLocation":"11207:2:12","nodeType":"VariableDeclaration","scope":2883,"src":"11199:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"11199:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"tokenId","nameLocation":"11227:7:12","nodeType":"VariableDeclaration","scope":2883,"src":"11219:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"11219:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11167:73:12"},"returnParameters":{"id":2818,"nodeType":"ParameterList","parameters":[],"src":"11258:0:12"},"scope":3039,"src":"11149:598:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2905,"nodeType":"Block","src":"11923:100:12","statements":[{"expression":{"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2891,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"11933:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2893,"indexExpression":{"id":2892,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"11949:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11933:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2894,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"11960:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11933:29:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2896,"nodeType":"ExpressionStatement","src":"11933:29:12"},{"eventCall":{"arguments":[{"arguments":[{"id":2899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"11994:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2898,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"11986:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11986:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2901,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"12004:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2902,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"12008:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2897,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"11977:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11977:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2904,"nodeType":"EmitStatement","src":"11972:44:12"}]},"documentation":{"id":2884,"nodeType":"StructuredDocumentation","src":"11753:101:12","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":2906,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"11868:8:12","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2886,"mutability":"mutable","name":"to","nameLocation":"11885:2:12","nodeType":"VariableDeclaration","scope":2906,"src":"11877:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2885,"name":"address","nodeType":"ElementaryTypeName","src":"11877:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"tokenId","nameLocation":"11897:7:12","nodeType":"VariableDeclaration","scope":2906,"src":"11889:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2887,"name":"uint256","nodeType":"ElementaryTypeName","src":"11889:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11876:29:12"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[],"src":"11923:0:12"},"scope":3039,"src":"11859:164:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2937,"nodeType":"Block","src":"12282:184:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"12300:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2918,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"12309:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12300:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12319:27:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":2916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12292:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12292:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2922,"nodeType":"ExpressionStatement","src":"12292:55:12"},{"expression":{"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2923,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"12357:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2926,"indexExpression":{"id":2924,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"12376:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12357:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2927,"indexExpression":{"id":2925,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"12383:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12357:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2928,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"12395:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12357:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2930,"nodeType":"ExpressionStatement","src":"12357:46:12"},{"eventCall":{"arguments":[{"id":2932,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"12433:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2933,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"12440:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2934,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"12450:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2931,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"12418:14:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12418:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2936,"nodeType":"EmitStatement","src":"12413:46:12"}]},"documentation":{"id":2907,"nodeType":"StructuredDocumentation","src":"12029:125:12","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":2938,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12168:18:12","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"owner","nameLocation":"12204:5:12","nodeType":"VariableDeclaration","scope":2938,"src":"12196:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2908,"name":"address","nodeType":"ElementaryTypeName","src":"12196:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"operator","nameLocation":"12227:8:12","nodeType":"VariableDeclaration","scope":2938,"src":"12219:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2910,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"approved","nameLocation":"12250:8:12","nodeType":"VariableDeclaration","scope":2938,"src":"12245:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2912,"name":"bool","nodeType":"ElementaryTypeName","src":"12245:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12186:78:12"},"returnParameters":{"id":2915,"nodeType":"ParameterList","parameters":[],"src":"12282:0:12"},"scope":3039,"src":"12159:307:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2951,"nodeType":"Block","src":"12613:70:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":2946,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"12639:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2945,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"12631:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12631:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12649:26:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2944,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12623:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12623:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2950,"nodeType":"ExpressionStatement","src":"12623:53:12"}]},"documentation":{"id":2939,"nodeType":"StructuredDocumentation","src":"12472:73:12","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":2952,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"12559:14:12","nodeType":"FunctionDefinition","parameters":{"id":2942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"tokenId","nameLocation":"12582:7:12","nodeType":"VariableDeclaration","scope":2952,"src":"12574:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2940,"name":"uint256","nodeType":"ElementaryTypeName","src":"12574:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12573:17:12"},"returnParameters":{"id":2943,"nodeType":"ParameterList","parameters":[],"src":"12613:0:12"},"scope":3039,"src":"12550:133:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3015,"nodeType":"Block","src":"13390:679:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2966,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"13404:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"13404:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13404:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13421:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13404:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3013,"nodeType":"Block","src":"14027:36:12","statements":[{"expression":{"hexValue":"74727565","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14048:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2965,"id":3012,"nodeType":"Return","src":"14041:11:12"}]},"id":3014,"nodeType":"IfStatement","src":"13400:663:12","trueBody":{"id":3010,"nodeType":"Block","src":"13424:597:12","statements":[{"clauses":[{"block":{"id":2990,"nodeType":"Block","src":"13538:91:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2984,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"13563:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2985,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"13573:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$246_$","typeString":"type(contract IERC721Receiver)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":245,"src":"13573:32:12","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"13573:41:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"13563:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2965,"id":2989,"nodeType":"Return","src":"13556:58:12"}]},"errorName":"","id":2991,"nodeType":"TryCatchClause","parameters":{"id":2983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"retval","nameLocation":"13530:6:12","nodeType":"VariableDeclaration","scope":2991,"src":"13523:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2981,"name":"bytes4","nodeType":"ElementaryTypeName","src":"13523:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"13522:15:12"},"src":"13514:115:12"},{"block":{"id":3007,"nodeType":"Block","src":"13658:353:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2995,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"13680:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13680:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13697:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13680:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3005,"nodeType":"Block","src":"13807:190:12","statements":[{"AST":{"nodeType":"YulBlock","src":"13893:86:12","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13930:2:12","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"13934:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13926:3:12"},"nodeType":"YulFunctionCall","src":"13926:15:12"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"13949:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13943:5:12"},"nodeType":"YulFunctionCall","src":"13943:13:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13919:6:12"},"nodeType":"YulFunctionCall","src":"13919:38:12"},"nodeType":"YulExpressionStatement","src":"13919:38:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2993,"isOffset":false,"isSlot":false,"src":"13934:6:12","valueSize":1},{"declaration":2993,"isOffset":false,"isSlot":false,"src":"13949:6:12","valueSize":1}],"id":3004,"nodeType":"InlineAssembly","src":"13884:95:12"}]},"id":3006,"nodeType":"IfStatement","src":"13676:321:12","trueBody":{"id":3003,"nodeType":"Block","src":"13700:101:12","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13729:52:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2999,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"13722:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13722:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3002,"nodeType":"ExpressionStatement","src":"13722:60:12"}]}}]},"errorName":"","id":3008,"nodeType":"TryCatchClause","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"reason","nameLocation":"13650:6:12","nodeType":"VariableDeclaration","scope":3008,"src":"13637:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2992,"name":"bytes","nodeType":"ElementaryTypeName","src":"13637:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13636:21:12"},"src":"13630:381:12"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2975,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"13479:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13479:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2977,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"13493:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2978,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"13499:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2979,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"13508:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2972,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"13458:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2971,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"13442:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$246_$","typeString":"type(contract IERC721Receiver)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13442:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$246","typeString":"contract IERC721Receiver"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":245,"src":"13442:36:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13442:71:12","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3009,"nodeType":"TryStatement","src":"13438:573:12"}]}}]},"documentation":{"id":2953,"nodeType":"StructuredDocumentation","src":"12689:541:12","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":3016,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13244:22:12","nodeType":"FunctionDefinition","parameters":{"id":2962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"from","nameLocation":"13284:4:12","nodeType":"VariableDeclaration","scope":3016,"src":"13276:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2954,"name":"address","nodeType":"ElementaryTypeName","src":"13276:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"to","nameLocation":"13306:2:12","nodeType":"VariableDeclaration","scope":3016,"src":"13298:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"13298:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2959,"mutability":"mutable","name":"tokenId","nameLocation":"13326:7:12","nodeType":"VariableDeclaration","scope":3016,"src":"13318:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"13318:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2961,"mutability":"mutable","name":"data","nameLocation":"13356:4:12","nodeType":"VariableDeclaration","scope":3016,"src":"13343:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2960,"name":"bytes","nodeType":"ElementaryTypeName","src":"13343:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13266:100:12"},"returnParameters":{"id":2965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3016,"src":"13384:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2963,"name":"bool","nodeType":"ElementaryTypeName","src":"13384:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13383:6:12"},"scope":3039,"src":"13235:834:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3026,"nodeType":"Block","src":"14745:2:12","statements":[]},"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"14075:545:12","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3027,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14634:20:12","nodeType":"FunctionDefinition","parameters":{"id":3024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"from","nameLocation":"14672:4:12","nodeType":"VariableDeclaration","scope":3027,"src":"14664:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3018,"name":"address","nodeType":"ElementaryTypeName","src":"14664:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3021,"mutability":"mutable","name":"to","nameLocation":"14694:2:12","nodeType":"VariableDeclaration","scope":3027,"src":"14686:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3020,"name":"address","nodeType":"ElementaryTypeName","src":"14686:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"tokenId","nameLocation":"14714:7:12","nodeType":"VariableDeclaration","scope":3027,"src":"14706:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3022,"name":"uint256","nodeType":"ElementaryTypeName","src":"14706:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14654:73:12"},"returnParameters":{"id":3025,"nodeType":"ParameterList","parameters":[],"src":"14745:0:12"},"scope":3039,"src":"14625:122:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3037,"nodeType":"Block","src":"15238:2:12","statements":[]},"documentation":{"id":3028,"nodeType":"StructuredDocumentation","src":"14753:361:12","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":3038,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15128:19:12","nodeType":"FunctionDefinition","parameters":{"id":3035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"from","nameLocation":"15165:4:12","nodeType":"VariableDeclaration","scope":3038,"src":"15157:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3029,"name":"address","nodeType":"ElementaryTypeName","src":"15157:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3032,"mutability":"mutable","name":"to","nameLocation":"15187:2:12","nodeType":"VariableDeclaration","scope":3038,"src":"15179:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3031,"name":"address","nodeType":"ElementaryTypeName","src":"15179:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3034,"mutability":"mutable","name":"tokenId","nameLocation":"15207:7:12","nodeType":"VariableDeclaration","scope":3038,"src":"15199:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"15199:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15147:73:12"},"returnParameters":{"id":3036,"nodeType":"ParameterList","parameters":[],"src":"15238:0:12"},"scope":3039,"src":"15119:121:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3040,"src":"1382:13860:12","usedErrors":[]}],"src":"302:14941:12"},"id":12}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202c69445eab20c1bbbd8e32607b6ee96f65377d4a7f653dc7f3367b5ce711236e64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C PUSH10 0x445EAB20C1BBBD8E3260 PUSH28 0x6EE96F65377D4A7F653DC7F3367B5CE711236E64736F6C634300080D STOP CALLER ","sourceMap":"194:9169:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202c69445eab20c1bbbd8e32607b6ee96f65377d4a7f653dc7f3367b5ce711236e64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C PUSH10 0x445EAB20C1BBBD8E3260 PUSH28 0x6EE96F65377D4A7F653DC7F3367B5CE711236E64736F6C634300080D STOP CALLER ","sourceMap":"194:9169:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200fe33877dc3b543331045a7fad8df6528ca3a558fa500af760ddfe6556fe4a6764736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xE3 CODESIZE PUSH24 0xDC3B543331045A7FAD8DF6528CA3A558FA500AF760DDFE65 JUMP INVALID 0x4A PUSH8 0x64736F6C63430008 0xD STOP CALLER ","sourceMap":"220:2559:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200fe33877dc3b543331045a7fad8df6528ca3a558fa500af760ddfe6556fe4a6764736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xE3 CODESIZE PUSH24 0xDC3B543331045A7FAD8DF6528CA3A558FA500AF760DDFE65 JUMP INVALID 0x4A PUSH8 0x64736F6C63430008 0xD STOP CALLER ","sourceMap":"220:2559:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff279c248c865934fc9794769239e1a6a591e89789ec518f51e46031f69ab92a64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x27 SWAP13 0x24 DUP13 DUP7 MSIZE CALLVALUE 0xFC SWAP8 SWAP5 PUSH23 0x9239E1A6A591E89789EC518F51E46031F69AB92A64736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"202:12582:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff279c248c865934fc9794769239e1a6a591e89789ec518f51e46031f69ab92a64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x27 SWAP13 0x24 DUP13 DUP7 MSIZE CALLVALUE 0xFC SWAP8 SWAP5 PUSH23 0x9239E1A6A591E89789EC518F51E46031F69AB92A64736F PUSH13 0x634300080D0033000000000000 ","sourceMap":"202:12582:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c616ba86b545d147d95d377117c30fcfaac32d4ba4752e6193d0b63fc60cd3d764736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 AND 0xBA DUP7 0xB5 GASLIMIT 0xD1 SELFBALANCE 0xD9 0x5D CALLDATACOPY PUSH18 0x17C30FCFAAC32D4BA4752E6193D0B63FC60C 0xD3 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1047:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c616ba86b545d147d95d377117c30fcfaac32d4ba4752e6193d0b63fc60cd3d764736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 AND 0xBA DUP7 0xB5 GASLIMIT 0xD1 SELFBALANCE 0xD9 0x5D CALLDATACOPY PUSH18 0x17C30FCFAAC32D4BA4752E6193D0B63FC60C 0xD3 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"215:1047:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721All.sol":{"ERC721All":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"todo...","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"Overrides {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"Overrides {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1888":{"entryPoint":null,"id":1888,"parameterSlots":2,"returnSlots":0},"@_2237":{"entryPoint":null,"id":2237,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_615":{"entryPoint":149,"id":615,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":157,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":816,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":942,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":677,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":529,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":708,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":762,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1122,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":623,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":1075,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":576,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":549,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":554,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":544,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":539,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":559,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"423:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:13"},"nodeType":"YulFunctionCall","src":"433:12:13"},"nodeType":"YulExpressionStatement","src":"433:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:13"},{"body":{"nodeType":"YulBlock","src":"546:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:13"},"nodeType":"YulFunctionCall","src":"556:12:13"},"nodeType":"YulExpressionStatement","src":"556:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:13"},{"body":{"nodeType":"YulBlock","src":"628:54:13","statements":[{"nodeType":"YulAssignment","src":"638:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:13"},"nodeType":"YulFunctionCall","src":"652:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:13"},"nodeType":"YulFunctionCall","src":"668:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:13"},"nodeType":"YulFunctionCall","src":"648:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:13","type":""}],"src":"580:102:13"},{"body":{"nodeType":"YulBlock","src":"716:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:13"},"nodeType":"YulFunctionCall","src":"726:88:13"},"nodeType":"YulExpressionStatement","src":"726:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:13"},"nodeType":"YulFunctionCall","src":"823:15:13"},"nodeType":"YulExpressionStatement","src":"823:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:13"},"nodeType":"YulFunctionCall","src":"847:15:13"},"nodeType":"YulExpressionStatement","src":"847:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:13"},{"body":{"nodeType":"YulBlock","src":"917:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:13"},"nodeType":"YulFunctionCall","src":"957:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:13"},"nodeType":"YulFunctionCall","src":"945:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:13"},"nodeType":"YulFunctionCall","src":"1098:18:13"},"nodeType":"YulExpressionStatement","src":"1098:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:13"},"nodeType":"YulFunctionCall","src":"1036:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:13"},"nodeType":"YulFunctionCall","src":"1072:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:13"},"nodeType":"YulFunctionCall","src":"1033:62:13"},"nodeType":"YulIf","src":"1030:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:13"},"nodeType":"YulFunctionCall","src":"1127:22:13"},"nodeType":"YulExpressionStatement","src":"1127:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:13","type":""}],"src":"874:281:13"},{"body":{"nodeType":"YulBlock","src":"1202:88:13","statements":[{"nodeType":"YulAssignment","src":"1212:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:13"},"nodeType":"YulFunctionCall","src":"1222:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:13"},"nodeType":"YulFunctionCall","src":"1251:33:13"},"nodeType":"YulExpressionStatement","src":"1251:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:13","type":""}],"src":"1161:129:13"},{"body":{"nodeType":"YulBlock","src":"1363:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:13"},"nodeType":"YulFunctionCall","src":"1470:18:13"},"nodeType":"YulExpressionStatement","src":"1470:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:13"},"nodeType":"YulFunctionCall","src":"1437:30:13"},"nodeType":"YulIf","src":"1434:56:13"},{"nodeType":"YulAssignment","src":"1500:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:13"},"nodeType":"YulFunctionCall","src":"1508:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:13"}]},{"nodeType":"YulAssignment","src":"1574:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:13"},"nodeType":"YulFunctionCall","src":"1582:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:13"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:13","type":""}],"src":"1296:308:13"},{"body":{"nodeType":"YulBlock","src":"1659:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:13"},"nodeType":"YulFunctionCall","src":"1759:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:13"},"nodeType":"YulFunctionCall","src":"1778:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:13"},"nodeType":"YulFunctionCall","src":"1772:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:13"},"nodeType":"YulFunctionCall","src":"1752:39:13"},"nodeType":"YulExpressionStatement","src":"1752:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:13"},"nodeType":"YulFunctionCall","src":"1696:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:13","statements":[{"nodeType":"YulAssignment","src":"1712:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:13"},"nodeType":"YulFunctionCall","src":"1717:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:13","statements":[]},"src":"1688:113:13"},{"body":{"nodeType":"YulBlock","src":"1835:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:13"},"nodeType":"YulFunctionCall","src":"1881:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:13"},"nodeType":"YulFunctionCall","src":"1874:27:13"},"nodeType":"YulExpressionStatement","src":"1874:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:13"},"nodeType":"YulFunctionCall","src":"1813:13:13"},"nodeType":"YulIf","src":"1810:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:13","type":""}],"src":"1610:307:13"},{"body":{"nodeType":"YulBlock","src":"2018:326:13","statements":[{"nodeType":"YulAssignment","src":"2028:75:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:13"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:13"},"nodeType":"YulFunctionCall","src":"2053:49:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:13"},"nodeType":"YulFunctionCall","src":"2037:66:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:13"},"nodeType":"YulFunctionCall","src":"2112:21:13"},"nodeType":"YulExpressionStatement","src":"2112:21:13"},{"nodeType":"YulVariableDeclaration","src":"2142:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:13"},"nodeType":"YulFunctionCall","src":"2153:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:13"},"nodeType":"YulFunctionCall","src":"2209:79:13"},"nodeType":"YulExpressionStatement","src":"2209:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:13"},"nodeType":"YulFunctionCall","src":"2184:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:13"},"nodeType":"YulFunctionCall","src":"2181:25:13"},"nodeType":"YulIf","src":"2178:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:13"},"nodeType":"YulFunctionCall","src":"2299:39:13"},"nodeType":"YulExpressionStatement","src":"2299:39:13"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:13","type":""}],"src":"1923:421:13"},{"body":{"nodeType":"YulBlock","src":"2437:282:13","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:13"},"nodeType":"YulFunctionCall","src":"2488:79:13"},"nodeType":"YulExpressionStatement","src":"2488:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:13"},"nodeType":"YulFunctionCall","src":"2461:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:13"},"nodeType":"YulFunctionCall","src":"2457:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:13"},"nodeType":"YulFunctionCall","src":"2450:35:13"},"nodeType":"YulIf","src":"2447:122:13"},{"nodeType":"YulVariableDeclaration","src":"2578:27:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:13"},"nodeType":"YulFunctionCall","src":"2592:13:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:13"},"nodeType":"YulFunctionCall","src":"2682:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:13"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:13"},"nodeType":"YulFunctionCall","src":"2623:90:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:13"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:13","type":""}],"src":"2364:355:13"},{"body":{"nodeType":"YulBlock","src":"2839:739:13","statements":[{"body":{"nodeType":"YulBlock","src":"2885:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2887:77:13"},"nodeType":"YulFunctionCall","src":"2887:79:13"},"nodeType":"YulExpressionStatement","src":"2887:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2856:3:13"},"nodeType":"YulFunctionCall","src":"2856:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2852:3:13"},"nodeType":"YulFunctionCall","src":"2852:32:13"},"nodeType":"YulIf","src":"2849:119:13"},{"nodeType":"YulBlock","src":"2978:291:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2993:38:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:13"},"nodeType":"YulFunctionCall","src":"3013:17:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3007:5:13"},"nodeType":"YulFunctionCall","src":"3007:24:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2997:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3078:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3080:77:13"},"nodeType":"YulFunctionCall","src":"3080:79:13"},"nodeType":"YulExpressionStatement","src":"3080:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3050:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3058:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3047:2:13"},"nodeType":"YulFunctionCall","src":"3047:30:13"},"nodeType":"YulIf","src":"3044:117:13"},{"nodeType":"YulAssignment","src":"3175:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3242:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:13"},"nodeType":"YulFunctionCall","src":"3227:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3185:41:13"},"nodeType":"YulFunctionCall","src":"3185:74:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3175:6:13"}]}]},{"nodeType":"YulBlock","src":"3279:292:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3294:39:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3318:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3329:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3314:3:13"},"nodeType":"YulFunctionCall","src":"3314:18:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3308:5:13"},"nodeType":"YulFunctionCall","src":"3308:25:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3298:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3380:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3382:77:13"},"nodeType":"YulFunctionCall","src":"3382:79:13"},"nodeType":"YulExpressionStatement","src":"3382:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3352:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3360:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:13"},"nodeType":"YulFunctionCall","src":"3349:30:13"},"nodeType":"YulIf","src":"3346:117:13"},{"nodeType":"YulAssignment","src":"3477:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3533:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3544:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:13"},"nodeType":"YulFunctionCall","src":"3529:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3553:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3487:41:13"},"nodeType":"YulFunctionCall","src":"3487:74:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3477:6:13"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2801:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2812:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2824:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2832:6:13","type":""}],"src":"2725:853:13"},{"body":{"nodeType":"YulBlock","src":"3612:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3629:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3632:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:13"},"nodeType":"YulFunctionCall","src":"3622:88:13"},"nodeType":"YulExpressionStatement","src":"3622:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3726:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3719:6:13"},"nodeType":"YulFunctionCall","src":"3719:15:13"},"nodeType":"YulExpressionStatement","src":"3719:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:13"},"nodeType":"YulFunctionCall","src":"3743:15:13"},"nodeType":"YulExpressionStatement","src":"3743:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3584:180:13"},{"body":{"nodeType":"YulBlock","src":"3821:269:13","statements":[{"nodeType":"YulAssignment","src":"3831:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3845:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3841:3:13"},"nodeType":"YulFunctionCall","src":"3841:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3831:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"3862:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3892:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3888:3:13"},"nodeType":"YulFunctionCall","src":"3888:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3866:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3939:51:13","statements":[{"nodeType":"YulAssignment","src":"3953:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3967:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3975:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3963:3:13"},"nodeType":"YulFunctionCall","src":"3963:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3953:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3919:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3912:6:13"},"nodeType":"YulFunctionCall","src":"3912:26:13"},"nodeType":"YulIf","src":"3909:81:13"},{"body":{"nodeType":"YulBlock","src":"4042:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4056:16:13"},"nodeType":"YulFunctionCall","src":"4056:18:13"},"nodeType":"YulExpressionStatement","src":"4056:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4006:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4029:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4026:2:13"},"nodeType":"YulFunctionCall","src":"4026:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4003:2:13"},"nodeType":"YulFunctionCall","src":"4003:38:13"},"nodeType":"YulIf","src":"4000:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3805:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3814:6:13","type":""}],"src":"3770:320:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162002e0038038062002e008339818101604052810190620000379190620003ae565b8181620000596200004d6200009560201b60201c565b6200009d60201b60201c565b81600190805190602001906200007192919062000161565b5080600290805190602001906200008a92919062000161565b505050505062000497565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200016f9062000462565b90600052602060002090601f016020900481019282620001935760008555620001df565b82601f10620001ae57805160ff1916838001178555620001df565b82800160010185558215620001df579182015b82811115620001de578251825591602001919060010190620001c1565b5b509050620001ee9190620001f2565b5090565b5b808211156200020d576000816000905550600101620001f3565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200027a826200022f565b810181811067ffffffffffffffff821117156200029c576200029b62000240565b5b80604052505050565b6000620002b162000211565b9050620002bf82826200026f565b919050565b600067ffffffffffffffff821115620002e257620002e162000240565b5b620002ed826200022f565b9050602081019050919050565b60005b838110156200031a578082015181840152602081019050620002fd565b838111156200032a576000848401525b50505050565b6000620003476200034184620002c4565b620002a5565b9050828152602081018484840111156200036657620003656200022a565b5b62000373848285620002fa565b509392505050565b600082601f83011262000393576200039262000225565b5b8151620003a584826020860162000330565b91505092915050565b60008060408385031215620003c857620003c76200021b565b5b600083015167ffffffffffffffff811115620003e957620003e862000220565b5b620003f7858286016200037b565b925050602083015167ffffffffffffffff8111156200041b576200041a62000220565b5b62000429858286016200037b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047b57607f821691505b60208210810362000491576200049062000433565b5b50919050565b61295980620004a76000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb46514610292578063b88d4fde146102ae578063c87b56dd146102ca578063e985e9c5146102fa578063f2fde38b1461032a5761010b565b806370a082311461021c578063715018a61461024c5780638da5cb5b1461025657806395d89b41146102745761010b565b80631249c58b116100de5780631249c58b146101aa57806323b872dd146101b457806342842e0e146101d05780636352211e146101ec5761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611a95565b610346565b6040516101379190611add565b60405180910390f35b610148610428565b6040516101559190611b91565b60405180910390f35b61017860048036038101906101739190611be9565b6104ba565b6040516101859190611c57565b60405180910390f35b6101a860048036038101906101a39190611c9e565b610500565b005b6101b2610617565b005b6101ce60048036038101906101c99190611cde565b610629565b005b6101ea60048036038101906101e59190611cde565b610689565b005b61020660048036038101906102019190611be9565b6106a9565b6040516102139190611c57565b60405180910390f35b61023660048036038101906102319190611d31565b61076c565b6040516102439190611d6d565b60405180910390f35b610254610886565b005b61025e61089a565b60405161026b9190611c57565b60405180910390f35b61027c6108c3565b6040516102899190611b91565b60405180910390f35b6102ac60048036038101906102a79190611db4565b610955565b005b6102c860048036038101906102c39190611f29565b61096b565b005b6102e460048036038101906102df9190611be9565b6109cd565b6040516102f19190611b91565b60405180910390f35b610314600480360381019061030f9190611fac565b610a35565b6040516103219190611add565b60405180910390f35b610344600480360381019061033f9190611d31565b610ac9565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610421575061042082610b4c565b5b9050919050565b6060600180546104379061201b565b80601f01602080910402602001604051908101604052809291908181526020018280546104639061201b565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050905090565b60006104c582610bb6565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050b826106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361057b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610572906120be565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661059a610c01565b73ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c8816105c3610c01565b610a35565b5b610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612150565b60405180910390fd5b6106128383610c09565b505050565b610627610622610c01565b610cc2565b565b61063a610634610c01565b82610e21565b610679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610670906121e2565b60405180910390fd5b610684838383610eb6565b505050565b6106a48383836040518060200160405280600081525061096b565b505050565b60006106b482611184565b6106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea9061224e565b60405180910390fd5b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610763578290505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d3906122e0565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148015610830575061082f8261121b565b5b1561083e5760019050610881565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b61088e6112ef565b610898600061136d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280546108d29061201b565b80601f01602080910402602001604051908101604052809291908181526020018280546108fe9061201b565b801561094b5780601f106109205761010080835404028352916020019161094b565b820191906000526020600020905b81548152906001019060200180831161092e57829003601f168201915b5050505050905090565b610967610960610c01565b8383611431565b5050565b61097c610976610c01565b83610e21565b6109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b2906121e2565b60405180910390fd5b6109c78484848461159d565b50505050565b60606109d882610bb6565b60006109e26115f9565b90506000815111610a025760405180602001604052806000815250610a2d565b80610a0c84611610565b604051602001610a1d92919061233c565b6040516020818303038152906040525b915050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610ad16112ef565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b37906123d2565b60405180910390fd5b610b498161136d565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bbf816116de565b610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf59061224e565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610c7c836106a9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008173ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d439061243e565b60405180910390fd5b610d5581611184565b15610d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8c906124aa565b60405180910390fd5b60016007600083815260200190815260200160002060006101000a81548160ff021916908315150217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080610e2d836106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e6f5750610e6e8185610a35565b5b80610ead57508373ffffffffffffffffffffffffffffffffffffffff16610e95846104ba565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610ed6826106a9565b73ffffffffffffffffffffffffffffffffffffffff1614610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f239061253c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f92906125ce565b60405180910390fd5b610fa683838361174a565b610fb1600082610c09565b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611070576001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611068919061261d565b925050819055505b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110c09190612651565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461117f83838361174f565b505050565b60006007600083815260200190815260200160002060009054906101000a900460ff168015611214575061dead73ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16905060006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061127882611184565b80156112e657508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806112e55750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b92505050919050565b6112f7610c01565b73ffffffffffffffffffffffffffffffffffffffff1661131561089a565b73ffffffffffffffffffffffffffffffffffffffff161461136b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611362906126f3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361149f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114969061275f565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115909190611add565b60405180910390a3505050565b6115a8848484610eb6565b6115b484848484611754565b6115f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ea906127f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161161f846118d6565b01905060008167ffffffffffffffff81111561163e5761163d611dfe565b5b6040519080825280601f01601f1916602001820160405280156116705781602001600182028036833780820191505090505b509050600082602001820190505b6001156116d3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116c7576116c6612811565b5b0494506000850361167e575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff163b11156118c9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611799610c01565b8786866040518563ffffffff1660e01b81526004016117bb9493929190612895565b6020604051808303816000875af19250505080156117f757506040513d601f19601f820116820180604052508101906117f491906128f6565b60015b611879573d8060008114611827576040519150601f19603f3d011682016040523d82523d6000602084013e61182c565b606091505b506000815103611871576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611868906127f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118ce565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611934577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161192a57611929612811565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611971576d04ee2d6d415b85acef8100000000838161196757611966612811565b5b0492506020810190505b662386f26fc1000083106119a057662386f26fc10000838161199657611995612811565b5b0492506010810190505b6305f5e10083106119c9576305f5e10083816119bf576119be612811565b5b0492506008810190505b61271083106119ee5761271083816119e4576119e3612811565b5b0492506004810190505b60648310611a115760648381611a0757611a06612811565b5b0492506002810190505b600a8310611a20576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a7281611a3d565b8114611a7d57600080fd5b50565b600081359050611a8f81611a69565b92915050565b600060208284031215611aab57611aaa611a33565b5b6000611ab984828501611a80565b91505092915050565b60008115159050919050565b611ad781611ac2565b82525050565b6000602082019050611af26000830184611ace565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b32578082015181840152602081019050611b17565b83811115611b41576000848401525b50505050565b6000601f19601f8301169050919050565b6000611b6382611af8565b611b6d8185611b03565b9350611b7d818560208601611b14565b611b8681611b47565b840191505092915050565b60006020820190508181036000830152611bab8184611b58565b905092915050565b6000819050919050565b611bc681611bb3565b8114611bd157600080fd5b50565b600081359050611be381611bbd565b92915050565b600060208284031215611bff57611bfe611a33565b5b6000611c0d84828501611bd4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c4182611c16565b9050919050565b611c5181611c36565b82525050565b6000602082019050611c6c6000830184611c48565b92915050565b611c7b81611c36565b8114611c8657600080fd5b50565b600081359050611c9881611c72565b92915050565b60008060408385031215611cb557611cb4611a33565b5b6000611cc385828601611c89565b9250506020611cd485828601611bd4565b9150509250929050565b600080600060608486031215611cf757611cf6611a33565b5b6000611d0586828701611c89565b9350506020611d1686828701611c89565b9250506040611d2786828701611bd4565b9150509250925092565b600060208284031215611d4757611d46611a33565b5b6000611d5584828501611c89565b91505092915050565b611d6781611bb3565b82525050565b6000602082019050611d826000830184611d5e565b92915050565b611d9181611ac2565b8114611d9c57600080fd5b50565b600081359050611dae81611d88565b92915050565b60008060408385031215611dcb57611dca611a33565b5b6000611dd985828601611c89565b9250506020611dea85828601611d9f565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e3682611b47565b810181811067ffffffffffffffff82111715611e5557611e54611dfe565b5b80604052505050565b6000611e68611a29565b9050611e748282611e2d565b919050565b600067ffffffffffffffff821115611e9457611e93611dfe565b5b611e9d82611b47565b9050602081019050919050565b82818337600083830152505050565b6000611ecc611ec784611e79565b611e5e565b905082815260208101848484011115611ee857611ee7611df9565b5b611ef3848285611eaa565b509392505050565b600082601f830112611f1057611f0f611df4565b5b8135611f20848260208601611eb9565b91505092915050565b60008060008060808587031215611f4357611f42611a33565b5b6000611f5187828801611c89565b9450506020611f6287828801611c89565b9350506040611f7387828801611bd4565b925050606085013567ffffffffffffffff811115611f9457611f93611a38565b5b611fa087828801611efb565b91505092959194509250565b60008060408385031215611fc357611fc2611a33565b5b6000611fd185828601611c89565b9250506020611fe285828601611c89565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061203357607f821691505b60208210810361204657612045611fec565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006120a8602183611b03565b91506120b38261204c565b604082019050919050565b600060208201905081810360008301526120d78161209b565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061213a603e83611b03565b9150612145826120de565b604082019050919050565b600060208201905081810360008301526121698161212d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006121cc602e83611b03565b91506121d782612170565b604082019050919050565b600060208201905081810360008301526121fb816121bf565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612238601883611b03565b915061224382612202565b602082019050919050565b600060208201905081810360008301526122678161222b565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006122ca602983611b03565b91506122d58261226e565b604082019050919050565b600060208201905081810360008301526122f9816122bd565b9050919050565b600081905092915050565b600061231682611af8565b6123208185612300565b9350612330818560208601611b14565b80840191505092915050565b6000612348828561230b565b9150612354828461230b565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006123bc602683611b03565b91506123c782612360565b604082019050919050565b600060208201905081810360008301526123eb816123af565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612428602083611b03565b9150612433826123f2565b602082019050919050565b600060208201905081810360008301526124578161241b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612494601c83611b03565b915061249f8261245e565b602082019050919050565b600060208201905081810360008301526124c381612487565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612526602583611b03565b9150612531826124ca565b604082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006125b8602483611b03565b91506125c38261255c565b604082019050919050565b600060208201905081810360008301526125e7816125ab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061262882611bb3565b915061263383611bb3565b925082821015612646576126456125ee565b5b828203905092915050565b600061265c82611bb3565b915061266783611bb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561269c5761269b6125ee565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006126dd602083611b03565b91506126e8826126a7565b602082019050919050565b6000602082019050818103600083015261270c816126d0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612749601983611b03565b915061275482612713565b602082019050919050565b600060208201905081810360008301526127788161273c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006127db603283611b03565b91506127e68261277f565b604082019050919050565b6000602082019050818103600083015261280a816127ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061286782612840565b612871818561284b565b9350612881818560208601611b14565b61288a81611b47565b840191505092915050565b60006080820190506128aa6000830187611c48565b6128b76020830186611c48565b6128c46040830185611d5e565b81810360608301526128d6818461285c565b905095945050505050565b6000815190506128f081611a69565b92915050565b60006020828403121561290c5761290b611a33565b5b600061291a848285016128e1565b9150509291505056fea264697066735822122085c7d608a0fb21c4e9f5bd82509de0ddc1df85607191f40e67d6d8caf3978ded64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2E00 CODESIZE SUB DUP1 PUSH3 0x2E00 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x3AE JUMP JUMPDEST DUP2 DUP2 PUSH3 0x59 PUSH3 0x4D PUSH3 0x95 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x9D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x71 SWAP3 SWAP2 SWAP1 PUSH3 0x161 JUMP JUMPDEST POP DUP1 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x8A SWAP3 SWAP2 SWAP1 PUSH3 0x161 JUMP JUMPDEST POP POP POP POP POP PUSH3 0x497 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x16F SWAP1 PUSH3 0x462 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x193 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1DF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1AE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1DF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1DF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1DE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1C1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x1EE SWAP2 SWAP1 PUSH3 0x1F2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x20D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x1F3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x27A DUP3 PUSH3 0x22F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x29C JUMPI PUSH3 0x29B PUSH3 0x240 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2B1 PUSH3 0x211 JUMP JUMPDEST SWAP1 POP PUSH3 0x2BF DUP3 DUP3 PUSH3 0x26F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x2E2 JUMPI PUSH3 0x2E1 PUSH3 0x240 JUMP JUMPDEST JUMPDEST PUSH3 0x2ED DUP3 PUSH3 0x22F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x31A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x2FD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x32A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x347 PUSH3 0x341 DUP5 PUSH3 0x2C4 JUMP JUMPDEST PUSH3 0x2A5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x366 JUMPI PUSH3 0x365 PUSH3 0x22A JUMP JUMPDEST JUMPDEST PUSH3 0x373 DUP5 DUP3 DUP6 PUSH3 0x2FA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x393 JUMPI PUSH3 0x392 PUSH3 0x225 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3A5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x330 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x3C8 JUMPI PUSH3 0x3C7 PUSH3 0x21B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x3E9 JUMPI PUSH3 0x3E8 PUSH3 0x220 JUMP JUMPDEST JUMPDEST PUSH3 0x3F7 DUP6 DUP3 DUP7 ADD PUSH3 0x37B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x41B JUMPI PUSH3 0x41A PUSH3 0x220 JUMP JUMPDEST JUMPDEST PUSH3 0x429 DUP6 DUP3 DUP7 ADD PUSH3 0x37B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x47B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x491 JUMPI PUSH3 0x490 PUSH3 0x433 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2959 DUP1 PUSH3 0x4A7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32A JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x274 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1249C58B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1EC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x1A95 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x428 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x1C9E JUMP JUMPDEST PUSH2 0x500 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x617 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x629 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E5 SWAP2 SWAP1 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x206 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x201 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x236 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0x76C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x254 PUSH2 0x886 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH2 0x89A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27C PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH2 0x955 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C3 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x96B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x314 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30F SWAP2 SWAP1 PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33F SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x411 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x421 JUMPI POP PUSH2 0x420 DUP3 PUSH2 0xB4C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x437 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x463 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x485 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x493 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0xBB6 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50B DUP3 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x57B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x572 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x59A PUSH2 0xC01 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x5C9 JUMPI POP PUSH2 0x5C8 DUP2 PUSH2 0x5C3 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0xA35 JUMP JUMPDEST JUMPDEST PUSH2 0x608 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FF SWAP1 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x612 DUP4 DUP4 PUSH2 0xC09 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0xCC2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x63A PUSH2 0x634 PUSH2 0xC01 JUMP JUMPDEST DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x670 SWAP1 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x684 DUP4 DUP4 DUP4 PUSH2 0xEB6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x96B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 DUP3 PUSH2 0x1184 JUMP JUMPDEST PUSH2 0x6F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EA SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x763 JUMPI DUP3 SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D3 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ DUP1 ISZERO PUSH2 0x830 JUMPI POP PUSH2 0x82F DUP3 PUSH2 0x121B JUMP JUMPDEST JUMPDEST ISZERO PUSH2 0x83E JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x881 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x88E PUSH2 0x12EF JUMP JUMPDEST PUSH2 0x898 PUSH1 0x0 PUSH2 0x136D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x8D2 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8FE SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x94B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x920 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x94B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x92E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x967 PUSH2 0x960 PUSH2 0xC01 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1431 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x97C PUSH2 0x976 PUSH2 0xC01 JUMP JUMPDEST DUP4 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x9BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9B2 SWAP1 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9C7 DUP5 DUP5 DUP5 DUP5 PUSH2 0x159D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9D8 DUP3 PUSH2 0xBB6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E2 PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA2D JUMP JUMPDEST DUP1 PUSH2 0xA0C DUP5 PUSH2 0x1610 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA1D SWAP3 SWAP2 SWAP1 PUSH2 0x233C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xAD1 PUSH2 0x12EF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB37 SWAP1 PUSH2 0x23D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB49 DUP2 PUSH2 0x136D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF5 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7C DUP4 PUSH2 0x6A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD43 SWAP1 PUSH2 0x243E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD55 DUP2 PUSH2 0x1184 JUMP JUMPDEST ISZERO PUSH2 0xD95 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD8C SWAP1 PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE2D DUP4 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE6F JUMPI POP PUSH2 0xE6E DUP2 DUP6 PUSH2 0xA35 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xEAD JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE95 DUP5 PUSH2 0x4BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xED6 DUP3 PUSH2 0x6A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP1 PUSH2 0x253C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF9B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF92 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFA6 DUP4 DUP4 DUP4 PUSH2 0x174A JUMP JUMPDEST PUSH2 0xFB1 PUSH1 0x0 DUP3 PUSH2 0xC09 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1070 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1068 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10C0 SWAP2 SWAP1 PUSH2 0x2651 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x117F DUP4 DUP4 DUP4 PUSH2 0x174F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1214 JUMPI POP PUSH2 0xDEAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x1278 DUP3 PUSH2 0x1184 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12E6 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x12E5 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12F7 PUSH2 0xC01 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1315 PUSH2 0x89A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1362 SWAP1 PUSH2 0x26F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x149F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1496 SWAP1 PUSH2 0x275F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1590 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x15A8 DUP5 DUP5 DUP5 PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x15B4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1754 JUMP JUMPDEST PUSH2 0x15F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15EA SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x161F DUP5 PUSH2 0x18D6 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163E JUMPI PUSH2 0x163D PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1670 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x16D3 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16C7 JUMPI PUSH2 0x16C6 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x167E JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18C9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1799 PUSH2 0xC01 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17BB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2895 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17F7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17F4 SWAP2 SWAP1 PUSH2 0x28F6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1879 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1827 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x182C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1871 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1868 SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x18CE JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1934 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x192A JUMPI PUSH2 0x1929 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1971 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1967 JUMPI PUSH2 0x1966 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x19A0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1996 JUMPI PUSH2 0x1995 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x19C9 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x19BF JUMPI PUSH2 0x19BE PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x19EE JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x19E4 JUMPI PUSH2 0x19E3 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1A11 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1A07 JUMPI PUSH2 0x1A06 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1A20 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A72 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP2 EQ PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A8F DUP2 PUSH2 0x1A69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AAB JUMPI PUSH2 0x1AAA PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AB9 DUP5 DUP3 DUP6 ADD PUSH2 0x1A80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD7 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1ACE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B32 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1B17 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B41 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B63 DUP3 PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0x1B6D DUP2 DUP6 PUSH2 0x1B03 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B7D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST PUSH2 0x1B86 DUP2 PUSH2 0x1B47 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAB DUP2 DUP5 PUSH2 0x1B58 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC6 DUP2 PUSH2 0x1BB3 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BE3 DUP2 PUSH2 0x1BBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BFF JUMPI PUSH2 0x1BFE PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C0D DUP5 DUP3 DUP6 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 DUP3 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C51 DUP2 PUSH2 0x1C36 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C6C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C7B DUP2 PUSH2 0x1C36 JUMP JUMPDEST DUP2 EQ PUSH2 0x1C86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C98 DUP2 PUSH2 0x1C72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CB5 JUMPI PUSH2 0x1CB4 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CC3 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CD4 DUP6 DUP3 DUP7 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1CF7 JUMPI PUSH2 0x1CF6 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D05 DUP7 DUP3 DUP8 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1D16 DUP7 DUP3 DUP8 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1D27 DUP7 DUP3 DUP8 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D47 JUMPI PUSH2 0x1D46 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D55 DUP5 DUP3 DUP6 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D67 DUP2 PUSH2 0x1BB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D82 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D5E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D91 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DAE DUP2 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DCB JUMPI PUSH2 0x1DCA PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DD9 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DEA DUP6 DUP3 DUP7 ADD PUSH2 0x1D9F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E36 DUP3 PUSH2 0x1B47 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E55 JUMPI PUSH2 0x1E54 PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E68 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E74 DUP3 DUP3 PUSH2 0x1E2D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E94 JUMPI PUSH2 0x1E93 PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST PUSH2 0x1E9D DUP3 PUSH2 0x1B47 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ECC PUSH2 0x1EC7 DUP5 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x1E5E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1EE8 JUMPI PUSH2 0x1EE7 PUSH2 0x1DF9 JUMP JUMPDEST JUMPDEST PUSH2 0x1EF3 DUP5 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x1DF4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F20 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1EB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F43 JUMPI PUSH2 0x1F42 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F51 DUP8 DUP3 DUP9 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1F62 DUP8 DUP3 DUP9 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1F73 DUP8 DUP3 DUP9 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F94 JUMPI PUSH2 0x1F93 PUSH2 0x1A38 JUMP JUMPDEST JUMPDEST PUSH2 0x1FA0 DUP8 DUP3 DUP9 ADD PUSH2 0x1EFB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FC3 JUMPI PUSH2 0x1FC2 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FD1 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1FE2 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2033 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2046 JUMPI PUSH2 0x2045 PUSH2 0x1FEC JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20A8 PUSH1 0x21 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x20B3 DUP3 PUSH2 0x204C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20D7 DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x213A PUSH1 0x3E DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2145 DUP3 PUSH2 0x20DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2169 DUP2 PUSH2 0x212D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206E6F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21CC PUSH1 0x2E DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D7 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21FB DUP2 PUSH2 0x21BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2238 PUSH1 0x18 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2243 DUP3 PUSH2 0x2202 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2267 DUP2 PUSH2 0x222B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22CA PUSH1 0x29 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x22D5 DUP3 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22F9 DUP2 PUSH2 0x22BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2316 DUP3 PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0x2320 DUP2 DUP6 PUSH2 0x2300 JUMP JUMPDEST SWAP4 POP PUSH2 0x2330 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2348 DUP3 DUP6 PUSH2 0x230B JUMP JUMPDEST SWAP2 POP PUSH2 0x2354 DUP3 DUP5 PUSH2 0x230B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23BC PUSH1 0x26 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x23C7 DUP3 PUSH2 0x2360 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23EB DUP2 PUSH2 0x23AF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2428 PUSH1 0x20 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2433 DUP3 PUSH2 0x23F2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2457 DUP2 PUSH2 0x241B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2494 PUSH1 0x1C DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x249F DUP3 PUSH2 0x245E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24C3 DUP2 PUSH2 0x2487 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2526 PUSH1 0x25 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2531 DUP3 PUSH2 0x24CA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2555 DUP2 PUSH2 0x2519 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B8 PUSH1 0x24 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x25C3 DUP3 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25E7 DUP2 PUSH2 0x25AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2628 DUP3 PUSH2 0x1BB3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2633 DUP4 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2646 JUMPI PUSH2 0x2645 PUSH2 0x25EE JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265C DUP3 PUSH2 0x1BB3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2667 DUP4 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x269C JUMPI PUSH2 0x269B PUSH2 0x25EE JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26DD PUSH1 0x20 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x26E8 DUP3 PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270C DUP2 PUSH2 0x26D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2749 PUSH1 0x19 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2754 DUP3 PUSH2 0x2713 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2778 DUP2 PUSH2 0x273C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DB PUSH1 0x32 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x27E6 DUP3 PUSH2 0x277F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x280A DUP2 PUSH2 0x27CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2867 DUP3 PUSH2 0x2840 JUMP JUMPDEST PUSH2 0x2871 DUP2 DUP6 PUSH2 0x284B JUMP JUMPDEST SWAP4 POP PUSH2 0x2881 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST PUSH2 0x288A DUP2 PUSH2 0x1B47 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x28AA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x28B7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x28C4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1D5E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x28D6 DUP2 DUP5 PUSH2 0x285C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x28F0 DUP2 PUSH2 0x1A69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290C JUMPI PUSH2 0x290B PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x291A DUP5 DUP3 DUP6 ADD PUSH2 0x28E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xC7 0xD6 ADDMOD LOG0 0xFB 0x21 0xC4 0xE9 CREATE2 0xBD DUP3 POP SWAP14 0xE0 0xDD 0xC1 0xDF DUP6 PUSH1 0x71 SWAP2 DELEGATECALL 0xE PUSH8 0xD6D8CAF3978DED64 PUSH20 0x6F6C634300080D00330000000000000000000000 ","sourceMap":"344:2581:11:-:0;;;438:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;499:4;505:6;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;2311:5:12;2303;:13;;;;;;;;;;;;:::i;:::-;;2336:7;2326;:17;;;;;;;;;;;;:::i;:::-;;2237:113;;438:87:11;;344:2581;;640:96:5;693:7;719:10;712:17;;640:96;:::o;2426:187:0:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;344:2581:11:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;344:2581:11:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3038":{"entryPoint":5967,"id":3038,"parameterSlots":3,"returnSlots":0},"@_approve_2906":{"entryPoint":3081,"id":2906,"parameterSlots":2,"returnSlots":0},"@_baseURI_2388":{"entryPoint":5625,"id":2388,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_3027":{"entryPoint":5962,"id":3027,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3016":{"entryPoint":5972,"id":3016,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":4847,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_2606":{"entryPoint":5854,"id":2606,"parameterSlots":1,"returnSlots":1},"@_hasOwnToken_2151":{"entryPoint":4635,"id":2151,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2639":{"entryPoint":3617,"id":2639,"parameterSlots":2,"returnSlots":1},"@_isTokenActive_2170":{"entryPoint":4484,"id":2170,"parameterSlots":1,"returnSlots":1},"@_mint_2026":{"entryPoint":3266,"id":2026,"parameterSlots":1,"returnSlots":0},"@_msgSender_615":{"entryPoint":3073,"id":615,"parameterSlots":0,"returnSlots":1},"@_requireMinted_2952":{"entryPoint":2998,"id":2952,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_2588":{"entryPoint":5533,"id":2588,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2938":{"entryPoint":5169,"id":2938,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":4973,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_2110":{"entryPoint":3766,"id":2110,"parameterSlots":3,"returnSlots":0},"@approve_2430":{"entryPoint":1280,"id":2430,"parameterSlots":2,"returnSlots":0},"@balanceOf_1925":{"entryPoint":1900,"id":1925,"parameterSlots":1,"returnSlots":1},"@getApproved_2448":{"entryPoint":1210,"id":2448,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2483":{"entryPoint":2613,"id":2483,"parameterSlots":2,"returnSlots":1},"@log10_1593":{"entryPoint":6358,"id":1593,"parameterSlots":1,"returnSlots":1},"@mint_1977":{"entryPoint":1559,"id":1977,"parameterSlots":0,"returnSlots":0},"@name_2330":{"entryPoint":1064,"id":2330,"parameterSlots":0,"returnSlots":1},"@ownerOf_1968":{"entryPoint":1705,"id":1968,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":2202,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2182,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2529":{"entryPoint":1673,"id":2529,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2559":{"entryPoint":2411,"id":2559,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2465":{"entryPoint":2389,"id":2465,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2268":{"entryPoint":838,"id":2268,"parameterSlots":1,"returnSlots":1},"@supportsInterface_877":{"entryPoint":2892,"id":877,"parameterSlots":1,"returnSlots":1},"@symbol_2340":{"entryPoint":2243,"id":2340,"parameterSlots":0,"returnSlots":1},"@toString_684":{"entryPoint":5648,"id":684,"parameterSlots":1,"returnSlots":1},"@tokenURI_2379":{"entryPoint":2509,"id":2379,"parameterSlots":1,"returnSlots":1},"@transferFrom_2510":{"entryPoint":1577,"id":2510,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":2761,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":7865,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":7305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":7583,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":6784,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":10465,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":7931,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":7124,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8108,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7390,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7977,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7604,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7326,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":10486,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7145,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":7240,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6862,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":10332,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":7000,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":10190,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":9135,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":9497,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":9351,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":9643,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":10044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":8893,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack":{"entryPoint":8493,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":9243,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":9936,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":8747,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":8347,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack":{"entryPoint":8639,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":7518,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9020,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":7255,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10389,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6877,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7057,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10225,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9170,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9532,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9386,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9678,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10079,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8928,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8528,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9278,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9971,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8782,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8382,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8674,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7533,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7774,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6697,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7801,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":10304,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":6904,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":10315,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6915,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8960,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9809,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9757,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":7222,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6850,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":6717,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":7190,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":7091,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":7850,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":6932,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8219,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7725,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":9710,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":10257,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":8172,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7678,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7668,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":7673,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6712,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6707,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":6983,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":10111,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":9056,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":9418,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":9310,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":9564,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":10003,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8814,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304":{"entryPoint":8414,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":9202,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":9895,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8706,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":8268,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b":{"entryPoint":8560,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":7282,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7560,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":6761,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":7101,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:27842:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"378:105:13","statements":[{"nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:13"},"nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:13"},"nodeType":"YulFunctionCall","src":"589:12:13"},"nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:13"},"nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:13"},"nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:13"},"nodeType":"YulFunctionCall","src":"544:42:13"},"nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nodeType":"YulBlock","src":"666:86:13","statements":[{"nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:13"},"nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:13"},"nodeType":"YulFunctionCall","src":"714:32:13"},"nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:13"},"nodeType":"YulFunctionCall","src":"871:79:13"},"nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:13"},"nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:13"},"nodeType":"YulFunctionCall","src":"836:32:13"},"nodeType":"YulIf","src":"833:119:13"},{"nodeType":"YulBlock","src":"962:116:13","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:13"},"nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:13"},"nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nodeType":"YulBlock","src":"1133:48:13","statements":[{"nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:13"},"nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:13"},"nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:13"},"nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:13"},"nodeType":"YulFunctionCall","src":"1256:34:13"},"nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nodeType":"YulBlock","src":"1394:118:13","statements":[{"nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:13"},"nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:13"},"nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:13"},"nodeType":"YulFunctionCall","src":"1440:65:13"},"nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nodeType":"YulBlock","src":"1577:40:13","statements":[{"nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:13"},"nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:13"},"nodeType":"YulFunctionCall","src":"1729:19:13"},"nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:13"},"nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nodeType":"YulBlock","src":"1847:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:13"},"nodeType":"YulFunctionCall","src":"1947:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:13"},"nodeType":"YulFunctionCall","src":"1966:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:13"},"nodeType":"YulFunctionCall","src":"1960:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:13"},"nodeType":"YulFunctionCall","src":"1940:39:13"},"nodeType":"YulExpressionStatement","src":"1940:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:13"},"nodeType":"YulFunctionCall","src":"1884:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:13","statements":[{"nodeType":"YulAssignment","src":"1900:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:13"},"nodeType":"YulFunctionCall","src":"1905:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:13","statements":[]},"src":"1876:113:13"},{"body":{"nodeType":"YulBlock","src":"2023:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:13"},"nodeType":"YulFunctionCall","src":"2069:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:13"},"nodeType":"YulFunctionCall","src":"2062:27:13"},"nodeType":"YulExpressionStatement","src":"2062:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:13"},"nodeType":"YulFunctionCall","src":"2001:13:13"},"nodeType":"YulIf","src":"1998:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:13","type":""}],"src":"1798:307:13"},{"body":{"nodeType":"YulBlock","src":"2159:54:13","statements":[{"nodeType":"YulAssignment","src":"2169:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:13"},"nodeType":"YulFunctionCall","src":"2183:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:13"},"nodeType":"YulFunctionCall","src":"2199:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:13"},"nodeType":"YulFunctionCall","src":"2179:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:13","type":""}],"src":"2111:102:13"},{"body":{"nodeType":"YulBlock","src":"2311:272:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:13"},"nodeType":"YulFunctionCall","src":"2335:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:13"},"nodeType":"YulFunctionCall","src":"2390:71:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:13"},"nodeType":"YulFunctionCall","src":"2492:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:13"},"nodeType":"YulFunctionCall","src":"2470:52:13"},"nodeType":"YulExpressionStatement","src":"2470:52:13"},{"nodeType":"YulAssignment","src":"2531:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:13"},"nodeType":"YulFunctionCall","src":"2547:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:13"},"nodeType":"YulFunctionCall","src":"2538:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:13","type":""}],"src":"2219:364:13"},{"body":{"nodeType":"YulBlock","src":"2707:195:13","statements":[{"nodeType":"YulAssignment","src":"2717:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:13"},"nodeType":"YulFunctionCall","src":"2725:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:13"},"nodeType":"YulFunctionCall","src":"2760:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:13"},"nodeType":"YulFunctionCall","src":"2779:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:13"},"nodeType":"YulFunctionCall","src":"2753:47:13"},"nodeType":"YulExpressionStatement","src":"2753:47:13"},{"nodeType":"YulAssignment","src":"2809:86:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:13"},"nodeType":"YulFunctionCall","src":"2817:78:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:13","type":""}],"src":"2589:313:13"},{"body":{"nodeType":"YulBlock","src":"2953:32:13","statements":[{"nodeType":"YulAssignment","src":"2963:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:13"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:13","type":""}],"src":"2908:77:13"},{"body":{"nodeType":"YulBlock","src":"3034:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:13"},"nodeType":"YulFunctionCall","src":"3093:12:13"},"nodeType":"YulExpressionStatement","src":"3093:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:13"},"nodeType":"YulFunctionCall","src":"3064:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:13"},"nodeType":"YulFunctionCall","src":"3054:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:13"},"nodeType":"YulFunctionCall","src":"3047:43:13"},"nodeType":"YulIf","src":"3044:63:13"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:13","type":""}],"src":"2991:122:13"},{"body":{"nodeType":"YulBlock","src":"3171:87:13","statements":[{"nodeType":"YulAssignment","src":"3181:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:13"},"nodeType":"YulFunctionCall","src":"3190:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:13"},"nodeType":"YulFunctionCall","src":"3219:33:13"},"nodeType":"YulExpressionStatement","src":"3219:33:13"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:13","type":""}],"src":"3119:139:13"},{"body":{"nodeType":"YulBlock","src":"3330:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:13"},"nodeType":"YulFunctionCall","src":"3378:79:13"},"nodeType":"YulExpressionStatement","src":"3378:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:13"},"nodeType":"YulFunctionCall","src":"3347:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:13"},"nodeType":"YulFunctionCall","src":"3343:32:13"},"nodeType":"YulIf","src":"3340:119:13"},{"nodeType":"YulBlock","src":"3469:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:13","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:13"},"nodeType":"YulFunctionCall","src":"3544:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:13"},"nodeType":"YulFunctionCall","src":"3523:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:13","type":""}],"src":"3264:329:13"},{"body":{"nodeType":"YulBlock","src":"3644:81:13","statements":[{"nodeType":"YulAssignment","src":"3654:65:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:13"},"nodeType":"YulFunctionCall","src":"3665:54:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:13"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:13","type":""}],"src":"3599:126:13"},{"body":{"nodeType":"YulBlock","src":"3776:51:13","statements":[{"nodeType":"YulAssignment","src":"3786:35:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:13"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:13"},"nodeType":"YulFunctionCall","src":"3797:24:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:13"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:13","type":""}],"src":"3731:96:13"},{"body":{"nodeType":"YulBlock","src":"3898:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:13"},"nodeType":"YulFunctionCall","src":"3920:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:13"},"nodeType":"YulFunctionCall","src":"3908:37:13"},"nodeType":"YulExpressionStatement","src":"3908:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:13","type":""}],"src":"3833:118:13"},{"body":{"nodeType":"YulBlock","src":"4055:124:13","statements":[{"nodeType":"YulAssignment","src":"4065:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:13"},"nodeType":"YulFunctionCall","src":"4073:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:13"},"nodeType":"YulFunctionCall","src":"4154:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:13"},"nodeType":"YulFunctionCall","src":"4101:71:13"},"nodeType":"YulExpressionStatement","src":"4101:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:13","type":""}],"src":"3957:222:13"},{"body":{"nodeType":"YulBlock","src":"4228:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:13"},"nodeType":"YulFunctionCall","src":"4287:12:13"},"nodeType":"YulExpressionStatement","src":"4287:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:13"},"nodeType":"YulFunctionCall","src":"4258:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:13"},"nodeType":"YulFunctionCall","src":"4248:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:13"},"nodeType":"YulFunctionCall","src":"4241:43:13"},"nodeType":"YulIf","src":"4238:63:13"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:13","type":""}],"src":"4185:122:13"},{"body":{"nodeType":"YulBlock","src":"4365:87:13","statements":[{"nodeType":"YulAssignment","src":"4375:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:13"},"nodeType":"YulFunctionCall","src":"4384:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:13"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:13"},"nodeType":"YulFunctionCall","src":"4413:33:13"},"nodeType":"YulExpressionStatement","src":"4413:33:13"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:13","type":""}],"src":"4313:139:13"},{"body":{"nodeType":"YulBlock","src":"4541:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:13"},"nodeType":"YulFunctionCall","src":"4589:79:13"},"nodeType":"YulExpressionStatement","src":"4589:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:13"},"nodeType":"YulFunctionCall","src":"4558:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:13"},"nodeType":"YulFunctionCall","src":"4554:32:13"},"nodeType":"YulIf","src":"4551:119:13"},{"nodeType":"YulBlock","src":"4680:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:13"},"nodeType":"YulFunctionCall","src":"4755:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:13"},"nodeType":"YulFunctionCall","src":"4734:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:13"}]}]},{"nodeType":"YulBlock","src":"4807:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:13"},"nodeType":"YulFunctionCall","src":"4883:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:13"},"nodeType":"YulFunctionCall","src":"4862:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:13","type":""}],"src":"4458:474:13"},{"body":{"nodeType":"YulBlock","src":"5038:519:13","statements":[{"body":{"nodeType":"YulBlock","src":"5084:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5086:77:13"},"nodeType":"YulFunctionCall","src":"5086:79:13"},"nodeType":"YulExpressionStatement","src":"5086:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5059:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5068:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5055:3:13"},"nodeType":"YulFunctionCall","src":"5055:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5080:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5051:3:13"},"nodeType":"YulFunctionCall","src":"5051:32:13"},"nodeType":"YulIf","src":"5048:119:13"},{"nodeType":"YulBlock","src":"5177:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5192:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5206:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5196:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5221:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5267:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:13"},"nodeType":"YulFunctionCall","src":"5252:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5231:20:13"},"nodeType":"YulFunctionCall","src":"5231:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5221:6:13"}]}]},{"nodeType":"YulBlock","src":"5304:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5319:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5333:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5323:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5349:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5384:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5395:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:13"},"nodeType":"YulFunctionCall","src":"5380:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5404:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5359:20:13"},"nodeType":"YulFunctionCall","src":"5359:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5349:6:13"}]}]},{"nodeType":"YulBlock","src":"5432:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5447:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5461:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5451:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5477:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5512:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5523:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5508:3:13"},"nodeType":"YulFunctionCall","src":"5508:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5532:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5487:20:13"},"nodeType":"YulFunctionCall","src":"5487:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5477:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5003:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5015:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5023:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5031:6:13","type":""}],"src":"4938:619:13"},{"body":{"nodeType":"YulBlock","src":"5629:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"5675:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5677:77:13"},"nodeType":"YulFunctionCall","src":"5677:79:13"},"nodeType":"YulExpressionStatement","src":"5677:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5650:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5646:3:13"},"nodeType":"YulFunctionCall","src":"5646:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5671:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5642:3:13"},"nodeType":"YulFunctionCall","src":"5642:32:13"},"nodeType":"YulIf","src":"5639:119:13"},{"nodeType":"YulBlock","src":"5768:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5783:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5797:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5787:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5812:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5847:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5858:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5843:3:13"},"nodeType":"YulFunctionCall","src":"5843:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5867:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5822:20:13"},"nodeType":"YulFunctionCall","src":"5822:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5812:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5599:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5610:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5622:6:13","type":""}],"src":"5563:329:13"},{"body":{"nodeType":"YulBlock","src":"5963:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5980:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6003:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5985:17:13"},"nodeType":"YulFunctionCall","src":"5985:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5973:6:13"},"nodeType":"YulFunctionCall","src":"5973:37:13"},"nodeType":"YulExpressionStatement","src":"5973:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5951:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5958:3:13","type":""}],"src":"5898:118:13"},{"body":{"nodeType":"YulBlock","src":"6120:124:13","statements":[{"nodeType":"YulAssignment","src":"6130:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6142:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6153:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:13"},"nodeType":"YulFunctionCall","src":"6138:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6130:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6210:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6223:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6234:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6219:3:13"},"nodeType":"YulFunctionCall","src":"6219:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6166:43:13"},"nodeType":"YulFunctionCall","src":"6166:71:13"},"nodeType":"YulExpressionStatement","src":"6166:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6092:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6104:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6115:4:13","type":""}],"src":"6022:222:13"},{"body":{"nodeType":"YulBlock","src":"6290:76:13","statements":[{"body":{"nodeType":"YulBlock","src":"6344:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6353:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6356:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6346:6:13"},"nodeType":"YulFunctionCall","src":"6346:12:13"},"nodeType":"YulExpressionStatement","src":"6346:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6313:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6335:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6320:14:13"},"nodeType":"YulFunctionCall","src":"6320:21:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6310:2:13"},"nodeType":"YulFunctionCall","src":"6310:32:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6303:6:13"},"nodeType":"YulFunctionCall","src":"6303:40:13"},"nodeType":"YulIf","src":"6300:60:13"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6283:5:13","type":""}],"src":"6250:116:13"},{"body":{"nodeType":"YulBlock","src":"6421:84:13","statements":[{"nodeType":"YulAssignment","src":"6431:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6453:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6440:12:13"},"nodeType":"YulFunctionCall","src":"6440:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6431:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6493:5:13"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6469:23:13"},"nodeType":"YulFunctionCall","src":"6469:30:13"},"nodeType":"YulExpressionStatement","src":"6469:30:13"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6399:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"6407:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6415:5:13","type":""}],"src":"6372:133:13"},{"body":{"nodeType":"YulBlock","src":"6591:388:13","statements":[{"body":{"nodeType":"YulBlock","src":"6637:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6639:77:13"},"nodeType":"YulFunctionCall","src":"6639:79:13"},"nodeType":"YulExpressionStatement","src":"6639:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6612:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"6621:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6608:3:13"},"nodeType":"YulFunctionCall","src":"6608:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"6633:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6604:3:13"},"nodeType":"YulFunctionCall","src":"6604:32:13"},"nodeType":"YulIf","src":"6601:119:13"},{"nodeType":"YulBlock","src":"6730:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6745:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6759:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6749:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6774:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6820:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:13"},"nodeType":"YulFunctionCall","src":"6805:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6829:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6784:20:13"},"nodeType":"YulFunctionCall","src":"6784:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6774:6:13"}]}]},{"nodeType":"YulBlock","src":"6857:115:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6872:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6886:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6876:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6902:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6934:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6945:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6930:3:13"},"nodeType":"YulFunctionCall","src":"6930:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6954:7:13"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6912:17:13"},"nodeType":"YulFunctionCall","src":"6912:50:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6902:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6553:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6564:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6576:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6584:6:13","type":""}],"src":"6511:468:13"},{"body":{"nodeType":"YulBlock","src":"7074:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7091:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7094:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7084:6:13"},"nodeType":"YulFunctionCall","src":"7084:12:13"},"nodeType":"YulExpressionStatement","src":"7084:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6985:117:13"},{"body":{"nodeType":"YulBlock","src":"7197:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7214:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7217:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7207:6:13"},"nodeType":"YulFunctionCall","src":"7207:12:13"},"nodeType":"YulExpressionStatement","src":"7207:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7108:117:13"},{"body":{"nodeType":"YulBlock","src":"7259:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7276:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7279:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:13"},"nodeType":"YulFunctionCall","src":"7269:88:13"},"nodeType":"YulExpressionStatement","src":"7269:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7376:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7366:6:13"},"nodeType":"YulFunctionCall","src":"7366:15:13"},"nodeType":"YulExpressionStatement","src":"7366:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7397:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7400:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7390:6:13"},"nodeType":"YulFunctionCall","src":"7390:15:13"},"nodeType":"YulExpressionStatement","src":"7390:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7231:180:13"},{"body":{"nodeType":"YulBlock","src":"7460:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7470:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7492:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7522:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7500:21:13"},"nodeType":"YulFunctionCall","src":"7500:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7488:3:13"},"nodeType":"YulFunctionCall","src":"7488:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7474:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"7639:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7641:16:13"},"nodeType":"YulFunctionCall","src":"7641:18:13"},"nodeType":"YulExpressionStatement","src":"7641:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7582:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"7594:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7579:2:13"},"nodeType":"YulFunctionCall","src":"7579:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7618:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7630:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7615:2:13"},"nodeType":"YulFunctionCall","src":"7615:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7576:2:13"},"nodeType":"YulFunctionCall","src":"7576:62:13"},"nodeType":"YulIf","src":"7573:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7681:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:13"},"nodeType":"YulFunctionCall","src":"7670:22:13"},"nodeType":"YulExpressionStatement","src":"7670:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7446:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"7454:4:13","type":""}],"src":"7417:281:13"},{"body":{"nodeType":"YulBlock","src":"7745:88:13","statements":[{"nodeType":"YulAssignment","src":"7755:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7765:18:13"},"nodeType":"YulFunctionCall","src":"7765:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7755:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7814:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"7822:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7794:19:13"},"nodeType":"YulFunctionCall","src":"7794:33:13"},"nodeType":"YulExpressionStatement","src":"7794:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7729:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7738:6:13","type":""}],"src":"7704:129:13"},{"body":{"nodeType":"YulBlock","src":"7905:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"8010:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8012:16:13"},"nodeType":"YulFunctionCall","src":"8012:18:13"},"nodeType":"YulExpressionStatement","src":"8012:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7982:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"7990:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7979:2:13"},"nodeType":"YulFunctionCall","src":"7979:30:13"},"nodeType":"YulIf","src":"7976:56:13"},{"nodeType":"YulAssignment","src":"8042:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8072:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8050:21:13"},"nodeType":"YulFunctionCall","src":"8050:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8042:4:13"}]},{"nodeType":"YulAssignment","src":"8116:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8128:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"8134:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:13"},"nodeType":"YulFunctionCall","src":"8124:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8116:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7889:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7900:4:13","type":""}],"src":"7839:307:13"},{"body":{"nodeType":"YulBlock","src":"8203:103:13","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8226:3:13"},{"name":"src","nodeType":"YulIdentifier","src":"8231:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8236:6:13"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8213:12:13"},"nodeType":"YulFunctionCall","src":"8213:30:13"},"nodeType":"YulExpressionStatement","src":"8213:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8284:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8289:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8280:3:13"},"nodeType":"YulFunctionCall","src":"8280:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"8298:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8273:6:13"},"nodeType":"YulFunctionCall","src":"8273:27:13"},"nodeType":"YulExpressionStatement","src":"8273:27:13"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8185:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8190:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8195:6:13","type":""}],"src":"8152:154:13"},{"body":{"nodeType":"YulBlock","src":"8395:327:13","statements":[{"nodeType":"YulAssignment","src":"8405:74:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8471:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8430:40:13"},"nodeType":"YulFunctionCall","src":"8430:48:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8414:15:13"},"nodeType":"YulFunctionCall","src":"8414:65:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8405:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8495:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"8502:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8488:6:13"},"nodeType":"YulFunctionCall","src":"8488:21:13"},"nodeType":"YulExpressionStatement","src":"8488:21:13"},{"nodeType":"YulVariableDeclaration","src":"8518:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8533:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"8540:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8529:3:13"},"nodeType":"YulFunctionCall","src":"8529:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8522:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"8583:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8585:77:13"},"nodeType":"YulFunctionCall","src":"8585:79:13"},"nodeType":"YulExpressionStatement","src":"8585:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8564:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8560:3:13"},"nodeType":"YulFunctionCall","src":"8560:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"8578:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8557:2:13"},"nodeType":"YulFunctionCall","src":"8557:25:13"},"nodeType":"YulIf","src":"8554:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8699:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"8704:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8709:6:13"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"8675:23:13"},"nodeType":"YulFunctionCall","src":"8675:41:13"},"nodeType":"YulExpressionStatement","src":"8675:41:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8368:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8373:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8381:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8389:5:13","type":""}],"src":"8312:410:13"},{"body":{"nodeType":"YulBlock","src":"8802:277:13","statements":[{"body":{"nodeType":"YulBlock","src":"8851:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8853:77:13"},"nodeType":"YulFunctionCall","src":"8853:79:13"},"nodeType":"YulExpressionStatement","src":"8853:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8830:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"8838:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8826:3:13"},"nodeType":"YulFunctionCall","src":"8826:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"8845:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8822:3:13"},"nodeType":"YulFunctionCall","src":"8822:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8815:6:13"},"nodeType":"YulFunctionCall","src":"8815:35:13"},"nodeType":"YulIf","src":"8812:122:13"},{"nodeType":"YulVariableDeclaration","src":"8943:34:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8970:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8957:12:13"},"nodeType":"YulFunctionCall","src":"8957:20:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8947:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8986:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9046:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9054:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9042:3:13"},"nodeType":"YulFunctionCall","src":"9042:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"9061:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"9069:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8995:46:13"},"nodeType":"YulFunctionCall","src":"8995:78:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8986:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8780:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8788:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8796:5:13","type":""}],"src":"8741:338:13"},{"body":{"nodeType":"YulBlock","src":"9211:817:13","statements":[{"body":{"nodeType":"YulBlock","src":"9258:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9260:77:13"},"nodeType":"YulFunctionCall","src":"9260:79:13"},"nodeType":"YulExpressionStatement","src":"9260:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9232:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"9241:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9228:3:13"},"nodeType":"YulFunctionCall","src":"9228:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"9253:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9224:3:13"},"nodeType":"YulFunctionCall","src":"9224:33:13"},"nodeType":"YulIf","src":"9221:120:13"},{"nodeType":"YulBlock","src":"9351:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9366:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9380:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9370:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9395:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9430:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9441:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9426:3:13"},"nodeType":"YulFunctionCall","src":"9426:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9450:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9405:20:13"},"nodeType":"YulFunctionCall","src":"9405:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9395:6:13"}]}]},{"nodeType":"YulBlock","src":"9478:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9493:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9507:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9497:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9523:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9558:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9554:3:13"},"nodeType":"YulFunctionCall","src":"9554:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9578:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9533:20:13"},"nodeType":"YulFunctionCall","src":"9533:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9523:6:13"}]}]},{"nodeType":"YulBlock","src":"9606:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9621:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9635:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9625:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9651:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9686:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9697:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9682:3:13"},"nodeType":"YulFunctionCall","src":"9682:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9706:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9661:20:13"},"nodeType":"YulFunctionCall","src":"9661:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9651:6:13"}]}]},{"nodeType":"YulBlock","src":"9734:287:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9749:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9780:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"9791:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9776:3:13"},"nodeType":"YulFunctionCall","src":"9776:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9763:12:13"},"nodeType":"YulFunctionCall","src":"9763:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9753:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"9842:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9844:77:13"},"nodeType":"YulFunctionCall","src":"9844:79:13"},"nodeType":"YulExpressionStatement","src":"9844:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9814:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9822:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9811:2:13"},"nodeType":"YulFunctionCall","src":"9811:30:13"},"nodeType":"YulIf","src":"9808:117:13"},{"nodeType":"YulAssignment","src":"9939:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9994:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:13"},"nodeType":"YulFunctionCall","src":"9979:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10003:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9949:29:13"},"nodeType":"YulFunctionCall","src":"9949:62:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9939:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9157:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9168:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9180:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9188:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9196:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9204:6:13","type":""}],"src":"9085:943:13"},{"body":{"nodeType":"YulBlock","src":"10117:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"10163:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10165:77:13"},"nodeType":"YulFunctionCall","src":"10165:79:13"},"nodeType":"YulExpressionStatement","src":"10165:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10138:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"10147:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10134:3:13"},"nodeType":"YulFunctionCall","src":"10134:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"10159:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10130:3:13"},"nodeType":"YulFunctionCall","src":"10130:32:13"},"nodeType":"YulIf","src":"10127:119:13"},{"nodeType":"YulBlock","src":"10256:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10271:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10285:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10275:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10300:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10335:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10346:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10331:3:13"},"nodeType":"YulFunctionCall","src":"10331:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10355:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10310:20:13"},"nodeType":"YulFunctionCall","src":"10310:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10300:6:13"}]}]},{"nodeType":"YulBlock","src":"10383:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10398:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10412:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10402:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10428:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10463:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10474:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:13"},"nodeType":"YulFunctionCall","src":"10459:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10483:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10438:20:13"},"nodeType":"YulFunctionCall","src":"10438:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10428:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10079:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10090:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10102:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10110:6:13","type":""}],"src":"10034:474:13"},{"body":{"nodeType":"YulBlock","src":"10542:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10559:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10562:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10552:6:13"},"nodeType":"YulFunctionCall","src":"10552:88:13"},"nodeType":"YulExpressionStatement","src":"10552:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10656:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10659:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10649:6:13"},"nodeType":"YulFunctionCall","src":"10649:15:13"},"nodeType":"YulExpressionStatement","src":"10649:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10680:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10683:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10673:6:13"},"nodeType":"YulFunctionCall","src":"10673:15:13"},"nodeType":"YulExpressionStatement","src":"10673:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10514:180:13"},{"body":{"nodeType":"YulBlock","src":"10751:269:13","statements":[{"nodeType":"YulAssignment","src":"10761:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10775:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10781:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10771:3:13"},"nodeType":"YulFunctionCall","src":"10771:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10761:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"10792:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10822:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10828:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10818:3:13"},"nodeType":"YulFunctionCall","src":"10818:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10796:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"10869:51:13","statements":[{"nodeType":"YulAssignment","src":"10883:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10897:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10905:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10893:3:13"},"nodeType":"YulFunctionCall","src":"10893:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10883:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10849:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10842:6:13"},"nodeType":"YulFunctionCall","src":"10842:26:13"},"nodeType":"YulIf","src":"10839:81:13"},{"body":{"nodeType":"YulBlock","src":"10972:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10986:16:13"},"nodeType":"YulFunctionCall","src":"10986:18:13"},"nodeType":"YulExpressionStatement","src":"10986:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10936:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10959:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10967:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10956:2:13"},"nodeType":"YulFunctionCall","src":"10956:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10933:2:13"},"nodeType":"YulFunctionCall","src":"10933:38:13"},"nodeType":"YulIf","src":"10930:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10735:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10744:6:13","type":""}],"src":"10700:320:13"},{"body":{"nodeType":"YulBlock","src":"11132:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11154:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11162:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11150:3:13"},"nodeType":"YulFunctionCall","src":"11150:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11166:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11143:6:13"},"nodeType":"YulFunctionCall","src":"11143:58:13"},"nodeType":"YulExpressionStatement","src":"11143:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11222:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11230:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:13"},"nodeType":"YulFunctionCall","src":"11218:15:13"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11235:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:13"},"nodeType":"YulFunctionCall","src":"11211:28:13"},"nodeType":"YulExpressionStatement","src":"11211:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11124:6:13","type":""}],"src":"11026:220:13"},{"body":{"nodeType":"YulBlock","src":"11398:220:13","statements":[{"nodeType":"YulAssignment","src":"11408:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11474:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11415:58:13"},"nodeType":"YulFunctionCall","src":"11415:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11408:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11580:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11491:88:13"},"nodeType":"YulFunctionCall","src":"11491:93:13"},"nodeType":"YulExpressionStatement","src":"11491:93:13"},{"nodeType":"YulAssignment","src":"11593:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11604:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11609:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11600:3:13"},"nodeType":"YulFunctionCall","src":"11600:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11593:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11386:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11394:3:13","type":""}],"src":"11252:366:13"},{"body":{"nodeType":"YulBlock","src":"11795:248:13","statements":[{"nodeType":"YulAssignment","src":"11805:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11817:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11813:3:13"},"nodeType":"YulFunctionCall","src":"11813:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11805:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11863:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:13"},"nodeType":"YulFunctionCall","src":"11848:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11871:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"11877:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11867:3:13"},"nodeType":"YulFunctionCall","src":"11867:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11841:6:13"},"nodeType":"YulFunctionCall","src":"11841:47:13"},"nodeType":"YulExpressionStatement","src":"11841:47:13"},{"nodeType":"YulAssignment","src":"11897:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12031:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11905:124:13"},"nodeType":"YulFunctionCall","src":"11905:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11897:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11775:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11790:4:13","type":""}],"src":"11624:419:13"},{"body":{"nodeType":"YulBlock","src":"12155:143:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12177:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12185:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:13"},"nodeType":"YulFunctionCall","src":"12173:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12189:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12166:6:13"},"nodeType":"YulFunctionCall","src":"12166:58:13"},"nodeType":"YulExpressionStatement","src":"12166:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12245:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12253:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12241:3:13"},"nodeType":"YulFunctionCall","src":"12241:15:13"},{"hexValue":"6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12258:32:13","type":"","value":"ken owner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12234:6:13"},"nodeType":"YulFunctionCall","src":"12234:57:13"},"nodeType":"YulExpressionStatement","src":"12234:57:13"}]},"name":"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12147:6:13","type":""}],"src":"12049:249:13"},{"body":{"nodeType":"YulBlock","src":"12450:220:13","statements":[{"nodeType":"YulAssignment","src":"12460:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12526:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12531:2:13","type":"","value":"62"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12467:58:13"},"nodeType":"YulFunctionCall","src":"12467:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12460:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12632:3:13"}],"functionName":{"name":"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","nodeType":"YulIdentifier","src":"12543:88:13"},"nodeType":"YulFunctionCall","src":"12543:93:13"},"nodeType":"YulExpressionStatement","src":"12543:93:13"},{"nodeType":"YulAssignment","src":"12645:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12656:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12661:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12652:3:13"},"nodeType":"YulFunctionCall","src":"12652:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12645:3:13"}]}]},"name":"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12438:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12446:3:13","type":""}],"src":"12304:366:13"},{"body":{"nodeType":"YulBlock","src":"12847:248:13","statements":[{"nodeType":"YulAssignment","src":"12857:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12869:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12880:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12865:3:13"},"nodeType":"YulFunctionCall","src":"12865:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12857:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12904:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12915:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12900:3:13"},"nodeType":"YulFunctionCall","src":"12900:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12923:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"12929:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12919:3:13"},"nodeType":"YulFunctionCall","src":"12919:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12893:6:13"},"nodeType":"YulFunctionCall","src":"12893:47:13"},"nodeType":"YulExpressionStatement","src":"12893:47:13"},{"nodeType":"YulAssignment","src":"12949:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13083:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12957:124:13"},"nodeType":"YulFunctionCall","src":"12957:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12949:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12827:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12842:4:13","type":""}],"src":"12676:419:13"},{"body":{"nodeType":"YulBlock","src":"13207:127:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13229:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13237:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13225:3:13"},"nodeType":"YulFunctionCall","src":"13225:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13241:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13218:6:13"},"nodeType":"YulFunctionCall","src":"13218:58:13"},"nodeType":"YulExpressionStatement","src":"13218:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13297:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13305:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13293:3:13"},"nodeType":"YulFunctionCall","src":"13293:15:13"},{"hexValue":"72206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13310:16:13","type":"","value":"r nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13286:6:13"},"nodeType":"YulFunctionCall","src":"13286:41:13"},"nodeType":"YulExpressionStatement","src":"13286:41:13"}]},"name":"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13199:6:13","type":""}],"src":"13101:233:13"},{"body":{"nodeType":"YulBlock","src":"13486:220:13","statements":[{"nodeType":"YulAssignment","src":"13496:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13562:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13567:2:13","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13503:58:13"},"nodeType":"YulFunctionCall","src":"13503:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13496:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13668:3:13"}],"functionName":{"name":"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","nodeType":"YulIdentifier","src":"13579:88:13"},"nodeType":"YulFunctionCall","src":"13579:93:13"},"nodeType":"YulExpressionStatement","src":"13579:93:13"},{"nodeType":"YulAssignment","src":"13681:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13692:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13697:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13688:3:13"},"nodeType":"YulFunctionCall","src":"13688:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13681:3:13"}]}]},"name":"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13474:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13482:3:13","type":""}],"src":"13340:366:13"},{"body":{"nodeType":"YulBlock","src":"13883:248:13","statements":[{"nodeType":"YulAssignment","src":"13893:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13905:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13916:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13901:3:13"},"nodeType":"YulFunctionCall","src":"13901:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13893:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13940:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13951:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13936:3:13"},"nodeType":"YulFunctionCall","src":"13936:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13959:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"13965:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13955:3:13"},"nodeType":"YulFunctionCall","src":"13955:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13929:6:13"},"nodeType":"YulFunctionCall","src":"13929:47:13"},"nodeType":"YulExpressionStatement","src":"13929:47:13"},{"nodeType":"YulAssignment","src":"13985:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14119:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13993:124:13"},"nodeType":"YulFunctionCall","src":"13993:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13985:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13863:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13878:4:13","type":""}],"src":"13712:419:13"},{"body":{"nodeType":"YulBlock","src":"14243:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14265:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"14273:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14261:3:13"},"nodeType":"YulFunctionCall","src":"14261:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14277:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14254:6:13"},"nodeType":"YulFunctionCall","src":"14254:50:13"},"nodeType":"YulExpressionStatement","src":"14254:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14235:6:13","type":""}],"src":"14137:174:13"},{"body":{"nodeType":"YulBlock","src":"14463:220:13","statements":[{"nodeType":"YulAssignment","src":"14473:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14539:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14544:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14480:58:13"},"nodeType":"YulFunctionCall","src":"14480:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14473:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14645:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14556:88:13"},"nodeType":"YulFunctionCall","src":"14556:93:13"},"nodeType":"YulExpressionStatement","src":"14556:93:13"},{"nodeType":"YulAssignment","src":"14658:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14669:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14674:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14665:3:13"},"nodeType":"YulFunctionCall","src":"14665:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14658:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14451:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14459:3:13","type":""}],"src":"14317:366:13"},{"body":{"nodeType":"YulBlock","src":"14860:248:13","statements":[{"nodeType":"YulAssignment","src":"14870:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14882:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14893:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14878:3:13"},"nodeType":"YulFunctionCall","src":"14878:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14870:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14917:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14928:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14913:3:13"},"nodeType":"YulFunctionCall","src":"14913:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14936:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"14942:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14932:3:13"},"nodeType":"YulFunctionCall","src":"14932:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14906:6:13"},"nodeType":"YulFunctionCall","src":"14906:47:13"},"nodeType":"YulExpressionStatement","src":"14906:47:13"},{"nodeType":"YulAssignment","src":"14962:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15096:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14970:124:13"},"nodeType":"YulFunctionCall","src":"14970:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14962:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14840:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14855:4:13","type":""}],"src":"14689:419:13"},{"body":{"nodeType":"YulBlock","src":"15220:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15242:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15250:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15238:3:13"},"nodeType":"YulFunctionCall","src":"15238:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15254:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15231:6:13"},"nodeType":"YulFunctionCall","src":"15231:58:13"},"nodeType":"YulExpressionStatement","src":"15231:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15310:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15318:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15306:3:13"},"nodeType":"YulFunctionCall","src":"15306:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15323:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15299:6:13"},"nodeType":"YulFunctionCall","src":"15299:36:13"},"nodeType":"YulExpressionStatement","src":"15299:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15212:6:13","type":""}],"src":"15114:228:13"},{"body":{"nodeType":"YulBlock","src":"15494:220:13","statements":[{"nodeType":"YulAssignment","src":"15504:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15570:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15575:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15511:58:13"},"nodeType":"YulFunctionCall","src":"15511:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15504:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15676:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15587:88:13"},"nodeType":"YulFunctionCall","src":"15587:93:13"},"nodeType":"YulExpressionStatement","src":"15587:93:13"},{"nodeType":"YulAssignment","src":"15689:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15700:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15705:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15696:3:13"},"nodeType":"YulFunctionCall","src":"15696:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15689:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15482:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15490:3:13","type":""}],"src":"15348:366:13"},{"body":{"nodeType":"YulBlock","src":"15891:248:13","statements":[{"nodeType":"YulAssignment","src":"15901:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15913:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15924:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15909:3:13"},"nodeType":"YulFunctionCall","src":"15909:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15901:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15948:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15959:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15944:3:13"},"nodeType":"YulFunctionCall","src":"15944:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15967:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"15973:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15963:3:13"},"nodeType":"YulFunctionCall","src":"15963:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15937:6:13"},"nodeType":"YulFunctionCall","src":"15937:47:13"},"nodeType":"YulExpressionStatement","src":"15937:47:13"},{"nodeType":"YulAssignment","src":"15993:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16127:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16001:124:13"},"nodeType":"YulFunctionCall","src":"16001:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15993:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15871:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15886:4:13","type":""}],"src":"15720:419:13"},{"body":{"nodeType":"YulBlock","src":"16259:34:13","statements":[{"nodeType":"YulAssignment","src":"16269:18:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"16284:3:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16269:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16231:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"16236:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16247:11:13","type":""}],"src":"16145:148:13"},{"body":{"nodeType":"YulBlock","src":"16409:267:13","statements":[{"nodeType":"YulVariableDeclaration","src":"16419:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16466:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16433:32:13"},"nodeType":"YulFunctionCall","src":"16433:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16423:6:13","type":""}]},{"nodeType":"YulAssignment","src":"16481:96:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16565:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16570:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16488:76:13"},"nodeType":"YulFunctionCall","src":"16488:89:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16481:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16612:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"16619:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16608:3:13"},"nodeType":"YulFunctionCall","src":"16608:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16586:21:13"},"nodeType":"YulFunctionCall","src":"16586:52:13"},"nodeType":"YulExpressionStatement","src":"16586:52:13"},{"nodeType":"YulAssignment","src":"16647:23:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16658:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16663:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16654:3:13"},"nodeType":"YulFunctionCall","src":"16654:16:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16647:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16390:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16397:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16405:3:13","type":""}],"src":"16299:377:13"},{"body":{"nodeType":"YulBlock","src":"16866:251:13","statements":[{"nodeType":"YulAssignment","src":"16877:102:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16966:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16975:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16884:81:13"},"nodeType":"YulFunctionCall","src":"16884:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16877:3:13"}]},{"nodeType":"YulAssignment","src":"16989:102:13","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17078:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"17087:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16996:81:13"},"nodeType":"YulFunctionCall","src":"16996:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16989:3:13"}]},{"nodeType":"YulAssignment","src":"17101:10:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"17108:3:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17101:3:13"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16837:3:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16843:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16851:6:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16862:3:13","type":""}],"src":"16682:435:13"},{"body":{"nodeType":"YulBlock","src":"17229:119:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17251:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17259:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17247:3:13"},"nodeType":"YulFunctionCall","src":"17247:14:13"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"17263:34:13","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17240:6:13"},"nodeType":"YulFunctionCall","src":"17240:58:13"},"nodeType":"YulExpressionStatement","src":"17240:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17319:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17327:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17315:3:13"},"nodeType":"YulFunctionCall","src":"17315:15:13"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"17332:8:13","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17308:6:13"},"nodeType":"YulFunctionCall","src":"17308:33:13"},"nodeType":"YulExpressionStatement","src":"17308:33:13"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17221:6:13","type":""}],"src":"17123:225:13"},{"body":{"nodeType":"YulBlock","src":"17500:220:13","statements":[{"nodeType":"YulAssignment","src":"17510:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17576:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17581:2:13","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17517:58:13"},"nodeType":"YulFunctionCall","src":"17517:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17510:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17682:3:13"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"17593:88:13"},"nodeType":"YulFunctionCall","src":"17593:93:13"},"nodeType":"YulExpressionStatement","src":"17593:93:13"},{"nodeType":"YulAssignment","src":"17695:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17706:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17711:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17702:3:13"},"nodeType":"YulFunctionCall","src":"17702:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17695:3:13"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17488:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17496:3:13","type":""}],"src":"17354:366:13"},{"body":{"nodeType":"YulBlock","src":"17897:248:13","statements":[{"nodeType":"YulAssignment","src":"17907:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17919:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17930:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17915:3:13"},"nodeType":"YulFunctionCall","src":"17915:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17907:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17954:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17965:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17950:3:13"},"nodeType":"YulFunctionCall","src":"17950:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17973:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"17979:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17969:3:13"},"nodeType":"YulFunctionCall","src":"17969:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17943:6:13"},"nodeType":"YulFunctionCall","src":"17943:47:13"},"nodeType":"YulExpressionStatement","src":"17943:47:13"},{"nodeType":"YulAssignment","src":"17999:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18133:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18007:124:13"},"nodeType":"YulFunctionCall","src":"18007:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17999:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17877:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17892:4:13","type":""}],"src":"17726:419:13"},{"body":{"nodeType":"YulBlock","src":"18257:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18279:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18287:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18275:3:13"},"nodeType":"YulFunctionCall","src":"18275:14:13"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"18291:34:13","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18268:6:13"},"nodeType":"YulFunctionCall","src":"18268:58:13"},"nodeType":"YulExpressionStatement","src":"18268:58:13"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18249:6:13","type":""}],"src":"18151:182:13"},{"body":{"nodeType":"YulBlock","src":"18485:220:13","statements":[{"nodeType":"YulAssignment","src":"18495:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18561:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18566:2:13","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18502:58:13"},"nodeType":"YulFunctionCall","src":"18502:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18495:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18667:3:13"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"18578:88:13"},"nodeType":"YulFunctionCall","src":"18578:93:13"},"nodeType":"YulExpressionStatement","src":"18578:93:13"},{"nodeType":"YulAssignment","src":"18680:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18691:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18696:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18687:3:13"},"nodeType":"YulFunctionCall","src":"18687:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18680:3:13"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18473:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18481:3:13","type":""}],"src":"18339:366:13"},{"body":{"nodeType":"YulBlock","src":"18882:248:13","statements":[{"nodeType":"YulAssignment","src":"18892:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18904:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18915:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18900:3:13"},"nodeType":"YulFunctionCall","src":"18900:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18892:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18939:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18950:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18935:3:13"},"nodeType":"YulFunctionCall","src":"18935:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18958:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"18964:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18954:3:13"},"nodeType":"YulFunctionCall","src":"18954:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18928:6:13"},"nodeType":"YulFunctionCall","src":"18928:47:13"},"nodeType":"YulExpressionStatement","src":"18928:47:13"},{"nodeType":"YulAssignment","src":"18984:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19118:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18992:124:13"},"nodeType":"YulFunctionCall","src":"18992:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18984:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18862:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18877:4:13","type":""}],"src":"18711:419:13"},{"body":{"nodeType":"YulBlock","src":"19242:72:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19264:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"19272:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19260:3:13"},"nodeType":"YulFunctionCall","src":"19260:14:13"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"19276:30:13","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19253:6:13"},"nodeType":"YulFunctionCall","src":"19253:54:13"},"nodeType":"YulExpressionStatement","src":"19253:54:13"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19234:6:13","type":""}],"src":"19136:178:13"},{"body":{"nodeType":"YulBlock","src":"19466:220:13","statements":[{"nodeType":"YulAssignment","src":"19476:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19542:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19547:2:13","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19483:58:13"},"nodeType":"YulFunctionCall","src":"19483:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19476:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19648:3:13"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"19559:88:13"},"nodeType":"YulFunctionCall","src":"19559:93:13"},"nodeType":"YulExpressionStatement","src":"19559:93:13"},{"nodeType":"YulAssignment","src":"19661:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19672:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19677:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19668:3:13"},"nodeType":"YulFunctionCall","src":"19668:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19661:3:13"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19454:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19462:3:13","type":""}],"src":"19320:366:13"},{"body":{"nodeType":"YulBlock","src":"19863:248:13","statements":[{"nodeType":"YulAssignment","src":"19873:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19885:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19896:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19881:3:13"},"nodeType":"YulFunctionCall","src":"19881:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19873:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19920:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19931:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19916:3:13"},"nodeType":"YulFunctionCall","src":"19916:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19939:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"19945:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19935:3:13"},"nodeType":"YulFunctionCall","src":"19935:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19909:6:13"},"nodeType":"YulFunctionCall","src":"19909:47:13"},"nodeType":"YulExpressionStatement","src":"19909:47:13"},{"nodeType":"YulAssignment","src":"19965:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20099:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19973:124:13"},"nodeType":"YulFunctionCall","src":"19973:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19965:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19843:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19858:4:13","type":""}],"src":"19692:419:13"},{"body":{"nodeType":"YulBlock","src":"20223:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20245:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20253:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20241:3:13"},"nodeType":"YulFunctionCall","src":"20241:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"20257:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20234:6:13"},"nodeType":"YulFunctionCall","src":"20234:58:13"},"nodeType":"YulExpressionStatement","src":"20234:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20313:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20321:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20309:3:13"},"nodeType":"YulFunctionCall","src":"20309:15:13"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"20326:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20302:6:13"},"nodeType":"YulFunctionCall","src":"20302:32:13"},"nodeType":"YulExpressionStatement","src":"20302:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20215:6:13","type":""}],"src":"20117:224:13"},{"body":{"nodeType":"YulBlock","src":"20493:220:13","statements":[{"nodeType":"YulAssignment","src":"20503:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20569:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20574:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20510:58:13"},"nodeType":"YulFunctionCall","src":"20510:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20503:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20675:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"20586:88:13"},"nodeType":"YulFunctionCall","src":"20586:93:13"},"nodeType":"YulExpressionStatement","src":"20586:93:13"},{"nodeType":"YulAssignment","src":"20688:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20699:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20704:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20695:3:13"},"nodeType":"YulFunctionCall","src":"20695:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20688:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20481:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20489:3:13","type":""}],"src":"20347:366:13"},{"body":{"nodeType":"YulBlock","src":"20890:248:13","statements":[{"nodeType":"YulAssignment","src":"20900:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20912:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20923:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20908:3:13"},"nodeType":"YulFunctionCall","src":"20908:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20900:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20947:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20958:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20943:3:13"},"nodeType":"YulFunctionCall","src":"20943:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20966:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"20972:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20962:3:13"},"nodeType":"YulFunctionCall","src":"20962:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20936:6:13"},"nodeType":"YulFunctionCall","src":"20936:47:13"},"nodeType":"YulExpressionStatement","src":"20936:47:13"},{"nodeType":"YulAssignment","src":"20992:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21126:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21000:124:13"},"nodeType":"YulFunctionCall","src":"21000:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20992:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20870:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20885:4:13","type":""}],"src":"20719:419:13"},{"body":{"nodeType":"YulBlock","src":"21250:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21272:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"21280:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21268:3:13"},"nodeType":"YulFunctionCall","src":"21268:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"21284:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21261:6:13"},"nodeType":"YulFunctionCall","src":"21261:58:13"},"nodeType":"YulExpressionStatement","src":"21261:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21340:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"21348:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21336:3:13"},"nodeType":"YulFunctionCall","src":"21336:15:13"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"21353:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21329:6:13"},"nodeType":"YulFunctionCall","src":"21329:31:13"},"nodeType":"YulExpressionStatement","src":"21329:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21242:6:13","type":""}],"src":"21144:223:13"},{"body":{"nodeType":"YulBlock","src":"21519:220:13","statements":[{"nodeType":"YulAssignment","src":"21529:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21595:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"21600:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21536:58:13"},"nodeType":"YulFunctionCall","src":"21536:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21529:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21701:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"21612:88:13"},"nodeType":"YulFunctionCall","src":"21612:93:13"},"nodeType":"YulExpressionStatement","src":"21612:93:13"},{"nodeType":"YulAssignment","src":"21714:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21725:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"21730:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21721:3:13"},"nodeType":"YulFunctionCall","src":"21721:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21714:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21507:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21515:3:13","type":""}],"src":"21373:366:13"},{"body":{"nodeType":"YulBlock","src":"21916:248:13","statements":[{"nodeType":"YulAssignment","src":"21926:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21938:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21949:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21934:3:13"},"nodeType":"YulFunctionCall","src":"21934:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21926:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21973:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21984:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21969:3:13"},"nodeType":"YulFunctionCall","src":"21969:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21992:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"21998:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21988:3:13"},"nodeType":"YulFunctionCall","src":"21988:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21962:6:13"},"nodeType":"YulFunctionCall","src":"21962:47:13"},"nodeType":"YulExpressionStatement","src":"21962:47:13"},{"nodeType":"YulAssignment","src":"22018:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22152:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22026:124:13"},"nodeType":"YulFunctionCall","src":"22026:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22018:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21896:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21911:4:13","type":""}],"src":"21745:419:13"},{"body":{"nodeType":"YulBlock","src":"22198:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22215:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22218:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22208:6:13"},"nodeType":"YulFunctionCall","src":"22208:88:13"},"nodeType":"YulExpressionStatement","src":"22208:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22312:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22315:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22305:6:13"},"nodeType":"YulFunctionCall","src":"22305:15:13"},"nodeType":"YulExpressionStatement","src":"22305:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22336:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22339:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22329:6:13"},"nodeType":"YulFunctionCall","src":"22329:15:13"},"nodeType":"YulExpressionStatement","src":"22329:15:13"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"22170:180:13"},{"body":{"nodeType":"YulBlock","src":"22401:146:13","statements":[{"nodeType":"YulAssignment","src":"22411:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22434:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22416:17:13"},"nodeType":"YulFunctionCall","src":"22416:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"22411:1:13"}]},{"nodeType":"YulAssignment","src":"22445:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22468:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22450:17:13"},"nodeType":"YulFunctionCall","src":"22450:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22445:1:13"}]},{"body":{"nodeType":"YulBlock","src":"22492:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22494:16:13"},"nodeType":"YulFunctionCall","src":"22494:18:13"},"nodeType":"YulExpressionStatement","src":"22494:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22486:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"22489:1:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22483:2:13"},"nodeType":"YulFunctionCall","src":"22483:8:13"},"nodeType":"YulIf","src":"22480:34:13"},{"nodeType":"YulAssignment","src":"22524:17:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22536:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"22539:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22532:3:13"},"nodeType":"YulFunctionCall","src":"22532:9:13"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"22524:4:13"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22387:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"22390:1:13","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"22396:4:13","type":""}],"src":"22356:191:13"},{"body":{"nodeType":"YulBlock","src":"22597:261:13","statements":[{"nodeType":"YulAssignment","src":"22607:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22630:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22612:17:13"},"nodeType":"YulFunctionCall","src":"22612:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"22607:1:13"}]},{"nodeType":"YulAssignment","src":"22641:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22664:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22646:17:13"},"nodeType":"YulFunctionCall","src":"22646:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22641:1:13"}]},{"body":{"nodeType":"YulBlock","src":"22804:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22806:16:13"},"nodeType":"YulFunctionCall","src":"22806:18:13"},"nodeType":"YulExpressionStatement","src":"22806:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22725:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22732:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"22800:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22728:3:13"},"nodeType":"YulFunctionCall","src":"22728:74:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22722:2:13"},"nodeType":"YulFunctionCall","src":"22722:81:13"},"nodeType":"YulIf","src":"22719:107:13"},{"nodeType":"YulAssignment","src":"22836:16:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22847:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"22850:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22843:3:13"},"nodeType":"YulFunctionCall","src":"22843:9:13"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22836:3:13"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22584:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"22587:1:13","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22593:3:13","type":""}],"src":"22553:305:13"},{"body":{"nodeType":"YulBlock","src":"22970:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22992:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"23000:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22988:3:13"},"nodeType":"YulFunctionCall","src":"22988:14:13"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"23004:34:13","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22981:6:13"},"nodeType":"YulFunctionCall","src":"22981:58:13"},"nodeType":"YulExpressionStatement","src":"22981:58:13"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22962:6:13","type":""}],"src":"22864:182:13"},{"body":{"nodeType":"YulBlock","src":"23198:220:13","statements":[{"nodeType":"YulAssignment","src":"23208:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23274:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"23279:2:13","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23215:58:13"},"nodeType":"YulFunctionCall","src":"23215:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23208:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23380:3:13"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"23291:88:13"},"nodeType":"YulFunctionCall","src":"23291:93:13"},"nodeType":"YulExpressionStatement","src":"23291:93:13"},{"nodeType":"YulAssignment","src":"23393:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23404:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"23409:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23400:3:13"},"nodeType":"YulFunctionCall","src":"23400:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23393:3:13"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23186:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23194:3:13","type":""}],"src":"23052:366:13"},{"body":{"nodeType":"YulBlock","src":"23595:248:13","statements":[{"nodeType":"YulAssignment","src":"23605:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23617:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23628:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23613:3:13"},"nodeType":"YulFunctionCall","src":"23613:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23605:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23652:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23663:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23648:3:13"},"nodeType":"YulFunctionCall","src":"23648:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23671:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"23677:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23667:3:13"},"nodeType":"YulFunctionCall","src":"23667:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23641:6:13"},"nodeType":"YulFunctionCall","src":"23641:47:13"},"nodeType":"YulExpressionStatement","src":"23641:47:13"},{"nodeType":"YulAssignment","src":"23697:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23831:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23705:124:13"},"nodeType":"YulFunctionCall","src":"23705:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23697:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23575:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23590:4:13","type":""}],"src":"23424:419:13"},{"body":{"nodeType":"YulBlock","src":"23955:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23977:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"23985:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23973:3:13"},"nodeType":"YulFunctionCall","src":"23973:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"23989:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23966:6:13"},"nodeType":"YulFunctionCall","src":"23966:51:13"},"nodeType":"YulExpressionStatement","src":"23966:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23947:6:13","type":""}],"src":"23849:175:13"},{"body":{"nodeType":"YulBlock","src":"24176:220:13","statements":[{"nodeType":"YulAssignment","src":"24186:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24252:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"24257:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24193:58:13"},"nodeType":"YulFunctionCall","src":"24193:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24186:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24358:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"24269:88:13"},"nodeType":"YulFunctionCall","src":"24269:93:13"},"nodeType":"YulExpressionStatement","src":"24269:93:13"},{"nodeType":"YulAssignment","src":"24371:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24382:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"24387:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24378:3:13"},"nodeType":"YulFunctionCall","src":"24378:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24371:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24164:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24172:3:13","type":""}],"src":"24030:366:13"},{"body":{"nodeType":"YulBlock","src":"24573:248:13","statements":[{"nodeType":"YulAssignment","src":"24583:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24595:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"24606:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24591:3:13"},"nodeType":"YulFunctionCall","src":"24591:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24583:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24630:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"24641:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24626:3:13"},"nodeType":"YulFunctionCall","src":"24626:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24649:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"24655:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24645:3:13"},"nodeType":"YulFunctionCall","src":"24645:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24619:6:13"},"nodeType":"YulFunctionCall","src":"24619:47:13"},"nodeType":"YulExpressionStatement","src":"24619:47:13"},{"nodeType":"YulAssignment","src":"24675:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24809:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24683:124:13"},"nodeType":"YulFunctionCall","src":"24683:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24675:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24553:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24568:4:13","type":""}],"src":"24402:419:13"},{"body":{"nodeType":"YulBlock","src":"24933:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24955:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"24963:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24951:3:13"},"nodeType":"YulFunctionCall","src":"24951:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"24967:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24944:6:13"},"nodeType":"YulFunctionCall","src":"24944:58:13"},"nodeType":"YulExpressionStatement","src":"24944:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25023:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"25031:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25019:3:13"},"nodeType":"YulFunctionCall","src":"25019:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"25036:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25012:6:13"},"nodeType":"YulFunctionCall","src":"25012:45:13"},"nodeType":"YulExpressionStatement","src":"25012:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24925:6:13","type":""}],"src":"24827:237:13"},{"body":{"nodeType":"YulBlock","src":"25216:220:13","statements":[{"nodeType":"YulAssignment","src":"25226:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25292:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"25297:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25233:58:13"},"nodeType":"YulFunctionCall","src":"25233:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25226:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25398:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"25309:88:13"},"nodeType":"YulFunctionCall","src":"25309:93:13"},"nodeType":"YulExpressionStatement","src":"25309:93:13"},{"nodeType":"YulAssignment","src":"25411:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25422:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"25427:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25418:3:13"},"nodeType":"YulFunctionCall","src":"25418:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25411:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25204:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25212:3:13","type":""}],"src":"25070:366:13"},{"body":{"nodeType":"YulBlock","src":"25613:248:13","statements":[{"nodeType":"YulAssignment","src":"25623:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25635:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"25646:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25631:3:13"},"nodeType":"YulFunctionCall","src":"25631:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25623:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25670:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"25681:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25666:3:13"},"nodeType":"YulFunctionCall","src":"25666:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25689:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"25695:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25685:3:13"},"nodeType":"YulFunctionCall","src":"25685:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25659:6:13"},"nodeType":"YulFunctionCall","src":"25659:47:13"},"nodeType":"YulExpressionStatement","src":"25659:47:13"},{"nodeType":"YulAssignment","src":"25715:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25849:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25723:124:13"},"nodeType":"YulFunctionCall","src":"25723:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25715:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25593:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25608:4:13","type":""}],"src":"25442:419:13"},{"body":{"nodeType":"YulBlock","src":"25895:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25912:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25915:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25905:6:13"},"nodeType":"YulFunctionCall","src":"25905:88:13"},"nodeType":"YulExpressionStatement","src":"25905:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26009:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"26012:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26002:6:13"},"nodeType":"YulFunctionCall","src":"26002:15:13"},"nodeType":"YulExpressionStatement","src":"26002:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26033:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26036:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26026:6:13"},"nodeType":"YulFunctionCall","src":"26026:15:13"},"nodeType":"YulExpressionStatement","src":"26026:15:13"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"25867:180:13"},{"body":{"nodeType":"YulBlock","src":"26111:40:13","statements":[{"nodeType":"YulAssignment","src":"26122:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26138:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26132:5:13"},"nodeType":"YulFunctionCall","src":"26132:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"26122:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26094:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"26104:6:13","type":""}],"src":"26053:98:13"},{"body":{"nodeType":"YulBlock","src":"26252:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26269:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"26274:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26262:6:13"},"nodeType":"YulFunctionCall","src":"26262:19:13"},"nodeType":"YulExpressionStatement","src":"26262:19:13"},{"nodeType":"YulAssignment","src":"26290:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26309:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"26314:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26305:3:13"},"nodeType":"YulFunctionCall","src":"26305:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26290:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26224:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"26229:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26240:11:13","type":""}],"src":"26157:168:13"},{"body":{"nodeType":"YulBlock","src":"26421:270:13","statements":[{"nodeType":"YulVariableDeclaration","src":"26431:52:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26477:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"26445:31:13"},"nodeType":"YulFunctionCall","src":"26445:38:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26435:6:13","type":""}]},{"nodeType":"YulAssignment","src":"26492:77:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26557:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"26562:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26499:57:13"},"nodeType":"YulFunctionCall","src":"26499:70:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26492:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26604:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"26611:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26600:3:13"},"nodeType":"YulFunctionCall","src":"26600:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"26618:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"26623:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"26578:21:13"},"nodeType":"YulFunctionCall","src":"26578:52:13"},"nodeType":"YulExpressionStatement","src":"26578:52:13"},{"nodeType":"YulAssignment","src":"26639:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26650:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26677:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"26655:21:13"},"nodeType":"YulFunctionCall","src":"26655:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26646:3:13"},"nodeType":"YulFunctionCall","src":"26646:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26639:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26402:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26409:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26417:3:13","type":""}],"src":"26331:360:13"},{"body":{"nodeType":"YulBlock","src":"26897:440:13","statements":[{"nodeType":"YulAssignment","src":"26907:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26919:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"26930:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26915:3:13"},"nodeType":"YulFunctionCall","src":"26915:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26907:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26988:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27001:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27012:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26997:3:13"},"nodeType":"YulFunctionCall","src":"26997:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26944:43:13"},"nodeType":"YulFunctionCall","src":"26944:71:13"},"nodeType":"YulExpressionStatement","src":"26944:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27069:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27082:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27093:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27078:3:13"},"nodeType":"YulFunctionCall","src":"27078:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27025:43:13"},"nodeType":"YulFunctionCall","src":"27025:72:13"},"nodeType":"YulExpressionStatement","src":"27025:72:13"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"27151:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27164:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27175:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27160:3:13"},"nodeType":"YulFunctionCall","src":"27160:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27107:43:13"},"nodeType":"YulFunctionCall","src":"27107:72:13"},"nodeType":"YulExpressionStatement","src":"27107:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27200:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27211:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27196:3:13"},"nodeType":"YulFunctionCall","src":"27196:18:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27220:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"27226:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27216:3:13"},"nodeType":"YulFunctionCall","src":"27216:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27189:6:13"},"nodeType":"YulFunctionCall","src":"27189:48:13"},"nodeType":"YulExpressionStatement","src":"27189:48:13"},{"nodeType":"YulAssignment","src":"27246:84:13","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"27316:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"27325:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27254:61:13"},"nodeType":"YulFunctionCall","src":"27254:76:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27246:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26845:9:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26857:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26865:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26873:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26881:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26892:4:13","type":""}],"src":"26697:640:13"},{"body":{"nodeType":"YulBlock","src":"27405:79:13","statements":[{"nodeType":"YulAssignment","src":"27415:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27430:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27424:5:13"},"nodeType":"YulFunctionCall","src":"27424:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27415:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27472:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"27446:25:13"},"nodeType":"YulFunctionCall","src":"27446:32:13"},"nodeType":"YulExpressionStatement","src":"27446:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27383:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"27391:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27399:5:13","type":""}],"src":"27343:141:13"},{"body":{"nodeType":"YulBlock","src":"27566:273:13","statements":[{"body":{"nodeType":"YulBlock","src":"27612:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27614:77:13"},"nodeType":"YulFunctionCall","src":"27614:79:13"},"nodeType":"YulExpressionStatement","src":"27614:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27587:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"27596:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27583:3:13"},"nodeType":"YulFunctionCall","src":"27583:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"27608:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27579:3:13"},"nodeType":"YulFunctionCall","src":"27579:32:13"},"nodeType":"YulIf","src":"27576:119:13"},{"nodeType":"YulBlock","src":"27705:127:13","statements":[{"nodeType":"YulVariableDeclaration","src":"27720:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"27734:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27724:6:13","type":""}]},{"nodeType":"YulAssignment","src":"27749:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27794:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"27805:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27790:3:13"},"nodeType":"YulFunctionCall","src":"27790:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27814:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"27759:30:13"},"nodeType":"YulFunctionCall","src":"27759:63:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27749:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27536:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27547:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27559:6:13","type":""}],"src":"27490:349:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner nor approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)\n        store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r nor approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb46514610292578063b88d4fde146102ae578063c87b56dd146102ca578063e985e9c5146102fa578063f2fde38b1461032a5761010b565b806370a082311461021c578063715018a61461024c5780638da5cb5b1461025657806395d89b41146102745761010b565b80631249c58b116100de5780631249c58b146101aa57806323b872dd146101b457806342842e0e146101d05780636352211e146101ec5761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611a95565b610346565b6040516101379190611add565b60405180910390f35b610148610428565b6040516101559190611b91565b60405180910390f35b61017860048036038101906101739190611be9565b6104ba565b6040516101859190611c57565b60405180910390f35b6101a860048036038101906101a39190611c9e565b610500565b005b6101b2610617565b005b6101ce60048036038101906101c99190611cde565b610629565b005b6101ea60048036038101906101e59190611cde565b610689565b005b61020660048036038101906102019190611be9565b6106a9565b6040516102139190611c57565b60405180910390f35b61023660048036038101906102319190611d31565b61076c565b6040516102439190611d6d565b60405180910390f35b610254610886565b005b61025e61089a565b60405161026b9190611c57565b60405180910390f35b61027c6108c3565b6040516102899190611b91565b60405180910390f35b6102ac60048036038101906102a79190611db4565b610955565b005b6102c860048036038101906102c39190611f29565b61096b565b005b6102e460048036038101906102df9190611be9565b6109cd565b6040516102f19190611b91565b60405180910390f35b610314600480360381019061030f9190611fac565b610a35565b6040516103219190611add565b60405180910390f35b610344600480360381019061033f9190611d31565b610ac9565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610421575061042082610b4c565b5b9050919050565b6060600180546104379061201b565b80601f01602080910402602001604051908101604052809291908181526020018280546104639061201b565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050905090565b60006104c582610bb6565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050b826106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361057b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610572906120be565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661059a610c01565b73ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c8816105c3610c01565b610a35565b5b610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612150565b60405180910390fd5b6106128383610c09565b505050565b610627610622610c01565b610cc2565b565b61063a610634610c01565b82610e21565b610679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610670906121e2565b60405180910390fd5b610684838383610eb6565b505050565b6106a48383836040518060200160405280600081525061096b565b505050565b60006106b482611184565b6106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea9061224e565b60405180910390fd5b60006003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610763578290505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d3906122e0565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148015610830575061082f8261121b565b5b1561083e5760019050610881565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b61088e6112ef565b610898600061136d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280546108d29061201b565b80601f01602080910402602001604051908101604052809291908181526020018280546108fe9061201b565b801561094b5780601f106109205761010080835404028352916020019161094b565b820191906000526020600020905b81548152906001019060200180831161092e57829003601f168201915b5050505050905090565b610967610960610c01565b8383611431565b5050565b61097c610976610c01565b83610e21565b6109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b2906121e2565b60405180910390fd5b6109c78484848461159d565b50505050565b60606109d882610bb6565b60006109e26115f9565b90506000815111610a025760405180602001604052806000815250610a2d565b80610a0c84611610565b604051602001610a1d92919061233c565b6040516020818303038152906040525b915050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610ad16112ef565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b37906123d2565b60405180910390fd5b610b498161136d565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bbf816116de565b610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf59061224e565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610c7c836106a9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008173ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d439061243e565b60405180910390fd5b610d5581611184565b15610d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8c906124aa565b60405180910390fd5b60016007600083815260200190815260200160002060006101000a81548160ff021916908315150217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080610e2d836106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e6f5750610e6e8185610a35565b5b80610ead57508373ffffffffffffffffffffffffffffffffffffffff16610e95846104ba565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610ed6826106a9565b73ffffffffffffffffffffffffffffffffffffffff1614610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f239061253c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f92906125ce565b60405180910390fd5b610fa683838361174a565b610fb1600082610c09565b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611070576001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611068919061261d565b925050819055505b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110c09190612651565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461117f83838361174f565b505050565b60006007600083815260200190815260200160002060009054906101000a900460ff168015611214575061dead73ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16905060006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061127882611184565b80156112e657508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806112e55750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b92505050919050565b6112f7610c01565b73ffffffffffffffffffffffffffffffffffffffff1661131561089a565b73ffffffffffffffffffffffffffffffffffffffff161461136b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611362906126f3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361149f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114969061275f565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115909190611add565b60405180910390a3505050565b6115a8848484610eb6565b6115b484848484611754565b6115f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ea906127f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161161f846118d6565b01905060008167ffffffffffffffff81111561163e5761163d611dfe565b5b6040519080825280601f01601f1916602001820160405280156116705781602001600182028036833780820191505090505b509050600082602001820190505b6001156116d3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116c7576116c6612811565b5b0494506000850361167e575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff163b11156118c9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611799610c01565b8786866040518563ffffffff1660e01b81526004016117bb9493929190612895565b6020604051808303816000875af19250505080156117f757506040513d601f19601f820116820180604052508101906117f491906128f6565b60015b611879573d8060008114611827576040519150601f19603f3d011682016040523d82523d6000602084013e61182c565b606091505b506000815103611871576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611868906127f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118ce565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611934577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161192a57611929612811565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611971576d04ee2d6d415b85acef8100000000838161196757611966612811565b5b0492506020810190505b662386f26fc1000083106119a057662386f26fc10000838161199657611995612811565b5b0492506010810190505b6305f5e10083106119c9576305f5e10083816119bf576119be612811565b5b0492506008810190505b61271083106119ee5761271083816119e4576119e3612811565b5b0492506004810190505b60648310611a115760648381611a0757611a06612811565b5b0492506002810190505b600a8310611a20576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a7281611a3d565b8114611a7d57600080fd5b50565b600081359050611a8f81611a69565b92915050565b600060208284031215611aab57611aaa611a33565b5b6000611ab984828501611a80565b91505092915050565b60008115159050919050565b611ad781611ac2565b82525050565b6000602082019050611af26000830184611ace565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b32578082015181840152602081019050611b17565b83811115611b41576000848401525b50505050565b6000601f19601f8301169050919050565b6000611b6382611af8565b611b6d8185611b03565b9350611b7d818560208601611b14565b611b8681611b47565b840191505092915050565b60006020820190508181036000830152611bab8184611b58565b905092915050565b6000819050919050565b611bc681611bb3565b8114611bd157600080fd5b50565b600081359050611be381611bbd565b92915050565b600060208284031215611bff57611bfe611a33565b5b6000611c0d84828501611bd4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c4182611c16565b9050919050565b611c5181611c36565b82525050565b6000602082019050611c6c6000830184611c48565b92915050565b611c7b81611c36565b8114611c8657600080fd5b50565b600081359050611c9881611c72565b92915050565b60008060408385031215611cb557611cb4611a33565b5b6000611cc385828601611c89565b9250506020611cd485828601611bd4565b9150509250929050565b600080600060608486031215611cf757611cf6611a33565b5b6000611d0586828701611c89565b9350506020611d1686828701611c89565b9250506040611d2786828701611bd4565b9150509250925092565b600060208284031215611d4757611d46611a33565b5b6000611d5584828501611c89565b91505092915050565b611d6781611bb3565b82525050565b6000602082019050611d826000830184611d5e565b92915050565b611d9181611ac2565b8114611d9c57600080fd5b50565b600081359050611dae81611d88565b92915050565b60008060408385031215611dcb57611dca611a33565b5b6000611dd985828601611c89565b9250506020611dea85828601611d9f565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e3682611b47565b810181811067ffffffffffffffff82111715611e5557611e54611dfe565b5b80604052505050565b6000611e68611a29565b9050611e748282611e2d565b919050565b600067ffffffffffffffff821115611e9457611e93611dfe565b5b611e9d82611b47565b9050602081019050919050565b82818337600083830152505050565b6000611ecc611ec784611e79565b611e5e565b905082815260208101848484011115611ee857611ee7611df9565b5b611ef3848285611eaa565b509392505050565b600082601f830112611f1057611f0f611df4565b5b8135611f20848260208601611eb9565b91505092915050565b60008060008060808587031215611f4357611f42611a33565b5b6000611f5187828801611c89565b9450506020611f6287828801611c89565b9350506040611f7387828801611bd4565b925050606085013567ffffffffffffffff811115611f9457611f93611a38565b5b611fa087828801611efb565b91505092959194509250565b60008060408385031215611fc357611fc2611a33565b5b6000611fd185828601611c89565b9250506020611fe285828601611c89565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061203357607f821691505b60208210810361204657612045611fec565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006120a8602183611b03565b91506120b38261204c565b604082019050919050565b600060208201905081810360008301526120d78161209b565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061213a603e83611b03565b9150612145826120de565b604082019050919050565b600060208201905081810360008301526121698161212d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006121cc602e83611b03565b91506121d782612170565b604082019050919050565b600060208201905081810360008301526121fb816121bf565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612238601883611b03565b915061224382612202565b602082019050919050565b600060208201905081810360008301526122678161222b565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006122ca602983611b03565b91506122d58261226e565b604082019050919050565b600060208201905081810360008301526122f9816122bd565b9050919050565b600081905092915050565b600061231682611af8565b6123208185612300565b9350612330818560208601611b14565b80840191505092915050565b6000612348828561230b565b9150612354828461230b565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006123bc602683611b03565b91506123c782612360565b604082019050919050565b600060208201905081810360008301526123eb816123af565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612428602083611b03565b9150612433826123f2565b602082019050919050565b600060208201905081810360008301526124578161241b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612494601c83611b03565b915061249f8261245e565b602082019050919050565b600060208201905081810360008301526124c381612487565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612526602583611b03565b9150612531826124ca565b604082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006125b8602483611b03565b91506125c38261255c565b604082019050919050565b600060208201905081810360008301526125e7816125ab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061262882611bb3565b915061263383611bb3565b925082821015612646576126456125ee565b5b828203905092915050565b600061265c82611bb3565b915061266783611bb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561269c5761269b6125ee565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006126dd602083611b03565b91506126e8826126a7565b602082019050919050565b6000602082019050818103600083015261270c816126d0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612749601983611b03565b915061275482612713565b602082019050919050565b600060208201905081810360008301526127788161273c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006127db603283611b03565b91506127e68261277f565b604082019050919050565b6000602082019050818103600083015261280a816127ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061286782612840565b612871818561284b565b9350612881818560208601611b14565b61288a81611b47565b840191505092915050565b60006080820190506128aa6000830187611c48565b6128b76020830186611c48565b6128c46040830185611d5e565b81810360608301526128d6818461285c565b905095945050505050565b6000815190506128f081611a69565b92915050565b60006020828403121561290c5761290b611a33565b5b600061291a848285016128e1565b9150509291505056fea264697066735822122085c7d608a0fb21c4e9f5bd82509de0ddc1df85607191f40e67d6d8caf3978ded64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32A JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x274 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1249C58B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1EC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x1A95 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x428 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x1C9E JUMP JUMPDEST PUSH2 0x500 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x617 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x629 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E5 SWAP2 SWAP1 PUSH2 0x1CDE JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x206 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x201 SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x236 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0x76C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x1D6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x254 PUSH2 0x886 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH2 0x89A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27C PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x1DB4 JUMP JUMPDEST PUSH2 0x955 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C3 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x96B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F1 SWAP2 SWAP1 PUSH2 0x1B91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x314 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30F SWAP2 SWAP1 PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x344 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33F SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x411 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x421 JUMPI POP PUSH2 0x420 DUP3 PUSH2 0xB4C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x437 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x463 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x485 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x493 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0xBB6 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50B DUP3 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x57B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x572 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x59A PUSH2 0xC01 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x5C9 JUMPI POP PUSH2 0x5C8 DUP2 PUSH2 0x5C3 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0xA35 JUMP JUMPDEST JUMPDEST PUSH2 0x608 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FF SWAP1 PUSH2 0x2150 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x612 DUP4 DUP4 PUSH2 0xC09 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x627 PUSH2 0x622 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0xCC2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x63A PUSH2 0x634 PUSH2 0xC01 JUMP JUMPDEST DUP3 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x670 SWAP1 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x684 DUP4 DUP4 DUP4 PUSH2 0xEB6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x96B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4 DUP3 PUSH2 0x1184 JUMP JUMPDEST PUSH2 0x6F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EA SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x763 JUMPI DUP3 SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D3 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ DUP1 ISZERO PUSH2 0x830 JUMPI POP PUSH2 0x82F DUP3 PUSH2 0x121B JUMP JUMPDEST JUMPDEST ISZERO PUSH2 0x83E JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x881 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x88E PUSH2 0x12EF JUMP JUMPDEST PUSH2 0x898 PUSH1 0x0 PUSH2 0x136D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x8D2 SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8FE SWAP1 PUSH2 0x201B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x94B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x920 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x94B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x92E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x967 PUSH2 0x960 PUSH2 0xC01 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1431 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x97C PUSH2 0x976 PUSH2 0xC01 JUMP JUMPDEST DUP4 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x9BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9B2 SWAP1 PUSH2 0x21E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9C7 DUP5 DUP5 DUP5 DUP5 PUSH2 0x159D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9D8 DUP3 PUSH2 0xBB6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E2 PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA2D JUMP JUMPDEST DUP1 PUSH2 0xA0C DUP5 PUSH2 0x1610 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA1D SWAP3 SWAP2 SWAP1 PUSH2 0x233C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xAD1 PUSH2 0x12EF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB37 SWAP1 PUSH2 0x23D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB49 DUP2 PUSH2 0x136D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF5 SWAP1 PUSH2 0x224E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7C DUP4 PUSH2 0x6A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD43 SWAP1 PUSH2 0x243E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD55 DUP2 PUSH2 0x1184 JUMP JUMPDEST ISZERO PUSH2 0xD95 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD8C SWAP1 PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE2D DUP4 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE6F JUMPI POP PUSH2 0xE6E DUP2 DUP6 PUSH2 0xA35 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xEAD JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE95 DUP5 PUSH2 0x4BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xED6 DUP3 PUSH2 0x6A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP1 PUSH2 0x253C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF9B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF92 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFA6 DUP4 DUP4 DUP4 PUSH2 0x174A JUMP JUMPDEST PUSH2 0xFB1 PUSH1 0x0 DUP3 PUSH2 0xC09 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1070 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1068 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10C0 SWAP2 SWAP1 PUSH2 0x2651 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x117F DUP4 DUP4 DUP4 PUSH2 0x174F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1214 JUMPI POP PUSH2 0xDEAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x1278 DUP3 PUSH2 0x1184 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12E6 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x12E5 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12F7 PUSH2 0xC01 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1315 PUSH2 0x89A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1362 SWAP1 PUSH2 0x26F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x149F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1496 SWAP1 PUSH2 0x275F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1590 SWAP2 SWAP1 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x15A8 DUP5 DUP5 DUP5 PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x15B4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1754 JUMP JUMPDEST PUSH2 0x15F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15EA SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x161F DUP5 PUSH2 0x18D6 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163E JUMPI PUSH2 0x163D PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1670 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x16D3 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16C7 JUMPI PUSH2 0x16C6 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x167E JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18C9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1799 PUSH2 0xC01 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17BB SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2895 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17F7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17F4 SWAP2 SWAP1 PUSH2 0x28F6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1879 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1827 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x182C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1871 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1868 SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x18CE JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1934 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x192A JUMPI PUSH2 0x1929 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1971 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1967 JUMPI PUSH2 0x1966 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x19A0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1996 JUMPI PUSH2 0x1995 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x19C9 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x19BF JUMPI PUSH2 0x19BE PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x19EE JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x19E4 JUMPI PUSH2 0x19E3 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1A11 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1A07 JUMPI PUSH2 0x1A06 PUSH2 0x2811 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1A20 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A72 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP2 EQ PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A8F DUP2 PUSH2 0x1A69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AAB JUMPI PUSH2 0x1AAA PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AB9 DUP5 DUP3 DUP6 ADD PUSH2 0x1A80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD7 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1ACE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B32 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1B17 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B41 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B63 DUP3 PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0x1B6D DUP2 DUP6 PUSH2 0x1B03 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B7D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST PUSH2 0x1B86 DUP2 PUSH2 0x1B47 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAB DUP2 DUP5 PUSH2 0x1B58 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC6 DUP2 PUSH2 0x1BB3 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BE3 DUP2 PUSH2 0x1BBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BFF JUMPI PUSH2 0x1BFE PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C0D DUP5 DUP3 DUP6 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 DUP3 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C51 DUP2 PUSH2 0x1C36 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C6C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C7B DUP2 PUSH2 0x1C36 JUMP JUMPDEST DUP2 EQ PUSH2 0x1C86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C98 DUP2 PUSH2 0x1C72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CB5 JUMPI PUSH2 0x1CB4 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CC3 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CD4 DUP6 DUP3 DUP7 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1CF7 JUMPI PUSH2 0x1CF6 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D05 DUP7 DUP3 DUP8 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1D16 DUP7 DUP3 DUP8 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1D27 DUP7 DUP3 DUP8 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D47 JUMPI PUSH2 0x1D46 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D55 DUP5 DUP3 DUP6 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D67 DUP2 PUSH2 0x1BB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D82 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D5E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D91 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DAE DUP2 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DCB JUMPI PUSH2 0x1DCA PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DD9 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DEA DUP6 DUP3 DUP7 ADD PUSH2 0x1D9F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E36 DUP3 PUSH2 0x1B47 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E55 JUMPI PUSH2 0x1E54 PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E68 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E74 DUP3 DUP3 PUSH2 0x1E2D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E94 JUMPI PUSH2 0x1E93 PUSH2 0x1DFE JUMP JUMPDEST JUMPDEST PUSH2 0x1E9D DUP3 PUSH2 0x1B47 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ECC PUSH2 0x1EC7 DUP5 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0x1E5E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1EE8 JUMPI PUSH2 0x1EE7 PUSH2 0x1DF9 JUMP JUMPDEST JUMPDEST PUSH2 0x1EF3 DUP5 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x1DF4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F20 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1EB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F43 JUMPI PUSH2 0x1F42 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F51 DUP8 DUP3 DUP9 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1F62 DUP8 DUP3 DUP9 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1F73 DUP8 DUP3 DUP9 ADD PUSH2 0x1BD4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F94 JUMPI PUSH2 0x1F93 PUSH2 0x1A38 JUMP JUMPDEST JUMPDEST PUSH2 0x1FA0 DUP8 DUP3 DUP9 ADD PUSH2 0x1EFB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FC3 JUMPI PUSH2 0x1FC2 PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FD1 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1FE2 DUP6 DUP3 DUP7 ADD PUSH2 0x1C89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2033 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2046 JUMPI PUSH2 0x2045 PUSH2 0x1FEC JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20A8 PUSH1 0x21 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x20B3 DUP3 PUSH2 0x204C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20D7 DUP2 PUSH2 0x209B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x213A PUSH1 0x3E DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2145 DUP3 PUSH2 0x20DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2169 DUP2 PUSH2 0x212D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206E6F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21CC PUSH1 0x2E DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x21D7 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21FB DUP2 PUSH2 0x21BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2238 PUSH1 0x18 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2243 DUP3 PUSH2 0x2202 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2267 DUP2 PUSH2 0x222B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22CA PUSH1 0x29 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x22D5 DUP3 PUSH2 0x226E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22F9 DUP2 PUSH2 0x22BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2316 DUP3 PUSH2 0x1AF8 JUMP JUMPDEST PUSH2 0x2320 DUP2 DUP6 PUSH2 0x2300 JUMP JUMPDEST SWAP4 POP PUSH2 0x2330 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2348 DUP3 DUP6 PUSH2 0x230B JUMP JUMPDEST SWAP2 POP PUSH2 0x2354 DUP3 DUP5 PUSH2 0x230B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23BC PUSH1 0x26 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x23C7 DUP3 PUSH2 0x2360 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23EB DUP2 PUSH2 0x23AF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2428 PUSH1 0x20 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2433 DUP3 PUSH2 0x23F2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2457 DUP2 PUSH2 0x241B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2494 PUSH1 0x1C DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x249F DUP3 PUSH2 0x245E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24C3 DUP2 PUSH2 0x2487 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2526 PUSH1 0x25 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2531 DUP3 PUSH2 0x24CA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2555 DUP2 PUSH2 0x2519 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B8 PUSH1 0x24 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x25C3 DUP3 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25E7 DUP2 PUSH2 0x25AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2628 DUP3 PUSH2 0x1BB3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2633 DUP4 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2646 JUMPI PUSH2 0x2645 PUSH2 0x25EE JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265C DUP3 PUSH2 0x1BB3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2667 DUP4 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x269C JUMPI PUSH2 0x269B PUSH2 0x25EE JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26DD PUSH1 0x20 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x26E8 DUP3 PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x270C DUP2 PUSH2 0x26D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2749 PUSH1 0x19 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x2754 DUP3 PUSH2 0x2713 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2778 DUP2 PUSH2 0x273C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DB PUSH1 0x32 DUP4 PUSH2 0x1B03 JUMP JUMPDEST SWAP2 POP PUSH2 0x27E6 DUP3 PUSH2 0x277F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x280A DUP2 PUSH2 0x27CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2867 DUP3 PUSH2 0x2840 JUMP JUMPDEST PUSH2 0x2871 DUP2 DUP6 PUSH2 0x284B JUMP JUMPDEST SWAP4 POP PUSH2 0x2881 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1B14 JUMP JUMPDEST PUSH2 0x288A DUP2 PUSH2 0x1B47 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x28AA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x28B7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x28C4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1D5E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x28D6 DUP2 DUP5 PUSH2 0x285C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x28F0 DUP2 PUSH2 0x1A69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290C JUMPI PUSH2 0x290B PUSH2 0x1A33 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x291A DUP5 DUP3 DUP6 ADD PUSH2 0x28E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xC7 0xD6 ADDMOD LOG0 0xFB 0x21 0xC4 0xE9 CREATE2 0xBD DUP3 POP SWAP14 0xE0 0xDD 0xC1 0xDF DUP6 PUSH1 0x71 SWAP2 DELEGATECALL 0xE PUSH8 0xD6D8CAF3978DED64 PUSH20 0x6F6C634300080D00330000000000000000000000 ","sourceMap":"344:2581:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2417:300:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3317:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4775:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4314:400;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1311:53:11;;;:::i;:::-;;5452:327:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5845:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;901:406:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;582:264;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1824:101:0;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3479:102:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5009:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6090:315;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3647:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5228:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2417:300:12;2519:4;2569:25;2554:40;;;:11;:40;;;;:104;;;;2625:33;2610:48;;;:11;:48;;;;2554:104;:156;;;;2674:36;2698:11;2674:23;:36::i;:::-;2554:156;2535:175;;2417:300;;;:::o;3317:98::-;3371:13;3403:5;3396:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3317:98;:::o;4775:167::-;4851:7;4870:23;4885:7;4870:14;:23::i;:::-;4911:15;:24;4927:7;4911:24;;;;;;;;;;;;;;;;;;;;;4904:31;;4775:167;;;:::o;4314:400::-;4394:13;4410:16;4418:7;4410;:16::i;:::-;4394:32;;4450:5;4444:11;;:2;:11;;;4436:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4541:5;4525:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4550:37;4567:5;4574:12;:10;:12::i;:::-;4550:16;:37::i;:::-;4525:62;4504:171;;;;;;;;;;;;:::i;:::-;;;;;;;;;4686:21;4695:2;4699:7;4686:8;:21::i;:::-;4384:330;4314:400;;:::o;1311:53:11:-;1340:19;1346:12;:10;:12::i;:::-;1340:5;:19::i;:::-;1311:53::o;5452:327:12:-;5641:41;5660:12;:10;:12::i;:::-;5674:7;5641:18;:41::i;:::-;5633:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;5744:28;5754:4;5760:2;5764:7;5744:9;:28::i;:::-;5452:327;;;:::o;5845:179::-;5978:39;5995:4;6001:2;6005:7;5978:39;;;;;;;;;;;;:16;:39::i;:::-;5845:179;;;:::o;901:406:11:-;965:7;988:23;1003:7;988:14;:23::i;:::-;980:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;1174:13;1190:7;:16;1198:7;1190:16;;;;;;;;;;;;;;;;;;;;;1174:32;;1233:1;1216:19;;:5;:19;;;1212:73;;1269:7;1245:33;;1212:73;1297:5;1290:12;;;901:406;;;:::o;582:264::-;646:7;686:1;669:19;;:5;:19;;;661:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;764:1;744:9;:16;754:5;744:16;;;;;;;;;;;;;;;;:21;:44;;;;;769:19;782:5;769:12;:19::i;:::-;744:44;740:73;;;805:1;798:8;;;;740:73;825:9;:16;835:5;825:16;;;;;;;;;;;;;;;;818:23;;582:264;;;;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;1201:85::-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;3479:102:12:-;3535:13;3567:7;3560:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3479:102;:::o;5009:153::-;5103:52;5122:12;:10;:12::i;:::-;5136:8;5146;5103:18;:52::i;:::-;5009:153;;:::o;6090:315::-;6258:41;6277:12;:10;:12::i;:::-;6291:7;6258:18;:41::i;:::-;6250:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;6360:38;6374:4;6380:2;6384:7;6393:4;6360:13;:38::i;:::-;6090:315;;;;:::o;3647:276::-;3720:13;3745:23;3760:7;3745:14;:23::i;:::-;3779:21;3803:10;:8;:10::i;:::-;3779:34;;3854:1;3836:7;3830:21;:25;:86;;;;;;;;;;;;;;;;;3882:7;3891:18;:7;:16;:18::i;:::-;3865:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3830:86;3823:93;;;3647:276;;;:::o;5228:162::-;5325:4;5348:18;:25;5367:5;5348:25;;;;;;;;;;;;;;;:35;5374:8;5348:35;;;;;;;;;;;;;;;;;;;;;;;;;5341:42;;5228:162;;;;:::o;2074:198:0:-;1094:13;:11;:13::i;:::-;2182:1:::1;2162:22;;:8;:22;;::::0;2154:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;829:155:7:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;12550:133:12:-;12631:16;12639:7;12631;:16::i;:::-;12623:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;12550:133;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;11859:164:12:-;11960:2;11933:15;:24;11949:7;11933:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12008:7;12004:2;11977:39;;11986:16;11994:7;11986;:16::i;:::-;11977:39;;;;;;;;;;;;11859:164;;:::o;1368:418:11:-;1450:15;1484:8;1468:26;;1450:44;;1529:1;1509:22;;:8;:22;;;1501:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;1583:23;1598:7;1583:14;:23::i;:::-;1582:24;1574:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1699:4;1674:13;:22;1688:7;1674:22;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;1773:7;1763:8;1742:39;;1759:1;1742:39;;;;;;;;;;;;1410:376;1368:418;:::o;8157:254:12:-;8250:4;8266:13;8282:16;8290:7;8282;:16::i;:::-;8266:32;;8327:5;8316:16;;:7;:16;;;:52;;;;8336:32;8353:5;8360:7;8336:16;:32::i;:::-;8316:52;:87;;;;8396:7;8372:31;;:20;8384:7;8372:11;:20::i;:::-;:31;;;8316:87;8308:96;;;8157:254;;;;:::o;1790:656:11:-;1920:4;1900:24;;:16;1908:7;1900;:16::i;:::-;:24;;;1892:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;1994:1;1980:16;;:2;:16;;;1972:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;2044:39;2065:4;2071:2;2075:7;2044:20;:39::i;:::-;2137:29;2154:1;2158:7;2137:8;:29::i;:::-;2268:1;2240:30;;:7;:16;2248:7;2240:16;;;;;;;;;;;;;;;;;;;;;:30;;;2236:71;;2299:1;2280:9;:15;2290:4;2280:15;;;;;;;;;;;;;;;;:20;;;;;;;:::i;:::-;;;;;;;;2236:71;2329:1;2312:9;:13;2322:2;2312:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;2355:2;2336:7;:16;2344:7;2336:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;2388:7;2384:2;2369:27;;2378:4;2369:27;;;;;;;;;;;;2403:38;2423:4;2429:2;2433:7;2403:19;:38::i;:::-;1790:656;;;:::o;2727:196::-;2791:4;2858:13;:22;2872:7;2858:22;;;;;;;;;;;;;;;;;;;;;:59;;;;;1554:42:12;2884:33:11;;:7;:16;2892:7;2884:16;;;;;;;;;;;;;;;;;;;;;:33;;;;2858:59;2850:68;;2727:196;;;:::o;2450:273::-;2510:4;2522:20;2561:5;2545:23;;2522:46;;2574:20;2597:7;:21;2605:12;2597:21;;;;;;;;;;;;;;;;;;;;;2574:44;;2632:28;2647:12;2632:14;:28::i;:::-;:85;;;;;2681:5;2665:21;;:12;:21;;;:51;;;;2714:1;2690:26;;:12;:26;;;2665:51;2632:85;2624:94;;;;2450:273;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2426:187::-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;12159:307:12:-;12309:8;12300:17;;:5;:17;;;12292:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;12395:8;12357:18;:25;12376:5;12357:25;;;;;;;;;;;;;;;:35;12383:8;12357:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;12440:8;12418:41;;12433:5;12418:41;;;12450:8;12418:41;;;;;;:::i;:::-;;;;;;;;12159:307;;;:::o;7266:305::-;7416:28;7426:4;7432:2;7436:7;7416:9;:28::i;:::-;7462:47;7485:4;7491:2;7495:7;7504:4;7462:22;:47::i;:::-;7454:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;7266:305;;;;:::o;4165:92::-;4216:13;4241:9;;;;;;;;;;;;;;4165:92;:::o;447:696:6:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;7874:125:12:-;7939:4;7990:1;7962:30;;:7;:16;7970:7;7962:16;;;;;;;;;;;;;;;;;;;;;:30;;;;7955:37;;7874:125;;;:::o;14625:122::-;;;;:::o;15119:121::-;;;;:::o;13235:834::-;13384:4;13421:1;13404:2;:14;;;:18;13400:663;;;13458:2;13442:36;;;13479:12;:10;:12::i;:::-;13493:4;13499:7;13508:4;13442:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;13438:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13697:1;13680:6;:13;:18;13676:321;;13722:60;;;;;;;;;;:::i;:::-;;;;;;;;13676:321;13949:6;13943:13;13934:6;13930:2;13926:15;13919:38;13438:573;13573:41;;;13563:51;;;:6;:51;;;;13556:58;;;;;13400:663;14048:4;14041:11;;13235:834;;;;;;;:::o;10139:916:9:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:619::-;5015:6;5023;5031;5080:2;5068:9;5059:7;5055:23;5051:32;5048:119;;;5086:79;;:::i;:::-;5048:119;5206:1;5231:53;5276:7;5267:6;5256:9;5252:22;5231:53;:::i;:::-;5221:63;;5177:117;5333:2;5359:53;5404:7;5395:6;5384:9;5380:22;5359:53;:::i;:::-;5349:63;;5304:118;5461:2;5487:53;5532:7;5523:6;5512:9;5508:22;5487:53;:::i;:::-;5477:63;;5432:118;4938:619;;;;;:::o;5563:329::-;5622:6;5671:2;5659:9;5650:7;5646:23;5642:32;5639:119;;;5677:79;;:::i;:::-;5639:119;5797:1;5822:53;5867:7;5858:6;5847:9;5843:22;5822:53;:::i;:::-;5812:63;;5768:117;5563:329;;;;:::o;5898:118::-;5985:24;6003:5;5985:24;:::i;:::-;5980:3;5973:37;5898:118;;:::o;6022:222::-;6115:4;6153:2;6142:9;6138:18;6130:26;;6166:71;6234:1;6223:9;6219:17;6210:6;6166:71;:::i;:::-;6022:222;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:220::-;11166:34;11162:1;11154:6;11150:14;11143:58;11235:3;11230:2;11222:6;11218:15;11211:28;11026:220;:::o;11252:366::-;11394:3;11415:67;11479:2;11474:3;11415:67;:::i;:::-;11408:74;;11491:93;11580:3;11491:93;:::i;:::-;11609:2;11604:3;11600:12;11593:19;;11252:366;;;:::o;11624:419::-;11790:4;11828:2;11817:9;11813:18;11805:26;;11877:9;11871:4;11867:20;11863:1;11852:9;11848:17;11841:47;11905:131;12031:4;11905:131;:::i;:::-;11897:139;;11624:419;;;:::o;12049:249::-;12189:34;12185:1;12177:6;12173:14;12166:58;12258:32;12253:2;12245:6;12241:15;12234:57;12049:249;:::o;12304:366::-;12446:3;12467:67;12531:2;12526:3;12467:67;:::i;:::-;12460:74;;12543:93;12632:3;12543:93;:::i;:::-;12661:2;12656:3;12652:12;12645:19;;12304:366;;;:::o;12676:419::-;12842:4;12880:2;12869:9;12865:18;12857:26;;12929:9;12923:4;12919:20;12915:1;12904:9;12900:17;12893:47;12957:131;13083:4;12957:131;:::i;:::-;12949:139;;12676:419;;;:::o;13101:233::-;13241:34;13237:1;13229:6;13225:14;13218:58;13310:16;13305:2;13297:6;13293:15;13286:41;13101:233;:::o;13340:366::-;13482:3;13503:67;13567:2;13562:3;13503:67;:::i;:::-;13496:74;;13579:93;13668:3;13579:93;:::i;:::-;13697:2;13692:3;13688:12;13681:19;;13340:366;;;:::o;13712:419::-;13878:4;13916:2;13905:9;13901:18;13893:26;;13965:9;13959:4;13955:20;13951:1;13940:9;13936:17;13929:47;13993:131;14119:4;13993:131;:::i;:::-;13985:139;;13712:419;;;:::o;14137:174::-;14277:26;14273:1;14265:6;14261:14;14254:50;14137:174;:::o;14317:366::-;14459:3;14480:67;14544:2;14539:3;14480:67;:::i;:::-;14473:74;;14556:93;14645:3;14556:93;:::i;:::-;14674:2;14669:3;14665:12;14658:19;;14317:366;;;:::o;14689:419::-;14855:4;14893:2;14882:9;14878:18;14870:26;;14942:9;14936:4;14932:20;14928:1;14917:9;14913:17;14906:47;14970:131;15096:4;14970:131;:::i;:::-;14962:139;;14689:419;;;:::o;15114:228::-;15254:34;15250:1;15242:6;15238:14;15231:58;15323:11;15318:2;15310:6;15306:15;15299:36;15114:228;:::o;15348:366::-;15490:3;15511:67;15575:2;15570:3;15511:67;:::i;:::-;15504:74;;15587:93;15676:3;15587:93;:::i;:::-;15705:2;15700:3;15696:12;15689:19;;15348:366;;;:::o;15720:419::-;15886:4;15924:2;15913:9;15909:18;15901:26;;15973:9;15967:4;15963:20;15959:1;15948:9;15944:17;15937:47;16001:131;16127:4;16001:131;:::i;:::-;15993:139;;15720:419;;;:::o;16145:148::-;16247:11;16284:3;16269:18;;16145:148;;;;:::o;16299:377::-;16405:3;16433:39;16466:5;16433:39;:::i;:::-;16488:89;16570:6;16565:3;16488:89;:::i;:::-;16481:96;;16586:52;16631:6;16626:3;16619:4;16612:5;16608:16;16586:52;:::i;:::-;16663:6;16658:3;16654:16;16647:23;;16409:267;16299:377;;;;:::o;16682:435::-;16862:3;16884:95;16975:3;16966:6;16884:95;:::i;:::-;16877:102;;16996:95;17087:3;17078:6;16996:95;:::i;:::-;16989:102;;17108:3;17101:10;;16682:435;;;;;:::o;17123:225::-;17263:34;17259:1;17251:6;17247:14;17240:58;17332:8;17327:2;17319:6;17315:15;17308:33;17123:225;:::o;17354:366::-;17496:3;17517:67;17581:2;17576:3;17517:67;:::i;:::-;17510:74;;17593:93;17682:3;17593:93;:::i;:::-;17711:2;17706:3;17702:12;17695:19;;17354:366;;;:::o;17726:419::-;17892:4;17930:2;17919:9;17915:18;17907:26;;17979:9;17973:4;17969:20;17965:1;17954:9;17950:17;17943:47;18007:131;18133:4;18007:131;:::i;:::-;17999:139;;17726:419;;;:::o;18151:182::-;18291:34;18287:1;18279:6;18275:14;18268:58;18151:182;:::o;18339:366::-;18481:3;18502:67;18566:2;18561:3;18502:67;:::i;:::-;18495:74;;18578:93;18667:3;18578:93;:::i;:::-;18696:2;18691:3;18687:12;18680:19;;18339:366;;;:::o;18711:419::-;18877:4;18915:2;18904:9;18900:18;18892:26;;18964:9;18958:4;18954:20;18950:1;18939:9;18935:17;18928:47;18992:131;19118:4;18992:131;:::i;:::-;18984:139;;18711:419;;;:::o;19136:178::-;19276:30;19272:1;19264:6;19260:14;19253:54;19136:178;:::o;19320:366::-;19462:3;19483:67;19547:2;19542:3;19483:67;:::i;:::-;19476:74;;19559:93;19648:3;19559:93;:::i;:::-;19677:2;19672:3;19668:12;19661:19;;19320:366;;;:::o;19692:419::-;19858:4;19896:2;19885:9;19881:18;19873:26;;19945:9;19939:4;19935:20;19931:1;19920:9;19916:17;19909:47;19973:131;20099:4;19973:131;:::i;:::-;19965:139;;19692:419;;;:::o;20117:224::-;20257:34;20253:1;20245:6;20241:14;20234:58;20326:7;20321:2;20313:6;20309:15;20302:32;20117:224;:::o;20347:366::-;20489:3;20510:67;20574:2;20569:3;20510:67;:::i;:::-;20503:74;;20586:93;20675:3;20586:93;:::i;:::-;20704:2;20699:3;20695:12;20688:19;;20347:366;;;:::o;20719:419::-;20885:4;20923:2;20912:9;20908:18;20900:26;;20972:9;20966:4;20962:20;20958:1;20947:9;20943:17;20936:47;21000:131;21126:4;21000:131;:::i;:::-;20992:139;;20719:419;;;:::o;21144:223::-;21284:34;21280:1;21272:6;21268:14;21261:58;21353:6;21348:2;21340:6;21336:15;21329:31;21144:223;:::o;21373:366::-;21515:3;21536:67;21600:2;21595:3;21536:67;:::i;:::-;21529:74;;21612:93;21701:3;21612:93;:::i;:::-;21730:2;21725:3;21721:12;21714:19;;21373:366;;;:::o;21745:419::-;21911:4;21949:2;21938:9;21934:18;21926:26;;21998:9;21992:4;21988:20;21984:1;21973:9;21969:17;21962:47;22026:131;22152:4;22026:131;:::i;:::-;22018:139;;21745:419;;;:::o;22170:180::-;22218:77;22215:1;22208:88;22315:4;22312:1;22305:15;22339:4;22336:1;22329:15;22356:191;22396:4;22416:20;22434:1;22416:20;:::i;:::-;22411:25;;22450:20;22468:1;22450:20;:::i;:::-;22445:25;;22489:1;22486;22483:8;22480:34;;;22494:18;;:::i;:::-;22480:34;22539:1;22536;22532:9;22524:17;;22356:191;;;;:::o;22553:305::-;22593:3;22612:20;22630:1;22612:20;:::i;:::-;22607:25;;22646:20;22664:1;22646:20;:::i;:::-;22641:25;;22800:1;22732:66;22728:74;22725:1;22722:81;22719:107;;;22806:18;;:::i;:::-;22719:107;22850:1;22847;22843:9;22836:16;;22553:305;;;;:::o;22864:182::-;23004:34;23000:1;22992:6;22988:14;22981:58;22864:182;:::o;23052:366::-;23194:3;23215:67;23279:2;23274:3;23215:67;:::i;:::-;23208:74;;23291:93;23380:3;23291:93;:::i;:::-;23409:2;23404:3;23400:12;23393:19;;23052:366;;;:::o;23424:419::-;23590:4;23628:2;23617:9;23613:18;23605:26;;23677:9;23671:4;23667:20;23663:1;23652:9;23648:17;23641:47;23705:131;23831:4;23705:131;:::i;:::-;23697:139;;23424:419;;;:::o;23849:175::-;23989:27;23985:1;23977:6;23973:14;23966:51;23849:175;:::o;24030:366::-;24172:3;24193:67;24257:2;24252:3;24193:67;:::i;:::-;24186:74;;24269:93;24358:3;24269:93;:::i;:::-;24387:2;24382:3;24378:12;24371:19;;24030:366;;;:::o;24402:419::-;24568:4;24606:2;24595:9;24591:18;24583:26;;24655:9;24649:4;24645:20;24641:1;24630:9;24626:17;24619:47;24683:131;24809:4;24683:131;:::i;:::-;24675:139;;24402:419;;;:::o;24827:237::-;24967:34;24963:1;24955:6;24951:14;24944:58;25036:20;25031:2;25023:6;25019:15;25012:45;24827:237;:::o;25070:366::-;25212:3;25233:67;25297:2;25292:3;25233:67;:::i;:::-;25226:74;;25309:93;25398:3;25309:93;:::i;:::-;25427:2;25422:3;25418:12;25411:19;;25070:366;;;:::o;25442:419::-;25608:4;25646:2;25635:9;25631:18;25623:26;;25695:9;25689:4;25685:20;25681:1;25670:9;25666:17;25659:47;25723:131;25849:4;25723:131;:::i;:::-;25715:139;;25442:419;;;:::o;25867:180::-;25915:77;25912:1;25905:88;26012:4;26009:1;26002:15;26036:4;26033:1;26026:15;26053:98;26104:6;26138:5;26132:12;26122:22;;26053:98;;;:::o;26157:168::-;26240:11;26274:6;26269:3;26262:19;26314:4;26309:3;26305:14;26290:29;;26157:168;;;;:::o;26331:360::-;26417:3;26445:38;26477:5;26445:38;:::i;:::-;26499:70;26562:6;26557:3;26499:70;:::i;:::-;26492:77;;26578:52;26623:6;26618:3;26611:4;26604:5;26600:16;26578:52;:::i;:::-;26655:29;26677:6;26655:29;:::i;:::-;26650:3;26646:39;26639:46;;26421:270;26331:360;;;;:::o;26697:640::-;26892:4;26930:3;26919:9;26915:19;26907:27;;26944:71;27012:1;27001:9;26997:17;26988:6;26944:71;:::i;:::-;27025:72;27093:2;27082:9;27078:18;27069:6;27025:72;:::i;:::-;27107;27175:2;27164:9;27160:18;27151:6;27107:72;:::i;:::-;27226:9;27220:4;27216:20;27211:2;27200:9;27196:18;27189:48;27254:76;27325:4;27316:6;27254:76;:::i;:::-;27246:84;;26697:640;;;;;;;:::o;27343:141::-;27399:5;27430:6;27424:13;27415:22;;27446:32;27472:5;27446:32;:::i;:::-;27343:141;;;;:::o;27490:349::-;27559:6;27608:2;27596:9;27587:7;27583:23;27579:32;27576:119;;;27614:79;;:::i;:::-;27576:119;27734:1;27759:63;27814:7;27805:6;27794:9;27790:22;27759:63;:::i;:::-;27749:73;;27705:127;27490:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2117000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"12030","getApproved(uint256)":"5257","isApprovedForAll(address,address)":"infinite","mint()":"31089","name()":"infinite","owner()":"2589","ownerOf(uint256)":"7544","renounceOwnership()":"30443","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenURI(uint256)":"3424","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30854"},"internal":{"_hasOwnToken(address)":"6880","_isTokenActive(uint256)":"4508","_mint(address)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mint()":"1249c58b","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"todo...\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"Overrides {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Overrides {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721All.sol\":\"ERC721All\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC721All.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Written by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./lib/ERC721.sol\\\";\\n\\n/**\\n * @dev todo...\\n */\\ncontract ERC721All is Ownable, ERC721 {\\n  mapping(uint256 => bool) internal _activeTokens;\\n\\n  constructor(string memory name, string memory symbol) ERC721(name, symbol) Ownable() {}\\n\\n  /**\\n   * @dev Overrides {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n    if (_balances[owner] == 0 && _hasOwnToken(owner)) {\\n      return 1;\\n    }\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev Overrides {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    require(_isTokenActive(tokenId), \\\"ERC721: invalid token ID\\\");\\n\\n    // If token has been transfered then _owners will be populated,\\n    // otherwise the token ID represents the initial owner\\n    address owner = _owners[tokenId];\\n    if (owner == address(0)) {\\n      owner = address(uint160(tokenId));\\n    }\\n    return owner;\\n  }\\n\\n  function mint() public {\\n    _mint(_msgSender());\\n  }\\n\\n  function _mint(address receiver) internal {\\n    // Token ID == Minter Address\\n    uint256 tokenId = uint256(uint160(receiver));\\n\\n    require(receiver != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_isTokenActive(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    // Mark Token as Active\\n    _activeTokens[tokenId] = true;\\n\\n    // Fire Transfer Event\\n    emit Transfer(address(0), receiver, tokenId);\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override {\\n    require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    // Only if token has previously been transfered after mint\\n    if (_owners[tokenId] != address(0)) {\\n      _balances[from] -= 1;\\n    }\\n    _balances[to] += 1;\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(from, to, tokenId);\\n\\n    _afterTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function _hasOwnToken(address owner) internal view returns (bool) {\\n    uint256 ownerTokenId = uint256(uint160(owner));\\n    address currentOwner = _owners[ownerTokenId];\\n    return (_isTokenActive(ownerTokenId) && (currentOwner == owner || currentOwner == address(0)));\\n  }\\n\\n  function _isTokenActive(uint256 tokenId) internal view returns (bool) {\\n    // Check if Token is Active and Not Burned\\n    return (_activeTokens[tokenId] && _owners[tokenId] != _NULL_ADDRESS);\\n  }\\n}\\n\",\"keccak256\":\"0x2f8f19d8616675c611ea23b3d5f1fbb7736a9c67ef22ded2df0883515454cda3\",\"license\":\"MIT\"},\"contracts/lib/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * NOTE:\\n *  The only changes made here are:\\n *    - change scope of \\\"_owners\\\" from private to internal\\n *    - change scope of \\\"_balances\\\" from private to internal\\n *    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"\\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\\n        _owners[tokenId] = _NULL_ADDRESS;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x726960336df673d5fd509dde21ba3bed24645291d201f74762b945fe4d5aa016\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/ERC721All.sol:ERC721All","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":2200,"contract":"contracts/ERC721All.sol:ERC721All","label":"_name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2202,"contract":"contracts/ERC721All.sol:ERC721All","label":"_symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2206,"contract":"contracts/ERC721All.sol:ERC721All","label":"_owners","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_address)"},{"astId":2210,"contract":"contracts/ERC721All.sol:ERC721All","label":"_balances","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":2214,"contract":"contracts/ERC721All.sol:ERC721All","label":"_tokenApprovals","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_address)"},{"astId":2220,"contract":"contracts/ERC721All.sol:ERC721All","label":"_operatorApprovals","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1874,"contract":"contracts/ERC721All.sol:ERC721All","label":"_activeTokens","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. NOTE:  The only changes made here are:    - change scope of \"_owners\" from private to internal    - change scope of \"_balances\" from private to internal    - remove \"ERC721\" scope-resolution from \"ownerOf\" calls in order to override \"ownerOf\"    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2237":{"entryPoint":null,"id":2237,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":576,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":651,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":437,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":289,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":468,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":522,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":835,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":336,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":309,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":314,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":304,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":299,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":319,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"423:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:13"},"nodeType":"YulFunctionCall","src":"433:12:13"},"nodeType":"YulExpressionStatement","src":"433:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:13"},{"body":{"nodeType":"YulBlock","src":"546:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:13"},"nodeType":"YulFunctionCall","src":"556:12:13"},"nodeType":"YulExpressionStatement","src":"556:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:13"},{"body":{"nodeType":"YulBlock","src":"628:54:13","statements":[{"nodeType":"YulAssignment","src":"638:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:13"},"nodeType":"YulFunctionCall","src":"652:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:13"},"nodeType":"YulFunctionCall","src":"668:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:13"},"nodeType":"YulFunctionCall","src":"648:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:13","type":""}],"src":"580:102:13"},{"body":{"nodeType":"YulBlock","src":"716:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:13"},"nodeType":"YulFunctionCall","src":"726:88:13"},"nodeType":"YulExpressionStatement","src":"726:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:13"},"nodeType":"YulFunctionCall","src":"823:15:13"},"nodeType":"YulExpressionStatement","src":"823:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:13"},"nodeType":"YulFunctionCall","src":"847:15:13"},"nodeType":"YulExpressionStatement","src":"847:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:13"},{"body":{"nodeType":"YulBlock","src":"917:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:13"},"nodeType":"YulFunctionCall","src":"957:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:13"},"nodeType":"YulFunctionCall","src":"945:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:13"},"nodeType":"YulFunctionCall","src":"1098:18:13"},"nodeType":"YulExpressionStatement","src":"1098:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:13"},"nodeType":"YulFunctionCall","src":"1036:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:13"},"nodeType":"YulFunctionCall","src":"1072:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:13"},"nodeType":"YulFunctionCall","src":"1033:62:13"},"nodeType":"YulIf","src":"1030:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:13"},"nodeType":"YulFunctionCall","src":"1127:22:13"},"nodeType":"YulExpressionStatement","src":"1127:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:13","type":""}],"src":"874:281:13"},{"body":{"nodeType":"YulBlock","src":"1202:88:13","statements":[{"nodeType":"YulAssignment","src":"1212:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:13"},"nodeType":"YulFunctionCall","src":"1222:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:13"},"nodeType":"YulFunctionCall","src":"1251:33:13"},"nodeType":"YulExpressionStatement","src":"1251:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:13","type":""}],"src":"1161:129:13"},{"body":{"nodeType":"YulBlock","src":"1363:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:13"},"nodeType":"YulFunctionCall","src":"1470:18:13"},"nodeType":"YulExpressionStatement","src":"1470:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:13"},"nodeType":"YulFunctionCall","src":"1437:30:13"},"nodeType":"YulIf","src":"1434:56:13"},{"nodeType":"YulAssignment","src":"1500:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:13"},"nodeType":"YulFunctionCall","src":"1508:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:13"}]},{"nodeType":"YulAssignment","src":"1574:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:13"},"nodeType":"YulFunctionCall","src":"1582:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:13"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:13","type":""}],"src":"1296:308:13"},{"body":{"nodeType":"YulBlock","src":"1659:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:13"},"nodeType":"YulFunctionCall","src":"1759:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:13"},"nodeType":"YulFunctionCall","src":"1778:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:13"},"nodeType":"YulFunctionCall","src":"1772:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:13"},"nodeType":"YulFunctionCall","src":"1752:39:13"},"nodeType":"YulExpressionStatement","src":"1752:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:13"},"nodeType":"YulFunctionCall","src":"1696:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:13","statements":[{"nodeType":"YulAssignment","src":"1712:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:13"},"nodeType":"YulFunctionCall","src":"1717:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:13","statements":[]},"src":"1688:113:13"},{"body":{"nodeType":"YulBlock","src":"1835:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:13"},"nodeType":"YulFunctionCall","src":"1881:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:13"},"nodeType":"YulFunctionCall","src":"1874:27:13"},"nodeType":"YulExpressionStatement","src":"1874:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:13"},"nodeType":"YulFunctionCall","src":"1813:13:13"},"nodeType":"YulIf","src":"1810:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:13","type":""}],"src":"1610:307:13"},{"body":{"nodeType":"YulBlock","src":"2018:326:13","statements":[{"nodeType":"YulAssignment","src":"2028:75:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:13"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:13"},"nodeType":"YulFunctionCall","src":"2053:49:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:13"},"nodeType":"YulFunctionCall","src":"2037:66:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:13"},"nodeType":"YulFunctionCall","src":"2112:21:13"},"nodeType":"YulExpressionStatement","src":"2112:21:13"},{"nodeType":"YulVariableDeclaration","src":"2142:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:13"},"nodeType":"YulFunctionCall","src":"2153:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:13"},"nodeType":"YulFunctionCall","src":"2209:79:13"},"nodeType":"YulExpressionStatement","src":"2209:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:13"},"nodeType":"YulFunctionCall","src":"2184:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:13"},"nodeType":"YulFunctionCall","src":"2181:25:13"},"nodeType":"YulIf","src":"2178:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:13"},"nodeType":"YulFunctionCall","src":"2299:39:13"},"nodeType":"YulExpressionStatement","src":"2299:39:13"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:13","type":""}],"src":"1923:421:13"},{"body":{"nodeType":"YulBlock","src":"2437:282:13","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:13"},"nodeType":"YulFunctionCall","src":"2488:79:13"},"nodeType":"YulExpressionStatement","src":"2488:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:13"},"nodeType":"YulFunctionCall","src":"2461:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:13"},"nodeType":"YulFunctionCall","src":"2457:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:13"},"nodeType":"YulFunctionCall","src":"2450:35:13"},"nodeType":"YulIf","src":"2447:122:13"},{"nodeType":"YulVariableDeclaration","src":"2578:27:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:13"},"nodeType":"YulFunctionCall","src":"2592:13:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:13"},"nodeType":"YulFunctionCall","src":"2682:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:13"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:13"},"nodeType":"YulFunctionCall","src":"2623:90:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:13"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:13","type":""}],"src":"2364:355:13"},{"body":{"nodeType":"YulBlock","src":"2839:739:13","statements":[{"body":{"nodeType":"YulBlock","src":"2885:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2887:77:13"},"nodeType":"YulFunctionCall","src":"2887:79:13"},"nodeType":"YulExpressionStatement","src":"2887:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2856:3:13"},"nodeType":"YulFunctionCall","src":"2856:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2852:3:13"},"nodeType":"YulFunctionCall","src":"2852:32:13"},"nodeType":"YulIf","src":"2849:119:13"},{"nodeType":"YulBlock","src":"2978:291:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2993:38:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:13"},"nodeType":"YulFunctionCall","src":"3013:17:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3007:5:13"},"nodeType":"YulFunctionCall","src":"3007:24:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2997:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3078:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3080:77:13"},"nodeType":"YulFunctionCall","src":"3080:79:13"},"nodeType":"YulExpressionStatement","src":"3080:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3050:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3058:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3047:2:13"},"nodeType":"YulFunctionCall","src":"3047:30:13"},"nodeType":"YulIf","src":"3044:117:13"},{"nodeType":"YulAssignment","src":"3175:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3242:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:13"},"nodeType":"YulFunctionCall","src":"3227:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3185:41:13"},"nodeType":"YulFunctionCall","src":"3185:74:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3175:6:13"}]}]},{"nodeType":"YulBlock","src":"3279:292:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3294:39:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3318:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3329:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3314:3:13"},"nodeType":"YulFunctionCall","src":"3314:18:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3308:5:13"},"nodeType":"YulFunctionCall","src":"3308:25:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3298:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3380:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3382:77:13"},"nodeType":"YulFunctionCall","src":"3382:79:13"},"nodeType":"YulExpressionStatement","src":"3382:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3352:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3360:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:13"},"nodeType":"YulFunctionCall","src":"3349:30:13"},"nodeType":"YulIf","src":"3346:117:13"},{"nodeType":"YulAssignment","src":"3477:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3533:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3544:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:13"},"nodeType":"YulFunctionCall","src":"3529:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3553:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3487:41:13"},"nodeType":"YulFunctionCall","src":"3487:74:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3477:6:13"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2801:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2812:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2824:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2832:6:13","type":""}],"src":"2725:853:13"},{"body":{"nodeType":"YulBlock","src":"3612:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3629:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3632:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:13"},"nodeType":"YulFunctionCall","src":"3622:88:13"},"nodeType":"YulExpressionStatement","src":"3622:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3726:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3719:6:13"},"nodeType":"YulFunctionCall","src":"3719:15:13"},"nodeType":"YulExpressionStatement","src":"3719:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:13"},"nodeType":"YulFunctionCall","src":"3743:15:13"},"nodeType":"YulExpressionStatement","src":"3743:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3584:180:13"},{"body":{"nodeType":"YulBlock","src":"3821:269:13","statements":[{"nodeType":"YulAssignment","src":"3831:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3845:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3841:3:13"},"nodeType":"YulFunctionCall","src":"3841:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3831:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"3862:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3892:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3888:3:13"},"nodeType":"YulFunctionCall","src":"3888:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3866:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3939:51:13","statements":[{"nodeType":"YulAssignment","src":"3953:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3967:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3975:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3963:3:13"},"nodeType":"YulFunctionCall","src":"3963:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3953:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3919:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3912:6:13"},"nodeType":"YulFunctionCall","src":"3912:26:13"},"nodeType":"YulIf","src":"3909:81:13"},{"body":{"nodeType":"YulBlock","src":"4042:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4056:16:13"},"nodeType":"YulFunctionCall","src":"4056:18:13"},"nodeType":"YulExpressionStatement","src":"4056:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4006:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4029:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4026:2:13"},"nodeType":"YulFunctionCall","src":"4026:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4003:2:13"},"nodeType":"YulFunctionCall","src":"4003:38:13"},"nodeType":"YulIf","src":"4000:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3805:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3814:6:13","type":""}],"src":"3770:320:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620024f5380380620024f58339818101604052810190620000379190620002be565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a7565b8280546200007f9062000372565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018a826200013f565b810181811067ffffffffffffffff82111715620001ac57620001ab62000150565b5b80604052505050565b6000620001c162000121565b9050620001cf82826200017f565b919050565b600067ffffffffffffffff821115620001f257620001f162000150565b5b620001fd826200013f565b9050602081019050919050565b60005b838110156200022a5780820151818401526020810190506200020d565b838111156200023a576000848401525b50505050565b6000620002576200025184620001d4565b620001b5565b9050828152602081018484840111156200027657620002756200013a565b5b620002838482856200020a565b509392505050565b600082601f830112620002a357620002a262000135565b5b8151620002b584826020860162000240565b91505092915050565b60008060408385031215620002d857620002d76200012b565b5b600083015167ffffffffffffffff811115620002f957620002f862000130565b5b62000307858286016200028b565b925050602083015167ffffffffffffffff8111156200032b576200032a62000130565b5b62000339858286016200028b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038b57607f821691505b602082108103620003a157620003a062000343565b5b50919050565b61213e80620003b76000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611450565b6102bc565b6040516100fb9190611498565b60405180910390f35b61010c61039e565b604051610119919061154c565b60405180910390f35b61013c600480360381019061013791906115a4565b610430565b6040516101499190611612565b60405180910390f35b61016c60048036038101906101679190611659565b610476565b005b61018860048036038101906101839190611699565b61058d565b005b6101a4600480360381019061019f9190611699565b6105ed565b005b6101c060048036038101906101bb91906115a4565b61060d565b6040516101cd9190611612565b60405180910390f35b6101f060048036038101906101eb91906116ec565b6106be565b6040516101fd9190611728565b60405180910390f35b61020e610775565b60405161021b919061154c565b60405180910390f35b61023e6004803603810190610239919061176f565b610807565b005b61025a600480360381019061025591906118e4565b61081d565b005b610276600480360381019061027191906115a4565b61087f565b604051610283919061154c565b60405180910390f35b6102a660048036038101906102a19190611967565b6108e7565b6040516102b39190611498565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061039757506103968261097b565b5b9050919050565b6060600080546103ad906119d6565b80601f01602080910402602001604051908101604052809291908181526020018280546103d9906119d6565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109e5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611a79565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a30565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a30565b6108e7565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611b0b565b60405180910390fd5b6105888383610a38565b505050565b61059e610598610a30565b82610af1565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611b9d565b60405180910390fd5b6105e8838383610b86565b505050565b6106088383836040518060200160405280600081525061081d565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac90611c09565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611c9b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610784906119d6565b80601f01602080910402602001604051908101604052809291908181526020018280546107b0906119d6565b80156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b5050505050905090565b610819610812610a30565b8383610dec565b5050565b61082e610828610a30565b83610af1565b61086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490611b9d565b60405180910390fd5b61087984848484610f58565b50505050565b606061088a826109e5565b6000610894610fb4565b905060008151116108b457604051806020016040528060008152506108df565b806108be84610fcb565b6040516020016108cf929190611cf7565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109ee81611099565b610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490611c09565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610aab8361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610afd8361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b3f5750610b3e81856108e7565b5b80610b7d57508373ffffffffffffffffffffffffffffffffffffffff16610b6584610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610ba68261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf390611d8d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6290611e1f565b60405180910390fd5b610c76838383611105565b610c81600082610a38565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cd19190611e6e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d289190611ea2565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610de783838361110a565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5190611f44565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f4b9190611498565b60405180910390a3505050565b610f63848484610b86565b610f6f8484848461110f565b610fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa590611fd6565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060006001610fda84611291565b01905060008167ffffffffffffffff811115610ff957610ff86117b9565b5b6040519080825280601f01601f19166020018201604052801561102b5781602001600182028036833780820191505090505b509050600082602001820190505b60011561108e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161108257611081611ff6565b5b04945060008503611039575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff163b1115611284578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611154610a30565b8786866040518563ffffffff1660e01b8152600401611176949392919061207a565b6020604051808303816000875af19250505080156111b257506040513d601f19601f820116820180604052508101906111af91906120db565b60015b611234573d80600081146111e2576040519150601f19603f3d011682016040523d82523d6000602084013e6111e7565b606091505b50600081510361122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390611fd6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611289565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112ef577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816112e5576112e4611ff6565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061132c576d04ee2d6d415b85acef8100000000838161132257611321611ff6565b5b0492506020810190505b662386f26fc10000831061135b57662386f26fc10000838161135157611350611ff6565b5b0492506010810190505b6305f5e1008310611384576305f5e100838161137a57611379611ff6565b5b0492506008810190505b61271083106113a957612710838161139f5761139e611ff6565b5b0492506004810190505b606483106113cc57606483816113c2576113c1611ff6565b5b0492506002810190505b600a83106113db576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61142d816113f8565b811461143857600080fd5b50565b60008135905061144a81611424565b92915050565b600060208284031215611466576114656113ee565b5b60006114748482850161143b565b91505092915050565b60008115159050919050565b6114928161147d565b82525050565b60006020820190506114ad6000830184611489565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ed5780820151818401526020810190506114d2565b838111156114fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061151e826114b3565b61152881856114be565b93506115388185602086016114cf565b61154181611502565b840191505092915050565b600060208201905081810360008301526115668184611513565b905092915050565b6000819050919050565b6115818161156e565b811461158c57600080fd5b50565b60008135905061159e81611578565b92915050565b6000602082840312156115ba576115b96113ee565b5b60006115c88482850161158f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115fc826115d1565b9050919050565b61160c816115f1565b82525050565b60006020820190506116276000830184611603565b92915050565b611636816115f1565b811461164157600080fd5b50565b6000813590506116538161162d565b92915050565b600080604083850312156116705761166f6113ee565b5b600061167e85828601611644565b925050602061168f8582860161158f565b9150509250929050565b6000806000606084860312156116b2576116b16113ee565b5b60006116c086828701611644565b93505060206116d186828701611644565b92505060406116e28682870161158f565b9150509250925092565b600060208284031215611702576117016113ee565b5b600061171084828501611644565b91505092915050565b6117228161156e565b82525050565b600060208201905061173d6000830184611719565b92915050565b61174c8161147d565b811461175757600080fd5b50565b60008135905061176981611743565b92915050565b60008060408385031215611786576117856113ee565b5b600061179485828601611644565b92505060206117a58582860161175a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117f182611502565b810181811067ffffffffffffffff821117156118105761180f6117b9565b5b80604052505050565b60006118236113e4565b905061182f82826117e8565b919050565b600067ffffffffffffffff82111561184f5761184e6117b9565b5b61185882611502565b9050602081019050919050565b82818337600083830152505050565b600061188761188284611834565b611819565b9050828152602081018484840111156118a3576118a26117b4565b5b6118ae848285611865565b509392505050565b600082601f8301126118cb576118ca6117af565b5b81356118db848260208601611874565b91505092915050565b600080600080608085870312156118fe576118fd6113ee565b5b600061190c87828801611644565b945050602061191d87828801611644565b935050604061192e8782880161158f565b925050606085013567ffffffffffffffff81111561194f5761194e6113f3565b5b61195b878288016118b6565b91505092959194509250565b6000806040838503121561197e5761197d6113ee565b5b600061198c85828601611644565b925050602061199d85828601611644565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119ee57607f821691505b602082108103611a0157611a006119a7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a636021836114be565b9150611a6e82611a07565b604082019050919050565b60006020820190508181036000830152611a9281611a56565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000611af5603e836114be565b9150611b0082611a99565b604082019050919050565b60006020820190508181036000830152611b2481611ae8565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000611b87602e836114be565b9150611b9282611b2b565b604082019050919050565b60006020820190508181036000830152611bb681611b7a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611bf36018836114be565b9150611bfe82611bbd565b602082019050919050565b60006020820190508181036000830152611c2281611be6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611c856029836114be565b9150611c9082611c29565b604082019050919050565b60006020820190508181036000830152611cb481611c78565b9050919050565b600081905092915050565b6000611cd1826114b3565b611cdb8185611cbb565b9350611ceb8185602086016114cf565b80840191505092915050565b6000611d038285611cc6565b9150611d0f8284611cc6565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611d776025836114be565b9150611d8282611d1b565b604082019050919050565b60006020820190508181036000830152611da681611d6a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611e096024836114be565b9150611e1482611dad565b604082019050919050565b60006020820190508181036000830152611e3881611dfc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e798261156e565b9150611e848361156e565b925082821015611e9757611e96611e3f565b5b828203905092915050565b6000611ead8261156e565b9150611eb88361156e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611eed57611eec611e3f565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f2e6019836114be565b9150611f3982611ef8565b602082019050919050565b60006020820190508181036000830152611f5d81611f21565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fc06032836114be565b9150611fcb82611f64565b604082019050919050565b60006020820190508181036000830152611fef81611fb3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061204c82612025565b6120568185612030565b93506120668185602086016114cf565b61206f81611502565b840191505092915050565b600060808201905061208f6000830187611603565b61209c6020830186611603565b6120a96040830185611719565b81810360608301526120bb8184612041565b905095945050505050565b6000815190506120d581611424565b92915050565b6000602082840312156120f1576120f06113ee565b5b60006120ff848285016120c6565b9150509291505056fea26469706673582212201befbb93823bb4d4f3dd3dd02315ac03aab291ca85b918aca37bea81708f233e64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x24F5 CODESIZE SUB DUP1 PUSH3 0x24F5 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x372 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x18A DUP3 PUSH3 0x13F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1AC JUMPI PUSH3 0x1AB PUSH3 0x150 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C1 PUSH3 0x121 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CF DUP3 DUP3 PUSH3 0x17F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1F2 JUMPI PUSH3 0x1F1 PUSH3 0x150 JUMP JUMPDEST JUMPDEST PUSH3 0x1FD DUP3 PUSH3 0x13F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x22A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x20D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x23A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x257 PUSH3 0x251 DUP5 PUSH3 0x1D4 JUMP JUMPDEST PUSH3 0x1B5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x276 JUMPI PUSH3 0x275 PUSH3 0x13A JUMP JUMPDEST JUMPDEST PUSH3 0x283 DUP5 DUP3 DUP6 PUSH3 0x20A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2A3 JUMPI PUSH3 0x2A2 PUSH3 0x135 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x2B5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x240 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2D8 JUMPI PUSH3 0x2D7 PUSH3 0x12B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2F9 JUMPI PUSH3 0x2F8 PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x307 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x32B JUMPI PUSH3 0x32A PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x339 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x38B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x3A1 JUMPI PUSH3 0x3A0 PUSH3 0x343 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x213E DUP1 PUSH3 0x3B7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1659 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x807 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x97B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1A79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA30 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA30 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA38 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA30 JUMP JUMPDEST DUP3 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB86 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x81D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AC SWAP1 PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x72E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x725 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x784 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7B0 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0x812 PUSH2 0xA30 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xDEC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x82E PUSH2 0x828 PUSH2 0xA30 JUMP JUMPDEST DUP4 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x86D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x864 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x879 DUP5 DUP5 DUP5 DUP5 PUSH2 0xF58 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x88A DUP3 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x894 PUSH2 0xFB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x8B4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8DF JUMP JUMPDEST DUP1 PUSH2 0x8BE DUP5 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8CF SWAP3 SWAP2 SWAP1 PUSH2 0x1CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1099 JUMP JUMPDEST PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA24 SWAP1 PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAAB DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAFD DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB3F JUMPI POP PUSH2 0xB3E DUP2 DUP6 PUSH2 0x8E7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB7D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB65 DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBA6 DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF3 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC62 SWAP1 PUSH2 0x1E1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC76 DUP4 DUP4 DUP4 PUSH2 0x1105 JUMP JUMPDEST PUSH2 0xC81 PUSH1 0x0 DUP3 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCD1 SWAP2 SWAP1 PUSH2 0x1E6E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xD28 SWAP2 SWAP1 PUSH2 0x1EA2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDE7 DUP4 DUP4 DUP4 PUSH2 0x110A JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE51 SWAP1 PUSH2 0x1F44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF63 DUP5 DUP5 DUP5 PUSH2 0xB86 JUMP JUMPDEST PUSH2 0xF6F DUP5 DUP5 DUP5 DUP5 PUSH2 0x110F JUMP JUMPDEST PUSH2 0xFAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFA5 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xFDA DUP5 PUSH2 0x1291 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF9 JUMPI PUSH2 0xFF8 PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x102B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x108E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1082 JUMPI PUSH2 0x1081 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1039 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1284 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1154 PUSH2 0xA30 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1176 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x207A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11B2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11AF SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1234 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x122C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1223 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1289 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x12EF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x12E5 JUMPI PUSH2 0x12E4 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x132C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1322 JUMPI PUSH2 0x1321 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x135B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1351 JUMPI PUSH2 0x1350 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1384 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x137A JUMPI PUSH2 0x1379 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x13A9 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x139F JUMPI PUSH2 0x139E PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x13CC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x13C2 JUMPI PUSH2 0x13C1 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x13DB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x142D DUP2 PUSH2 0x13F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x144A DUP2 PUSH2 0x1424 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1466 JUMPI PUSH2 0x1465 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1474 DUP5 DUP3 DUP6 ADD PUSH2 0x143B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1492 DUP2 PUSH2 0x147D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x14AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1489 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14ED JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14D2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14FC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151E DUP3 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1528 DUP2 DUP6 PUSH2 0x14BE JUMP JUMPDEST SWAP4 POP PUSH2 0x1538 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x1541 DUP2 PUSH2 0x1502 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1566 DUP2 DUP5 PUSH2 0x1513 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1581 DUP2 PUSH2 0x156E JUMP JUMPDEST DUP2 EQ PUSH2 0x158C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x159E DUP2 PUSH2 0x1578 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BA JUMPI PUSH2 0x15B9 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15C8 DUP5 DUP3 DUP6 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FC DUP3 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x160C DUP2 PUSH2 0x15F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1627 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1636 DUP2 PUSH2 0x15F1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1653 DUP2 PUSH2 0x162D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x167E DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x168F DUP6 DUP3 DUP7 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16B2 JUMPI PUSH2 0x16B1 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C0 DUP7 DUP3 DUP8 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x16D1 DUP7 DUP3 DUP8 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x16E2 DUP7 DUP3 DUP8 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1702 JUMPI PUSH2 0x1701 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1710 DUP5 DUP3 DUP6 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1722 DUP2 PUSH2 0x156E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x173D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1719 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x174C DUP2 PUSH2 0x147D JUMP JUMPDEST DUP2 EQ PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1769 DUP2 PUSH2 0x1743 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1786 JUMPI PUSH2 0x1785 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1794 DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17A5 DUP6 DUP3 DUP7 ADD PUSH2 0x175A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x17F1 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1810 JUMPI PUSH2 0x180F PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1823 PUSH2 0x13E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x182F DUP3 DUP3 PUSH2 0x17E8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184F JUMPI PUSH2 0x184E PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST PUSH2 0x1858 DUP3 PUSH2 0x1502 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1887 PUSH2 0x1882 DUP5 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0x1819 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x18A2 PUSH2 0x17B4 JUMP JUMPDEST JUMPDEST PUSH2 0x18AE DUP5 DUP3 DUP6 PUSH2 0x1865 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18CB JUMPI PUSH2 0x18CA PUSH2 0x17AF JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18DB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1874 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18FE JUMPI PUSH2 0x18FD PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x190C DUP8 DUP3 DUP9 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x191D DUP8 DUP3 DUP9 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x192E DUP8 DUP3 DUP9 ADD PUSH2 0x158F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194F JUMPI PUSH2 0x194E PUSH2 0x13F3 JUMP JUMPDEST JUMPDEST PUSH2 0x195B DUP8 DUP3 DUP9 ADD PUSH2 0x18B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x197E JUMPI PUSH2 0x197D PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x198C DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x199D DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x19EE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A01 JUMPI PUSH2 0x1A00 PUSH2 0x19A7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A63 PUSH1 0x21 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6E DUP3 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A92 DUP2 PUSH2 0x1A56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AF5 PUSH1 0x3E DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1B00 DUP3 PUSH2 0x1A99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B24 DUP2 PUSH2 0x1AE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206E6F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B87 PUSH1 0x2E DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1B92 DUP3 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB6 DUP2 PUSH2 0x1B7A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF3 PUSH1 0x18 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1BFE DUP3 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C22 DUP2 PUSH2 0x1BE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C85 PUSH1 0x29 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1C90 DUP3 PUSH2 0x1C29 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB4 DUP2 PUSH2 0x1C78 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD1 DUP3 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1CDB DUP2 DUP6 PUSH2 0x1CBB JUMP JUMPDEST SWAP4 POP PUSH2 0x1CEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D03 DUP3 DUP6 PUSH2 0x1CC6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D0F DUP3 DUP5 PUSH2 0x1CC6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D77 PUSH1 0x25 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1D82 DUP3 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DA6 DUP2 PUSH2 0x1D6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E09 PUSH1 0x24 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1E14 DUP3 PUSH2 0x1DAD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E38 DUP2 PUSH2 0x1DFC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E79 DUP3 PUSH2 0x156E JUMP JUMPDEST SWAP2 POP PUSH2 0x1E84 DUP4 PUSH2 0x156E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E97 JUMPI PUSH2 0x1E96 PUSH2 0x1E3F JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EAD DUP3 PUSH2 0x156E JUMP JUMPDEST SWAP2 POP PUSH2 0x1EB8 DUP4 PUSH2 0x156E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EED JUMPI PUSH2 0x1EEC PUSH2 0x1E3F JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2E PUSH1 0x19 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1F39 DUP3 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F5D DUP2 PUSH2 0x1F21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC0 PUSH1 0x32 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCB DUP3 PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FEF DUP2 PUSH2 0x1FB3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x204C DUP3 PUSH2 0x2025 JUMP JUMPDEST PUSH2 0x2056 DUP2 DUP6 PUSH2 0x2030 JUMP JUMPDEST SWAP4 POP PUSH2 0x2066 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x206F DUP2 PUSH2 0x1502 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x208F PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x209C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x20A9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1719 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 DUP5 PUSH2 0x2041 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20D5 DUP2 PUSH2 0x1424 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20F1 JUMPI PUSH2 0x20F0 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20FF DUP5 DUP3 DUP6 ADD PUSH2 0x20C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL 0xEF 0xBB SWAP4 DUP3 EXTCODESIZE 0xB4 0xD4 RETURN 0xDD RETURNDATASIZE 0xD0 0x23 ISZERO 0xAC SUB 0xAA 0xB2 SWAP2 0xCA DUP6 0xB9 XOR 0xAC LOG3 PUSH28 0xEA81708F233E64736F6C634300080D00330000000000000000000000 ","sourceMap":"1382:13860:12:-:0;;;2237:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2311:5;2303;:13;;;;;;;;;;;;:::i;:::-;;2336:7;2326;:17;;;;;;;;;;;;:::i;:::-;;2237:113;;1382:13860;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;1382:13860:12:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_3038":{"entryPoint":4362,"id":3038,"parameterSlots":3,"returnSlots":0},"@_approve_2906":{"entryPoint":2616,"id":2906,"parameterSlots":2,"returnSlots":0},"@_baseURI_2388":{"entryPoint":4020,"id":2388,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_3027":{"entryPoint":4357,"id":3027,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3016":{"entryPoint":4367,"id":3016,"parameterSlots":4,"returnSlots":1},"@_exists_2606":{"entryPoint":4249,"id":2606,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2639":{"entryPoint":2801,"id":2639,"parameterSlots":2,"returnSlots":1},"@_msgSender_615":{"entryPoint":2608,"id":615,"parameterSlots":0,"returnSlots":1},"@_requireMinted_2952":{"entryPoint":2533,"id":2952,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_2588":{"entryPoint":3928,"id":2588,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2938":{"entryPoint":3564,"id":2938,"parameterSlots":3,"returnSlots":0},"@_transfer_2883":{"entryPoint":2950,"id":2883,"parameterSlots":3,"returnSlots":0},"@approve_2430":{"entryPoint":1142,"id":2430,"parameterSlots":2,"returnSlots":0},"@balanceOf_2292":{"entryPoint":1726,"id":2292,"parameterSlots":1,"returnSlots":1},"@getApproved_2448":{"entryPoint":1072,"id":2448,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2483":{"entryPoint":2279,"id":2483,"parameterSlots":2,"returnSlots":1},"@log10_1593":{"entryPoint":4753,"id":1593,"parameterSlots":1,"returnSlots":1},"@name_2330":{"entryPoint":926,"id":2330,"parameterSlots":0,"returnSlots":1},"@ownerOf_2320":{"entryPoint":1549,"id":2320,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_2529":{"entryPoint":1517,"id":2529,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2559":{"entryPoint":2077,"id":2559,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2465":{"entryPoint":2055,"id":2465,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2268":{"entryPoint":700,"id":2268,"parameterSlots":1,"returnSlots":1},"@supportsInterface_877":{"entryPoint":2427,"id":877,"parameterSlots":1,"returnSlots":1},"@symbol_2340":{"entryPoint":1909,"id":2340,"parameterSlots":0,"returnSlots":1},"@toString_684":{"entryPoint":4043,"id":684,"parameterSlots":1,"returnSlots":1},"@tokenURI_2379":{"entryPoint":2175,"id":2379,"parameterSlots":1,"returnSlots":1},"@transferFrom_2510":{"entryPoint":1421,"id":2510,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6260,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5700,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5978,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5179,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8390,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5519,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5868,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6503,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5785,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6372,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":5999,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5721,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5635,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5257,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8257,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5395,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8115,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7530,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":7676,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":7969,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7288,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack":{"entryPoint":6888,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7142,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6742,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack":{"entryPoint":7034,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5913,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7415,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5650,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8314,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5272,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7565,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7711,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8004,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7323,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6923,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7177,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6777,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7069,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":5928,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6169,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5092,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6196,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8229,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5299,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8240,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5310,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7355,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7842,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7790,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5617,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5245,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5112,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5585,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5486,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":6245,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":5327,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6614,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6120,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":7743,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8182,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6567,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6073,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6063,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6068,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5107,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5102,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5378,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8036,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7451,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":7597,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":7928,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7209,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304":{"entryPoint":6809,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7101,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":6663,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b":{"entryPoint":6955,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5677,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":5955,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5156,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5496,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23863:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"378:105:13","statements":[{"nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:13"},"nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:13"},"nodeType":"YulFunctionCall","src":"589:12:13"},"nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:13"},"nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:13"},"nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:13"},"nodeType":"YulFunctionCall","src":"544:42:13"},"nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nodeType":"YulBlock","src":"666:86:13","statements":[{"nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:13"},"nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:13"},"nodeType":"YulFunctionCall","src":"714:32:13"},"nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:13"},"nodeType":"YulFunctionCall","src":"871:79:13"},"nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:13"},"nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:13"},"nodeType":"YulFunctionCall","src":"836:32:13"},"nodeType":"YulIf","src":"833:119:13"},{"nodeType":"YulBlock","src":"962:116:13","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:13"},"nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:13"},"nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nodeType":"YulBlock","src":"1133:48:13","statements":[{"nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:13"},"nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:13"},"nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:13"},"nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:13"},"nodeType":"YulFunctionCall","src":"1256:34:13"},"nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nodeType":"YulBlock","src":"1394:118:13","statements":[{"nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:13"},"nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:13"},"nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:13"},"nodeType":"YulFunctionCall","src":"1440:65:13"},"nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nodeType":"YulBlock","src":"1577:40:13","statements":[{"nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:13"},"nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:13"},"nodeType":"YulFunctionCall","src":"1729:19:13"},"nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:13"},"nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nodeType":"YulBlock","src":"1847:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:13"},"nodeType":"YulFunctionCall","src":"1947:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:13"},"nodeType":"YulFunctionCall","src":"1966:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:13"},"nodeType":"YulFunctionCall","src":"1960:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:13"},"nodeType":"YulFunctionCall","src":"1940:39:13"},"nodeType":"YulExpressionStatement","src":"1940:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:13"},"nodeType":"YulFunctionCall","src":"1884:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:13","statements":[{"nodeType":"YulAssignment","src":"1900:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:13"},"nodeType":"YulFunctionCall","src":"1905:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:13","statements":[]},"src":"1876:113:13"},{"body":{"nodeType":"YulBlock","src":"2023:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:13"},"nodeType":"YulFunctionCall","src":"2069:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:13"},"nodeType":"YulFunctionCall","src":"2062:27:13"},"nodeType":"YulExpressionStatement","src":"2062:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:13"},"nodeType":"YulFunctionCall","src":"2001:13:13"},"nodeType":"YulIf","src":"1998:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:13","type":""}],"src":"1798:307:13"},{"body":{"nodeType":"YulBlock","src":"2159:54:13","statements":[{"nodeType":"YulAssignment","src":"2169:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:13"},"nodeType":"YulFunctionCall","src":"2183:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:13"},"nodeType":"YulFunctionCall","src":"2199:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:13"},"nodeType":"YulFunctionCall","src":"2179:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:13","type":""}],"src":"2111:102:13"},{"body":{"nodeType":"YulBlock","src":"2311:272:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:13"},"nodeType":"YulFunctionCall","src":"2335:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:13"},"nodeType":"YulFunctionCall","src":"2390:71:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:13"},"nodeType":"YulFunctionCall","src":"2492:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:13"},"nodeType":"YulFunctionCall","src":"2470:52:13"},"nodeType":"YulExpressionStatement","src":"2470:52:13"},{"nodeType":"YulAssignment","src":"2531:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:13"},"nodeType":"YulFunctionCall","src":"2547:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:13"},"nodeType":"YulFunctionCall","src":"2538:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:13","type":""}],"src":"2219:364:13"},{"body":{"nodeType":"YulBlock","src":"2707:195:13","statements":[{"nodeType":"YulAssignment","src":"2717:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:13"},"nodeType":"YulFunctionCall","src":"2725:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:13"},"nodeType":"YulFunctionCall","src":"2760:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:13"},"nodeType":"YulFunctionCall","src":"2779:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:13"},"nodeType":"YulFunctionCall","src":"2753:47:13"},"nodeType":"YulExpressionStatement","src":"2753:47:13"},{"nodeType":"YulAssignment","src":"2809:86:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:13"},"nodeType":"YulFunctionCall","src":"2817:78:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:13","type":""}],"src":"2589:313:13"},{"body":{"nodeType":"YulBlock","src":"2953:32:13","statements":[{"nodeType":"YulAssignment","src":"2963:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:13"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:13","type":""}],"src":"2908:77:13"},{"body":{"nodeType":"YulBlock","src":"3034:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:13"},"nodeType":"YulFunctionCall","src":"3093:12:13"},"nodeType":"YulExpressionStatement","src":"3093:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:13"},"nodeType":"YulFunctionCall","src":"3064:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:13"},"nodeType":"YulFunctionCall","src":"3054:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:13"},"nodeType":"YulFunctionCall","src":"3047:43:13"},"nodeType":"YulIf","src":"3044:63:13"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:13","type":""}],"src":"2991:122:13"},{"body":{"nodeType":"YulBlock","src":"3171:87:13","statements":[{"nodeType":"YulAssignment","src":"3181:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:13"},"nodeType":"YulFunctionCall","src":"3190:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:13"},"nodeType":"YulFunctionCall","src":"3219:33:13"},"nodeType":"YulExpressionStatement","src":"3219:33:13"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:13","type":""}],"src":"3119:139:13"},{"body":{"nodeType":"YulBlock","src":"3330:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:13"},"nodeType":"YulFunctionCall","src":"3378:79:13"},"nodeType":"YulExpressionStatement","src":"3378:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:13"},"nodeType":"YulFunctionCall","src":"3347:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:13"},"nodeType":"YulFunctionCall","src":"3343:32:13"},"nodeType":"YulIf","src":"3340:119:13"},{"nodeType":"YulBlock","src":"3469:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:13","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:13"},"nodeType":"YulFunctionCall","src":"3544:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:13"},"nodeType":"YulFunctionCall","src":"3523:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:13","type":""}],"src":"3264:329:13"},{"body":{"nodeType":"YulBlock","src":"3644:81:13","statements":[{"nodeType":"YulAssignment","src":"3654:65:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:13"},"nodeType":"YulFunctionCall","src":"3665:54:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:13"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:13","type":""}],"src":"3599:126:13"},{"body":{"nodeType":"YulBlock","src":"3776:51:13","statements":[{"nodeType":"YulAssignment","src":"3786:35:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:13"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:13"},"nodeType":"YulFunctionCall","src":"3797:24:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:13"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:13","type":""}],"src":"3731:96:13"},{"body":{"nodeType":"YulBlock","src":"3898:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:13"},"nodeType":"YulFunctionCall","src":"3920:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:13"},"nodeType":"YulFunctionCall","src":"3908:37:13"},"nodeType":"YulExpressionStatement","src":"3908:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:13","type":""}],"src":"3833:118:13"},{"body":{"nodeType":"YulBlock","src":"4055:124:13","statements":[{"nodeType":"YulAssignment","src":"4065:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:13"},"nodeType":"YulFunctionCall","src":"4073:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:13"},"nodeType":"YulFunctionCall","src":"4154:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:13"},"nodeType":"YulFunctionCall","src":"4101:71:13"},"nodeType":"YulExpressionStatement","src":"4101:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:13","type":""}],"src":"3957:222:13"},{"body":{"nodeType":"YulBlock","src":"4228:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:13"},"nodeType":"YulFunctionCall","src":"4287:12:13"},"nodeType":"YulExpressionStatement","src":"4287:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:13"},"nodeType":"YulFunctionCall","src":"4258:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:13"},"nodeType":"YulFunctionCall","src":"4248:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:13"},"nodeType":"YulFunctionCall","src":"4241:43:13"},"nodeType":"YulIf","src":"4238:63:13"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:13","type":""}],"src":"4185:122:13"},{"body":{"nodeType":"YulBlock","src":"4365:87:13","statements":[{"nodeType":"YulAssignment","src":"4375:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:13"},"nodeType":"YulFunctionCall","src":"4384:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:13"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:13"},"nodeType":"YulFunctionCall","src":"4413:33:13"},"nodeType":"YulExpressionStatement","src":"4413:33:13"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:13","type":""}],"src":"4313:139:13"},{"body":{"nodeType":"YulBlock","src":"4541:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:13"},"nodeType":"YulFunctionCall","src":"4589:79:13"},"nodeType":"YulExpressionStatement","src":"4589:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:13"},"nodeType":"YulFunctionCall","src":"4558:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:13"},"nodeType":"YulFunctionCall","src":"4554:32:13"},"nodeType":"YulIf","src":"4551:119:13"},{"nodeType":"YulBlock","src":"4680:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:13"},"nodeType":"YulFunctionCall","src":"4755:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:13"},"nodeType":"YulFunctionCall","src":"4734:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:13"}]}]},{"nodeType":"YulBlock","src":"4807:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:13"},"nodeType":"YulFunctionCall","src":"4883:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:13"},"nodeType":"YulFunctionCall","src":"4862:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:13","type":""}],"src":"4458:474:13"},{"body":{"nodeType":"YulBlock","src":"5038:519:13","statements":[{"body":{"nodeType":"YulBlock","src":"5084:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5086:77:13"},"nodeType":"YulFunctionCall","src":"5086:79:13"},"nodeType":"YulExpressionStatement","src":"5086:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5059:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5068:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5055:3:13"},"nodeType":"YulFunctionCall","src":"5055:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5080:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5051:3:13"},"nodeType":"YulFunctionCall","src":"5051:32:13"},"nodeType":"YulIf","src":"5048:119:13"},{"nodeType":"YulBlock","src":"5177:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5192:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5206:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5196:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5221:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5267:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:13"},"nodeType":"YulFunctionCall","src":"5252:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5231:20:13"},"nodeType":"YulFunctionCall","src":"5231:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5221:6:13"}]}]},{"nodeType":"YulBlock","src":"5304:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5319:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5333:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5323:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5349:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5384:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5395:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:13"},"nodeType":"YulFunctionCall","src":"5380:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5404:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5359:20:13"},"nodeType":"YulFunctionCall","src":"5359:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5349:6:13"}]}]},{"nodeType":"YulBlock","src":"5432:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5447:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5461:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5451:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5477:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5512:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5523:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5508:3:13"},"nodeType":"YulFunctionCall","src":"5508:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5532:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5487:20:13"},"nodeType":"YulFunctionCall","src":"5487:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5477:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5003:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5015:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5023:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5031:6:13","type":""}],"src":"4938:619:13"},{"body":{"nodeType":"YulBlock","src":"5629:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"5675:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5677:77:13"},"nodeType":"YulFunctionCall","src":"5677:79:13"},"nodeType":"YulExpressionStatement","src":"5677:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5650:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5646:3:13"},"nodeType":"YulFunctionCall","src":"5646:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5671:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5642:3:13"},"nodeType":"YulFunctionCall","src":"5642:32:13"},"nodeType":"YulIf","src":"5639:119:13"},{"nodeType":"YulBlock","src":"5768:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5783:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5797:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5787:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5812:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5847:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5858:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5843:3:13"},"nodeType":"YulFunctionCall","src":"5843:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5867:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5822:20:13"},"nodeType":"YulFunctionCall","src":"5822:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5812:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5599:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5610:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5622:6:13","type":""}],"src":"5563:329:13"},{"body":{"nodeType":"YulBlock","src":"5963:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5980:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6003:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5985:17:13"},"nodeType":"YulFunctionCall","src":"5985:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5973:6:13"},"nodeType":"YulFunctionCall","src":"5973:37:13"},"nodeType":"YulExpressionStatement","src":"5973:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5951:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5958:3:13","type":""}],"src":"5898:118:13"},{"body":{"nodeType":"YulBlock","src":"6120:124:13","statements":[{"nodeType":"YulAssignment","src":"6130:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6142:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6153:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:13"},"nodeType":"YulFunctionCall","src":"6138:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6130:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6210:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6223:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6234:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6219:3:13"},"nodeType":"YulFunctionCall","src":"6219:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6166:43:13"},"nodeType":"YulFunctionCall","src":"6166:71:13"},"nodeType":"YulExpressionStatement","src":"6166:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6092:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6104:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6115:4:13","type":""}],"src":"6022:222:13"},{"body":{"nodeType":"YulBlock","src":"6290:76:13","statements":[{"body":{"nodeType":"YulBlock","src":"6344:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6353:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6356:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6346:6:13"},"nodeType":"YulFunctionCall","src":"6346:12:13"},"nodeType":"YulExpressionStatement","src":"6346:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6313:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6335:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6320:14:13"},"nodeType":"YulFunctionCall","src":"6320:21:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6310:2:13"},"nodeType":"YulFunctionCall","src":"6310:32:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6303:6:13"},"nodeType":"YulFunctionCall","src":"6303:40:13"},"nodeType":"YulIf","src":"6300:60:13"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6283:5:13","type":""}],"src":"6250:116:13"},{"body":{"nodeType":"YulBlock","src":"6421:84:13","statements":[{"nodeType":"YulAssignment","src":"6431:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6453:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6440:12:13"},"nodeType":"YulFunctionCall","src":"6440:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6431:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6493:5:13"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6469:23:13"},"nodeType":"YulFunctionCall","src":"6469:30:13"},"nodeType":"YulExpressionStatement","src":"6469:30:13"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6399:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"6407:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6415:5:13","type":""}],"src":"6372:133:13"},{"body":{"nodeType":"YulBlock","src":"6591:388:13","statements":[{"body":{"nodeType":"YulBlock","src":"6637:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6639:77:13"},"nodeType":"YulFunctionCall","src":"6639:79:13"},"nodeType":"YulExpressionStatement","src":"6639:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6612:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"6621:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6608:3:13"},"nodeType":"YulFunctionCall","src":"6608:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"6633:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6604:3:13"},"nodeType":"YulFunctionCall","src":"6604:32:13"},"nodeType":"YulIf","src":"6601:119:13"},{"nodeType":"YulBlock","src":"6730:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6745:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6759:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6749:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6774:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6820:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:13"},"nodeType":"YulFunctionCall","src":"6805:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6829:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6784:20:13"},"nodeType":"YulFunctionCall","src":"6784:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6774:6:13"}]}]},{"nodeType":"YulBlock","src":"6857:115:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6872:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6886:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6876:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6902:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6934:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6945:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6930:3:13"},"nodeType":"YulFunctionCall","src":"6930:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6954:7:13"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6912:17:13"},"nodeType":"YulFunctionCall","src":"6912:50:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6902:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6553:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6564:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6576:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6584:6:13","type":""}],"src":"6511:468:13"},{"body":{"nodeType":"YulBlock","src":"7074:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7091:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7094:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7084:6:13"},"nodeType":"YulFunctionCall","src":"7084:12:13"},"nodeType":"YulExpressionStatement","src":"7084:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6985:117:13"},{"body":{"nodeType":"YulBlock","src":"7197:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7214:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7217:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7207:6:13"},"nodeType":"YulFunctionCall","src":"7207:12:13"},"nodeType":"YulExpressionStatement","src":"7207:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7108:117:13"},{"body":{"nodeType":"YulBlock","src":"7259:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7276:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7279:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:13"},"nodeType":"YulFunctionCall","src":"7269:88:13"},"nodeType":"YulExpressionStatement","src":"7269:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7376:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7366:6:13"},"nodeType":"YulFunctionCall","src":"7366:15:13"},"nodeType":"YulExpressionStatement","src":"7366:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7397:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7400:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7390:6:13"},"nodeType":"YulFunctionCall","src":"7390:15:13"},"nodeType":"YulExpressionStatement","src":"7390:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7231:180:13"},{"body":{"nodeType":"YulBlock","src":"7460:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7470:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7492:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7522:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7500:21:13"},"nodeType":"YulFunctionCall","src":"7500:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7488:3:13"},"nodeType":"YulFunctionCall","src":"7488:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7474:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"7639:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7641:16:13"},"nodeType":"YulFunctionCall","src":"7641:18:13"},"nodeType":"YulExpressionStatement","src":"7641:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7582:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"7594:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7579:2:13"},"nodeType":"YulFunctionCall","src":"7579:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7618:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7630:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7615:2:13"},"nodeType":"YulFunctionCall","src":"7615:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7576:2:13"},"nodeType":"YulFunctionCall","src":"7576:62:13"},"nodeType":"YulIf","src":"7573:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7681:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:13"},"nodeType":"YulFunctionCall","src":"7670:22:13"},"nodeType":"YulExpressionStatement","src":"7670:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7446:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"7454:4:13","type":""}],"src":"7417:281:13"},{"body":{"nodeType":"YulBlock","src":"7745:88:13","statements":[{"nodeType":"YulAssignment","src":"7755:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7765:18:13"},"nodeType":"YulFunctionCall","src":"7765:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7755:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7814:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"7822:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7794:19:13"},"nodeType":"YulFunctionCall","src":"7794:33:13"},"nodeType":"YulExpressionStatement","src":"7794:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7729:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7738:6:13","type":""}],"src":"7704:129:13"},{"body":{"nodeType":"YulBlock","src":"7905:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"8010:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8012:16:13"},"nodeType":"YulFunctionCall","src":"8012:18:13"},"nodeType":"YulExpressionStatement","src":"8012:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7982:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"7990:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7979:2:13"},"nodeType":"YulFunctionCall","src":"7979:30:13"},"nodeType":"YulIf","src":"7976:56:13"},{"nodeType":"YulAssignment","src":"8042:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8072:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8050:21:13"},"nodeType":"YulFunctionCall","src":"8050:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8042:4:13"}]},{"nodeType":"YulAssignment","src":"8116:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8128:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"8134:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:13"},"nodeType":"YulFunctionCall","src":"8124:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8116:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7889:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7900:4:13","type":""}],"src":"7839:307:13"},{"body":{"nodeType":"YulBlock","src":"8203:103:13","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8226:3:13"},{"name":"src","nodeType":"YulIdentifier","src":"8231:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8236:6:13"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8213:12:13"},"nodeType":"YulFunctionCall","src":"8213:30:13"},"nodeType":"YulExpressionStatement","src":"8213:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8284:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8289:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8280:3:13"},"nodeType":"YulFunctionCall","src":"8280:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"8298:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8273:6:13"},"nodeType":"YulFunctionCall","src":"8273:27:13"},"nodeType":"YulExpressionStatement","src":"8273:27:13"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8185:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8190:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8195:6:13","type":""}],"src":"8152:154:13"},{"body":{"nodeType":"YulBlock","src":"8395:327:13","statements":[{"nodeType":"YulAssignment","src":"8405:74:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8471:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8430:40:13"},"nodeType":"YulFunctionCall","src":"8430:48:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8414:15:13"},"nodeType":"YulFunctionCall","src":"8414:65:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8405:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8495:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"8502:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8488:6:13"},"nodeType":"YulFunctionCall","src":"8488:21:13"},"nodeType":"YulExpressionStatement","src":"8488:21:13"},{"nodeType":"YulVariableDeclaration","src":"8518:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8533:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"8540:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8529:3:13"},"nodeType":"YulFunctionCall","src":"8529:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8522:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"8583:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8585:77:13"},"nodeType":"YulFunctionCall","src":"8585:79:13"},"nodeType":"YulExpressionStatement","src":"8585:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8564:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8560:3:13"},"nodeType":"YulFunctionCall","src":"8560:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"8578:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8557:2:13"},"nodeType":"YulFunctionCall","src":"8557:25:13"},"nodeType":"YulIf","src":"8554:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8699:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"8704:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8709:6:13"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"8675:23:13"},"nodeType":"YulFunctionCall","src":"8675:41:13"},"nodeType":"YulExpressionStatement","src":"8675:41:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8368:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8373:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8381:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8389:5:13","type":""}],"src":"8312:410:13"},{"body":{"nodeType":"YulBlock","src":"8802:277:13","statements":[{"body":{"nodeType":"YulBlock","src":"8851:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8853:77:13"},"nodeType":"YulFunctionCall","src":"8853:79:13"},"nodeType":"YulExpressionStatement","src":"8853:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8830:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"8838:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8826:3:13"},"nodeType":"YulFunctionCall","src":"8826:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"8845:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8822:3:13"},"nodeType":"YulFunctionCall","src":"8822:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8815:6:13"},"nodeType":"YulFunctionCall","src":"8815:35:13"},"nodeType":"YulIf","src":"8812:122:13"},{"nodeType":"YulVariableDeclaration","src":"8943:34:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8970:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8957:12:13"},"nodeType":"YulFunctionCall","src":"8957:20:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8947:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8986:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9046:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9054:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9042:3:13"},"nodeType":"YulFunctionCall","src":"9042:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"9061:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"9069:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8995:46:13"},"nodeType":"YulFunctionCall","src":"8995:78:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8986:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8780:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8788:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8796:5:13","type":""}],"src":"8741:338:13"},{"body":{"nodeType":"YulBlock","src":"9211:817:13","statements":[{"body":{"nodeType":"YulBlock","src":"9258:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9260:77:13"},"nodeType":"YulFunctionCall","src":"9260:79:13"},"nodeType":"YulExpressionStatement","src":"9260:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9232:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"9241:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9228:3:13"},"nodeType":"YulFunctionCall","src":"9228:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"9253:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9224:3:13"},"nodeType":"YulFunctionCall","src":"9224:33:13"},"nodeType":"YulIf","src":"9221:120:13"},{"nodeType":"YulBlock","src":"9351:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9366:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9380:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9370:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9395:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9430:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9441:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9426:3:13"},"nodeType":"YulFunctionCall","src":"9426:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9450:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9405:20:13"},"nodeType":"YulFunctionCall","src":"9405:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9395:6:13"}]}]},{"nodeType":"YulBlock","src":"9478:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9493:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9507:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9497:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9523:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9558:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9554:3:13"},"nodeType":"YulFunctionCall","src":"9554:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9578:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9533:20:13"},"nodeType":"YulFunctionCall","src":"9533:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9523:6:13"}]}]},{"nodeType":"YulBlock","src":"9606:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9621:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9635:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9625:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9651:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9686:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9697:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9682:3:13"},"nodeType":"YulFunctionCall","src":"9682:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9706:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9661:20:13"},"nodeType":"YulFunctionCall","src":"9661:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9651:6:13"}]}]},{"nodeType":"YulBlock","src":"9734:287:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9749:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9780:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"9791:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9776:3:13"},"nodeType":"YulFunctionCall","src":"9776:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9763:12:13"},"nodeType":"YulFunctionCall","src":"9763:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9753:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"9842:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9844:77:13"},"nodeType":"YulFunctionCall","src":"9844:79:13"},"nodeType":"YulExpressionStatement","src":"9844:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9814:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9822:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9811:2:13"},"nodeType":"YulFunctionCall","src":"9811:30:13"},"nodeType":"YulIf","src":"9808:117:13"},{"nodeType":"YulAssignment","src":"9939:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9994:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:13"},"nodeType":"YulFunctionCall","src":"9979:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10003:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9949:29:13"},"nodeType":"YulFunctionCall","src":"9949:62:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9939:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9157:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9168:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9180:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9188:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9196:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9204:6:13","type":""}],"src":"9085:943:13"},{"body":{"nodeType":"YulBlock","src":"10117:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"10163:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10165:77:13"},"nodeType":"YulFunctionCall","src":"10165:79:13"},"nodeType":"YulExpressionStatement","src":"10165:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10138:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"10147:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10134:3:13"},"nodeType":"YulFunctionCall","src":"10134:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"10159:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10130:3:13"},"nodeType":"YulFunctionCall","src":"10130:32:13"},"nodeType":"YulIf","src":"10127:119:13"},{"nodeType":"YulBlock","src":"10256:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10271:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10285:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10275:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10300:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10335:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10346:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10331:3:13"},"nodeType":"YulFunctionCall","src":"10331:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10355:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10310:20:13"},"nodeType":"YulFunctionCall","src":"10310:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10300:6:13"}]}]},{"nodeType":"YulBlock","src":"10383:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10398:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10412:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10402:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10428:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10463:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10474:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:13"},"nodeType":"YulFunctionCall","src":"10459:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10483:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10438:20:13"},"nodeType":"YulFunctionCall","src":"10438:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10428:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10079:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10090:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10102:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10110:6:13","type":""}],"src":"10034:474:13"},{"body":{"nodeType":"YulBlock","src":"10542:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10559:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10562:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10552:6:13"},"nodeType":"YulFunctionCall","src":"10552:88:13"},"nodeType":"YulExpressionStatement","src":"10552:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10656:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10659:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10649:6:13"},"nodeType":"YulFunctionCall","src":"10649:15:13"},"nodeType":"YulExpressionStatement","src":"10649:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10680:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10683:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10673:6:13"},"nodeType":"YulFunctionCall","src":"10673:15:13"},"nodeType":"YulExpressionStatement","src":"10673:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10514:180:13"},{"body":{"nodeType":"YulBlock","src":"10751:269:13","statements":[{"nodeType":"YulAssignment","src":"10761:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10775:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10781:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10771:3:13"},"nodeType":"YulFunctionCall","src":"10771:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10761:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"10792:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10822:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10828:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10818:3:13"},"nodeType":"YulFunctionCall","src":"10818:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10796:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"10869:51:13","statements":[{"nodeType":"YulAssignment","src":"10883:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10897:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10905:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10893:3:13"},"nodeType":"YulFunctionCall","src":"10893:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10883:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10849:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10842:6:13"},"nodeType":"YulFunctionCall","src":"10842:26:13"},"nodeType":"YulIf","src":"10839:81:13"},{"body":{"nodeType":"YulBlock","src":"10972:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10986:16:13"},"nodeType":"YulFunctionCall","src":"10986:18:13"},"nodeType":"YulExpressionStatement","src":"10986:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10936:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10959:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10967:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10956:2:13"},"nodeType":"YulFunctionCall","src":"10956:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10933:2:13"},"nodeType":"YulFunctionCall","src":"10933:38:13"},"nodeType":"YulIf","src":"10930:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10735:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10744:6:13","type":""}],"src":"10700:320:13"},{"body":{"nodeType":"YulBlock","src":"11132:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11154:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11162:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11150:3:13"},"nodeType":"YulFunctionCall","src":"11150:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11166:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11143:6:13"},"nodeType":"YulFunctionCall","src":"11143:58:13"},"nodeType":"YulExpressionStatement","src":"11143:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11222:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11230:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:13"},"nodeType":"YulFunctionCall","src":"11218:15:13"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11235:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:13"},"nodeType":"YulFunctionCall","src":"11211:28:13"},"nodeType":"YulExpressionStatement","src":"11211:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11124:6:13","type":""}],"src":"11026:220:13"},{"body":{"nodeType":"YulBlock","src":"11398:220:13","statements":[{"nodeType":"YulAssignment","src":"11408:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11474:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11415:58:13"},"nodeType":"YulFunctionCall","src":"11415:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11408:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11580:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11491:88:13"},"nodeType":"YulFunctionCall","src":"11491:93:13"},"nodeType":"YulExpressionStatement","src":"11491:93:13"},{"nodeType":"YulAssignment","src":"11593:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11604:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11609:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11600:3:13"},"nodeType":"YulFunctionCall","src":"11600:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11593:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11386:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11394:3:13","type":""}],"src":"11252:366:13"},{"body":{"nodeType":"YulBlock","src":"11795:248:13","statements":[{"nodeType":"YulAssignment","src":"11805:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11817:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11813:3:13"},"nodeType":"YulFunctionCall","src":"11813:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11805:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11863:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:13"},"nodeType":"YulFunctionCall","src":"11848:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11871:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"11877:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11867:3:13"},"nodeType":"YulFunctionCall","src":"11867:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11841:6:13"},"nodeType":"YulFunctionCall","src":"11841:47:13"},"nodeType":"YulExpressionStatement","src":"11841:47:13"},{"nodeType":"YulAssignment","src":"11897:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12031:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11905:124:13"},"nodeType":"YulFunctionCall","src":"11905:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11897:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11775:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11790:4:13","type":""}],"src":"11624:419:13"},{"body":{"nodeType":"YulBlock","src":"12155:143:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12177:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12185:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:13"},"nodeType":"YulFunctionCall","src":"12173:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12189:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12166:6:13"},"nodeType":"YulFunctionCall","src":"12166:58:13"},"nodeType":"YulExpressionStatement","src":"12166:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12245:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12253:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12241:3:13"},"nodeType":"YulFunctionCall","src":"12241:15:13"},{"hexValue":"6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12258:32:13","type":"","value":"ken owner nor approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12234:6:13"},"nodeType":"YulFunctionCall","src":"12234:57:13"},"nodeType":"YulExpressionStatement","src":"12234:57:13"}]},"name":"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12147:6:13","type":""}],"src":"12049:249:13"},{"body":{"nodeType":"YulBlock","src":"12450:220:13","statements":[{"nodeType":"YulAssignment","src":"12460:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12526:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12531:2:13","type":"","value":"62"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12467:58:13"},"nodeType":"YulFunctionCall","src":"12467:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12460:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12632:3:13"}],"functionName":{"name":"store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304","nodeType":"YulIdentifier","src":"12543:88:13"},"nodeType":"YulFunctionCall","src":"12543:93:13"},"nodeType":"YulExpressionStatement","src":"12543:93:13"},{"nodeType":"YulAssignment","src":"12645:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12656:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12661:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12652:3:13"},"nodeType":"YulFunctionCall","src":"12652:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12645:3:13"}]}]},"name":"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12438:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12446:3:13","type":""}],"src":"12304:366:13"},{"body":{"nodeType":"YulBlock","src":"12847:248:13","statements":[{"nodeType":"YulAssignment","src":"12857:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12869:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12880:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12865:3:13"},"nodeType":"YulFunctionCall","src":"12865:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12857:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12904:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12915:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12900:3:13"},"nodeType":"YulFunctionCall","src":"12900:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12923:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"12929:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12919:3:13"},"nodeType":"YulFunctionCall","src":"12919:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12893:6:13"},"nodeType":"YulFunctionCall","src":"12893:47:13"},"nodeType":"YulExpressionStatement","src":"12893:47:13"},{"nodeType":"YulAssignment","src":"12949:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13083:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12957:124:13"},"nodeType":"YulFunctionCall","src":"12957:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12949:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12827:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12842:4:13","type":""}],"src":"12676:419:13"},{"body":{"nodeType":"YulBlock","src":"13207:127:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13229:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13237:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13225:3:13"},"nodeType":"YulFunctionCall","src":"13225:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13241:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13218:6:13"},"nodeType":"YulFunctionCall","src":"13218:58:13"},"nodeType":"YulExpressionStatement","src":"13218:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13297:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13305:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13293:3:13"},"nodeType":"YulFunctionCall","src":"13293:15:13"},{"hexValue":"72206e6f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13310:16:13","type":"","value":"r nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13286:6:13"},"nodeType":"YulFunctionCall","src":"13286:41:13"},"nodeType":"YulExpressionStatement","src":"13286:41:13"}]},"name":"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13199:6:13","type":""}],"src":"13101:233:13"},{"body":{"nodeType":"YulBlock","src":"13486:220:13","statements":[{"nodeType":"YulAssignment","src":"13496:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13562:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13567:2:13","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13503:58:13"},"nodeType":"YulFunctionCall","src":"13503:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13496:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13668:3:13"}],"functionName":{"name":"store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b","nodeType":"YulIdentifier","src":"13579:88:13"},"nodeType":"YulFunctionCall","src":"13579:93:13"},"nodeType":"YulExpressionStatement","src":"13579:93:13"},{"nodeType":"YulAssignment","src":"13681:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13692:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13697:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13688:3:13"},"nodeType":"YulFunctionCall","src":"13688:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13681:3:13"}]}]},"name":"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13474:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13482:3:13","type":""}],"src":"13340:366:13"},{"body":{"nodeType":"YulBlock","src":"13883:248:13","statements":[{"nodeType":"YulAssignment","src":"13893:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13905:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13916:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13901:3:13"},"nodeType":"YulFunctionCall","src":"13901:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13893:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13940:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13951:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13936:3:13"},"nodeType":"YulFunctionCall","src":"13936:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13959:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"13965:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13955:3:13"},"nodeType":"YulFunctionCall","src":"13955:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13929:6:13"},"nodeType":"YulFunctionCall","src":"13929:47:13"},"nodeType":"YulExpressionStatement","src":"13929:47:13"},{"nodeType":"YulAssignment","src":"13985:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14119:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13993:124:13"},"nodeType":"YulFunctionCall","src":"13993:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13985:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13863:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13878:4:13","type":""}],"src":"13712:419:13"},{"body":{"nodeType":"YulBlock","src":"14243:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14265:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"14273:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14261:3:13"},"nodeType":"YulFunctionCall","src":"14261:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14277:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14254:6:13"},"nodeType":"YulFunctionCall","src":"14254:50:13"},"nodeType":"YulExpressionStatement","src":"14254:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14235:6:13","type":""}],"src":"14137:174:13"},{"body":{"nodeType":"YulBlock","src":"14463:220:13","statements":[{"nodeType":"YulAssignment","src":"14473:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14539:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14544:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14480:58:13"},"nodeType":"YulFunctionCall","src":"14480:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14473:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14645:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14556:88:13"},"nodeType":"YulFunctionCall","src":"14556:93:13"},"nodeType":"YulExpressionStatement","src":"14556:93:13"},{"nodeType":"YulAssignment","src":"14658:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14669:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14674:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14665:3:13"},"nodeType":"YulFunctionCall","src":"14665:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14658:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14451:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14459:3:13","type":""}],"src":"14317:366:13"},{"body":{"nodeType":"YulBlock","src":"14860:248:13","statements":[{"nodeType":"YulAssignment","src":"14870:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14882:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14893:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14878:3:13"},"nodeType":"YulFunctionCall","src":"14878:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14870:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14917:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14928:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14913:3:13"},"nodeType":"YulFunctionCall","src":"14913:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14936:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"14942:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14932:3:13"},"nodeType":"YulFunctionCall","src":"14932:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14906:6:13"},"nodeType":"YulFunctionCall","src":"14906:47:13"},"nodeType":"YulExpressionStatement","src":"14906:47:13"},{"nodeType":"YulAssignment","src":"14962:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15096:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14970:124:13"},"nodeType":"YulFunctionCall","src":"14970:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14962:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14840:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14855:4:13","type":""}],"src":"14689:419:13"},{"body":{"nodeType":"YulBlock","src":"15220:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15242:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15250:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15238:3:13"},"nodeType":"YulFunctionCall","src":"15238:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15254:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15231:6:13"},"nodeType":"YulFunctionCall","src":"15231:58:13"},"nodeType":"YulExpressionStatement","src":"15231:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15310:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15318:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15306:3:13"},"nodeType":"YulFunctionCall","src":"15306:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15323:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15299:6:13"},"nodeType":"YulFunctionCall","src":"15299:36:13"},"nodeType":"YulExpressionStatement","src":"15299:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15212:6:13","type":""}],"src":"15114:228:13"},{"body":{"nodeType":"YulBlock","src":"15494:220:13","statements":[{"nodeType":"YulAssignment","src":"15504:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15570:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15575:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15511:58:13"},"nodeType":"YulFunctionCall","src":"15511:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15504:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15676:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15587:88:13"},"nodeType":"YulFunctionCall","src":"15587:93:13"},"nodeType":"YulExpressionStatement","src":"15587:93:13"},{"nodeType":"YulAssignment","src":"15689:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15700:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15705:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15696:3:13"},"nodeType":"YulFunctionCall","src":"15696:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15689:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15482:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15490:3:13","type":""}],"src":"15348:366:13"},{"body":{"nodeType":"YulBlock","src":"15891:248:13","statements":[{"nodeType":"YulAssignment","src":"15901:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15913:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15924:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15909:3:13"},"nodeType":"YulFunctionCall","src":"15909:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15901:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15948:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15959:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15944:3:13"},"nodeType":"YulFunctionCall","src":"15944:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15967:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"15973:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15963:3:13"},"nodeType":"YulFunctionCall","src":"15963:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15937:6:13"},"nodeType":"YulFunctionCall","src":"15937:47:13"},"nodeType":"YulExpressionStatement","src":"15937:47:13"},{"nodeType":"YulAssignment","src":"15993:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16127:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16001:124:13"},"nodeType":"YulFunctionCall","src":"16001:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15993:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15871:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15886:4:13","type":""}],"src":"15720:419:13"},{"body":{"nodeType":"YulBlock","src":"16259:34:13","statements":[{"nodeType":"YulAssignment","src":"16269:18:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"16284:3:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16269:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16231:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"16236:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16247:11:13","type":""}],"src":"16145:148:13"},{"body":{"nodeType":"YulBlock","src":"16409:267:13","statements":[{"nodeType":"YulVariableDeclaration","src":"16419:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16466:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16433:32:13"},"nodeType":"YulFunctionCall","src":"16433:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16423:6:13","type":""}]},{"nodeType":"YulAssignment","src":"16481:96:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16565:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16570:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16488:76:13"},"nodeType":"YulFunctionCall","src":"16488:89:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16481:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16612:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"16619:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16608:3:13"},"nodeType":"YulFunctionCall","src":"16608:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16586:21:13"},"nodeType":"YulFunctionCall","src":"16586:52:13"},"nodeType":"YulExpressionStatement","src":"16586:52:13"},{"nodeType":"YulAssignment","src":"16647:23:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16658:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16663:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16654:3:13"},"nodeType":"YulFunctionCall","src":"16654:16:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16647:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16390:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16397:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16405:3:13","type":""}],"src":"16299:377:13"},{"body":{"nodeType":"YulBlock","src":"16866:251:13","statements":[{"nodeType":"YulAssignment","src":"16877:102:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16966:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16975:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16884:81:13"},"nodeType":"YulFunctionCall","src":"16884:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16877:3:13"}]},{"nodeType":"YulAssignment","src":"16989:102:13","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17078:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"17087:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16996:81:13"},"nodeType":"YulFunctionCall","src":"16996:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16989:3:13"}]},{"nodeType":"YulAssignment","src":"17101:10:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"17108:3:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17101:3:13"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16837:3:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16843:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16851:6:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16862:3:13","type":""}],"src":"16682:435:13"},{"body":{"nodeType":"YulBlock","src":"17229:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17251:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17259:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17247:3:13"},"nodeType":"YulFunctionCall","src":"17247:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17263:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17240:6:13"},"nodeType":"YulFunctionCall","src":"17240:58:13"},"nodeType":"YulExpressionStatement","src":"17240:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17319:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17327:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17315:3:13"},"nodeType":"YulFunctionCall","src":"17315:15:13"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17332:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17308:6:13"},"nodeType":"YulFunctionCall","src":"17308:32:13"},"nodeType":"YulExpressionStatement","src":"17308:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17221:6:13","type":""}],"src":"17123:224:13"},{"body":{"nodeType":"YulBlock","src":"17499:220:13","statements":[{"nodeType":"YulAssignment","src":"17509:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17575:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17580:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17516:58:13"},"nodeType":"YulFunctionCall","src":"17516:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17509:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17681:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17592:88:13"},"nodeType":"YulFunctionCall","src":"17592:93:13"},"nodeType":"YulExpressionStatement","src":"17592:93:13"},{"nodeType":"YulAssignment","src":"17694:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17705:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17710:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17701:3:13"},"nodeType":"YulFunctionCall","src":"17701:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17694:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17487:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17495:3:13","type":""}],"src":"17353:366:13"},{"body":{"nodeType":"YulBlock","src":"17896:248:13","statements":[{"nodeType":"YulAssignment","src":"17906:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17918:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17929:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17914:3:13"},"nodeType":"YulFunctionCall","src":"17914:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17906:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17953:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17964:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17949:3:13"},"nodeType":"YulFunctionCall","src":"17949:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17972:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"17978:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17968:3:13"},"nodeType":"YulFunctionCall","src":"17968:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17942:6:13"},"nodeType":"YulFunctionCall","src":"17942:47:13"},"nodeType":"YulExpressionStatement","src":"17942:47:13"},{"nodeType":"YulAssignment","src":"17998:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18132:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18006:124:13"},"nodeType":"YulFunctionCall","src":"18006:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17998:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17876:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17891:4:13","type":""}],"src":"17725:419:13"},{"body":{"nodeType":"YulBlock","src":"18256:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18278:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18286:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18274:3:13"},"nodeType":"YulFunctionCall","src":"18274:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18290:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18267:6:13"},"nodeType":"YulFunctionCall","src":"18267:58:13"},"nodeType":"YulExpressionStatement","src":"18267:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18346:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18354:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18342:3:13"},"nodeType":"YulFunctionCall","src":"18342:15:13"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18359:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18335:6:13"},"nodeType":"YulFunctionCall","src":"18335:31:13"},"nodeType":"YulExpressionStatement","src":"18335:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18248:6:13","type":""}],"src":"18150:223:13"},{"body":{"nodeType":"YulBlock","src":"18525:220:13","statements":[{"nodeType":"YulAssignment","src":"18535:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18601:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18606:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18542:58:13"},"nodeType":"YulFunctionCall","src":"18542:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18535:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18707:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18618:88:13"},"nodeType":"YulFunctionCall","src":"18618:93:13"},"nodeType":"YulExpressionStatement","src":"18618:93:13"},{"nodeType":"YulAssignment","src":"18720:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18731:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18736:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18727:3:13"},"nodeType":"YulFunctionCall","src":"18727:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18720:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18513:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18521:3:13","type":""}],"src":"18379:366:13"},{"body":{"nodeType":"YulBlock","src":"18922:248:13","statements":[{"nodeType":"YulAssignment","src":"18932:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18944:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18955:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18940:3:13"},"nodeType":"YulFunctionCall","src":"18940:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18932:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18979:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18990:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18975:3:13"},"nodeType":"YulFunctionCall","src":"18975:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18998:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"19004:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18994:3:13"},"nodeType":"YulFunctionCall","src":"18994:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18968:6:13"},"nodeType":"YulFunctionCall","src":"18968:47:13"},"nodeType":"YulExpressionStatement","src":"18968:47:13"},{"nodeType":"YulAssignment","src":"19024:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19158:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19032:124:13"},"nodeType":"YulFunctionCall","src":"19032:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19024:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18902:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18917:4:13","type":""}],"src":"18751:419:13"},{"body":{"nodeType":"YulBlock","src":"19204:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19221:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19224:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19214:6:13"},"nodeType":"YulFunctionCall","src":"19214:88:13"},"nodeType":"YulExpressionStatement","src":"19214:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19318:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19321:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19311:6:13"},"nodeType":"YulFunctionCall","src":"19311:15:13"},"nodeType":"YulExpressionStatement","src":"19311:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19342:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19345:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19335:6:13"},"nodeType":"YulFunctionCall","src":"19335:15:13"},"nodeType":"YulExpressionStatement","src":"19335:15:13"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"19176:180:13"},{"body":{"nodeType":"YulBlock","src":"19407:146:13","statements":[{"nodeType":"YulAssignment","src":"19417:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19440:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19422:17:13"},"nodeType":"YulFunctionCall","src":"19422:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"19417:1:13"}]},{"nodeType":"YulAssignment","src":"19451:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"19474:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19456:17:13"},"nodeType":"YulFunctionCall","src":"19456:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"19451:1:13"}]},{"body":{"nodeType":"YulBlock","src":"19498:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19500:16:13"},"nodeType":"YulFunctionCall","src":"19500:18:13"},"nodeType":"YulExpressionStatement","src":"19500:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19492:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"19495:1:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19489:2:13"},"nodeType":"YulFunctionCall","src":"19489:8:13"},"nodeType":"YulIf","src":"19486:34:13"},{"nodeType":"YulAssignment","src":"19530:17:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19542:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"19545:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19538:3:13"},"nodeType":"YulFunctionCall","src":"19538:9:13"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"19530:4:13"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19393:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"19396:1:13","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"19402:4:13","type":""}],"src":"19362:191:13"},{"body":{"nodeType":"YulBlock","src":"19603:261:13","statements":[{"nodeType":"YulAssignment","src":"19613:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19636:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19618:17:13"},"nodeType":"YulFunctionCall","src":"19618:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"19613:1:13"}]},{"nodeType":"YulAssignment","src":"19647:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"19670:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19652:17:13"},"nodeType":"YulFunctionCall","src":"19652:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"19647:1:13"}]},{"body":{"nodeType":"YulBlock","src":"19810:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19812:16:13"},"nodeType":"YulFunctionCall","src":"19812:18:13"},"nodeType":"YulExpressionStatement","src":"19812:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19731:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19738:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"19806:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19734:3:13"},"nodeType":"YulFunctionCall","src":"19734:74:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19728:2:13"},"nodeType":"YulFunctionCall","src":"19728:81:13"},"nodeType":"YulIf","src":"19725:107:13"},{"nodeType":"YulAssignment","src":"19842:16:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19853:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"19856:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19849:3:13"},"nodeType":"YulFunctionCall","src":"19849:9:13"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"19842:3:13"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19590:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"19593:1:13","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"19599:3:13","type":""}],"src":"19559:305:13"},{"body":{"nodeType":"YulBlock","src":"19976:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19998:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20006:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19994:3:13"},"nodeType":"YulFunctionCall","src":"19994:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"20010:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19987:6:13"},"nodeType":"YulFunctionCall","src":"19987:51:13"},"nodeType":"YulExpressionStatement","src":"19987:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19968:6:13","type":""}],"src":"19870:175:13"},{"body":{"nodeType":"YulBlock","src":"20197:220:13","statements":[{"nodeType":"YulAssignment","src":"20207:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20273:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20278:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20214:58:13"},"nodeType":"YulFunctionCall","src":"20214:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20207:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20379:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"20290:88:13"},"nodeType":"YulFunctionCall","src":"20290:93:13"},"nodeType":"YulExpressionStatement","src":"20290:93:13"},{"nodeType":"YulAssignment","src":"20392:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20403:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20408:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20399:3:13"},"nodeType":"YulFunctionCall","src":"20399:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20392:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20185:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20193:3:13","type":""}],"src":"20051:366:13"},{"body":{"nodeType":"YulBlock","src":"20594:248:13","statements":[{"nodeType":"YulAssignment","src":"20604:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20616:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20627:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20612:3:13"},"nodeType":"YulFunctionCall","src":"20612:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20604:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20651:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20662:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20647:3:13"},"nodeType":"YulFunctionCall","src":"20647:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20670:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"20676:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20666:3:13"},"nodeType":"YulFunctionCall","src":"20666:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20640:6:13"},"nodeType":"YulFunctionCall","src":"20640:47:13"},"nodeType":"YulExpressionStatement","src":"20640:47:13"},{"nodeType":"YulAssignment","src":"20696:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20830:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20704:124:13"},"nodeType":"YulFunctionCall","src":"20704:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20696:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20574:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20589:4:13","type":""}],"src":"20423:419:13"},{"body":{"nodeType":"YulBlock","src":"20954:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20976:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20984:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20972:3:13"},"nodeType":"YulFunctionCall","src":"20972:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20988:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20965:6:13"},"nodeType":"YulFunctionCall","src":"20965:58:13"},"nodeType":"YulExpressionStatement","src":"20965:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21044:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"21052:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21040:3:13"},"nodeType":"YulFunctionCall","src":"21040:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"21057:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21033:6:13"},"nodeType":"YulFunctionCall","src":"21033:45:13"},"nodeType":"YulExpressionStatement","src":"21033:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20946:6:13","type":""}],"src":"20848:237:13"},{"body":{"nodeType":"YulBlock","src":"21237:220:13","statements":[{"nodeType":"YulAssignment","src":"21247:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21313:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"21318:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21254:58:13"},"nodeType":"YulFunctionCall","src":"21254:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21247:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21419:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"21330:88:13"},"nodeType":"YulFunctionCall","src":"21330:93:13"},"nodeType":"YulExpressionStatement","src":"21330:93:13"},{"nodeType":"YulAssignment","src":"21432:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21443:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"21448:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21439:3:13"},"nodeType":"YulFunctionCall","src":"21439:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21432:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21225:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21233:3:13","type":""}],"src":"21091:366:13"},{"body":{"nodeType":"YulBlock","src":"21634:248:13","statements":[{"nodeType":"YulAssignment","src":"21644:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21656:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21667:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21652:3:13"},"nodeType":"YulFunctionCall","src":"21652:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21644:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21691:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21702:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21687:3:13"},"nodeType":"YulFunctionCall","src":"21687:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21710:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"21716:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21706:3:13"},"nodeType":"YulFunctionCall","src":"21706:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21680:6:13"},"nodeType":"YulFunctionCall","src":"21680:47:13"},"nodeType":"YulExpressionStatement","src":"21680:47:13"},{"nodeType":"YulAssignment","src":"21736:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21870:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21744:124:13"},"nodeType":"YulFunctionCall","src":"21744:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21736:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21614:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21629:4:13","type":""}],"src":"21463:419:13"},{"body":{"nodeType":"YulBlock","src":"21916:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21933:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21936:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21926:6:13"},"nodeType":"YulFunctionCall","src":"21926:88:13"},"nodeType":"YulExpressionStatement","src":"21926:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22030:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22033:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22023:6:13"},"nodeType":"YulFunctionCall","src":"22023:15:13"},"nodeType":"YulExpressionStatement","src":"22023:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22054:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22057:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22047:6:13"},"nodeType":"YulFunctionCall","src":"22047:15:13"},"nodeType":"YulExpressionStatement","src":"22047:15:13"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21888:180:13"},{"body":{"nodeType":"YulBlock","src":"22132:40:13","statements":[{"nodeType":"YulAssignment","src":"22143:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22159:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22153:5:13"},"nodeType":"YulFunctionCall","src":"22153:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22143:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22115:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"22125:6:13","type":""}],"src":"22074:98:13"},{"body":{"nodeType":"YulBlock","src":"22273:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22290:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22295:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22283:6:13"},"nodeType":"YulFunctionCall","src":"22283:19:13"},"nodeType":"YulExpressionStatement","src":"22283:19:13"},{"nodeType":"YulAssignment","src":"22311:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22330:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"22335:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22326:3:13"},"nodeType":"YulFunctionCall","src":"22326:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22311:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22245:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"22250:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22261:11:13","type":""}],"src":"22178:168:13"},{"body":{"nodeType":"YulBlock","src":"22442:270:13","statements":[{"nodeType":"YulVariableDeclaration","src":"22452:52:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22498:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22466:31:13"},"nodeType":"YulFunctionCall","src":"22466:38:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22456:6:13","type":""}]},{"nodeType":"YulAssignment","src":"22513:77:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22578:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22583:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22520:57:13"},"nodeType":"YulFunctionCall","src":"22520:70:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22513:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22625:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22632:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22621:3:13"},"nodeType":"YulFunctionCall","src":"22621:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"22639:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22644:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"22599:21:13"},"nodeType":"YulFunctionCall","src":"22599:52:13"},"nodeType":"YulExpressionStatement","src":"22599:52:13"},{"nodeType":"YulAssignment","src":"22660:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22671:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22698:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22676:21:13"},"nodeType":"YulFunctionCall","src":"22676:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22667:3:13"},"nodeType":"YulFunctionCall","src":"22667:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22660:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22423:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22430:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22438:3:13","type":""}],"src":"22352:360:13"},{"body":{"nodeType":"YulBlock","src":"22918:440:13","statements":[{"nodeType":"YulAssignment","src":"22928:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22940:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"22951:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22936:3:13"},"nodeType":"YulFunctionCall","src":"22936:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22928:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23009:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23022:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23033:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23018:3:13"},"nodeType":"YulFunctionCall","src":"23018:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22965:43:13"},"nodeType":"YulFunctionCall","src":"22965:71:13"},"nodeType":"YulExpressionStatement","src":"22965:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23090:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23103:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23114:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23099:3:13"},"nodeType":"YulFunctionCall","src":"23099:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23046:43:13"},"nodeType":"YulFunctionCall","src":"23046:72:13"},"nodeType":"YulExpressionStatement","src":"23046:72:13"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23172:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23185:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23196:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23181:3:13"},"nodeType":"YulFunctionCall","src":"23181:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23128:43:13"},"nodeType":"YulFunctionCall","src":"23128:72:13"},"nodeType":"YulExpressionStatement","src":"23128:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23221:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23232:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23217:3:13"},"nodeType":"YulFunctionCall","src":"23217:18:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23241:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"23247:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23237:3:13"},"nodeType":"YulFunctionCall","src":"23237:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23210:6:13"},"nodeType":"YulFunctionCall","src":"23210:48:13"},"nodeType":"YulExpressionStatement","src":"23210:48:13"},{"nodeType":"YulAssignment","src":"23267:84:13","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23337:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"23346:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23275:61:13"},"nodeType":"YulFunctionCall","src":"23275:76:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23267:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22866:9:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22878:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22886:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22894:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22902:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22913:4:13","type":""}],"src":"22718:640:13"},{"body":{"nodeType":"YulBlock","src":"23426:79:13","statements":[{"nodeType":"YulAssignment","src":"23436:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23451:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23445:5:13"},"nodeType":"YulFunctionCall","src":"23445:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23436:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23493:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23467:25:13"},"nodeType":"YulFunctionCall","src":"23467:32:13"},"nodeType":"YulExpressionStatement","src":"23467:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23404:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"23412:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23420:5:13","type":""}],"src":"23364:141:13"},{"body":{"nodeType":"YulBlock","src":"23587:273:13","statements":[{"body":{"nodeType":"YulBlock","src":"23633:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23635:77:13"},"nodeType":"YulFunctionCall","src":"23635:79:13"},"nodeType":"YulExpressionStatement","src":"23635:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23608:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"23617:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23604:3:13"},"nodeType":"YulFunctionCall","src":"23604:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"23629:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23600:3:13"},"nodeType":"YulFunctionCall","src":"23600:32:13"},"nodeType":"YulIf","src":"23597:119:13"},{"nodeType":"YulBlock","src":"23726:127:13","statements":[{"nodeType":"YulVariableDeclaration","src":"23741:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"23755:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23745:6:13","type":""}]},{"nodeType":"YulAssignment","src":"23770:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23815:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"23826:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23811:3:13"},"nodeType":"YulFunctionCall","src":"23811:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23835:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23780:30:13"},"nodeType":"YulFunctionCall","src":"23780:63:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23770:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23557:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23568:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23580:6:13","type":""}],"src":"23511:349:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner nor approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)\n        store_literal_in_memory_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r nor approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611450565b6102bc565b6040516100fb9190611498565b60405180910390f35b61010c61039e565b604051610119919061154c565b60405180910390f35b61013c600480360381019061013791906115a4565b610430565b6040516101499190611612565b60405180910390f35b61016c60048036038101906101679190611659565b610476565b005b61018860048036038101906101839190611699565b61058d565b005b6101a4600480360381019061019f9190611699565b6105ed565b005b6101c060048036038101906101bb91906115a4565b61060d565b6040516101cd9190611612565b60405180910390f35b6101f060048036038101906101eb91906116ec565b6106be565b6040516101fd9190611728565b60405180910390f35b61020e610775565b60405161021b919061154c565b60405180910390f35b61023e6004803603810190610239919061176f565b610807565b005b61025a600480360381019061025591906118e4565b61081d565b005b610276600480360381019061027191906115a4565b61087f565b604051610283919061154c565b60405180910390f35b6102a660048036038101906102a19190611967565b6108e7565b6040516102b39190611498565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061039757506103968261097b565b5b9050919050565b6060600080546103ad906119d6565b80601f01602080910402602001604051908101604052809291908181526020018280546103d9906119d6565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109e5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611a79565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a30565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a30565b6108e7565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611b0b565b60405180910390fd5b6105888383610a38565b505050565b61059e610598610a30565b82610af1565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611b9d565b60405180910390fd5b6105e8838383610b86565b505050565b6106088383836040518060200160405280600081525061081d565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac90611c09565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611c9b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610784906119d6565b80601f01602080910402602001604051908101604052809291908181526020018280546107b0906119d6565b80156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b5050505050905090565b610819610812610a30565b8383610dec565b5050565b61082e610828610a30565b83610af1565b61086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490611b9d565b60405180910390fd5b61087984848484610f58565b50505050565b606061088a826109e5565b6000610894610fb4565b905060008151116108b457604051806020016040528060008152506108df565b806108be84610fcb565b6040516020016108cf929190611cf7565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109ee81611099565b610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490611c09565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610aab8361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610afd8361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b3f5750610b3e81856108e7565b5b80610b7d57508373ffffffffffffffffffffffffffffffffffffffff16610b6584610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610ba68261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf390611d8d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6290611e1f565b60405180910390fd5b610c76838383611105565b610c81600082610a38565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cd19190611e6e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d289190611ea2565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610de783838361110a565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5190611f44565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f4b9190611498565b60405180910390a3505050565b610f63848484610b86565b610f6f8484848461110f565b610fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa590611fd6565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060006001610fda84611291565b01905060008167ffffffffffffffff811115610ff957610ff86117b9565b5b6040519080825280601f01601f19166020018201604052801561102b5781602001600182028036833780820191505090505b509050600082602001820190505b60011561108e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161108257611081611ff6565b5b04945060008503611039575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff163b1115611284578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611154610a30565b8786866040518563ffffffff1660e01b8152600401611176949392919061207a565b6020604051808303816000875af19250505080156111b257506040513d601f19601f820116820180604052508101906111af91906120db565b60015b611234573d80600081146111e2576040519150601f19603f3d011682016040523d82523d6000602084013e6111e7565b606091505b50600081510361122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390611fd6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611289565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112ef577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816112e5576112e4611ff6565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061132c576d04ee2d6d415b85acef8100000000838161132257611321611ff6565b5b0492506020810190505b662386f26fc10000831061135b57662386f26fc10000838161135157611350611ff6565b5b0492506010810190505b6305f5e1008310611384576305f5e100838161137a57611379611ff6565b5b0492506008810190505b61271083106113a957612710838161139f5761139e611ff6565b5b0492506004810190505b606483106113cc57606483816113c2576113c1611ff6565b5b0492506002810190505b600a83106113db576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61142d816113f8565b811461143857600080fd5b50565b60008135905061144a81611424565b92915050565b600060208284031215611466576114656113ee565b5b60006114748482850161143b565b91505092915050565b60008115159050919050565b6114928161147d565b82525050565b60006020820190506114ad6000830184611489565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ed5780820151818401526020810190506114d2565b838111156114fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061151e826114b3565b61152881856114be565b93506115388185602086016114cf565b61154181611502565b840191505092915050565b600060208201905081810360008301526115668184611513565b905092915050565b6000819050919050565b6115818161156e565b811461158c57600080fd5b50565b60008135905061159e81611578565b92915050565b6000602082840312156115ba576115b96113ee565b5b60006115c88482850161158f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115fc826115d1565b9050919050565b61160c816115f1565b82525050565b60006020820190506116276000830184611603565b92915050565b611636816115f1565b811461164157600080fd5b50565b6000813590506116538161162d565b92915050565b600080604083850312156116705761166f6113ee565b5b600061167e85828601611644565b925050602061168f8582860161158f565b9150509250929050565b6000806000606084860312156116b2576116b16113ee565b5b60006116c086828701611644565b93505060206116d186828701611644565b92505060406116e28682870161158f565b9150509250925092565b600060208284031215611702576117016113ee565b5b600061171084828501611644565b91505092915050565b6117228161156e565b82525050565b600060208201905061173d6000830184611719565b92915050565b61174c8161147d565b811461175757600080fd5b50565b60008135905061176981611743565b92915050565b60008060408385031215611786576117856113ee565b5b600061179485828601611644565b92505060206117a58582860161175a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117f182611502565b810181811067ffffffffffffffff821117156118105761180f6117b9565b5b80604052505050565b60006118236113e4565b905061182f82826117e8565b919050565b600067ffffffffffffffff82111561184f5761184e6117b9565b5b61185882611502565b9050602081019050919050565b82818337600083830152505050565b600061188761188284611834565b611819565b9050828152602081018484840111156118a3576118a26117b4565b5b6118ae848285611865565b509392505050565b600082601f8301126118cb576118ca6117af565b5b81356118db848260208601611874565b91505092915050565b600080600080608085870312156118fe576118fd6113ee565b5b600061190c87828801611644565b945050602061191d87828801611644565b935050604061192e8782880161158f565b925050606085013567ffffffffffffffff81111561194f5761194e6113f3565b5b61195b878288016118b6565b91505092959194509250565b6000806040838503121561197e5761197d6113ee565b5b600061198c85828601611644565b925050602061199d85828601611644565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119ee57607f821691505b602082108103611a0157611a006119a7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a636021836114be565b9150611a6e82611a07565b604082019050919050565b60006020820190508181036000830152611a9281611a56565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000611af5603e836114be565b9150611b0082611a99565b604082019050919050565b60006020820190508181036000830152611b2481611ae8565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000611b87602e836114be565b9150611b9282611b2b565b604082019050919050565b60006020820190508181036000830152611bb681611b7a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611bf36018836114be565b9150611bfe82611bbd565b602082019050919050565b60006020820190508181036000830152611c2281611be6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611c856029836114be565b9150611c9082611c29565b604082019050919050565b60006020820190508181036000830152611cb481611c78565b9050919050565b600081905092915050565b6000611cd1826114b3565b611cdb8185611cbb565b9350611ceb8185602086016114cf565b80840191505092915050565b6000611d038285611cc6565b9150611d0f8284611cc6565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611d776025836114be565b9150611d8282611d1b565b604082019050919050565b60006020820190508181036000830152611da681611d6a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611e096024836114be565b9150611e1482611dad565b604082019050919050565b60006020820190508181036000830152611e3881611dfc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e798261156e565b9150611e848361156e565b925082821015611e9757611e96611e3f565b5b828203905092915050565b6000611ead8261156e565b9150611eb88361156e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611eed57611eec611e3f565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f2e6019836114be565b9150611f3982611ef8565b602082019050919050565b60006020820190508181036000830152611f5d81611f21565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fc06032836114be565b9150611fcb82611f64565b604082019050919050565b60006020820190508181036000830152611fef81611fb3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061204c82612025565b6120568185612030565b93506120668185602086016114cf565b61206f81611502565b840191505092915050565b600060808201905061208f6000830187611603565b61209c6020830186611603565b6120a96040830185611719565b81810360608301526120bb8184612041565b905095945050505050565b6000815190506120d581611424565b92915050565b6000602082840312156120f1576120f06113ee565b5b60006120ff848285016120c6565b9150509291505056fea26469706673582212201befbb93823bb4d4f3dd3dd02315ac03aab291ca85b918aca37bea81708f233e64736f6c634300080d0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1659 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16EC JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x807 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x97B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1A79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA30 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA30 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA38 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA30 JUMP JUMPDEST DUP3 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB86 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x81D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AC SWAP1 PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x72E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x725 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x784 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7B0 SWAP1 PUSH2 0x19D6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x819 PUSH2 0x812 PUSH2 0xA30 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xDEC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x82E PUSH2 0x828 PUSH2 0xA30 JUMP JUMPDEST DUP4 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x86D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x864 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x879 DUP5 DUP5 DUP5 DUP5 PUSH2 0xF58 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x88A DUP3 PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x894 PUSH2 0xFB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x8B4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8DF JUMP JUMPDEST DUP1 PUSH2 0x8BE DUP5 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8CF SWAP3 SWAP2 SWAP1 PUSH2 0x1CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9EE DUP2 PUSH2 0x1099 JUMP JUMPDEST PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA24 SWAP1 PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAAB DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAFD DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB3F JUMPI POP PUSH2 0xB3E DUP2 DUP6 PUSH2 0x8E7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB7D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB65 DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBA6 DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF3 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC62 SWAP1 PUSH2 0x1E1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC76 DUP4 DUP4 DUP4 PUSH2 0x1105 JUMP JUMPDEST PUSH2 0xC81 PUSH1 0x0 DUP3 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCD1 SWAP2 SWAP1 PUSH2 0x1E6E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xD28 SWAP2 SWAP1 PUSH2 0x1EA2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDE7 DUP4 DUP4 DUP4 PUSH2 0x110A JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE51 SWAP1 PUSH2 0x1F44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF63 DUP5 DUP5 DUP5 PUSH2 0xB86 JUMP JUMPDEST PUSH2 0xF6F DUP5 DUP5 DUP5 DUP5 PUSH2 0x110F JUMP JUMPDEST PUSH2 0xFAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFA5 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xFDA DUP5 PUSH2 0x1291 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF9 JUMPI PUSH2 0xFF8 PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x102B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x108E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1082 JUMPI PUSH2 0x1081 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1039 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1284 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1154 PUSH2 0xA30 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1176 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x207A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11B2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11AF SWAP2 SWAP1 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1234 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x122C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1223 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1289 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x12EF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x12E5 JUMPI PUSH2 0x12E4 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x132C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1322 JUMPI PUSH2 0x1321 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x135B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1351 JUMPI PUSH2 0x1350 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1384 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x137A JUMPI PUSH2 0x1379 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x13A9 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x139F JUMPI PUSH2 0x139E PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x13CC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x13C2 JUMPI PUSH2 0x13C1 PUSH2 0x1FF6 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x13DB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x142D DUP2 PUSH2 0x13F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x144A DUP2 PUSH2 0x1424 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1466 JUMPI PUSH2 0x1465 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1474 DUP5 DUP3 DUP6 ADD PUSH2 0x143B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1492 DUP2 PUSH2 0x147D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x14AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1489 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14ED JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14D2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14FC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151E DUP3 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1528 DUP2 DUP6 PUSH2 0x14BE JUMP JUMPDEST SWAP4 POP PUSH2 0x1538 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x1541 DUP2 PUSH2 0x1502 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1566 DUP2 DUP5 PUSH2 0x1513 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1581 DUP2 PUSH2 0x156E JUMP JUMPDEST DUP2 EQ PUSH2 0x158C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x159E DUP2 PUSH2 0x1578 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BA JUMPI PUSH2 0x15B9 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15C8 DUP5 DUP3 DUP6 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FC DUP3 PUSH2 0x15D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x160C DUP2 PUSH2 0x15F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1627 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1636 DUP2 PUSH2 0x15F1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1653 DUP2 PUSH2 0x162D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x167E DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x168F DUP6 DUP3 DUP7 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16B2 JUMPI PUSH2 0x16B1 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C0 DUP7 DUP3 DUP8 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x16D1 DUP7 DUP3 DUP8 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x16E2 DUP7 DUP3 DUP8 ADD PUSH2 0x158F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1702 JUMPI PUSH2 0x1701 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1710 DUP5 DUP3 DUP6 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1722 DUP2 PUSH2 0x156E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x173D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1719 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x174C DUP2 PUSH2 0x147D JUMP JUMPDEST DUP2 EQ PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1769 DUP2 PUSH2 0x1743 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1786 JUMPI PUSH2 0x1785 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1794 DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17A5 DUP6 DUP3 DUP7 ADD PUSH2 0x175A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x17F1 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1810 JUMPI PUSH2 0x180F PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1823 PUSH2 0x13E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x182F DUP3 DUP3 PUSH2 0x17E8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184F JUMPI PUSH2 0x184E PUSH2 0x17B9 JUMP JUMPDEST JUMPDEST PUSH2 0x1858 DUP3 PUSH2 0x1502 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1887 PUSH2 0x1882 DUP5 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0x1819 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x18A2 PUSH2 0x17B4 JUMP JUMPDEST JUMPDEST PUSH2 0x18AE DUP5 DUP3 DUP6 PUSH2 0x1865 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18CB JUMPI PUSH2 0x18CA PUSH2 0x17AF JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18DB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1874 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18FE JUMPI PUSH2 0x18FD PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x190C DUP8 DUP3 DUP9 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x191D DUP8 DUP3 DUP9 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x192E DUP8 DUP3 DUP9 ADD PUSH2 0x158F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194F JUMPI PUSH2 0x194E PUSH2 0x13F3 JUMP JUMPDEST JUMPDEST PUSH2 0x195B DUP8 DUP3 DUP9 ADD PUSH2 0x18B6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x197E JUMPI PUSH2 0x197D PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x198C DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x199D DUP6 DUP3 DUP7 ADD PUSH2 0x1644 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x19EE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A01 JUMPI PUSH2 0x1A00 PUSH2 0x19A7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A63 PUSH1 0x21 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6E DUP3 PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A92 DUP2 PUSH2 0x1A56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AF5 PUSH1 0x3E DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1B00 DUP3 PUSH2 0x1A99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B24 DUP2 PUSH2 0x1AE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206E6F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B87 PUSH1 0x2E DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1B92 DUP3 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB6 DUP2 PUSH2 0x1B7A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF3 PUSH1 0x18 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1BFE DUP3 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C22 DUP2 PUSH2 0x1BE6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C85 PUSH1 0x29 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1C90 DUP3 PUSH2 0x1C29 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB4 DUP2 PUSH2 0x1C78 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD1 DUP3 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1CDB DUP2 DUP6 PUSH2 0x1CBB JUMP JUMPDEST SWAP4 POP PUSH2 0x1CEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D03 DUP3 DUP6 PUSH2 0x1CC6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D0F DUP3 DUP5 PUSH2 0x1CC6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D77 PUSH1 0x25 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1D82 DUP3 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DA6 DUP2 PUSH2 0x1D6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E09 PUSH1 0x24 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1E14 DUP3 PUSH2 0x1DAD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E38 DUP2 PUSH2 0x1DFC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E79 DUP3 PUSH2 0x156E JUMP JUMPDEST SWAP2 POP PUSH2 0x1E84 DUP4 PUSH2 0x156E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E97 JUMPI PUSH2 0x1E96 PUSH2 0x1E3F JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EAD DUP3 PUSH2 0x156E JUMP JUMPDEST SWAP2 POP PUSH2 0x1EB8 DUP4 PUSH2 0x156E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EED JUMPI PUSH2 0x1EEC PUSH2 0x1E3F JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2E PUSH1 0x19 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1F39 DUP3 PUSH2 0x1EF8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F5D DUP2 PUSH2 0x1F21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC0 PUSH1 0x32 DUP4 PUSH2 0x14BE JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCB DUP3 PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FEF DUP2 PUSH2 0x1FB3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x204C DUP3 PUSH2 0x2025 JUMP JUMPDEST PUSH2 0x2056 DUP2 DUP6 PUSH2 0x2030 JUMP JUMPDEST SWAP4 POP PUSH2 0x2066 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x206F DUP2 PUSH2 0x1502 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x208F PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x209C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x20A9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1719 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 DUP5 PUSH2 0x2041 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20D5 DUP2 PUSH2 0x1424 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20F1 JUMPI PUSH2 0x20F0 PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20FF DUP5 DUP3 DUP6 ADD PUSH2 0x20C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL 0xEF 0xBB SWAP4 DUP3 EXTCODESIZE 0xB4 0xD4 RETURN 0xDD RETURNDATASIZE 0xD0 0x23 ISZERO 0xAC SUB 0xAA 0xB2 SWAP2 0xCA DUP6 0xB9 XOR 0xAC LOG3 PUSH28 0xEA81708F233E64736F6C634300080D00330000000000000000000000 ","sourceMap":"1382:13860:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2417:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3317:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4775:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4314:400;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5452:327;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5845:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3037:218;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2776:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3479:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5009:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6090:315;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3647:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5228:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2417:300;2519:4;2569:25;2554:40;;;:11;:40;;;;:104;;;;2625:33;2610:48;;;:11;:48;;;;2554:104;:156;;;;2674:36;2698:11;2674:23;:36::i;:::-;2554:156;2535:175;;2417:300;;;:::o;3317:98::-;3371:13;3403:5;3396:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3317:98;:::o;4775:167::-;4851:7;4870:23;4885:7;4870:14;:23::i;:::-;4911:15;:24;4927:7;4911:24;;;;;;;;;;;;;;;;;;;;;4904:31;;4775:167;;;:::o;4314:400::-;4394:13;4410:16;4418:7;4410;:16::i;:::-;4394:32;;4450:5;4444:11;;:2;:11;;;4436:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4541:5;4525:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4550:37;4567:5;4574:12;:10;:12::i;:::-;4550:16;:37::i;:::-;4525:62;4504:171;;;;;;;;;;;;:::i;:::-;;;;;;;;;4686:21;4695:2;4699:7;4686:8;:21::i;:::-;4384:330;4314:400;;:::o;5452:327::-;5641:41;5660:12;:10;:12::i;:::-;5674:7;5641:18;:41::i;:::-;5633:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;5744:28;5754:4;5760:2;5764:7;5744:9;:28::i;:::-;5452:327;;;:::o;5845:179::-;5978:39;5995:4;6001:2;6005:7;5978:39;;;;;;;;;;;;:16;:39::i;:::-;5845:179;;;:::o;3037:218::-;3109:7;3128:13;3144:7;:16;3152:7;3144:16;;;;;;;;;;;;;;;;;;;;;3128:32;;3195:1;3178:19;;:5;:19;;;3170:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;3243:5;3236:12;;;3037:218;;;:::o;2776:204::-;2848:7;2892:1;2875:19;;:5;:19;;;2867:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2957:9;:16;2967:5;2957:16;;;;;;;;;;;;;;;;2950:23;;2776:204;;;:::o;3479:102::-;3535:13;3567:7;3560:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3479:102;:::o;5009:153::-;5103:52;5122:12;:10;:12::i;:::-;5136:8;5146;5103:18;:52::i;:::-;5009:153;;:::o;6090:315::-;6258:41;6277:12;:10;:12::i;:::-;6291:7;6258:18;:41::i;:::-;6250:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;6360:38;6374:4;6380:2;6384:7;6393:4;6360:13;:38::i;:::-;6090:315;;;;:::o;3647:276::-;3720:13;3745:23;3760:7;3745:14;:23::i;:::-;3779:21;3803:10;:8;:10::i;:::-;3779:34;;3854:1;3836:7;3830:21;:25;:86;;;;;;;;;;;;;;;;;3882:7;3891:18;:7;:16;:18::i;:::-;3865:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3830:86;3823:93;;;3647:276;;;:::o;5228:162::-;5325:4;5348:18;:25;5367:5;5348:25;;;;;;;;;;;;;;;:35;5374:8;5348:35;;;;;;;;;;;;;;;;;;;;;;;;;5341:42;;5228:162;;;;:::o;829:155:7:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;12550:133:12:-;12631:16;12639:7;12631;:16::i;:::-;12623:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;12550:133;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;11859:164:12:-;11960:2;11933:15;:24;11949:7;11933:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12008:7;12004:2;11977:39;;11986:16;11994:7;11986;:16::i;:::-;11977:39;;;;;;;;;;;;11859:164;;:::o;8157:254::-;8250:4;8266:13;8282:16;8290:7;8282;:16::i;:::-;8266:32;;8327:5;8316:16;;:7;:16;;;:52;;;;8336:32;8353:5;8360:7;8336:16;:32::i;:::-;8316:52;:87;;;;8396:7;8372:31;;:20;8384:7;8372:11;:20::i;:::-;:31;;;8316:87;8308:96;;;8157:254;;;;:::o;11149:598::-;11296:4;11276:24;;:16;11284:7;11276;:16::i;:::-;:24;;;11268:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;11374:1;11360:16;;:2;:16;;;11352:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11428:39;11449:4;11455:2;11459:7;11428:20;:39::i;:::-;11529:29;11546:1;11550:7;11529:8;:29::i;:::-;11588:1;11569:9;:15;11579:4;11569:15;;;;;;;;;;;;;;;;:20;;;;;;;:::i;:::-;;;;;;;;11616:1;11599:9;:13;11609:2;11599:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;11646:2;11627:7;:16;11635:7;11627:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;11683:7;11679:2;11664:27;;11673:4;11664:27;;;;;;;;;;;;11702:38;11722:4;11728:2;11732:7;11702:19;:38::i;:::-;11149:598;;;:::o;12159:307::-;12309:8;12300:17;;:5;:17;;;12292:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;12395:8;12357:18;:25;12376:5;12357:25;;;;;;;;;;;;;;;:35;12383:8;12357:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;12440:8;12418:41;;12433:5;12418:41;;;12450:8;12418:41;;;;;;:::i;:::-;;;;;;;;12159:307;;;:::o;7266:305::-;7416:28;7426:4;7432:2;7436:7;7416:9;:28::i;:::-;7462:47;7485:4;7491:2;7495:7;7504:4;7462:22;:47::i;:::-;7454:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;7266:305;;;;:::o;4165:92::-;4216:13;4241:9;;;;;;;;;;;;;;4165:92;:::o;447:696:6:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;7874:125:12:-;7939:4;7990:1;7962:30;;:7;:16;7970:7;7962:16;;;;;;;;;;;;;;;;;;;;;:30;;;;7955:37;;7874:125;;;:::o;14625:122::-;;;;:::o;15119:121::-;;;;:::o;13235:834::-;13384:4;13421:1;13404:2;:14;;;:18;13400:663;;;13458:2;13442:36;;;13479:12;:10;:12::i;:::-;13493:4;13499:7;13508:4;13442:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;13438:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13697:1;13680:6;:13;:18;13676:321;;13722:60;;;;;;;;;;:::i;:::-;;;;;;;;13676:321;13949:6;13943:13;13934:6;13930:2;13926:15;13919:38;13438:573;13573:41;;;13563:51;;;:6;:51;;;;13556:58;;;;;13400:663;14048:4;14041:11;;13235:834;;;;;;;:::o;10139:916:9:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:619::-;5015:6;5023;5031;5080:2;5068:9;5059:7;5055:23;5051:32;5048:119;;;5086:79;;:::i;:::-;5048:119;5206:1;5231:53;5276:7;5267:6;5256:9;5252:22;5231:53;:::i;:::-;5221:63;;5177:117;5333:2;5359:53;5404:7;5395:6;5384:9;5380:22;5359:53;:::i;:::-;5349:63;;5304:118;5461:2;5487:53;5532:7;5523:6;5512:9;5508:22;5487:53;:::i;:::-;5477:63;;5432:118;4938:619;;;;;:::o;5563:329::-;5622:6;5671:2;5659:9;5650:7;5646:23;5642:32;5639:119;;;5677:79;;:::i;:::-;5639:119;5797:1;5822:53;5867:7;5858:6;5847:9;5843:22;5822:53;:::i;:::-;5812:63;;5768:117;5563:329;;;;:::o;5898:118::-;5985:24;6003:5;5985:24;:::i;:::-;5980:3;5973:37;5898:118;;:::o;6022:222::-;6115:4;6153:2;6142:9;6138:18;6130:26;;6166:71;6234:1;6223:9;6219:17;6210:6;6166:71;:::i;:::-;6022:222;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:220::-;11166:34;11162:1;11154:6;11150:14;11143:58;11235:3;11230:2;11222:6;11218:15;11211:28;11026:220;:::o;11252:366::-;11394:3;11415:67;11479:2;11474:3;11415:67;:::i;:::-;11408:74;;11491:93;11580:3;11491:93;:::i;:::-;11609:2;11604:3;11600:12;11593:19;;11252:366;;;:::o;11624:419::-;11790:4;11828:2;11817:9;11813:18;11805:26;;11877:9;11871:4;11867:20;11863:1;11852:9;11848:17;11841:47;11905:131;12031:4;11905:131;:::i;:::-;11897:139;;11624:419;;;:::o;12049:249::-;12189:34;12185:1;12177:6;12173:14;12166:58;12258:32;12253:2;12245:6;12241:15;12234:57;12049:249;:::o;12304:366::-;12446:3;12467:67;12531:2;12526:3;12467:67;:::i;:::-;12460:74;;12543:93;12632:3;12543:93;:::i;:::-;12661:2;12656:3;12652:12;12645:19;;12304:366;;;:::o;12676:419::-;12842:4;12880:2;12869:9;12865:18;12857:26;;12929:9;12923:4;12919:20;12915:1;12904:9;12900:17;12893:47;12957:131;13083:4;12957:131;:::i;:::-;12949:139;;12676:419;;;:::o;13101:233::-;13241:34;13237:1;13229:6;13225:14;13218:58;13310:16;13305:2;13297:6;13293:15;13286:41;13101:233;:::o;13340:366::-;13482:3;13503:67;13567:2;13562:3;13503:67;:::i;:::-;13496:74;;13579:93;13668:3;13579:93;:::i;:::-;13697:2;13692:3;13688:12;13681:19;;13340:366;;;:::o;13712:419::-;13878:4;13916:2;13905:9;13901:18;13893:26;;13965:9;13959:4;13955:20;13951:1;13940:9;13936:17;13929:47;13993:131;14119:4;13993:131;:::i;:::-;13985:139;;13712:419;;;:::o;14137:174::-;14277:26;14273:1;14265:6;14261:14;14254:50;14137:174;:::o;14317:366::-;14459:3;14480:67;14544:2;14539:3;14480:67;:::i;:::-;14473:74;;14556:93;14645:3;14556:93;:::i;:::-;14674:2;14669:3;14665:12;14658:19;;14317:366;;;:::o;14689:419::-;14855:4;14893:2;14882:9;14878:18;14870:26;;14942:9;14936:4;14932:20;14928:1;14917:9;14913:17;14906:47;14970:131;15096:4;14970:131;:::i;:::-;14962:139;;14689:419;;;:::o;15114:228::-;15254:34;15250:1;15242:6;15238:14;15231:58;15323:11;15318:2;15310:6;15306:15;15299:36;15114:228;:::o;15348:366::-;15490:3;15511:67;15575:2;15570:3;15511:67;:::i;:::-;15504:74;;15587:93;15676:3;15587:93;:::i;:::-;15705:2;15700:3;15696:12;15689:19;;15348:366;;;:::o;15720:419::-;15886:4;15924:2;15913:9;15909:18;15901:26;;15973:9;15967:4;15963:20;15959:1;15948:9;15944:17;15937:47;16001:131;16127:4;16001:131;:::i;:::-;15993:139;;15720:419;;;:::o;16145:148::-;16247:11;16284:3;16269:18;;16145:148;;;;:::o;16299:377::-;16405:3;16433:39;16466:5;16433:39;:::i;:::-;16488:89;16570:6;16565:3;16488:89;:::i;:::-;16481:96;;16586:52;16631:6;16626:3;16619:4;16612:5;16608:16;16586:52;:::i;:::-;16663:6;16658:3;16654:16;16647:23;;16409:267;16299:377;;;;:::o;16682:435::-;16862:3;16884:95;16975:3;16966:6;16884:95;:::i;:::-;16877:102;;16996:95;17087:3;17078:6;16996:95;:::i;:::-;16989:102;;17108:3;17101:10;;16682:435;;;;;:::o;17123:224::-;17263:34;17259:1;17251:6;17247:14;17240:58;17332:7;17327:2;17319:6;17315:15;17308:32;17123:224;:::o;17353:366::-;17495:3;17516:67;17580:2;17575:3;17516:67;:::i;:::-;17509:74;;17592:93;17681:3;17592:93;:::i;:::-;17710:2;17705:3;17701:12;17694:19;;17353:366;;;:::o;17725:419::-;17891:4;17929:2;17918:9;17914:18;17906:26;;17978:9;17972:4;17968:20;17964:1;17953:9;17949:17;17942:47;18006:131;18132:4;18006:131;:::i;:::-;17998:139;;17725:419;;;:::o;18150:223::-;18290:34;18286:1;18278:6;18274:14;18267:58;18359:6;18354:2;18346:6;18342:15;18335:31;18150:223;:::o;18379:366::-;18521:3;18542:67;18606:2;18601:3;18542:67;:::i;:::-;18535:74;;18618:93;18707:3;18618:93;:::i;:::-;18736:2;18731:3;18727:12;18720:19;;18379:366;;;:::o;18751:419::-;18917:4;18955:2;18944:9;18940:18;18932:26;;19004:9;18998:4;18994:20;18990:1;18979:9;18975:17;18968:47;19032:131;19158:4;19032:131;:::i;:::-;19024:139;;18751:419;;;:::o;19176:180::-;19224:77;19221:1;19214:88;19321:4;19318:1;19311:15;19345:4;19342:1;19335:15;19362:191;19402:4;19422:20;19440:1;19422:20;:::i;:::-;19417:25;;19456:20;19474:1;19456:20;:::i;:::-;19451:25;;19495:1;19492;19489:8;19486:34;;;19500:18;;:::i;:::-;19486:34;19545:1;19542;19538:9;19530:17;;19362:191;;;;:::o;19559:305::-;19599:3;19618:20;19636:1;19618:20;:::i;:::-;19613:25;;19652:20;19670:1;19652:20;:::i;:::-;19647:25;;19806:1;19738:66;19734:74;19731:1;19728:81;19725:107;;;19812:18;;:::i;:::-;19725:107;19856:1;19853;19849:9;19842:16;;19559:305;;;;:::o;19870:175::-;20010:27;20006:1;19998:6;19994:14;19987:51;19870:175;:::o;20051:366::-;20193:3;20214:67;20278:2;20273:3;20214:67;:::i;:::-;20207:74;;20290:93;20379:3;20290:93;:::i;:::-;20408:2;20403:3;20399:12;20392:19;;20051:366;;;:::o;20423:419::-;20589:4;20627:2;20616:9;20612:18;20604:26;;20676:9;20670:4;20666:20;20662:1;20651:9;20647:17;20640:47;20704:131;20830:4;20704:131;:::i;:::-;20696:139;;20423:419;;;:::o;20848:237::-;20988:34;20984:1;20976:6;20972:14;20965:58;21057:20;21052:2;21044:6;21040:15;21033:45;20848:237;:::o;21091:366::-;21233:3;21254:67;21318:2;21313:3;21254:67;:::i;:::-;21247:74;;21330:93;21419:3;21330:93;:::i;:::-;21448:2;21443:3;21439:12;21432:19;;21091:366;;;:::o;21463:419::-;21629:4;21667:2;21656:9;21652:18;21644:26;;21716:9;21710:4;21706:20;21702:1;21691:9;21687:17;21680:47;21744:131;21870:4;21744:131;:::i;:::-;21736:139;;21463:419;;;:::o;21888:180::-;21936:77;21933:1;21926:88;22033:4;22030:1;22023:15;22057:4;22054:1;22047:15;22074:98;22125:6;22159:5;22153:12;22143:22;;22074:98;;;:::o;22178:168::-;22261:11;22295:6;22290:3;22283:19;22335:4;22330:3;22326:14;22311:29;;22178:168;;;;:::o;22352:360::-;22438:3;22466:38;22498:5;22466:38;:::i;:::-;22520:70;22583:6;22578:3;22520:70;:::i;:::-;22513:77;;22599:52;22644:6;22639:3;22632:4;22625:5;22621:16;22599:52;:::i;:::-;22676:29;22698:6;22676:29;:::i;:::-;22671:3;22667:39;22660:46;;22442:270;22352:360;;;;:::o;22718:640::-;22913:4;22951:3;22940:9;22936:19;22928:27;;22965:71;23033:1;23022:9;23018:17;23009:6;22965:71;:::i;:::-;23046:72;23114:2;23103:9;23099:18;23090:6;23046:72;:::i;:::-;23128;23196:2;23185:9;23181:18;23172:6;23128:72;:::i;:::-;23247:9;23241:4;23237:20;23232:2;23221:9;23217:18;23210:48;23275:76;23346:4;23337:6;23275:76;:::i;:::-;23267:84;;22718:640;;;;;;;:::o;23364:141::-;23420:5;23451:6;23445:13;23436:22;;23467:32;23493:5;23467:32;:::i;:::-;23364:141;;;;:::o;23511:349::-;23580:6;23629:2;23617:9;23608:7;23604:23;23600:32;23597:119;;;23635:79;;:::i;:::-;23597:119;23755:1;23780:63;23835:7;23826:6;23815:9;23811:22;23780:63;:::i;:::-;23770:73;;23726:127;23511:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1702000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5234","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2979","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3424","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"15","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2269","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. NOTE:  The only changes made here are:    - change scope of \\\"_owners\\\" from private to internal    - change scope of \\\"_balances\\\" from private to internal    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/lib/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modifed from: OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n// Modified by: Rob Secord (https://twitter.com/robsecord)\\n// Co-founder @ Charged Particles - Visit: https://charged.fi\\n// Co-founder @ Taggr             - Visit: https://taggr.io\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * NOTE:\\n *  The only changes made here are:\\n *    - change scope of \\\"_owners\\\" from private to internal\\n *    - change scope of \\\"_balances\\\" from private to internal\\n *    - remove \\\"ERC721\\\" scope-resolution from \\\"ownerOf\\\" calls in order to override \\\"ownerOf\\\"\\n *    - modify the _burn function to burn to an alternate Null Address (prevents reassignment back to Pre-Mint Receiver)\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address constant internal _NULL_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        // Prevent re-assigning the token back to the Pre-Mint Receiver\\n        _owners[tokenId] = _NULL_ADDRESS;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x726960336df673d5fd509dde21ba3bed24645291d201f74762b945fe4d5aa016\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2200,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2202,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2206,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2210,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2214,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2220,"contract":"contracts/lib/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}