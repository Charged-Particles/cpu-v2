{
  "address": "0x9B2b11052B2A40c5e76d81c9Edd2d057b0419bF4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "walletManagerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "AssetDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "walletManagerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "AssetRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "name": "AssetRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "NftDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "NftRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardProgramFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RewardProgramOutOfFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewarded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckEther",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "baseMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateBaseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentNftUuid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseReward",
          "type": "uint256"
        }
      ],
      "name": "calculateMultipliedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentNftUuid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRewardsEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        }
      ],
      "name": "getAssetStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableRewards",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "walletManagerId",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            }
          ],
          "internalType": "struct IRewardProgram.AssetStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        }
      ],
      "name": "getNftStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRewardProgram.NftStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProgramData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multiplierNft",
              "type": "address"
            }
          ],
          "internalType": "struct IRewardProgram.ProgramRewardData",
          "name": "programData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "walletManagerId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "registerAssetDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "name": "registerAssetRelease",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "walletManagerId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "registerExistingDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositNftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositNftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registerNftDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "releaseNftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseNftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registerNftRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setBaseMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "setChargedManagers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        }
      ],
      "name": "setRewardNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRewardToken",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "universe",
          "type": "address"
        }
      ],
      "name": "setUniverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7fdb85e970bfd47e0228869a34535d97ec6f39de477d5d8f2d46271928655713",
  "receipt": {
    "to": null,
    "from": "0x6d46b37708dA7Ed4E5C4509495768Fecd3D17C01",
    "contractAddress": "0x9B2b11052B2A40c5e76d81c9Edd2d057b0419bF4",
    "transactionIndex": 0,
    "gasUsed": "4786555",
    "logsBloom": "0x
    "blockHash": "0x56dfe2d3be88a6c54bd2c37d716c2bdc930344c0ad0e4952051f06c0e49444a3",
    "transactionHash": "0x7fdb85e970bfd47e0228869a34535d97ec6f39de477d5d8f2d46271928655713",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 38678900,
        "transactionHash": "0x7fdb85e970bfd47e0228869a34535d97ec6f39de477d5d8f2d46271928655713",
        "address": "0x9B2b11052B2A40c5e76d81c9Edd2d057b0419bF4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d46b37708da7ed4e5c4509495768fecd3d17c01"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x56dfe2d3be88a6c54bd2c37d716c2bdc930344c0ad0e4952051f06c0e49444a3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 38678900,
        "transactionHash": "0x7fdb85e970bfd47e0228869a34535d97ec6f39de477d5d8f2d46271928655713",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006d46b37708da7ed4e5c4509495768fecd3d17c01",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000aa0d76cc29f450000000000000000000000000000000000000000000000000c09aeb28e69a3a77000000000000000000000000000000000000000000001271e3dd21d4679fd320000000000000000000000000000000000000000000000000bff0ddb21a704627000000000000000000000000000000000000000000001271e4872f4b33c9c770",
        "logIndex": 1,
        "blockHash": "0x56dfe2d3be88a6c54bd2c37d716c2bdc930344c0ad0e4952051f06c0e49444a3"
      }
    ],
    "blockNumber": 38678900,
    "cumulativeGasUsed": "4786555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "32b0731c3960278295b6d910e85ee6a7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"AssetDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"AssetRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardProgramFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardProgramOutOfFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckEther\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentNftUuid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseReward\",\"type\":\"uint256\"}],\"name\":\"calculateMultipliedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentNftUuid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"}],\"name\":\"getAssetStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableRewards\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"internalType\":\"struct IRewardProgram.AssetStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"}],\"name\":\"getNftStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardProgram.NftStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProgramData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiplierNft\",\"type\":\"address\"}],\"internalType\":\"struct IRewardProgram.ProgramRewardData\",\"name\":\"programData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"registerAssetDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"registerAssetRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"registerExistingDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registerNftDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"releaseNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registerNftRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setBaseMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setChargedManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universe\",\"type\":\"address\"}],\"name\":\"setUniverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/incentives/RewardProgram.sol\":\"RewardProgram\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x0bc1d0b8fa3b262a6fb98b88dceab8b3348903b95dcc5909b9074fb19a3d2da5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xaf936da92f3a9a4f98b237323b5eb1d813fb86c4d07a184beba7027cf0509ba3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3636662804cd8f474536b2875a9038a4c3fb91879f1bbff48af5c3f140fcd2f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x321ee37ef4925020aa818a03ec7fe48e057561f65ab009a84f6c20c86026ade7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"contracts/v1/incentives/RewardProgram.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// RewardProgram.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IRewardProgram.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IChargedManagers.sol\\\";\\nimport \\\"../interfaces/ILepton.sol\\\";\\nimport \\\"../interfaces/IWalletManager.sol\\\";\\nimport \\\"../interfaces/IRewardNft.sol\\\";\\nimport \\\"../lib/TokenInfo.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/BlackholePrevention.sol\\\";\\nimport \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\ncontract RewardProgram is\\n  IRewardProgram,\\n  BlackholePrevention,\\n  Ownable,\\n  IERC165,\\n  ReentrancyGuard,\\n  IERC721Receiver,\\n  IERC1155Receiver\\n{\\n  using SafeMath for uint256;\\n  using TokenInfo for address;\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  uint256 constant private PERCENTAGE_SCALE = 1e4; // 10000 (100%)\\n  uint256 constant private LEPTON_MULTIPLIER_SCALE = 1e2;\\n\\n  address private _universe;\\n  IChargedManagers private _chargedManagers;\\n  ProgramRewardData private _programData;\\n\\n  mapping(uint256 => EnumerableSet.UintSet) private _multiplierNftsSet;\\n  mapping(uint256 => AssetStake) private _assetStake;\\n  mapping(uint256 => NftStake) private _nftStake;\\n  mapping(address => uint256) public baseMultipliers;\\n\\n  /***********************************|\\n  |          Initialization           |\\n  |__________________________________*/\\n\\n  constructor() public {}\\n\\n\\n  /***********************************|\\n  |         Public Functions          |\\n  |__________________________________*/\\n\\n  function getProgramData() external view override returns (ProgramRewardData memory programData) {\\n    return _programData;\\n  }\\n\\n  function getFundBalance() external view override returns (uint256) {\\n    return _getFundBalance();\\n  }\\n\\n  function getClaimableRewards(\\n    address contractAddress,\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    override\\n  returns (uint256) {\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    return _assetStake[parentNftUuid].claimableRewards;\\n  }\\n\\n  function getAssetStake(uint256 uuid) view external returns (AssetStake memory) {\\n    return _assetStake[uuid];\\n  }\\n\\n  function getNftStake(uint256 uuid) view external returns (NftStake memory) {\\n    return _nftStake[uuid];\\n  }\\n\\n  /***********************************|\\n  |          Only Universe            |\\n  |__________________________________*/\\n\\n  function registerExistingDeposits(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata walletManagerId,\\n    address stakingToken\\n  )\\n    external\\n    override\\n    onlyUniverse\\n    nonReentrant\\n  {\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n\\n    require(_assetStake[parentNftUuid].start == 0 && _assetStake[parentNftUuid].claimableRewards == 0, \\\"RP:E-002\\\");\\n\\n    // Initiate Asset Stake\\n    IWalletManager walletMgr = _chargedManagers.getWalletManager(walletManagerId);\\n\\n    uint256 principal = walletMgr.getPrincipal(contractAddress, tokenId, stakingToken);\\n\\n    if (principal > 0) {\\n      _assetStake[parentNftUuid] = AssetStake(block.number, 0, walletManagerId, stakingToken);\\n      emit AssetRegistered(contractAddress, tokenId, walletManagerId, principal);\\n    }\\n  }\\n\\n  function registerAssetDeposit(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata walletManagerId,\\n    address stakingToken,\\n    uint256 principalAmount\\n  )\\n    external\\n    override\\n    onlyUniverse\\n  {\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    AssetStake storage assetStake = _assetStake[parentNftUuid];\\n\\n    if (assetStake.start == 0) {\\n      assetStake.start = block.number;\\n      assetStake.stakingToken = stakingToken;\\n      assetStake.walletManagerId = walletManagerId;\\n\\n      emit AssetDeposit(contractAddress, tokenId, walletManagerId, principalAmount);\\n    }\\n  }\\n\\n  function registerAssetRelease(\\n    address contractAddress,\\n    uint256 tokenId,\\n    uint256 interestAmount\\n  )\\n    external\\n    override\\n    onlyUniverse\\n    nonReentrant\\n    returns (uint256 rewards)\\n  {\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    AssetStake storage assetStake = _assetStake[parentNftUuid];\\n\\n    // Update Claimable Rewards\\n    uint256 newRewards = calculateRewardsEarned(parentNftUuid, assetStake.stakingToken, interestAmount);\\n    assetStake.claimableRewards = assetStake.claimableRewards.add(newRewards);\\n\\n    // Reset Stake if Principal Balance falls to Zero\\n    IWalletManager walletMgr = _chargedManagers.getWalletManager(assetStake.walletManagerId);\\n    uint256 principal = walletMgr.getPrincipal(contractAddress, tokenId, assetStake.stakingToken);\\n    if (principal == 0) {\\n      assetStake.start = 0;\\n    }\\n\\n    // Issue Rewards to NFT Owner\\n    rewards = _claimRewards(contractAddress, tokenId);\\n\\n    emit AssetRelease(contractAddress, tokenId, interestAmount);\\n  }\\n\\n  function registerNftDeposit(\\n    address contractAddress,\\n    uint256 tokenId,\\n    address depositNftAddress,\\n    uint256 depositNftTokenId,\\n    uint256 /* nftTokenAmount */\\n  )\\n    external\\n    override\\n    onlyUniverse\\n    nonReentrant\\n  {\\n    // We only care about the Multiplier NFT\\n    if (_programData.multiplierNft != depositNftAddress) { return; }\\n\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    uint256 multiplier = _getNftMultiplier(depositNftAddress, depositNftTokenId);\\n\\n    if (multiplier > 0 && !_multiplierNftsSet[parentNftUuid].contains(multiplier)) {\\n      // Add to Multipliers Set\\n      _multiplierNftsSet[parentNftUuid].add(multiplier);\\n\\n      // Update NFT Stake\\n      uint256 combinedMultiplier = _calculateTotalMultiplier(parentNftUuid);\\n      _nftStake[parentNftUuid] = NftStake(combinedMultiplier, block.number, 0);\\n    }\\n\\n    emit NftDeposit(contractAddress, tokenId, depositNftAddress, depositNftTokenId);\\n  }\\n\\n  function registerNftRelease(\\n    address contractAddress,\\n    uint256 tokenId,\\n    address releaseNftAddress,\\n    uint256 releaseNftTokenId,\\n    uint256 /* nftTokenAmount */\\n  )\\n    external\\n    override\\n    onlyUniverse\\n  {\\n    // We only care about the Multiplier NFT\\n    if (_programData.multiplierNft != releaseNftAddress) { return; }\\n\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    NftStake storage nftStake = _nftStake[parentNftUuid];\\n\\n    // Remove from Multipliers Set\\n    uint256 multiplier = _getNftMultiplier(releaseNftAddress, releaseNftTokenId);\\n    _multiplierNftsSet[parentNftUuid].remove(multiplier);\\n\\n    // Determine New Multiplier or Mark as Released\\n    if (_multiplierNftsSet[parentNftUuid].length() > 0) {\\n      nftStake.multiplier = _calculateTotalMultiplier(parentNftUuid);\\n    } else {\\n      nftStake.releaseBlockNumber = block.number;\\n    }\\n\\n    emit NftRelease(contractAddress, tokenId, releaseNftAddress, releaseNftTokenId);\\n  }\\n\\n  /***********************************|\\n  |         Reward Calculation        |\\n  |__________________________________*/\\n\\n  function calculateBaseReward(address stakingAsset, uint256 amount) public view returns(uint256 baseReward) {\\n    baseReward = _calculateBaseReward(stakingAsset, amount);\\n  }\\n\\n  function calculateRewardsEarned(\\n    uint256 parentNftUuid,\\n    address stakingAsset,\\n    uint256 interestAmount\\n  )\\n    public\\n    view\\n    returns (uint256 totalReward) \\n  {\\n    uint256 baseReward = _calculateBaseReward(stakingAsset, interestAmount);\\n    uint256 leptonMultipliedReward = calculateMultipliedReward(parentNftUuid, baseReward);\\n    totalReward = _convertDecimals(leptonMultipliedReward, stakingAsset);\\n  }\\n\\n  function calculateMultipliedReward(uint256 parentNftUuid, uint256 baseReward) public view returns(uint256) {\\n    AssetStake storage assetStake = _assetStake[parentNftUuid];\\n    NftStake memory nftStake = _nftStake[parentNftUuid];\\n    uint256 multiplierBP = nftStake.multiplier;\\n\\n    if (assetStake.start == 0) { return baseReward; }\\n\\n    uint256 assetDepositLength = block.number.sub(assetStake.start);\\n    uint256 nftDepositLength = _getNftDepositLength(nftStake);\\n\\n    if (multiplierBP == 0 || nftDepositLength == 0 || assetDepositLength == 0) {\\n      return baseReward;\\n    }\\n\\n    if (nftDepositLength > assetDepositLength) {\\n      nftDepositLength = assetDepositLength;\\n    }\\n\\n    // Percentage of the total program that the _programData.multiplierNft was deposited for\\n    uint256 nftRewardRatioBP = nftDepositLength.mul(PERCENTAGE_SCALE).div(assetDepositLength);\\n\\n    // Amount of reward that the _programData.multiplierNft is responsible for\\n    uint256 amountGeneratedDuringNftDeposit = baseReward.mul(nftRewardRatioBP).div(PERCENTAGE_SCALE);\\n\\n    // Amount of Multiplied Reward from NFT\\n    uint256 multipliedReward = amountGeneratedDuringNftDeposit.mul(multiplierBP.mul(LEPTON_MULTIPLIER_SCALE)).div(PERCENTAGE_SCALE);\\n\\n    // Amount of Base Reward without Multiplied NFT Rewards\\n    uint256 amountGeneratedWithoutNftDeposit = baseReward.sub(amountGeneratedDuringNftDeposit);\\n\\n    // Amount of Base Rewards + Multiplied NFT Rewards\\n    return amountGeneratedWithoutNftDeposit.add(multipliedReward);\\n  }\\n\\n  function onERC721Received(address, address, uint256, bytes calldata) external override returns (bytes4) {\\n    return IERC721Receiver.onERC721Received.selector;\\n  }\\n\\n  function onERC1155Received(address, address, uint256, uint256, bytes calldata) external override returns (bytes4) {\\n    return IERC1155Receiver.onERC1155BatchReceived.selector;\\n  }\\n\\n  function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external override returns (bytes4) {\\n    return \\\"\\\";\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(IERC165)\\n    returns (bool)\\n  {\\n    // default interface support\\n    if (\\n      interfaceId == type(IERC1155Receiver).interfaceId ||\\n      interfaceId == type(IERC165).interfaceId\\n    ) {\\n      return true;\\n    }\\n  }\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |__________________________________*/\\n\\n  function fundProgram(uint256 amount) external onlyOwner {\\n    require(_programData.rewardToken != address(0), \\\"RP:E-405\\\");\\n\\n    IERC20(_programData.rewardToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit RewardProgramFunded(amount);\\n  }\\n\\n  function setRewardToken(address newRewardToken) external onlyOwner {\\n    _programData.rewardToken = newRewardToken;\\n  }\\n\\n  function setBaseMultiplier(address assetToken, uint256 newMultiplier) external onlyOwner {\\n    baseMultipliers[assetToken] = newMultiplier; // Basis Points\\n  }\\n\\n  function setChargedManagers(address manager) external onlyOwner {\\n    _chargedManagers = IChargedManagers(manager);\\n  }\\n\\n  function setUniverse(address universe) external onlyOwner {\\n    _universe = universe;\\n  }\\n\\n  function setRewardNft(address nftTokenAddress) external onlyOwner {\\n    _programData.multiplierNft = nftTokenAddress;\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |      (blackhole prevention)       |\\n  |__________________________________*/\\n\\n  function withdrawEther(address payable receiver, uint256 amount) external onlyOwner {\\n    _withdrawEther(receiver, amount);\\n  }\\n\\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external onlyOwner {\\n    _withdrawERC20(receiver, tokenAddress, amount);\\n  }\\n\\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external onlyOwner {\\n    _withdrawERC721(receiver, tokenAddress, tokenId);\\n  }\\n\\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external onlyOwner {\\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\\n  }\\n\\n\\n  /***********************************|\\n  |         Private Functions         |\\n  |__________________________________*/\\n\\n  function _claimRewards(\\n    address contractAddress,\\n    uint256 tokenId\\n  )\\n    internal\\n    returns (uint256 totalReward)\\n  {\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    AssetStake storage assetStake = _assetStake[parentNftUuid];\\n\\n    // Rewards Receiver\\n    address receiver = IERC721(contractAddress).ownerOf(tokenId);\\n\\n    // Ensure Reward Pool has Sufficient Balance\\n    totalReward = assetStake.claimableRewards;\\n    uint256 fundBalance = _getFundBalance();\\n    uint256 unavailReward = totalReward > fundBalance ? totalReward.sub(fundBalance) : 0;\\n\\n    // Determine amount of Rewards to Transfer\\n    if (unavailReward > 0) {\\n      totalReward = totalReward.sub(unavailReward);\\n      emit RewardProgramOutOfFunds();\\n    }\\n\\n    if (totalReward > 0) {\\n      // Update Asset Stake\\n      assetStake.claimableRewards = 0;\\n      // Transfer Available Rewards to Receiver\\n      IERC20(_programData.rewardToken).safeTransfer(receiver, totalReward);\\n    }\\n\\n    emit RewardsClaimed(contractAddress, tokenId, receiver, totalReward, unavailReward);\\n  }\\n\\n  function _calculateBaseReward(address assetToken, uint256 amount) internal view returns (uint256 baseReward) {\\n    uint256 baseMultiplier = baseMultipliers[assetToken];\\n    require(baseMultiplier >= 0, \\\"Base multiplier not set\\\");\\n\\n    baseReward = amount.mul(baseMultiplier).div(PERCENTAGE_SCALE);\\n  }\\n\\n  function _calculateTotalMultiplier(uint256 parentNftUuid) internal view returns (uint256) {\\n    uint256 len = _multiplierNftsSet[parentNftUuid].length();\\n    uint256 indexOfSmallest = 0;\\n    uint256 multiplier = 0;\\n    uint256 i = 0;\\n\\n    // If holding all 6, Max Multiplier of 10X\\n    if (len == 6) {\\n      return LEPTON_MULTIPLIER_SCALE.mul(10);\\n    }\\n\\n    // If holding more than 4, Ignore the Smallest\\n    if (len > 4) {\\n      for (; i < len; i++) {\\n        if (_multiplierNftsSet[parentNftUuid].at(i) < _multiplierNftsSet[parentNftUuid].at(indexOfSmallest)) {\\n          indexOfSmallest = i;\\n        }\\n      }\\n      i = 0;\\n    }\\n\\n    // If holding less than or equal to 4, Multiplier = Half of the Sum of all\\n    for (; i < len; i++) {\\n      if (len > 4 && i == indexOfSmallest) { continue; }\\n      multiplier = multiplier.add(_multiplierNftsSet[parentNftUuid].at(i));\\n    }\\n\\n    return len > 1 ? multiplier.div(2) : multiplier; // Half of the Sum\\n  }\\n\\n  function _getNftDepositLength(NftStake memory nftStake) internal view returns (uint256 nftDepositLength) {\\n    if (nftStake.releaseBlockNumber > 0 ) {\\n      nftDepositLength = nftStake.releaseBlockNumber.sub(nftStake.depositBlockNumber);\\n    } else {\\n      nftDepositLength = block.number.sub(nftStake.depositBlockNumber);\\n    }\\n  }\\n\\n  function _getNftMultiplier(address contractAddress, uint256 tokenId) internal returns (uint256) {\\n    bytes4 fnSig = IRewardNft.getMultiplier.selector;\\n    (bool success, bytes memory returnData) = contractAddress.call(abi.encodeWithSelector(fnSig, tokenId));\\n\\n    if (success) {\\n      return abi.decode(returnData, (uint256));\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function _convertDecimals(uint256 reward, address stakingAsset) internal view returns (uint256) {\\n    uint8 stakingTokenDecimals = IERC20Detailed(stakingAsset).decimals();\\n    return reward.mul(10**(18 - uint256(stakingTokenDecimals)));\\n  }\\n\\n  function _getFundBalance() internal view returns (uint256) {\\n    return IERC20Detailed(_programData.rewardToken).balanceOf(address(this));\\n  }\\n\\n  modifier onlyUniverse() {\\n    require(msg.sender == _universe, \\\"RP:E-108\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8678527d561945e840d7b48a651224b6218f7c7db154402e7418a2b6d5aeb222\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IBasketManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IBasketManager.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Particle Basket Manager interface\\n * @dev The basket-manager for underlying assets attached to Charged Particles\\n * @dev Manages the link between NFTs and their respective Smart-Baskets\\n */\\ninterface IBasketManager {\\n\\n  event ControllerSet(address indexed controller);\\n  event ExecutorSet(address indexed executor);\\n  event PausedStateSet(bool isPaused);\\n  event NewSmartBasket(address indexed contractAddress, uint256 indexed tokenId, address indexed smartBasket);\\n  event BasketAdd(address indexed contractAddress, uint256 indexed tokenId, address basketTokenAddress, uint256 basketTokenId, uint256 basketTokenAmount);\\n  event BasketRemove(address indexed receiver, address indexed contractAddress, uint256 indexed tokenId, address basketTokenAddress, uint256 basketTokenId, uint256 basketTokenAmount);\\n  event BasketRewarded(address indexed contractAddress, uint256 indexed tokenId, address indexed receiver, address rewardsToken, uint256 rewardsAmount);\\n  event RewardProgramSet(address indexed rewardProgram);\\n\\n  function isPaused() external view returns (bool);\\n\\n  function getTokenTotalCount(address contractAddress, uint256 tokenId) external view returns (uint256);\\n  function getTokenCountByType(address contractAddress, uint256 tokenId, address basketTokenAddress, uint256 basketTokenId) external returns (uint256);\\n\\n  function prepareTransferAmount(uint256 nftTokenAmount) external;\\n  function addToBasket(address contractAddress, uint256 tokenId, address basketTokenAddress, uint256 basketTokenId) external returns (bool);\\n  function removeFromBasket(address receiver, address contractAddress, uint256 tokenId, address basketTokenAddress, uint256 basketTokenId) external returns (bool);\\n  function withdrawRewards(address receiver, address contractAddress, uint256 tokenId, address rewardsToken, uint256 rewardsAmount) external returns (uint256 amount);\\n  function executeForAccount(address contractAddress, uint256 tokenId, address externalAddress, uint256 ethValue, bytes memory encodedParams) external returns (bytes memory);\\n  function getBasketAddressById(address contractAddress, uint256 tokenId) external returns (address);\\n\\n  function withdrawEther(address contractAddress, uint256 tokenId, address payable receiver, uint256 amount) external;\\n  function withdrawERC20(address contractAddress, uint256 tokenId, address payable receiver, address tokenAddress, uint256 amount) external;\\n  function withdrawERC721(address contractAddress, uint256 tokenId, address payable receiver, address nftTokenAddress, uint256 nftTokenId) external;\\n  function withdrawERC1155(address contractAddress, uint256 tokenId, address payable receiver, address nftTokenAddress, uint256 nftTokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x20367a08a95c30ed283f46877bef9c5f1ccd0f07409fe632f4f82a5d33b6a0c3\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IChargedManagers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IChargedSettings.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IWalletManager.sol\\\";\\nimport \\\"./IBasketManager.sol\\\";\\n\\n/**\\n * @notice Interface for Charged Wallet-Managers\\n */\\ninterface IChargedManagers {\\n\\n  /***********************************|\\n  |             Public API            |\\n  |__________________________________*/\\n\\n  function isContractOwner(address contractAddress, address account) external view returns (bool);\\n\\n  // ERC20\\n  function isWalletManagerEnabled(string calldata walletManagerId) external view returns (bool);\\n  function getWalletManager(string calldata walletManagerId) external view returns (IWalletManager);\\n\\n  // ERC721\\n  function isNftBasketEnabled(string calldata basketId) external view returns (bool);\\n  function getBasketManager(string calldata basketId) external view returns (IBasketManager);\\n\\n  // Validation\\n  function validateDeposit(\\n    address sender,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata walletManagerId,\\n    address assetToken,\\n    uint256 assetAmount\\n  ) external;\\n  function validateNftDeposit(\\n    address sender,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata basketManagerId,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  ) external;\\n  function validateDischarge(address sender, address contractAddress, uint256 tokenId) external;\\n  function validateRelease(address sender, address contractAddress, uint256 tokenId) external;\\n  function validateBreakBond(address sender, address contractAddress, uint256 tokenId) external;\\n\\n  /***********************************|\\n  |          Particle Events          |\\n  |__________________________________*/\\n\\n  event Initialized(address indexed initiator);\\n  event ControllerSet(address indexed controllerAddress, string controllerId);\\n  event WalletManagerRegistered(string indexed walletManagerId, address indexed walletManager);\\n  event BasketManagerRegistered(string indexed basketId, address indexed basketManager);\\n}\\n\",\"keccak256\":\"0x98103c0832064c1e446dcfebfdeeec1a9189675e9cf630f568c65c16c94d5478\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Detailed {\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x96b8e4b6723a052ec16a1a729854532c953fb2eb758a0e01f75a3eafe242ccd8\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IERC721Chargeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IERC721Chargeable.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface IERC721Chargeable is IERC165Upgradeable {\\n    function owner() external view returns (address);\\n    function creatorOf(uint256 tokenId) external view returns (address);\\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address tokenOwner, address operator) external view returns (bool);\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x459e57b2d35c7cd78e6c3d47eb9f3e981529a18c89e2c318b10fe369c479c737\",\"license\":\"MIT\"},\"contracts/v1/interfaces/ILepton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ILepton.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Charged Particles Lepton Interface\\n * @dev ...\\n */\\ninterface ILepton {\\n\\n  struct Classification {\\n    string tokenUri;\\n    uint256 price;\\n    uint128 _upperBounds;\\n    uint32 supply;\\n    uint32 multiplier;\\n    uint32 bonus;\\n  }\\n\\n  function mintLepton() external payable returns (uint256 newTokenId);\\n  function batchMintLepton(uint256 count) external payable;\\n  function getNextType() external view returns (uint256);\\n  function getNextPrice() external view returns (uint256);\\n  function getMultiplier(uint256 tokenId) external view returns (uint256);\\n  function getBonus(uint256 tokenId) external view returns (uint256);\\n\\n\\n  event MaxMintPerTxSet(uint256 maxAmount);\\n  event LeptonTypeAdded(string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonTypeUpdated(uint256 leptonIndex, string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonMinted(address indexed receiver, uint256 indexed tokenId, uint256 price, uint32 multiplier);\\n  event LeptonBatchMinted(address indexed receiver, uint256 indexed tokenId, uint256 count, uint256 price, uint32 multiplier);\\n  event PausedStateSet(bool isPaused);\\n}\\n\",\"keccak256\":\"0x4903085427fa5dbee690fe79854fba60afaf21189957406ade55f6fc12556a01\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IRewardNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IRewardNft.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Charged Particles Reward-NFT Interface\\n * @dev ...\\n */\\ninterface IRewardNft {\\n  function getMultiplier(uint256 tokenId) external view returns (uint256);\\n  function getBonus(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x51a5666003af460a55356974a286dde959c5f166104c75b4d563e8294a90b07a\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IRewardProgram.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IRewardProgram.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRewardProgram {\\n  /* admin events */\\n  event RewardProgramFunded(uint256 amount);\\n  event RewardProgramOutOfFunds();\\n\\n  /* user events */\\n  event RewardsClaimed(address indexed contractAddress, uint256 tokenId, address indexed receiver, uint256 rewarded, uint256 remaining);\\n\\n  event AssetRegistered(address indexed contractAddress, uint256 tokenId, string walletManagerId, uint256 principalAmount);\\n  event AssetDeposit(address indexed contractAddress, uint256 tokenId, string walletManagerId, uint256 principalAmount);\\n  event AssetRelease(address indexed contractAddress, uint256 tokenId, uint256 interestAmount);\\n\\n  event NftDeposit(address indexed contractAddress, uint256 tokenId, address indexed nftTokenAddress, uint256 nftTokenId);\\n  event NftRelease(address indexed contractAddress, uint256 tokenId, address indexed nftTokenAddress, uint256 nftTokenId);\\n\\n  /* data types */\\n  struct ProgramRewardData {\\n    address rewardToken;\\n    address multiplierNft;\\n  }\\n\\n  struct AssetStake {\\n    uint256 start;\\n    uint256 claimableRewards;\\n    string walletManagerId;\\n    address stakingToken;\\n  }\\n\\n  struct NftStake {\\n    uint256 multiplier; // in Basis Points\\n    uint256 depositBlockNumber;\\n    uint256 releaseBlockNumber;\\n  }\\n\\n  /* user functions */\\n  function getProgramData() external view returns (ProgramRewardData memory programData);\\n  function getFundBalance() external view returns (uint256);\\n  function getClaimableRewards(address contractAddress, uint256 tokenId) external view returns (uint256);\\n  // function claimRewards(address contractAddress, uint256 tokenId, address receiver) public returns (uint256 totalReward);\\n\\n  function registerExistingDeposits(address contractAddress, uint256 tokenId, string calldata walletManagerId, address stakingToken) external;\\n\\n  function registerAssetDeposit(address contractAddress, uint256 tokenId, string calldata walletManagerId, address stakingToken, uint256 principalAmount) external;\\n  function registerAssetRelease(address contractAddress, uint256 tokenId, uint256 interestAmount) external returns (uint256 rewards);\\n\\n  function registerNftDeposit(address contractAddress, uint256 tokenId, address nftTokenAddress, uint256 nftTokenId, uint256 nftTokenAmount) external;\\n  function registerNftRelease(address contractAddress, uint256 tokenId, address nftTokenAddress, uint256 nftTokenId, uint256 nftTokenAmount) external;\\n}\",\"keccak256\":\"0xbd9ec0e6442d5e65175e08ea5a524f9b13ee59fbccdf8f155c71281ed6dd17cc\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IWalletManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWalletManager.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Particle Wallet Manager interface\\n * @dev The wallet-manager for underlying assets attached to Charged Particles\\n * @dev Manages the link between NFTs and their respective Smart-Wallets\\n */\\ninterface IWalletManager {\\n\\n  event ControllerSet(address indexed controller);\\n  event ExecutorSet(address indexed executor);\\n  event PausedStateSet(bool isPaused);\\n  event NewSmartWallet(address indexed contractAddress, uint256 indexed tokenId, address indexed smartWallet, address creator, uint256 annuityPct);\\n  event WalletEnergized(address indexed contractAddress, uint256 indexed tokenId, address indexed assetToken, uint256 assetAmount, uint256 yieldTokensAmount);\\n  event WalletDischarged(address indexed contractAddress, uint256 indexed tokenId, address indexed assetToken, uint256 creatorAmount, uint256 receiverAmount);\\n  event WalletDischargedForCreator(address indexed contractAddress, uint256 indexed tokenId, address indexed assetToken, address creator, uint256 receiverAmount);\\n  event WalletReleased(address indexed contractAddress, uint256 indexed tokenId, address indexed receiver, address assetToken, uint256 principalAmount, uint256 creatorAmount, uint256 receiverAmount);\\n  event WalletRewarded(address indexed contractAddress, uint256 indexed tokenId, address indexed receiver, address rewardsToken, uint256 rewardsAmount);\\n\\n  function isPaused() external view returns (bool);\\n\\n  function isReserveActive(address contractAddress, uint256 tokenId, address assetToken) external view returns (bool);\\n  function getReserveInterestToken(address contractAddress, uint256 tokenId, address assetToken) external view returns (address);\\n\\n  function getTotal(address contractAddress, uint256 tokenId, address assetToken) external returns (uint256);\\n  function getPrincipal(address contractAddress, uint256 tokenId, address assetToken) external returns (uint256);\\n  function getInterest(address contractAddress, uint256 tokenId, address assetToken) external returns (uint256 creatorInterest, uint256 ownerInterest);\\n  function getRewards(address contractAddress, uint256 tokenId, address rewardToken) external returns (uint256);\\n\\n  function energize(address contractAddress, uint256 tokenId, address assetToken, uint256 assetAmount) external returns (uint256 yieldTokensAmount);\\n  function discharge(address receiver, address contractAddress, uint256 tokenId, address assetToken, address creatorRedirect) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n  function dischargeAmount(address receiver, address contractAddress, uint256 tokenId, address assetToken, uint256 assetAmount, address creatorRedirect) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n  function dischargeAmountForCreator(address receiver, address contractAddress, uint256 tokenId, address creator, address assetToken, uint256 assetAmount) external returns (uint256 receiverAmount);\\n  function release(address receiver, address contractAddress, uint256 tokenId, address assetToken, address creatorRedirect) external returns (uint256 principalAmount, uint256 creatorAmount, uint256 receiverAmount);\\n  function releaseAmount(address receiver, address contractAddress, uint256 tokenId, address assetToken, uint256 assetAmount, address creatorRedirect) external returns (uint256 principalAmount, uint256 creatorAmount, uint256 receiverAmount);\\n  function withdrawRewards(address receiver, address contractAddress, uint256 tokenId, address rewardsToken, uint256 rewardsAmount) external returns (uint256 amount);\\n  function executeForAccount(address contractAddress, uint256 tokenId, address externalAddress, uint256 ethValue, bytes memory encodedParams) external returns (bytes memory);\\n  function refreshPrincipal(address contractAddress, uint256 tokenId, address assetToken) external;\\n  function getWalletAddressById(address contractAddress, uint256 tokenId, address creator, uint256 annuityPct) external returns (address);\\n\\n  function withdrawEther(address contractAddress, uint256 tokenId, address payable receiver, uint256 amount) external;\\n  function withdrawERC20(address contractAddress, uint256 tokenId, address payable receiver, address tokenAddress, uint256 amount) external;\\n  function withdrawERC721(address contractAddress, uint256 tokenId, address payable receiver, address nftTokenAddress, uint256 nftTokenId) external;\\n}\\n\",\"keccak256\":\"0xb03ee0e216d7444e72af388814d219ad9aa87006ec96d660b45dcad0875ef0d7\",\"license\":\"MIT\"},\"contracts/v1/lib/BlackholePrevention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\\n *  the Owner/DAO to pull them out on behalf of a user\\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\\n */\\ncontract BlackholePrevention {\\n  using Address for address payable;\\n  using SafeERC20 for IERC20;\\n\\n  event WithdrawStuckEther(address indexed receiver, uint256 amount);\\n  event WithdrawStuckERC20(address indexed receiver, address indexed tokenAddress, uint256 amount);\\n  event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\\n  event WithdrawStuckERC1155(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n\\n  function _withdrawEther(address payable receiver, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (address(this).balance >= amount) {\\n      receiver.sendValue(amount);\\n      emit WithdrawStuckEther(receiver, amount);\\n    }\\n  }\\n\\n  function _withdrawERC20(address payable receiver, address tokenAddress, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\\n      IERC20(tokenAddress).safeTransfer(receiver, amount);\\n      emit WithdrawStuckERC20(receiver, tokenAddress, amount);\\n    }\\n  }\\n\\n  function _withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\\n      IERC721(tokenAddress).transferFrom(address(this), receiver, tokenId);\\n      emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\\n    }\\n  }\\n\\n  function _withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount) {\\n      IERC1155(tokenAddress).safeTransferFrom(address(this), receiver, tokenId, amount, \\\"\\\");\\n      emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a664c8a1c1d7fb32ade2c11f75756b1fdb4c489daa32c1d58e6b867ea2ba8d6\",\"license\":\"MIT\"},\"contracts/v1/lib/ReentrancyGuard.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\",\"keccak256\":\"0x4897c6fee5e1601d203efa54d29b2cef20825cab134b8e63b0b13ee9603642ad\"},\"contracts/v1/lib/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// TokenInfo.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IERC721Chargeable.sol\\\";\\n\\nlibrary TokenInfo {\\n  function getTokenUUID(address contractAddress, uint256 tokenId) internal pure virtual returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(contractAddress, tokenId)));\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  function getTokenOwner(address contractAddress, uint256 tokenId) internal view virtual returns (address) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    return tokenInterface.ownerOf(tokenId);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  function getTokenCreator(address contractAddress, uint256 tokenId) internal view virtual returns (address) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    return tokenInterface.creatorOf(tokenId);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Owner of an External NFT contract\\n  /// @param contractAddress  The Address to the Contract of the NFT to check\\n  /// @param account          The Address of the Account to check\\n  /// @return True if the account owns the contract\\n  function isContractOwner(address contractAddress, address account) internal view virtual returns (bool) {\\n    address contractOwner = IERC721Chargeable(contractAddress).owner();\\n    return contractOwner != address(0x0) && contractOwner == account;\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Creator of a Proton-based NFT\\n  /// @param contractAddress  The Address to the Contract of the Proton-based NFT to check\\n  /// @param tokenId          The Token ID of the Proton-based NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the creator of the Proton-based NFT\\n  function isTokenCreator(address contractAddress, uint256 tokenId, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenCreator = tokenInterface.creatorOf(tokenId);\\n    return (sender == tokenCreator);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Creator of a Proton-based NFT or the Contract itself\\n  /// @param contractAddress  The Address to the Contract of the Proton-based NFT to check\\n  /// @param tokenId          The Token ID of the Proton-based NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the creator of the Proton-based NFT or the Contract itself\\n  function isTokenContractOrCreator(address contractAddress, uint256 tokenId, address creator, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenCreator = tokenInterface.creatorOf(tokenId);\\n    if (sender == contractAddress && creator == tokenCreator) { return true; }\\n    return (sender == tokenCreator);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Owner or Operator of an External NFT\\n  /// @param contractAddress  The Address to the Contract of the External NFT to check\\n  /// @param tokenId          The Token ID of the External NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the Owner or Operator of the External NFT\\n  function isErc721OwnerOrOperator(address contractAddress, uint256 tokenId, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenOwner = tokenInterface.ownerOf(tokenId);\\n    return (sender == tokenOwner || tokenInterface.isApprovedForAll(tokenOwner, sender));\\n  }\\n\\n  /**\\n    * @dev Returns true if `account` is a contract.\\n    * @dev Taken from OpenZeppelin library\\n    *\\n    * [IMPORTANT]\\n    * ====\\n    * It is unsafe to assume that an address for which this function returns\\n    * false is an externally-owned account (EOA) and not a contract.\\n    *\\n    * Among others, `isContract` will return false for the following\\n    * types of addresses:\\n    *\\n    *  - an externally-owned account\\n    *  - a contract in construction\\n    *  - an address where a contract will be created\\n    *  - an address where a contract lived, but was destroyed\\n    * ====\\n    */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { codehash := extcodehash(account) }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n    * `recipient`, forwarding all available gas and reverting on errors.\\n    * @dev Taken from OpenZeppelin library\\n    *\\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n    * imposed by `transfer`, making them unable to receive funds via\\n    * `transfer`. {sendValue} removes this limitation.\\n    *\\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n    *\\n    * IMPORTANT: because control is transferred to `recipient`, care must be\\n    * taken to not create reentrancy vulnerabilities. Consider using\\n    * {ReentrancyGuard} or the\\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n    */\\n  function sendValue(address payable recipient, uint256 amount, uint256 gasLimit) internal {\\n    require(address(this).balance >= amount, \\\"TokenInfo: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = (gasLimit > 0)\\n      ? recipient.call{ value: amount, gas: gasLimit }(\\\"\\\")\\n      : recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"TokenInfo: unable to send value, recipient may have reverted\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xbc78c6173db068d95084288246642402d0f4af399e1eb754182cae2d9173af5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c8063836c478d1161010f578063cf4eba91116100a2578063e70c2b1e11610071578063e70c2b1e14610599578063f23a6e61146105c9578063f2fde38b146105f9578063f7ed193814610615576101e4565b8063cf4eba9114610513578063d09513ba14610543578063dae9e3791461055f578063e4ea195d1461057d576101e4565b80639609bb90116100de5780639609bb901461048f578063a0edb48b146104ab578063ae9704cd146104c7578063bc197c81146104e3576101e4565b8063836c478d146103f557806386c3acfc146104255780638aee8127146104555780638da5cb5b14610471576101e4565b8063352685bc11610187578063522f681511610156578063522f68151461036f578063533f852e1461038b578063715018a6146103bb57806378448349146103c5576101e4565b8063352685bc146102eb5780634025feb214610307578063465262851461032357806350d0c63c1461033f576101e4565b806314e5f668116101c357806314e5f66814610265578063150b7a02146102835780631593dee1146102b35780631f5b149f146102cf576101e4565b80625f329a146101e957806301ffc9a7146102195780631065490d14610249575b600080fd5b61020360048036038101906101fe919061455a565b610631565b60405161021091906151aa565b60405180910390f35b610233600480360381019061022e9190614467565b6107e0565b6040516102409190614ed4565b60405180910390f35b610263600480360381019061025e919061435d565b6108bf565b005b61026d610a5f565b60405161027a919061518f565b60405180910390f35b61029d60048036038101906102989190614118565b610b25565b6040516102aa9190614eef565b60405180910390f35b6102cd60048036038101906102c89190613f5e565b610b3a565b005b6102e960048036038101906102e49190613f0c565b610bdf565b005b610305600480360381019061030091906144b9565b610cb8565b005b610321600480360381019061031c9190613f5e565b610e6e565b005b61033d60048036038101906103389190613f0c565b610f13565b005b610359600480360381019061035491906143ef565b610fef565b60405161036691906151aa565b60405180910390f35b61038960048036038101906103849190614010565b61130c565b005b6103a560048036038101906103a0919061422a565b6113af565b6040516103b291906151aa565b60405180910390f35b6103c36113fd565b005b6103df60048036038101906103da91906144b9565b611550565b6040516103ec9190615152565b60405180910390f35b61040f600480360381019061040a91906144b9565b611689565b60405161041c9190615174565b60405180910390f35b61043f600480360381019061043a9190613f0c565b6116d4565b60405161044c91906151aa565b60405180910390f35b61046f600480360381019061046a9190613f0c565b6116ec565b005b6104796117c8565b6040516104869190614d93565b60405180910390f35b6104a960048036038101906104a4919061422a565b6117f1565b005b6104c560048036038101906104c09190613fad565b6118ce565b005b6104e160048036038101906104dc9190613f0c565b611975565b005b6104fd60048036038101906104f8919061404c565b611a4e565b60405161050a9190614eef565b60405180910390f35b61052d6004803603810190610528919061450b565b611a5c565b60405161053a91906151aa565b60405180910390f35b61055d600480360381019061055891906142dd565b611a8e565b005b610567611e8c565b60405161057491906151aa565b60405180910390f35b61059760048036038101906105929190614266565b611e9b565b005b6105b360048036038101906105ae919061422a565b612100565b6040516105c091906151aa565b60405180910390f35b6105e360048036038101906105de9190614198565b612114565b6040516105f09190614eef565b60405180910390f35b610613600480360381019061060e9190613f0c565b61212a565b005b61062f600480360381019061062a9190614266565b6122ec565b005b600080600760008581526020019081526020016000209050610651613baf565b60086000868152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816000015190506000836000015414156106b0578493505050506107da565b60006106c984600001544361250690919063ffffffff16565b905060006106d684612550565b905060008314806106e75750600081145b806106f25750600082145b156107045786955050505050506107da565b81811115610710578190505b60006107398361072b6127108561259f90919063ffffffff16565b61260f90919063ffffffff16565b90506000610764612710610756848c61259f90919063ffffffff16565b61260f90919063ffffffff16565b905060006107a261271061079461078560648a61259f90919063ffffffff16565b8561259f90919063ffffffff16565b61260f90919063ffffffff16565b905060006107b9838c61250690919063ffffffff16565b90506107ce828261265990919063ffffffff16565b99505050505050505050505b92915050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108ab57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156108b957600190506108ba565b5b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690615052565b60405180910390fd5b600061097a868873ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b90506000600760008381526020019081526020016000209050600081600001541415610a5557438160000181905550838160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085858260020191906109ff929190613bd0565b508773ffffffffffffffffffffffffffffffffffffffff167f30d53e48465c48642e346a636a4eef45c72095b65bef5825308376e2f59f09e288888887604051610a4c94939291906151c5565b60405180910390a25b5050505050505050565b610a67613c50565b60046040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905090565b600063150b7a0260e01b905095945050505050565b610b426126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc6906150b2565b60405180910390fd5b610bda8383836126ec565b505050565b610be76126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b906150b2565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610cc06126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906150b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd990615072565b60405180910390fd5b610e34333083600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612881909392919063ffffffff16565b7fcbd64454da4b3587b11b8f8170d7656cbe58e29ee18fd715b0e79ad85edb6e5d81604051610e6391906151aa565b60405180910390a150565b610e766126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa906150b2565b60405180910390fd5b610f0e83838361290a565b505050565b610f1b6126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9f906150b2565b60405180910390fd5b80600460010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890615052565b60405180910390fd5b611089612b06565b60006110b4848673ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b9050600060076000838152602001908152602001600020905060006110fe838360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611a5c565b905061111781836001015461265990919063ffffffff16565b82600101819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b7328d846002016040518263ffffffff1660e01b815260040161117f9190614f50565b60206040518083038186803b15801561119757600080fd5b505afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf9190614490565b905060008173ffffffffffffffffffffffffffffffffffffffff16632da9ef818a8a8760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b815260040161123493929190614e9d565b602060405180830381600087803b15801561124e57600080fd5b505af1158015611262573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128691906144e2565b9050600081141561129c57600084600001819055505b6112a68989612b56565b95508873ffffffffffffffffffffffffffffffffffffffff167f8abeaea5da22bf1966530d4f970ac7c71ae0999eb1d2181afaeff8b56c394f3f89896040516112f0929190615205565b60405180910390a25050505050611305612d84565b9392505050565b6113146126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611398906150b2565b60405180910390fd5b6113ab8282612d8d565b5050565b6000806113db838573ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b9050600760008281526020019081526020016000206001015491505092915050565b6114056126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611492576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611489906150b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b611558613c96565b600760008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116235780601f106115f857610100808354040283529160200191611623565b820191906000526020600020905b81548152906001019060200180831161160657829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b611691613baf565b6008600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b60096020528060005260406000206000915090505481565b6116f46126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611778906150b2565b60405180910390fd5b80600460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6117f96126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d906150b2565b60405180910390fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6118d66126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a906150b2565b60405180910390fd5b61196f84848484612e7f565b50505050565b61197d6126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a01906150b2565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600098975050505050505050565b600080611a69848461305d565b90506000611a778683610631565b9050611a838186613116565b925050509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1590615052565b60405180910390fd5b611b26612b06565b6000611b51858773ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b905060006007600083815260200190815260200160002060000154148015611b8f575060006007600083815260200190815260200160002060010154145b611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590614f92565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b7328d86866040518363ffffffff1660e01b8152600401611c2d929190614f0a565b60206040518083038186803b158015611c4557600080fd5b505afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190614490565b905060008173ffffffffffffffffffffffffffffffffffffffff16632da9ef818989876040518463ffffffff1660e01b8152600401611cbe93929190614e9d565b602060405180830381600087803b158015611cd857600080fd5b505af1158015611cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1091906144e2565b90506000811115611e7a5760405180608001604052804381526020016000815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018573ffffffffffffffffffffffffffffffffffffffff168152506007600085815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611dda929190613cd4565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508773ffffffffffffffffffffffffffffffffffffffff167fdd1b8616b3983aa94529955a2f7d0dd75e5a93e53875372ea41a9eab5e3ef32688888885604051611e7194939291906151c5565b60405180910390a25b505050611e85612d84565b5050505050565b6000611e966131be565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290615052565b60405180910390fd5b611f33612b06565b8273ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f90576120f1565b6000611fbb858773ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b90506000611fc98585613273565b9050600081118015611ffd5750611ffb816006600085815260200190815260200160002061339090919063ffffffff16565b155b156120875761202781600660008581526020019081526020016000206133aa90919063ffffffff16565b506000612033836133c4565b90506040518060600160405280828152602001438152602001600081525060086000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050505b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f186ebbe503be539e070ca73b33a78f4266d96003e62b888dc31f88a39ddc9c8788876040516120e6929190615205565b60405180910390a350505b6120f9612d84565b5050505050565b600061210c838361305d565b905092915050565b600063bc197c8160e01b90509695505050505050565b6121326126e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b6906150b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561222f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222690614fb2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237390615052565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123d9576124ff565b6000612404858773ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b9050600060086000838152602001908152602001600020905060006124298686613273565b9050612450816006600086815260200190815260200160002061352290919063ffffffff16565b50600061246e6006600086815260200190815260200160002061353c565b111561248a5761247d836133c4565b8260000181905550612494565b4382600201819055505b8573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167ff3cfcfc091fdd683cf6c013de9806af93f3af27b256a57cb776331291cef408589886040516124f3929190615205565b60405180910390a35050505b5050505050565b600061254883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613551565b905092915050565b60008082604001511115612580576125798260200151836040015161250690919063ffffffff16565b905061259a565b61259782602001514361250690919063ffffffff16565b90505b919050565b6000808314156125b25760009050612609565b60008284029050828482816125c357fe5b0414612604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fb90615092565b60405180910390fd5b809150505b92915050565b600061265183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506135ac565b905092915050565b6000808284019050838110156126a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269b90614ff2565b60405180910390fd5b8091505092915050565b600082826040516020016126c3929190614d3b565b6040516020818303038152906040528051906020012060001c905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561275c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275390614fd2565b60405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016127969190614d93565b60206040518083038186803b1580156127ae57600080fd5b505afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e691906144e2565b1061287c5761281683828473ffffffffffffffffffffffffffffffffffffffff1661360d9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b8360405161287391906151aa565b60405180910390a35b505050565b612904846323b872dd60e01b8585856040516024016128a293929190614e3d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613693565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561297a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297190614fd2565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016129ca91906151aa565b60206040518083038186803b1580156129e257600080fd5b505afa1580156129f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1a9190613f35565b73ffffffffffffffffffffffffffffffffffffffff161415612b01578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3085846040518463ffffffff1660e01b8152600401612a7393929190614dae565b600060405180830381600087803b158015612a8d57600080fd5b505af1158015612aa1573d6000803e3d6000fd5b50505050808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a45b505050565b60026001541415612b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4390615132565b60405180910390fd5b6002600181905550565b600080612b82838573ffffffffffffffffffffffffffffffffffffffff166126ae90919063ffffffff16565b9050600060076000838152602001908152602001600020905060008573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b8152600401612bd691906151aa565b60206040518083038186803b158015612bee57600080fd5b505afa158015612c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c269190613f35565b9050816001015493506000612c396131be565b90506000818611612c4b576000612c5f565b612c5e828761250690919063ffffffff16565b5b90506000811115612cac57612c7d818761250690919063ffffffff16565b95507f9fc735fd421d3eb45362ea6d0d94945975bce33842b1bc94840719e66d937e4760405160405180910390a15b6000861115612d105760008460010181905550612d0f8387600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661360d9092919063ffffffff16565b5b8273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fb918e5bcd5ce5aadd59ae96fe4c568669afc7af190dbf16061540816cb407c73898985604051612d719392919061522e565b60405180910390a3505050505092915050565b60018081905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df490614fd2565b60405180910390fd5b804710612e7b57612e2d818373ffffffffffffffffffffffffffffffffffffffff1661375a90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd82604051612e7291906151aa565b60405180910390a25b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee690614fd2565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff1662fdd58e30856040518363ffffffff1660e01b8152600401612f2a929190614e74565b60206040518083038186803b158015612f4257600080fd5b505afa158015612f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7a91906144e2565b10613057578273ffffffffffffffffffffffffffffffffffffffff1663f242432a308685856040518563ffffffff1660e01b8152600401612fbe9493929190614de5565b600060405180830381600087803b158015612fd857600080fd5b505af1158015612fec573d6000803e3d6000fd5b50505050818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f620337bf89eea2b9ae2657beead83b5fa620452817118348aff96e201d52598b8460405161304e91906151aa565b60405180910390a45b50505050565b600080600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008110156130e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130dd906150d2565b60405180910390fd5b61310d6127106130ff838661259f90919063ffffffff16565b61260f90919063ffffffff16565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561315f57600080fd5b505afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190614596565b90506131b58160ff16601203600a0a8561259f90919063ffffffff16565b91505092915050565b6000600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161321e9190614d93565b60206040518083038186803b15801561323657600080fd5b505afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e91906144e2565b905090565b60008063adf8252d60e01b9050600060608573ffffffffffffffffffffffffffffffffffffffff1683866040516024016132ad91906151aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516133179190614d67565b6000604051808303816000865af19150503d8060008114613354576040519150601f19603f3d011682016040523d82523d6000602084013e613359565b606091505b50915091508115613382578080602001905181019061337891906144e2565b935050505061338a565b600093505050505b92915050565b60006133a2836000018360001b61384e565b905092915050565b60006133bc836000018360001b613871565b905092915050565b6000806133e26006600085815260200190815260200160002061353c565b90506000806000600684141561341257613407600a606461259f90919063ffffffff16565b94505050505061351d565b600484111561348a575b838110156134855761344983600660008981526020019081526020016000206138e190919063ffffffff16565b61346e82600660008a81526020019081526020016000206138e190919063ffffffff16565b1015613478578092505b808060010191505061341c565b600090505b5b838110156134f3576004841180156134a257508281145b156134ac576134e6565b6134e36134d482600660008a81526020019081526020016000206138e190919063ffffffff16565b8361265990919063ffffffff16565b91505b808060010191505061348b565b600184116135015781613516565b61351560028361260f90919063ffffffff16565b5b9450505050505b919050565b6000613534836000018360001b6138fb565b905092915050565b600061354a826000016139e3565b9050919050565b6000838311158290613599576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135909190614f2e565b60405180910390fd5b5060008385039050809150509392505050565b600080831182906135f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ea9190614f2e565b60405180910390fd5b5060008385816135ff57fe5b049050809150509392505050565b61368e8363a9059cbb60e01b848460405160240161362c929190614e74565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613693565b505050565b60606136f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139f49092919063ffffffff16565b90506000815111156137555780806020019051810190613715919061443e565b613754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374b90615112565b60405180910390fd5b5b505050565b8047101561379d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379490615032565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516137c390614d7e565b60006040518083038185875af1925050503d8060008114613800576040519150601f19603f3d011682016040523d82523d6000602084013e613805565b606091505b5050905080613849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384090615012565b60405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b600061387d838361384e565b6138d65782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506138db565b600090505b92915050565b60006138f08360000183613a0c565b60001c905092915050565b600080836001016000848152602001908152602001600020549050600081146139d7576000600182039050600060018660000180549050039050600086600001828154811061394657fe5b906000526020600020015490508087600001848154811061396357fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061399b57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506139dd565b60009150505b92915050565b600081600001805490509050919050565b6060613a038484600085613a79565b90509392505050565b600081836000018054905011613a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a4e90614f72565b60405180910390fd5b826000018281548110613a6657fe5b9060005260206000200154905092915050565b6060613a8485613b9c565b613ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613aba906150f2565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051613aed9190614d67565b60006040518083038185875af1925050503d8060008114613b2a576040519150601f19603f3d011682016040523d82523d6000602084013e613b2f565b606091505b50915091508115613b44578092505050613b94565b600081511115613b575780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b8b9190614f2e565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b60405180606001604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613c1157803560ff1916838001178555613c3f565b82800160010185558215613c3f579182015b82811115613c3e578235825591602001919060010190613c23565b5b509050613c4c9190613d54565b5090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060800160405280600081526020016000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613d1557805160ff1916838001178555613d43565b82800160010185558215613d43579182015b82811115613d42578251825591602001919060010190613d27565b5b509050613d509190613d54565b5090565b5b80821115613d6d576000816000905550600101613d55565b5090565b600081359050613d8081615437565b92915050565b600081519050613d9581615437565b92915050565b600081359050613daa8161544e565b92915050565b60008083601f840112613dc257600080fd5b8235905067ffffffffffffffff811115613ddb57600080fd5b602083019150836020820283011115613df357600080fd5b9250929050565b600081519050613e0981615465565b92915050565b600081359050613e1e8161547c565b92915050565b60008083601f840112613e3657600080fd5b8235905067ffffffffffffffff811115613e4f57600080fd5b602083019150836001820283011115613e6757600080fd5b9250929050565b600081519050613e7d81615493565b92915050565b60008083601f840112613e9557600080fd5b8235905067ffffffffffffffff811115613eae57600080fd5b602083019150836001820283011115613ec657600080fd5b9250929050565b600081359050613edc816154aa565b92915050565b600081519050613ef1816154aa565b92915050565b600081519050613f06816154c1565b92915050565b600060208284031215613f1e57600080fd5b6000613f2c84828501613d71565b91505092915050565b600060208284031215613f4757600080fd5b6000613f5584828501613d86565b91505092915050565b600080600060608486031215613f7357600080fd5b6000613f8186828701613d9b565b9350506020613f9286828701613d71565b9250506040613fa386828701613ecd565b9150509250925092565b60008060008060808587031215613fc357600080fd5b6000613fd187828801613d9b565b9450506020613fe287828801613d71565b9350506040613ff387828801613ecd565b925050606061400487828801613ecd565b91505092959194509250565b6000806040838503121561402357600080fd5b600061403185828601613d9b565b925050602061404285828601613ecd565b9150509250929050565b60008060008060008060008060a0898b03121561406857600080fd5b60006140768b828c01613d71565b98505060206140878b828c01613d71565b975050604089013567ffffffffffffffff8111156140a457600080fd5b6140b08b828c01613db0565b9650965050606089013567ffffffffffffffff8111156140cf57600080fd5b6140db8b828c01613db0565b9450945050608089013567ffffffffffffffff8111156140fa57600080fd5b6141068b828c01613e24565b92509250509295985092959890939650565b60008060008060006080868803121561413057600080fd5b600061413e88828901613d71565b955050602061414f88828901613d71565b945050604061416088828901613ecd565b935050606086013567ffffffffffffffff81111561417d57600080fd5b61418988828901613e24565b92509250509295509295909350565b60008060008060008060a087890312156141b157600080fd5b60006141bf89828a01613d71565b96505060206141d089828a01613d71565b95505060406141e189828a01613ecd565b94505060606141f289828a01613ecd565b935050608087013567ffffffffffffffff81111561420f57600080fd5b61421b89828a01613e24565b92509250509295509295509295565b6000806040838503121561423d57600080fd5b600061424b85828601613d71565b925050602061425c85828601613ecd565b9150509250929050565b600080600080600060a0868803121561427e57600080fd5b600061428c88828901613d71565b955050602061429d88828901613ecd565b94505060406142ae88828901613d71565b93505060606142bf88828901613ecd565b92505060806142d088828901613ecd565b9150509295509295909350565b6000806000806000608086880312156142f557600080fd5b600061430388828901613d71565b955050602061431488828901613ecd565b945050604086013567ffffffffffffffff81111561433157600080fd5b61433d88828901613e83565b9350935050606061435088828901613d71565b9150509295509295909350565b60008060008060008060a0878903121561437657600080fd5b600061438489828a01613d71565b965050602061439589828a01613ecd565b955050604087013567ffffffffffffffff8111156143b257600080fd5b6143be89828a01613e83565b945094505060606143d189828a01613d71565b92505060806143e289828a01613ecd565b9150509295509295509295565b60008060006060848603121561440457600080fd5b600061441286828701613d71565b935050602061442386828701613ecd565b925050604061443486828701613ecd565b9150509250925092565b60006020828403121561445057600080fd5b600061445e84828501613dfa565b91505092915050565b60006020828403121561447957600080fd5b600061448784828501613e0f565b91505092915050565b6000602082840312156144a257600080fd5b60006144b084828501613e6e565b91505092915050565b6000602082840312156144cb57600080fd5b60006144d984828501613ecd565b91505092915050565b6000602082840312156144f457600080fd5b600061450284828501613ee2565b91505092915050565b60008060006060848603121561452057600080fd5b600061452e86828701613ecd565b935050602061453f86828701613d71565b925050604061455086828701613ecd565b9150509250925092565b6000806040838503121561456d57600080fd5b600061457b85828601613ecd565b925050602061458c85828601613ecd565b9150509250929050565b6000602082840312156145a857600080fd5b60006145b684828501613ef7565b91505092915050565b6145c881615373565b82525050565b6145d7816152ce565b82525050565b6145e6816152ce565b82525050565b6145fd6145f8826152ce565b6153eb565b82525050565b61460c816152f2565b82525050565b61461b816152fe565b82525050565b600061462c8261527a565b61463681856152a1565b93506146468185602086016153b8565b80840191505092915050565b600061465e83856152bd565b935061466b8385846153a9565b61467483615419565b840190509392505050565b600061468a82615285565b61469481856152ac565b93506146a48185602086016153b8565b6146ad81615419565b840191505092915050565b60006146c382615285565b6146cd81856152bd565b93506146dd8185602086016153b8565b6146e681615419565b840191505092915050565b60008154600181166000811461470e576001811461473457614778565b607f600283041661471f81876152bd565b955060ff198316865260208601935050614778565b6002820461474281876152bd565b955061474d85615265565b60005b8281101561476f57815481890152600182019150602081019050614750565b80880195505050505b505092915050565b600061478d6022836152bd565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006147f36008836152bd565b91507f52503a452d3030320000000000000000000000000000000000000000000000006000830152602082019050919050565b60006148336026836152bd565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006148996009836152bd565b91507f4248503a452d34303300000000000000000000000000000000000000000000006000830152602082019050919050565b60006148d9601b836152bd565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614919603a836152bd565b91507f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008301527f6563697069656e74206d617920686176652072657665727465640000000000006020830152604082019050919050565b600061497f601d836152bd565b91507f416464726573733a20696e73756666696369656e742062616c616e63650000006000830152602082019050919050565b60006149bf6008836152bd565b91507f52503a452d3130380000000000000000000000000000000000000000000000006000830152602082019050919050565b60006149ff6008836152bd565b91507f52503a452d3430350000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614a3f6021836152bd565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614aa56020836152bd565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614ae56017836152bd565b91507f42617365206d756c7469706c696572206e6f74207365740000000000000000006000830152602082019050919050565b6000614b25600083615290565b9150600082019050919050565b6000614b3f6000836152a1565b9150600082019050919050565b6000614b59601d836152bd565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000614b99602a836152bd565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bff601f836152bd565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b6000608083016000830151614c4a6000860182614d06565b506020830151614c5d6020860182614d06565b5060408301518482036040860152614c75828261467f565b9150506060830151614c8a60608601826145ce565b508091505092915050565b606082016000820151614cab6000850182614d06565b506020820151614cbe6020850182614d06565b506040820151614cd16040850182614d06565b50505050565b604082016000820151614ced60008501826145ce565b506020820151614d0060208501826145ce565b50505050565b614d0f8161535c565b82525050565b614d1e8161535c565b82525050565b614d35614d308261535c565b61540f565b82525050565b6000614d4782856145ec565b601482019150614d578284614d24565b6020820191508190509392505050565b6000614d738284614621565b915081905092915050565b6000614d8982614b32565b9150819050919050565b6000602082019050614da860008301846145dd565b92915050565b6000606082019050614dc360008301866145dd565b614dd060208301856145bf565b614ddd6040830184614d15565b949350505050565b600060a082019050614dfa60008301876145dd565b614e0760208301866145bf565b614e146040830185614d15565b614e216060830184614d15565b8181036080830152614e3281614b18565b905095945050505050565b6000606082019050614e5260008301866145dd565b614e5f60208301856145dd565b614e6c6040830184614d15565b949350505050565b6000604082019050614e8960008301856145dd565b614e966020830184614d15565b9392505050565b6000606082019050614eb260008301866145dd565b614ebf6020830185614d15565b614ecc60408301846145dd565b949350505050565b6000602082019050614ee96000830184614603565b92915050565b6000602082019050614f046000830184614612565b92915050565b60006020820190508181036000830152614f25818486614652565b90509392505050565b60006020820190508181036000830152614f4881846146b8565b905092915050565b60006020820190508181036000830152614f6a81846146f1565b905092915050565b60006020820190508181036000830152614f8b81614780565b9050919050565b60006020820190508181036000830152614fab816147e6565b9050919050565b60006020820190508181036000830152614fcb81614826565b9050919050565b60006020820190508181036000830152614feb8161488c565b9050919050565b6000602082019050818103600083015261500b816148cc565b9050919050565b6000602082019050818103600083015261502b8161490c565b9050919050565b6000602082019050818103600083015261504b81614972565b9050919050565b6000602082019050818103600083015261506b816149b2565b9050919050565b6000602082019050818103600083015261508b816149f2565b9050919050565b600060208201905081810360008301526150ab81614a32565b9050919050565b600060208201905081810360008301526150cb81614a98565b9050919050565b600060208201905081810360008301526150eb81614ad8565b9050919050565b6000602082019050818103600083015261510b81614b4c565b9050919050565b6000602082019050818103600083015261512b81614b8c565b9050919050565b6000602082019050818103600083015261514b81614bf2565b9050919050565b6000602082019050818103600083015261516c8184614c32565b905092915050565b60006060820190506151896000830184614c95565b92915050565b60006040820190506151a46000830184614cd7565b92915050565b60006020820190506151bf6000830184614d15565b92915050565b60006060820190506151da6000830187614d15565b81810360208301526151ed818587614652565b90506151fc6040830184614d15565b95945050505050565b600060408201905061521a6000830185614d15565b6152276020830184614d15565b9392505050565b60006060820190506152436000830186614d15565b6152506020830185614d15565b61525d6040830184614d15565b949350505050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006152d98261533c565b9050919050565b60006152eb8261533c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000615335826152ce565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061537e82615385565b9050919050565b600061539082615397565b9050919050565b60006153a28261533c565b9050919050565b82818337600083830152505050565b60005b838110156153d65780820151818401526020810190506153bb565b838111156153e5576000848401525b50505050565b60006153f6826153fd565b9050919050565b60006154088261542a565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b615440816152ce565b811461544b57600080fd5b50565b615457816152e0565b811461546257600080fd5b50565b61546e816152f2565b811461547957600080fd5b50565b615485816152fe565b811461549057600080fd5b50565b61549c8161532a565b81146154a757600080fd5b50565b6154b38161535c565b81146154be57600080fd5b50565b6154ca81615366565b81146154d557600080fd5b5056fea264697066735822122047a419d58f0cb9076dd7bd9e37fd5d0a20d861ecf3bfd9a2045d97d90e63e31864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4406,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33595,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18473,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_universe",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18475,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_chargedManagers",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IChargedManagers)26842"
      },
      {
        "astId": 18477,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_programData",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(ProgramRewardData)28675_storage"
      },
      {
        "astId": 18481,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_multiplierNftsSet",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(UintSet)8991_storage)"
      },
      {
        "astId": 18485,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_assetStake",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(AssetStake)28684_storage)"
      },
      {
        "astId": 18489,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "_nftStake",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(NftStake)28691_storage)"
      },
      {
        "astId": 18493,
        "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
        "label": "baseMultipliers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IChargedManagers)26842": {
        "encoding": "inplace",
        "label": "contract IChargedManagers",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AssetStake)28684_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRewardProgram.AssetStake)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetStake)28684_storage"
      },
      "t_mapping(t_uint256,t_struct(NftStake)28691_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRewardProgram.NftStake)",
        "numberOfBytes": "32",
        "value": "t_struct(NftStake)28691_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)8991_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)8991_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetStake)28684_storage": {
        "encoding": "inplace",
        "label": "struct IRewardProgram.AssetStake",
        "members": [
          {
            "astId": 28677,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28679,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "claimableRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 28681,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "walletManagerId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 28683,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "stakingToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(NftStake)28691_storage": {
        "encoding": "inplace",
        "label": "struct IRewardProgram.NftStake",
        "members": [
          {
            "astId": 28686,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "multiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28688,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "depositBlockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 28690,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "releaseBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProgramRewardData)28675_storage": {
        "encoding": "inplace",
        "label": "struct IRewardProgram.ProgramRewardData",
        "members": [
          {
            "astId": 28672,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 28674,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "multiplierNft",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8702_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8697,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8701,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)8991_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 8990,
            "contract": "contracts/v1/incentives/RewardProgram.sol:RewardProgram",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8702_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}