{
  "address": "0xF771BC29B5CD8d1Fdc82997101f904C3808B4a42",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        }
      ],
      "name": "LeptonBatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        }
      ],
      "name": "LeptonMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "supply",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "bonus",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBounds",
          "type": "uint256"
        }
      ],
      "name": "LeptonTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leptonIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "supply",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "bonus",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBounds",
          "type": "uint256"
        }
      ],
      "name": "LeptonTypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "MaxMintPerTxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "PausedStateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckEther",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "supply",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "bonus",
          "type": "uint32"
        }
      ],
      "name": "addLeptonType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "batchMintLepton",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLeptonContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "migrateAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintLepton",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "setPausedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leptonIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "supply",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "multiplier",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "bonus",
          "type": "uint32"
        }
      ],
      "name": "updateLeptonType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x507987d5307809851a722d09229271b8c9f0ae73e10267ab3bcfd48606a26f34",
  "receipt": {
    "to": null,
    "from": "0x6d46b37708dA7Ed4E5C4509495768Fecd3D17C01",
    "contractAddress": "0xF771BC29B5CD8d1Fdc82997101f904C3808B4a42",
    "transactionIndex": 0,
    "gasUsed": "3201460",
    "logsBloom": "0x
    "blockHash": "0x3894c334b0bf9aa941226bb0a2db8df7d0f65fe2f190a1e483db938a80c0768f",
    "transactionHash": "0x507987d5307809851a722d09229271b8c9f0ae73e10267ab3bcfd48606a26f34",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 39278920,
        "transactionHash": "0x507987d5307809851a722d09229271b8c9f0ae73e10267ab3bcfd48606a26f34",
        "address": "0xF771BC29B5CD8d1Fdc82997101f904C3808B4a42",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d46b37708da7ed4e5c4509495768fecd3d17c01"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3894c334b0bf9aa941226bb0a2db8df7d0f65fe2f190a1e483db938a80c0768f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 39278920,
        "transactionHash": "0x507987d5307809851a722d09229271b8c9f0ae73e10267ab3bcfd48606a26f34",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006d46b37708da7ed4e5c4509495768fecd3d17c01",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000071bd1be961db0c000000000000000000000000000000000000000000000000a601543e7aae367700000000000000000000000000000000000000000000004a27af2ba3b0843745000000000000000000000000000000000000000000000000a58f9722914c5b6b00000000000000000000000000000000000000000000004a2820e8bf99e61251",
        "logIndex": 1,
        "blockHash": "0x3894c334b0bf9aa941226bb0a2db8df7d0f65fe2f190a1e483db938a80c0768f"
      }
    ],
    "blockNumber": 39278920,
    "cumulativeGasUsed": "3201460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3c4a4867d03c114eb5175ff04b48a99d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"}],\"name\":\"LeptonBatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"}],\"name\":\"LeptonMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bonus\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBounds\",\"type\":\"uint256\"}],\"name\":\"LeptonTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leptonIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bonus\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBounds\",\"type\":\"uint256\"}],\"name\":\"LeptonTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerTxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PausedStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckEther\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bonus\",\"type\":\"uint32\"}],\"name\":\"addLeptonType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"batchMintLepton\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLeptonContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"migrateAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLepton\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPausedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leptonIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"multiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bonus\",\"type\":\"uint32\"}],\"name\":\"updateLeptonType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/tokens/Lepton2.sol\":\"Lepton2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb046d18f9d09683ca1c0ed6d80c61da8a8a7d9b30bad70a17b898538683eff74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xaf936da92f3a9a4f98b237323b5eb1d813fb86c4d07a184beba7027cf0509ba3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3636662804cd8f474536b2875a9038a4c3fb91879f1bbff48af5c3f140fcd2f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe7f984cedc00a138dc27f263c73c32ba9a4b2fd23b6c34ac46f46c074b943538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x321ee37ef4925020aa818a03ec7fe48e057561f65ab009a84f6c20c86026ade7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\",\"license\":\"MIT\"},\"contracts/v1/interfaces/ILepton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ILepton.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Charged Particles Lepton Interface\\n * @dev ...\\n */\\ninterface ILepton {\\n\\n  struct Classification {\\n    string tokenUri;\\n    uint256 price;\\n    uint128 _upperBounds;\\n    uint32 supply;\\n    uint32 multiplier;\\n    uint32 bonus;\\n  }\\n\\n  function mintLepton() external payable returns (uint256 newTokenId);\\n  function batchMintLepton(uint256 count) external payable;\\n  function getNextType() external view returns (uint256);\\n  function getNextPrice() external view returns (uint256);\\n  function getMultiplier(uint256 tokenId) external view returns (uint256);\\n  function getBonus(uint256 tokenId) external view returns (uint256);\\n\\n\\n  event MaxMintPerTxSet(uint256 maxAmount);\\n  event LeptonTypeAdded(string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonTypeUpdated(uint256 leptonIndex, string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonMinted(address indexed receiver, uint256 indexed tokenId, uint256 price, uint32 multiplier);\\n  event LeptonBatchMinted(address indexed receiver, uint256 indexed tokenId, uint256 count, uint256 price, uint32 multiplier);\\n  event PausedStateSet(bool isPaused);\\n}\\n\",\"keccak256\":\"0x4903085427fa5dbee690fe79854fba60afaf21189957406ade55f6fc12556a01\",\"license\":\"MIT\"},\"contracts/v1/lib/BlackholePrevention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\\n *  the Owner/DAO to pull them out on behalf of a user\\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\\n */\\ncontract BlackholePrevention {\\n  using Address for address payable;\\n  using SafeERC20 for IERC20;\\n\\n  event WithdrawStuckEther(address indexed receiver, uint256 amount);\\n  event WithdrawStuckERC20(address indexed receiver, address indexed tokenAddress, uint256 amount);\\n  event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\\n  event WithdrawStuckERC1155(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n\\n  function _withdrawEther(address payable receiver, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (address(this).balance >= amount) {\\n      receiver.sendValue(amount);\\n      emit WithdrawStuckEther(receiver, amount);\\n    }\\n  }\\n\\n  function _withdrawERC20(address payable receiver, address tokenAddress, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\\n      IERC20(tokenAddress).safeTransfer(receiver, amount);\\n      emit WithdrawStuckERC20(receiver, tokenAddress, amount);\\n    }\\n  }\\n\\n  function _withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\\n      IERC721(tokenAddress).transferFrom(address(this), receiver, tokenId);\\n      emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\\n    }\\n  }\\n\\n  function _withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount) {\\n      IERC1155(tokenAddress).safeTransferFrom(address(this), receiver, tokenId, amount, \\\"\\\");\\n      emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a664c8a1c1d7fb32ade2c11f75756b1fdb4c489daa32c1d58e6b867ea2ba8d6\",\"license\":\"MIT\"},\"contracts/v1/lib/ERC721Basic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Basic is Context, ERC165, IERC721, IERC721Metadata {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n  bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // mapping from token ids to their owners\\n  mapping (uint256 => address) internal _tokenOwners;\\n\\n  // mapping from owner to token balance\\n  mapping (address => uint256) internal _ownerBalance;\\n\\n  // Mapping from token ID to approved address\\n  mapping (uint256 => address) internal _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping (address => mapping (address => bool)) internal _operatorApprovals;\\n\\n  // Token name\\n  string internal _name;\\n\\n  // Token symbol\\n  string internal _symbol;\\n\\n  // Token Count\\n  uint256 internal _tokenCount;\\n\\n  /*\\n    *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n    *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n    *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n    *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n    *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n    *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n    *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n    *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n    *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n    *\\n    *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n    *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n    */\\n  bytes4 internal constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  /*\\n    *     bytes4(keccak256('name()')) == 0x06fdde03\\n    *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n    *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n    *\\n    *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n    */\\n  bytes4 internal constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n  /**\\n    * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n    */\\n  constructor (string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n\\n    // register the supported interfaces to conform to ERC721 via ERC165\\n    _registerInterface(_INTERFACE_ID_ERC721);\\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n  }\\n\\n  /**\\n    * @dev See {IERC721-balanceOf}.\\n    */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721:E-403\\\");\\n    return _ownerBalance[owner];\\n  }\\n\\n  /**\\n    * @dev See {IERC721-ownerOf}.\\n    */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return _tokenOwners[tokenId];\\n  }\\n\\n  /**\\n    * @dev See {IERC721Metadata-name}.\\n    */\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Metadata-symbol}.\\n    */\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n    * @dev See {IERC721Metadata-tokenURI}.\\n    */\\n  function tokenURI(uint256 /* tokenId */) public view virtual override returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n    * @dev See {IERC721-approve}.\\n    */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721:E-111\\\");\\n\\n    require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \\\"ERC721:E-105\\\");\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n    * @dev See {IERC721-getApproved}.\\n    */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721:E-405\\\");\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n    * @dev See {IERC721-setApprovalForAll}.\\n    */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(operator != _msgSender(), \\\"ERC721:E-111\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n    * @dev See {IERC721-isApprovedForAll}.\\n    */\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n    * @dev See {IERC721-transferFrom}.\\n    */\\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721:E-105\\\");\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n    * @dev See {IERC721-safeTransferFrom}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n    * @dev See {IERC721-safeTransferFrom}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721:E-105\\\");\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n    * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n    * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n    *\\n    * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n    *\\n    * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n    * implement alternative mecanisms to perform token transfer, such as signature-based.\\n    *\\n    * Requirements:\\n    *\\n    * - `from` cannot be the zero address.\\n    * - `to` cannot be the zero address.\\n    * - `tokenId` token must exist and be owned by `from`.\\n    * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721:E-402\\\");\\n  }\\n\\n  /**\\n    * @dev Returns whether `tokenId` exists.\\n    *\\n    * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n    *\\n    * Tokens start existing when they are minted (`_mint`),\\n    * and stop existing when they are burned (`_burn`).\\n    */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return _tokenOwners[tokenId] != address(0x0);\\n  }\\n\\n  /**\\n    * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n    *\\n    * Requirements:\\n    *\\n    * - `tokenId` must exist.\\n    */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n    require(_exists(tokenId), \\\"ERC721:E-405\\\");\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n    * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n    * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n    */\\n  function _safeMint(address to, bytes memory _data) internal virtual returns (uint256) {\\n    uint256 tokenId = _mint(to);\\n    require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721:E-402\\\");\\n    return tokenId;\\n  }\\n\\n  /**\\n    * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n    * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n    */\\n  function _safeMintBatch(address to, uint256 count, bytes memory _data) internal virtual {\\n    uint256 startTokenId = _mintBatch(to, count);\\n    require(_checkOnERC721Received(address(0), to, startTokenId, _data), \\\"ERC721:E-402\\\");\\n  }\\n\\n  /**\\n    * @dev Mints `tokenId` and transfers it to `to`.\\n    *\\n    * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n    *\\n    * Requirements:\\n    *\\n    * - `tokenId` must not exist.\\n    * - `to` cannot be the zero address.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function _mint(address to) internal virtual returns (uint256) {\\n    require(to != address(0), \\\"ERC721:E-403\\\");\\n\\n    _tokenCount = _tokenCount.add(1);\\n    uint256 tokenId = _tokenCount;\\n    require(!_exists(tokenId), \\\"ERC721:E-407\\\");\\n\\n    _tokenOwners[tokenId] = to;\\n    _ownerBalance[to] = _ownerBalance[to].add(1);\\n\\n    emit Transfer(address(0), to, tokenId);\\n    return tokenId;\\n  }\\n\\n  /**\\n    * @dev Mints `tokenId` and transfers it to `to`.\\n    *\\n    * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n    *\\n    * Requirements:\\n    *\\n    * - `tokenId` must not exist.\\n    * - `to` cannot be the zero address.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function _mintBatch(address to, uint256 count) internal virtual returns (uint256) {\\n    require(to != address(0), \\\"ERC721:E-403\\\");\\n\\n    uint256 startTokenId = _tokenCount.add(1);\\n    for (uint i = 1; i <= count; i++) {\\n      uint256 tokenId = _tokenCount.add(i);\\n      _tokenOwners[tokenId] = to;\\n      emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    _tokenCount = _tokenCount.add(count);\\n    _ownerBalance[to] = _ownerBalance[to].add(count);\\n    return startTokenId;\\n  }\\n\\n  /**\\n    * @dev Transfers `tokenId` from `from` to `to`.\\n    *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n    *\\n    * Requirements:\\n    *\\n    * - `to` cannot be the zero address.\\n    * - `tokenId` token must be owned by `from`.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721:E-102\\\");\\n    require(to != address(0), \\\"ERC721:E-403\\\");\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _tokenOwners[tokenId] = to;\\n    _ownerBalance[from] = _ownerBalance[from].sub(1);\\n    _ownerBalance[to] = _ownerBalance[to].add(1);\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n    * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n    * The call is not executed if the target address is not a contract.\\n    *\\n    * @param from address representing the previous owner of the given token ID\\n    * @param to target address that will receive the tokens\\n    * @param tokenId uint256 ID of the token to be transferred\\n    * @param _data bytes optional data to send along with the call\\n    * @return bool whether the call correctly returned the expected magic value\\n    */\\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n    internal returns (bool)\\n  {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n      IERC721Receiver(to).onERC721Received.selector,\\n      _msgSender(),\\n      from,\\n      tokenId,\\n      _data\\n    ), \\\"ERC721:E-402\\\");\\n    bytes4 retval = abi.decode(returndata, (bytes4));\\n    return (retval == _ERC721_RECEIVED);\\n  }\\n\\n  function _approve(address to, uint256 tokenId) internal {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x4b9f68ff101017027a7d963c7ab888d126c3e5f10fb5dd28daba08d49d9bd291\",\"license\":\"MIT\"},\"contracts/v1/tokens/Lepton2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Lepton2.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../lib/ERC721Basic.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n\\nimport \\\"../interfaces/ILepton.sol\\\";\\nimport \\\"../lib/BlackholePrevention.sol\\\";\\n\\ncontract Lepton2 is ILepton, ERC721Basic, Ownable, ReentrancyGuard, BlackholePrevention {\\n  using SafeMath for uint256;\\n  using Address for address payable;\\n\\n  Classification[] internal _leptonTypes;\\n\\n  uint256 internal _typeIndex;\\n  uint256 internal _maxSupply;\\n  uint256 internal _maxMintPerTx;\\n  uint256 internal _migratedCount;\\n\\n  bool internal _paused;\\n  bool internal _migrationComplete;\\n\\n\\n  /***********************************|\\n  |          Initialization           |\\n  |__________________________________*/\\n\\n  constructor() public ERC721Basic(\\\"Charged Particles - Lepton2\\\", \\\"LEPTON2\\\") {\\n    _paused = true;\\n    _migrationComplete = false;\\n    _migratedCount = 0;\\n  }\\n\\n\\n  /***********************************|\\n  |              Public               |\\n  |__________________________________*/\\n\\n  function mintLepton() external payable override nonReentrant whenNotPaused returns (uint256 newTokenId) {\\n    newTokenId = _mintLepton(msg.sender);\\n  }\\n\\n  function batchMintLepton(uint256 count) external payable override nonReentrant whenNotPaused {\\n    _batchMintLepton(msg.sender, count);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _tokenCount;\\n  }\\n\\n  function maxSupply() external view returns (uint256) {\\n    return _maxSupply;\\n  }\\n\\n  function getNextType() external view override returns (uint256) {\\n    if (_typeIndex >= _leptonTypes.length) { return 0; }\\n    return _typeIndex;\\n  }\\n\\n  function getNextPrice() external view override returns (uint256) {\\n    if (_typeIndex >= _leptonTypes.length) { return 0; }\\n    return _leptonTypes[_typeIndex].price;\\n  }\\n\\n  function getMultiplier(uint256 tokenId) external view override returns (uint256) {\\n    require(_exists(tokenId), \\\"LPT:E-405\\\");\\n    return _getLepton(tokenId).multiplier;\\n  }\\n\\n  function getBonus(uint256 tokenId) external view override returns (uint256) {\\n    require(_exists(tokenId), \\\"LPT:E-405\\\");\\n    return _getLepton(tokenId).bonus;\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), \\\"LPT:E-405\\\");\\n    return _getLepton(tokenId).tokenUri;\\n  }\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |__________________________________*/\\n\\n  function addLeptonType(\\n    string calldata tokenUri,\\n    uint256 price,\\n    uint32 supply,\\n    uint32 multiplier,\\n    uint32 bonus\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _maxSupply = _maxSupply.add(uint256(supply));\\n\\n    Classification memory lepton = Classification({\\n      tokenUri: tokenUri,\\n      price: price,\\n      supply: supply,\\n      multiplier: multiplier,\\n      bonus: bonus,\\n      _upperBounds: uint128(_maxSupply)\\n    });\\n    _leptonTypes.push(lepton);\\n\\n    emit LeptonTypeAdded(tokenUri, price, supply, multiplier, bonus, _maxSupply);\\n  }\\n\\n  function updateLeptonType(\\n    uint256 leptonIndex,\\n    string calldata tokenUri,\\n    uint256 price,\\n    uint32 supply,\\n    uint32 multiplier,\\n    uint32 bonus\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _leptonTypes[leptonIndex].tokenUri = tokenUri;\\n    _leptonTypes[leptonIndex].price = price;\\n    _leptonTypes[leptonIndex].supply = supply;\\n    _leptonTypes[leptonIndex].multiplier = multiplier;\\n    _leptonTypes[leptonIndex].bonus = bonus;\\n\\n    emit LeptonTypeUpdated(leptonIndex, tokenUri, price, supply, multiplier, bonus, _maxSupply);\\n  }\\n\\n  function setMaxMintPerTx(uint256 maxAmount) external onlyOwner {\\n    _maxMintPerTx = maxAmount;\\n    emit MaxMintPerTxSet(maxAmount);\\n  }\\n\\n  function setPausedState(bool state) external onlyOwner {\\n    _paused = state;\\n    emit PausedStateSet(state);\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |      (blackhole prevention)       |\\n  |__________________________________*/\\n\\n  function withdrawEther(address payable receiver, uint256 amount) external onlyOwner {\\n    _withdrawEther(receiver, amount);\\n  }\\n\\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external onlyOwner {\\n    _withdrawERC20(receiver, tokenAddress, amount);\\n  }\\n\\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external onlyOwner {\\n    _withdrawERC721(receiver, tokenAddress, tokenId);\\n  }\\n\\n  function migrateAccounts(address oldLeptonContract, uint256 count) external onlyOwner whenNotMigrated {\\n    uint256 oldSupply = IERC721Enumerable(oldLeptonContract).totalSupply();\\n    require(oldSupply == 0 || oldSupply > _migratedCount, \\\"LPT:E-004\\\");\\n\\n    if (oldSupply > 0) {\\n      uint256 endTokenId = _migratedCount.add(count);\\n      if (endTokenId > oldSupply) {\\n        count = count.sub(endTokenId.sub(oldSupply));\\n      }\\n\\n      for (uint256 i = 1; i <= count; i++) {\\n        uint256 tokenId = _migratedCount.add(i);\\n        address tokenOwner = IERC721(oldLeptonContract).ownerOf(tokenId);\\n        _mint(tokenOwner);\\n      }\\n      _migratedCount = _migratedCount.add(count);\\n    }\\n\\n    if (oldSupply == _migratedCount) {\\n      _finalizeMigration();\\n    }\\n  }\\n\\n  /***********************************|\\n  |         Private Functions         |\\n  |__________________________________*/\\n\\n  function _getLepton(uint256 tokenId) internal view returns (Classification memory) {\\n    uint256 types = _leptonTypes.length;\\n    for (uint256 i = 0; i < types; i++) {\\n      Classification memory lepton = _leptonTypes[i];\\n      if (tokenId <= lepton._upperBounds) {\\n        return lepton;\\n      }\\n    }\\n  }\\n\\n  function _mintLepton(address receiver) internal returns (uint256 newTokenId) {\\n    require(_typeIndex < _leptonTypes.length, \\\"LPT:E-408\\\");\\n\\n    Classification memory lepton = _leptonTypes[_typeIndex];\\n    require(msg.value >= lepton.price, \\\"LPT:E-414\\\");\\n\\n    newTokenId = _safeMint(receiver, \\\"\\\");\\n\\n    // Determine Next Type\\n    if (newTokenId == lepton._upperBounds) {\\n      _typeIndex = _typeIndex.add(1);\\n    }\\n\\n    _refundOverpayment(lepton.price);\\n  }\\n\\n  function _batchMintLepton(address receiver, uint256 count) internal {\\n    require(_typeIndex < _leptonTypes.length, \\\"LPT:E-408\\\");\\n    require(_maxMintPerTx == 0 || count <= _maxMintPerTx, \\\"LPT:E-429\\\");\\n\\n    Classification memory lepton = _leptonTypes[_typeIndex];\\n\\n    uint256 endTokenId = _tokenCount.add(count);\\n    if (endTokenId > lepton._upperBounds) {\\n      count = count.sub(endTokenId.sub(lepton._upperBounds));\\n    }\\n\\n    uint256 salePrice = lepton.price.mul(count);\\n    require(msg.value >= salePrice, \\\"LPT:E-414\\\");\\n\\n    _safeMintBatch(receiver, count, \\\"\\\");\\n\\n    // Determine Next Type\\n    if (endTokenId >= lepton._upperBounds) {\\n      _typeIndex = _typeIndex.add(1);\\n    }\\n\\n    _refundOverpayment(salePrice);\\n  }\\n\\n  function _refundOverpayment(uint256 threshold) internal {\\n    uint256 overage = msg.value.sub(threshold);\\n    if (overage > 0) {\\n      payable(_msgSender()).sendValue(overage);\\n    }\\n  }\\n\\n  function _finalizeMigration() internal {\\n    // Determine Next Type\\n    _typeIndex = 0;\\n    for (uint256 i = 0; i < _leptonTypes.length; i++) {\\n      Classification memory lepton = _leptonTypes[i];\\n      if (_migratedCount >= lepton._upperBounds) {\\n        _typeIndex = i + 1;\\n      }\\n    }\\n    _migrationComplete = true;\\n  }\\n\\n\\n  /***********************************|\\n  |             Modifiers             |\\n  |__________________________________*/\\n\\n  modifier whenNotMigrated() {\\n    require(!_migrationComplete, \\\"LPT:E-004\\\");\\n    _;\\n  }\\n\\n  modifier whenNotPaused() {\\n    require(!_paused, \\\"LPT:E-101\\\");\\n    _;\\n  }\\n}\",\"keccak256\":\"0x308d33f8e4c5dbc7fa986fd93e3f760f8f81c14e0915af9ba9ab9cd5509fae6d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063681ce98a11610102578063b88d4fde11610095578063db9f60ff11610064578063db9f60ff146108be578063e6089023146108ea578063e985e9c5146108ff578063f2fde38b1461093a576101e3565b8063b88d4fde14610711578063c87b56dd146107e4578063d5abeb011461080e578063da47bb2614610823576101e3565b806395d89b41116100d157806395d89b41146105f5578063a22cb4651461060a578063adf8252d14610645578063b0fde8cf1461066f576101e3565b8063681ce98a1461058357806370a0823114610598578063715018a6146105cb5780638da5cb5b146105e0576101e3565b806323b872dd1161017a578063522f681511610149578063522f6815146104ee5780635fc194ed14610527578063616cdb1e1461052f5780636352211e14610559576101e3565b806323b872dd146103fb5780634025feb21461043e57806342842e0e146104815780634aa66b28146104c4576101e3565b8063095ea7b3116101b6578063095ea7b31461033b5780630afd902b146103745780631593dee11461039157806318160ddd146103d4576101e3565b806301ffc9a7146101e85780630512487a1461023057806306fdde031461026b578063081812fc146102f5575b600080fd5b3480156101f457600080fd5b5061021c6004803603602081101561020b57600080fd5b50356001600160e01b03191661096d565b604080519115158252519081900360200190f35b34801561023c57600080fd5b506102696004803603604081101561025357600080fd5b506001600160a01b038135169060200135610990565b005b34801561027757600080fd5b50610280610bea565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ba5781810151838201526020016102a2565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030157600080fd5b5061031f6004803603602081101561031857600080fd5b5035610c81565b604080516001600160a01b039092168252519081900360200190f35b34801561034757600080fd5b506102696004803603604081101561035e57600080fd5b506001600160a01b038135169060200135610ce8565b6102696004803603602081101561038a57600080fd5b5035610dc8565b34801561039d57600080fd5b50610269600480360360608110156103b457600080fd5b506001600160a01b03813581169160208101359091169060400135610e7b565b3480156103e057600080fd5b506103e9610ede565b60408051918252519081900360200190f35b34801561040757600080fd5b506102696004803603606081101561041e57600080fd5b506001600160a01b03813581169160208101359091169060400135610ee4565b34801561044a57600080fd5b506102696004803603606081101561046157600080fd5b506001600160a01b03813581169160208101359091169060400135610f40565b34801561048d57600080fd5b50610269600480360360608110156104a457600080fd5b506001600160a01b03813581169160208101359091169060400135610fa3565b3480156104d057600080fd5b506103e9600480360360208110156104e757600080fd5b5035610fbe565b3480156104fa57600080fd5b506102696004803603604081101561051157600080fd5b506001600160a01b03813516906020013561101f565b6103e9611085565b34801561053b57600080fd5b506102696004803603602081101561055257600080fd5b503561113b565b34801561056557600080fd5b5061031f6004803603602081101561057c57600080fd5b50356111ce565b34801561058f57600080fd5b506103e96111e9565b3480156105a457600080fd5b506103e9600480360360208110156105bb57600080fd5b50356001600160a01b0316611225565b3480156105d757600080fd5b5061026961128d565b3480156105ec57600080fd5b5061031f61132f565b34801561060157600080fd5b5061028061133e565b34801561061657600080fd5b506102696004803603604081101561062d57600080fd5b506001600160a01b038135169060200135151561139f565b34801561065157600080fd5b506103e96004803603602081101561066857600080fd5b5035611493565b34801561067b57600080fd5b50610269600480360360c081101561069257600080fd5b813591908101906040810160208201356401000000008111156106b457600080fd5b8201836020820111156106c657600080fd5b803590602001918460018302840111640100000000831117156106e857600080fd5b919350915080359063ffffffff60208201358116916040810135821691606090910135166114f4565b34801561071d57600080fd5b506102696004803603608081101561073457600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561076f57600080fd5b82018360208201111561078157600080fd5b803590602001918460018302840111640100000000831117156107a357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116fd945050505050565b3480156107f057600080fd5b506102806004803603602081101561080757600080fd5b5035611760565b34801561081a57600080fd5b506103e96117b8565b34801561082f57600080fd5b50610269600480360360a081101561084657600080fd5b81019060208101813564010000000081111561086157600080fd5b82018360208201111561087357600080fd5b8035906020019184600183028401116401000000008311171561089557600080fd5b919350915080359063ffffffff60208201358116916040810135821691606090910135166117be565b3480156108ca57600080fd5b50610269600480360360208110156108e157600080fd5b50351515611a3e565b3480156108f657600080fd5b506103e9611add565b34801561090b57600080fd5b5061021c6004803603604081101561092257600080fd5b506001600160a01b0381358116916020013516611afa565b34801561094657600080fd5b506102696004803603602081101561095d57600080fd5b50356001600160a01b0316611b2a565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b610998611c23565b6008546001600160a01b039081169116146109e8576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b600f54610100900460ff1615610a31576040805162461bcd60e51b81526020600482015260096024820152681314150e914b4c0c0d60ba1b604482015290519081900360640190fd5b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d6020811015610a9657600080fd5b50519050801580610aa85750600e5481115b610ae5576040805162461bcd60e51b81526020600482015260096024820152681314150e914b4c0c0d60ba1b604482015290519081900360640190fd5b8015610bd357600e54600090610afb9084611c27565b905081811115610b1c57610b19610b128284611c88565b8490611c88565b92505b60015b838111610bc057600e54600090610b369083611c27565b90506000866001600160a01b0316636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d6020811015610ba857600080fd5b50519050610bb581611cca565b505050600101610b1f565b50600e54610bce9084611c27565b600e55505b600e54811415610be557610be5611e01565b505050565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c765780601f10610c4b57610100808354040283529160200191610c76565b820191906000526020600020905b815481529060010190602001808311610c5957829003601f168201915b505050505090505b90565b6000610c8c82611f5e565b610ccc576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303560a01b604482015290519081900360640190fd5b506000908152600360205260409020546001600160a01b031690565b6000610cf3826111ce565b9050806001600160a01b0316836001600160a01b03161415610d4b576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d31313160a01b604482015290519081900360640190fd5b806001600160a01b0316610d5d611c23565b6001600160a01b03161480610d7e5750610d7e81610d79611c23565b611afa565b610dbe576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d31303560a01b604482015290519081900360640190fd5b610be58383611f7b565b60026009541415610e20576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600955600f5460ff1615610e69576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d31303160b81b604482015290519081900360640190fd5b610e733382611fe9565b506001600955565b610e83611c23565b6008546001600160a01b03908116911614610ed3576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b610be5838383612287565b60075490565b610ef5610eef611c23565b826123b1565b610f35576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d31303560a01b604482015290519081900360640190fd5b610be583838361245a565b610f48611c23565b6008546001600160a01b03908116911614610f98576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b610be58383836125d0565b610be5838383604051806020016040528060008152506116fd565b6000610fc982611f5e565b611006576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d34303560b81b604482015290519081900360640190fd5b61100f82612756565b60a0015163ffffffff1692915050565b611027611c23565b6008546001600160a01b03908116911614611077576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b61108182826128ac565b5050565b6000600260095414156110df576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600955600f5460ff1615611128576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d31303160b81b604482015290519081900360640190fd5b6111313361294f565b6001600955919050565b611143611c23565b6008546001600160a01b03908116911614611193576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b600d8190556040805182815290517f409ba051a4c57ed282ca3d937444126381926068149b2ceb9dcff792655a9b039181900360200190a150565b6000908152600160205260409020546001600160a01b031690565b600a54600b54600091116111ff57506000610c7e565b600a600b548154811061120e57fe5b906000526020600020906003020160010154905090565b60006001600160a01b038216611271576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303360a01b604482015290519081900360640190fd5b506001600160a01b031660009081526002602052604090205490565b611295611c23565b6008546001600160a01b039081169116146112e5576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b6008546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600880546001600160a01b0319169055565b6008546001600160a01b031690565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c765780601f10610c4b57610100808354040283529160200191610c76565b6113a7611c23565b6001600160a01b0316826001600160a01b031614156113fc576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d31313160a01b604482015290519081900360640190fd5b8060046000611409611c23565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561144d611c23565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b600061149e82611f5e565b6114db576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d34303560b81b604482015290519081900360640190fd5b6114e482612756565b6080015163ffffffff1692915050565b6114fc611c23565b6008546001600160a01b0390811691161461154c576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b8585600a898154811061155b57fe5b600091825260209091206115759360039092020191613344565b5083600a888154811061158457fe5b90600052602060002090600302016001018190555082600a88815481106115a757fe5b906000526020600020906003020160020160106101000a81548163ffffffff021916908363ffffffff16021790555081600a88815481106115e457fe5b906000526020600020906003020160020160146101000a81548163ffffffff021916908363ffffffff16021790555080600a888154811061162157fe5b906000526020600020906003020160020160186101000a81548163ffffffff021916908363ffffffff1602179055507fc29eb52b178d59612a9ec3dbfed2e3054ea12f735bff5d06a799a4b06cd47c5287878787878787600c5460405180898152602001806020018781526020018663ffffffff1681526020018563ffffffff1681526020018463ffffffff1681526020018381526020018281038252898982818152602001925080828437600083820152604051601f909101601f19169092018290039b50909950505050505050505050a150505050505050565b61170e611708611c23565b836123b1565b61174e576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d31303560a01b604482015290519081900360640190fd5b61175a84848484612b46565b50505050565b606061176b82611f5e565b6117a8576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d34303560b81b604482015290519081900360640190fd5b6117b182612756565b5192915050565b600c5490565b6117c6611c23565b6008546001600160a01b03908116911614611816576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b600c5461182c9063ffffffff80861690611c2716565b600c556118376133c2565b6040518060c0016040528088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506020808301899052600c546001600160801b0316604084015263ffffffff80891660608501528781166080850152861660a090930192909252600a8054600181018255915282518051939450849360039092027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801926118ff928492909101906133f7565b5060208281015160018301556040808401516002909301805460608087015160808089015160a0998a01516fffffffffffffffffffffffffffffffff199095166001600160801b039099169890981763ffffffff60801b1916600160801b63ffffffff938416021763ffffffff60a01b1916600160a01b988316989098029790971763ffffffff60c01b1916600160c01b9382169390930292909217909255600c5483519485018c90528a8216938501939093528881169184019190915286169282019290925291820181905260c080835282018890527f03a96a3a809ae0740a794cb4d254030e999b01bb9985f4b0b5f5e524dc8e0667918991899189918991899189918060e08101898980828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a150505050505050565b611a46611c23565b6008546001600160a01b03908116911614611a96576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b600f805482151560ff19909116811790915560408051918252517fa9bfed3d98385b3777389e321dbde773cf7d335fa604fefbae3dca93564f55869181900360200190a150565b600a54600b5460009111611af357506000610c7e565b50600b5490565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205460ff165b92915050565b611b32611c23565b6008546001600160a01b03908116911614611b82576040805162461bcd60e51b815260206004820181905260248201526000805160206134fc833981519152604482015290519081900360640190fd5b6001600160a01b038116611bc75760405162461bcd60e51b815260040180806020018281038252602681526020018061347b6026913960400191505060405180910390fd5b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600082820183811015611c81576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000611c8183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b9d565b60006001600160a01b038216611d16576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303360a01b604482015290519081900360640190fd5b600754611d24906001611c27565b6007819055611d3281611f5e565b15611d73576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303760a01b604482015290519081900360640190fd5b600081815260016020818152604080842080546001600160a01b0319166001600160a01b0389169081179091558452600290915290912054611db491611c27565b6001600160a01b0384166000818152600260205260408082209390935591518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a492915050565b6000600b8190555b600a54811015611f4c57611e1b6133c2565b600a8281548110611e2857fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f8101859004909402830160e090810190925260c0830184815292939092849290918491840182828015611ecb5780601f10611ea057610100808354040283529160200191611ecb565b820191906000526020600020905b815481529060010190602001808311611eae57829003601f168201915b5050509183525050600182015460208201526002909101546001600160801b0380821660408085019190915263ffffffff600160801b840481166060860152600160a01b840481166080860152600160c01b90930490921660a090930192909252820151600e549293501611611f435760018201600b555b50600101611e09565b50600f805461ff001916610100179055565b6000908152600160205260409020546001600160a01b0316151590565b600081815260036020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611fb0826111ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600a54600b541061202d576040805162461bcd60e51b8152602060048201526009602482015268098a0a8748a5a6860760bb1b604482015290519081900360640190fd5b600d54158061203e5750600d548111155b61207b576040805162461bcd60e51b81526020600482015260096024820152684c50543a452d34323960b81b604482015290519081900360640190fd5b6120836133c2565b600a600b548154811061209257fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f8101859004909402830160e090810190925260c08301848152929390928492909184918401828280156121355780601f1061210a57610100808354040283529160200191612135565b820191906000526020600020905b81548152906001019060200180831161211857829003601f168201915b5050509183525050600182015460208201526002909101546001600160801b038116604083015263ffffffff600160801b820481166060840152600160a01b820481166080840152600160c01b909104811660a0909201919091526007549192506000916121a5918590611c2716565b905081604001516001600160801b03168111156121e2576121df610b1283604001516001600160801b031683611c8890919063ffffffff16565b92505b60208201516000906121f49085612c34565b905080341015612237576040805162461bcd60e51b81526020600482015260096024820152681314150e914b4d0c4d60ba1b604482015290519081900360640190fd5b612251858560405180602001604052806000815250612c8d565b82604001516001600160801b0316821061227757600b54612273906001611c27565b600b555b61228081612ca8565b5050505050565b6001600160a01b0383166122ce576040805162461bcd60e51b81526020600482015260096024820152684248503a452d34303360b81b604482015290519081900360640190fd5b80826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561231c57600080fd5b505afa158015612330573d6000803e3d6000fd5b505050506040513d602081101561234657600080fd5b505110610be5576123616001600160a01b0383168483612cd7565b816001600160a01b0316836001600160a01b03167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b836040518082815260200191505060405180910390a3505050565b60006123bc82611f5e565b6123fc576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303560a01b604482015290519081900360640190fd5b6000612407836111ce565b9050806001600160a01b0316846001600160a01b031614806124425750836001600160a01b031661243784610c81565b6001600160a01b0316145b8061245257506124528185611afa565b949350505050565b826001600160a01b031661246d826111ce565b6001600160a01b0316146124b7576040805162461bcd60e51b815260206004820152600c60248201526b22a9219b99189d229698981960a11b604482015290519081900360640190fd5b6001600160a01b038216612501576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303360a01b604482015290519081900360640190fd5b61250c600082611f7b565b600081815260016020818152604080842080546001600160a01b0319166001600160a01b03888116919091179091558716845260029091529091205461255191611c88565b6001600160a01b038085166000908152600260205260408082209390935590841681522054612581906001611c27565b6001600160a01b03808416600081815260026020526040808220949094559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038316612617576040805162461bcd60e51b81526020600482015260096024820152684248503a452d34303360b81b604482015290519081900360640190fd5b306001600160a01b0316826001600160a01b0316636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561266557600080fd5b505afa158015612679573d6000803e3d6000fd5b505050506040513d602081101561268f57600080fd5b50516001600160a01b03161415610be557604080516323b872dd60e01b81523060048201526001600160a01b038581166024830152604482018490529151918416916323b872dd9160648082019260009290919082900301818387803b1580156126f857600080fd5b505af115801561270c573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a4505050565b61275e6133c2565b600a5460005b818110156128a5576127746133c2565b600a828154811061278157fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f8101859004909402830160e090810190925260c08301848152929390928492909184918401828280156128245780601f106127f957610100808354040283529160200191612824565b820191906000526020600020905b81548152906001019060200180831161280757829003601f168201915b5050509183525050600182015460208201526002909101546001600160801b0380821660408085019190915263ffffffff600160801b840481166060860152600160a01b840481166080860152600160c01b90930490921660a09093019290925282015191925016851161289c57925061098b915050565b50600101612764565b5050919050565b6001600160a01b0382166128f3576040805162461bcd60e51b81526020600482015260096024820152684248503a452d34303360b81b604482015290519081900360640190fd5b8047106110815761290d6001600160a01b03831682612d29565b6040805182815290516001600160a01b038416917eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd919081900360200190a25050565b600a54600b5460009111612996576040805162461bcd60e51b8152602060048201526009602482015268098a0a8748a5a6860760bb1b604482015290519081900360640190fd5b61299e6133c2565b600a600b54815481106129ad57fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f8101859004909402830160e090810190925260c0830184815292939092849290918491840182828015612a505780601f10612a2557610100808354040283529160200191612a50565b820191906000526020600020905b815481529060010190602001808311612a3357829003601f168201915b505050918352505060018201546020808301919091526002909201546001600160801b038116604083015263ffffffff600160801b820481166060840152600160a01b820481166080840152600160c01b9091041660a090910152810151909150341015612af1576040805162461bcd60e51b81526020600482015260096024820152681314150e914b4d0c4d60ba1b604482015290519081900360640190fd5b612b0a8360405180602001604052806000815250612e0e565b915080604001516001600160801b0316821415612b3357600b54612b2f906001611c27565b600b555b612b408160200151612ca8565b50919050565b612b5184848461245a565b612b5d84848484612e69565b61175a576040805162461bcd60e51b815260206004820152600c60248201526b22a9219b99189d22969a181960a11b604482015290519081900360640190fd5b60008184841115612c2c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612bf1578181015183820152602001612bd9565b50505050905090810190601f168015612c1e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082612c4357506000611b24565b82820282848281612c5057fe5b0414611c815760405162461bcd60e51b81526004018080602001828103825260218152602001806134db6021913960400191505060405180910390fd5b6000612c998484612fe5565b9050612b5d6000858385612e69565b6000612cb43483611c88565b905080156110815761108181612cc8611c23565b6001600160a01b031690612d29565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610be5908490613116565b80471015612d7e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612dc9576040519150601f19603f3d011682016040523d82523d6000602084013e612dce565b606091505b5050905080610be55760405162461bcd60e51b815260040180806020018281038252603a8152602001806134a1603a913960400191505060405180910390fd5b600080612e1a84611cca565b9050612e296000858386612e69565b611c81576040805162461bcd60e51b815260206004820152600c60248201526b22a9219b99189d22969a181960a11b604482015290519081900360640190fd5b6000612e7d846001600160a01b03166131c7565b612e8957506001612452565b6060612fab630a85bd0160e11b612e9e611c23565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f05578181015183820152602001612eed565b50505050905090810190601f168015612f325780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060400160405280600c81526020016b22a9219b99189d22969a181960a11b815250876001600160a01b03166131cd9092919063ffffffff16565b90506000818060200190516020811015612fc457600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60006001600160a01b038316613031576040805162461bcd60e51b815260206004820152600c60248201526b4552433732313a452d34303360a01b604482015290519081900360640190fd5b600754600090613042906001611c27565b905060015b8381116130c15760075460009061305e9083611c27565b60008181526001602052604080822080546001600160a01b0319166001600160a01b038b16908117909155905192935083929091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101613047565b506007546130cf9084611c27565b6007556001600160a01b0384166000908152600260205260409020546130f59084611c27565b6001600160a01b038516600090815260026020526040902055905092915050565b606061316b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131cd9092919063ffffffff16565b805190915015610be55780806020019051602081101561318a57600080fd5b5051610be55760405162461bcd60e51b815260040180806020018281038252602a81526020018061351c602a913960400191505060405180910390fd5b3b151590565b6060612452848460008560606131e2856131c7565b613233576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106132725780518252601f199092019160209182019101613253565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146132d4576040519150601f19603f3d011682016040523d82523d6000602084013e6132d9565b606091505b509150915081156132ed5791506124529050565b8051156132fd5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612bf1578181015183820152602001612bd9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133855782800160ff198235161785556133b2565b828001600101855582156133b2579182015b828111156133b2578235825591602001919060010190613397565b506133be929150613465565b5090565b6040805160c081018252606080825260006020830181905292820183905281018290526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061343857805160ff19168380011785556133b2565b828001600101855582156133b2579182015b828111156133b257825182559160200191906001019061344a565b5b808211156133be576000815560010161346656fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d7e45e90b00ada93bf14e609b381114d3130c10d66c4fda21c728f1176b4ffd264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4592,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 32156,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 32160,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_ownerBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32164,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 32170,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 32172,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 32174,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 32176,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4406,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9097,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 36360,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_leptonTypes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Classification)27847_storage)dyn_storage"
      },
      {
        "astId": 36362,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_typeIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 36364,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_maxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 36366,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_maxMintPerTx",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 36368,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_migratedCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 36370,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_paused",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 36372,
        "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
        "label": "_migrationComplete",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Classification)27847_storage)dyn_storage": {
        "base": "t_struct(Classification)27847_storage",
        "encoding": "dynamic_array",
        "label": "struct ILepton.Classification[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Classification)27847_storage": {
        "encoding": "inplace",
        "label": "struct ILepton.Classification",
        "members": [
          {
            "astId": 27836,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "tokenUri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 27838,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27840,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "_upperBounds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 27842,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "supply",
            "offset": 16,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 27844,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "multiplier",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 27846,
            "contract": "contracts/v1/tokens/Lepton2.sol:Lepton2",
            "label": "bonus",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}