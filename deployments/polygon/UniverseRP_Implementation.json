{
  "address": "0x1aA013d7A31557Ae1A60578394a8ACC785935D06",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bosonToken",
          "type": "address"
        }
      ],
      "name": "BosonTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        }
      ],
      "name": "ChargedParticlesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "photonSource",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "ElectrostaticAttraction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "photonSource",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "energy",
          "type": "uint256"
        }
      ],
      "name": "ElectrostaticDischarge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "EsaMultiplierSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "leptonToken",
          "type": "address"
        }
      ],
      "name": "LeptonTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "NftDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "NftRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "photonToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "PhotonSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protonToken",
          "type": "address"
        }
      ],
      "name": "ProtonTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "quarkToken",
          "type": "address"
        }
      ],
      "name": "QuarkTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        }
      ],
      "name": "RewardProgramRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardProgram",
          "type": "address"
        }
      ],
      "name": "RewardProgramSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckEther",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_chargedParticles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_multiplierNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        }
      ],
      "name": "getNftStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUniverseRP.NftStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getRewardProgram",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "onCovalentBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "onCovalentBreak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorEnergy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiverEnergy",
          "type": "uint256"
        }
      ],
      "name": "onDischarge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiverEnergy",
          "type": "uint256"
        }
      ],
      "name": "onDischargeForCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "walletManagerId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "onEnergize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorRoyalties",
          "type": "uint256"
        }
      ],
      "name": "onProtonSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorEnergy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receiverEnergy",
          "type": "uint256"
        }
      ],
      "name": "onRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        }
      ],
      "name": "removeRewardProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setChargedParticles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMultiplierNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardProgam",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        }
      ],
      "name": "setRewardProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x833a53ff66d10703f5eb161a2e804f482b9af141521352e7dc6695bee42394dc",
  "receipt": {
    "to": null,
    "from": "0xb8D175F16742395F530e0b3bC1d30BD06B78CdA9",
    "contractAddress": "0x1aA013d7A31557Ae1A60578394a8ACC785935D06",
    "transactionIndex": 54,
    "gasUsed": "2211420",
    "logsBloom": "0x
    "blockHash": "0xa0dee3511437bb272814340ad020a940711c6bd0b55747154e6212f0fd931d4e",
    "transactionHash": "0x833a53ff66d10703f5eb161a2e804f482b9af141521352e7dc6695bee42394dc",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 46700947,
        "transactionHash": "0x833a53ff66d10703f5eb161a2e804f482b9af141521352e7dc6695bee42394dc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018dafbe202bec3400000000000000000000000000000000000000000000001a356f3aee839af2a0000000000000000000000000000000000000000000024af5f1d4cd023788012100000000000000000000000000000000000000000000001a33e18b30636f066c000000000000000000000000000000000000000000024af5f3627cc057b3ed55",
        "logIndex": 292,
        "blockHash": "0xa0dee3511437bb272814340ad020a940711c6bd0b55747154e6212f0fd931d4e"
      }
    ],
    "blockNumber": 46700947,
    "cumulativeGasUsed": "12981323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39876b9d6995fafd8c4442fb1a03f418",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bosonToken\",\"type\":\"address\"}],\"name\":\"BosonTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"}],\"name\":\"ChargedParticlesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"photonSource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"ElectrostaticAttraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"photonSource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"ElectrostaticDischarge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"EsaMultiplierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leptonToken\",\"type\":\"address\"}],\"name\":\"LeptonTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"photonToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"PhotonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protonToken\",\"type\":\"address\"}],\"name\":\"ProtonTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quarkToken\",\"type\":\"address\"}],\"name\":\"QuarkTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"}],\"name\":\"RewardProgramRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardProgram\",\"type\":\"address\"}],\"name\":\"RewardProgramSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckEther\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chargedParticles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_multiplierNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"}],\"name\":\"getNftStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniverseRP.NftStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getRewardProgram\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenAmount\",\"type\":\"uint256\"}],\"name\":\"onCovalentBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenAmount\",\"type\":\"uint256\"}],\"name\":\"onCovalentBreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorEnergy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnergy\",\"type\":\"uint256\"}],\"name\":\"onDischarge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnergy\",\"type\":\"uint256\"}],\"name\":\"onDischargeForCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletManagerId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"onEnergize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorRoyalties\",\"type\":\"uint256\"}],\"name\":\"onProtonSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorEnergy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnergy\",\"type\":\"uint256\"}],\"name\":\"onRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"}],\"name\":\"removeRewardProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setChargedParticles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"}],\"name\":\"setMultiplierNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardProgam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"}],\"name\":\"setRewardProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Upgradeable Contract\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Charged Particles Universe Contract with Rewards Program\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/UniverseRP.sol\":\"UniverseRP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xaf936da92f3a9a4f98b237323b5eb1d813fb86c4d07a184beba7027cf0509ba3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"contracts/v1/UniverseRP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Universe.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IUniverseRP.sol\\\";\\nimport \\\"./interfaces/IChargedParticles.sol\\\";\\nimport \\\"./interfaces/ILepton.sol\\\";\\nimport \\\"./interfaces/IRewardNft.sol\\\";\\nimport \\\"./lib/TokenInfo.sol\\\";\\nimport \\\"./lib/BlackholePrevention.sol\\\";\\nimport \\\"./interfaces/IRewardProgram.sol\\\";\\n\\n/**\\n * @notice Charged Particles Universe Contract with Rewards Program\\n * @dev Upgradeable Contract\\n */\\ncontract UniverseRP is IUniverseRP, Initializable, OwnableUpgradeable, BlackholePrevention {\\n  using SafeMathUpgradeable for uint256;\\n  using TokenInfo for address;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  uint256 constant private LEPTON_MULTIPLIER_SCALE = 1e2;\\n  uint256 constant internal PERCENTAGE_SCALE = 1e4;  // 10000  (100%)\\n\\n  // The ChargedParticles Contract Address\\n  address public _chargedParticles;\\n\\n  // The Lepton NFT Contract Address\\n  address public _multiplierNft;\\n\\n  // Asset Token => Reward Program\\n  mapping (address => address) internal _assetRewardPrograms;\\n  mapping (uint256 => EnumerableSet.UintSet) internal _multiplierNftsSet;\\n\\n  // Token UUID => NFT Staking Data\\n  mapping (uint256 => NftStake) private _nftStake;\\n\\n\\n  /***********************************|\\n  |          Initialization           |\\n  |__________________________________*/\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function getRewardProgram(address asset) external view override returns (address) {\\n    return _getRewardProgram(asset);\\n  }\\n\\n  function getNftStake(uint256 uuid) external view override returns (NftStake memory) {\\n    return _nftStake[uuid];\\n  }\\n\\n  /***********************************|\\n  |      Only Charged Particles       |\\n  |__________________________________*/\\n\\n  function onEnergize(\\n    address /* sender */,\\n    address /* referrer */,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata walletManagerId,\\n    address assetToken,\\n    uint256 assetAmount\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    address rewardProgram = _getRewardProgram(assetToken);\\n    if (rewardProgram != address(0)) {\\n      IRewardProgram(rewardProgram).registerAssetDeposit(\\n        contractAddress,\\n        tokenId,\\n        walletManagerId,\\n        assetAmount\\n      );\\n    }\\n  }\\n\\n  function onDischarge(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata /* walletManagerId */,\\n    address assetToken,\\n    uint256 creatorEnergy,\\n    uint256 receiverEnergy\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    address rewardProgram = _getRewardProgram(assetToken);\\n    if (rewardProgram != address(0)) {\\n      uint256 totalInterest = receiverEnergy.add(creatorEnergy);\\n      IRewardProgram(rewardProgram).registerAssetRelease(contractAddress, tokenId, totalInterest);\\n    }\\n  }\\n\\n  function onDischargeForCreator(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata /* walletManagerId */,\\n    address /* creator */,\\n    address assetToken,\\n    uint256 receiverEnergy\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    address rewardProgram = _getRewardProgram(assetToken);\\n    if (rewardProgram != address(0)) {\\n      IRewardProgram(rewardProgram).registerAssetRelease(contractAddress, tokenId, receiverEnergy);\\n    }\\n  }\\n\\n  function onRelease(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata /* walletManagerId */,\\n    address assetToken,\\n    uint256 principalAmount,\\n    uint256 creatorEnergy,\\n    uint256 receiverEnergy\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    address rewardProgram = _getRewardProgram(assetToken);\\n    if (rewardProgram != address(0)) {\\n      // \\\"receiverEnergy\\\" includes the \\\"principalAmount\\\"\\n      uint256 totalInterest = receiverEnergy.sub(principalAmount).add(creatorEnergy);\\n      IRewardProgram(rewardProgram).registerAssetRelease(contractAddress, tokenId, totalInterest);\\n    }\\n  }\\n\\n  function onCovalentBond(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata /* managerId */,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    _registerNftDeposit(contractAddress, tokenId, nftTokenAddress, nftTokenId, nftTokenAmount);\\n  }\\n\\n  function onCovalentBreak(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata /* managerId */,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  )\\n    external\\n    virtual\\n    override\\n    onlyChargedParticles\\n  {\\n    _registerNftRelease(contractAddress, tokenId, nftTokenAddress, nftTokenId, nftTokenAmount);\\n  }\\n\\n  function onProtonSale(\\n    address contractAddress,\\n    uint256 tokenId,\\n    address oldOwner,\\n    address newOwner,\\n    uint256 salePrice,\\n    address creator,\\n    uint256 creatorRoyalties\\n  )\\n    external\\n    virtual\\n    override\\n  {\\n    // no-op\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |__________________________________*/\\n\\n  function setChargedParticles(\\n    address controller\\n  )\\n    external\\n    onlyOwner\\n    onlyValidContractAddress(controller)\\n  {\\n    _chargedParticles = controller;\\n    emit ChargedParticlesSet(controller);\\n  }\\n\\n  function setMultiplierNft(address nftTokenAddress)\\n    external\\n    onlyOwner\\n    onlyValidContractAddress(nftTokenAddress)\\n  {\\n    _multiplierNft = nftTokenAddress;\\n  }\\n\\n  function setRewardProgram(\\n    address rewardProgam,\\n    address assetToken\\n  )\\n    external\\n    onlyOwner\\n    onlyValidContractAddress(rewardProgam)\\n  {\\n    require(assetToken != address(0x0), \\\"UNI:E-403\\\");\\n    _assetRewardPrograms[assetToken] = rewardProgam;\\n    emit RewardProgramSet(assetToken, rewardProgam);\\n  }\\n\\n  function removeRewardProgram(address assetToken) external onlyOwner {\\n    delete _assetRewardPrograms[assetToken];\\n    emit RewardProgramRemoved(assetToken);\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |      (blackhole prevention)       |\\n  |__________________________________*/\\n\\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\\n    _withdrawEther(receiver, amount);\\n  }\\n\\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC20(receiver, tokenAddress, amount);\\n  }\\n\\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\\n    _withdrawERC721(receiver, tokenAddress, tokenId);\\n  }\\n\\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\\n  }\\n\\n\\n  /***********************************|\\n  |         Private Functions         |\\n  |__________________________________*/\\n\\n  function _getRewardProgram(address assetToken) internal view returns (address) {\\n    return _assetRewardPrograms[assetToken];\\n  }\\n\\n  function _registerNftDeposit(address contractAddress, uint256 tokenId, address depositNftAddress, uint256 depositNftTokenId, uint256 /* nftTokenAmount */)\\n    internal\\n  {\\n    // We only care about the Multiplier NFT\\n    if (_multiplierNft != depositNftAddress) { return; }\\n\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    uint256 multiplier = _getNftMultiplier(depositNftAddress, depositNftTokenId);\\n\\n    if (multiplier > 0 && !_multiplierNftsSet[parentNftUuid].contains(multiplier)) {\\n      // Add to Multipliers Set\\n      _multiplierNftsSet[parentNftUuid].add(multiplier);\\n\\n      // Update NFT Stake\\n      uint256 combinedMultiplier = _calculateTotalMultiplier(parentNftUuid);\\n      if (_nftStake[parentNftUuid].depositBlockNumber == 0) {\\n        _nftStake[parentNftUuid] = NftStake(combinedMultiplier, block.number, 0);\\n      } else {\\n        uint256 blockDiff = block.number - _nftStake[parentNftUuid].depositBlockNumber;\\n        _nftStake[parentNftUuid].multiplier = combinedMultiplier;\\n        _nftStake[parentNftUuid].depositBlockNumber = _nftStake[parentNftUuid].depositBlockNumber.add(blockDiff.div(2));\\n      }\\n    }\\n\\n    emit NftDeposit(contractAddress, tokenId, depositNftAddress, depositNftTokenId);\\n  }\\n\\n  function _registerNftRelease(\\n    address contractAddress,\\n    uint256 tokenId,\\n    address releaseNftAddress,\\n    uint256 releaseNftTokenId,\\n    uint256 /* nftTokenAmount */\\n  )\\n    internal\\n  {\\n    // We only care about the Multiplier NFT\\n    if (_multiplierNft != releaseNftAddress) { return; }\\n\\n    uint256 parentNftUuid = contractAddress.getTokenUUID(tokenId);\\n    NftStake storage nftStake = _nftStake[parentNftUuid];\\n\\n    // Remove from Multipliers Set\\n    uint256 multiplier = _getNftMultiplier(releaseNftAddress, releaseNftTokenId);\\n    _multiplierNftsSet[parentNftUuid].remove(multiplier);\\n\\n    // Determine New Multiplier or Mark as Released\\n    if (_multiplierNftsSet[parentNftUuid].length() > 0) {\\n      nftStake.multiplier = _calculateTotalMultiplier(parentNftUuid);\\n    } else {\\n      nftStake.releaseBlockNumber = block.number;\\n    }\\n\\n    emit NftRelease(contractAddress, tokenId, releaseNftAddress, releaseNftTokenId);\\n  }\\n\\n  function _calculateTotalMultiplier(uint256 parentNftUuid) internal view returns (uint256) {\\n    uint256 len = _multiplierNftsSet[parentNftUuid].length();\\n    uint256 multiplier = 0;\\n    uint256 loss = 50;\\n    uint256 i = 0;\\n\\n    for (; i < len; i++) {\\n      multiplier = multiplier.add(_multiplierNftsSet[parentNftUuid].at(i));\\n    }\\n    if (len > 1) {\\n      multiplier = multiplier.sub(loss.mul(len));\\n    }\\n    return multiplier;\\n  }\\n\\n  function _getNftMultiplier(address contractAddress, uint256 tokenId) internal returns (uint256) {\\n    bytes4 fnSig = IRewardNft.getMultiplier.selector;\\n    (bool success, bytes memory returnData) = contractAddress.call(abi.encodeWithSelector(fnSig, tokenId));\\n\\n    if (success) {\\n      return abi.decode(returnData, (uint256));\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |             Modifiers             |\\n  |__________________________________*/\\n\\n  /// @dev Throws if called by any non-account\\n  modifier onlyValidContractAddress(address account) {\\n    require(account != address(0x0) && account.isContract(), \\\"UNI:E-417\\\");\\n    _;\\n  }\\n\\n  /// @dev Throws if called by any account other than the Charged Particles contract\\n  modifier onlyChargedParticles() {\\n    require(_chargedParticles == msg.sender, \\\"UNI:E-108\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5ec2e8a1bbcbb7cc8bb11a500e29df20aaa34c76a3c6963b508a377da076ba0b\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IChargedParticles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IChargedParticles.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @notice Interface for Charged Particles\\n */\\ninterface IChargedParticles {\\n\\n  /***********************************|\\n  |             Public API            |\\n  |__________________________________*/\\n\\n  function getStateAddress() external view returns (address stateAddress);\\n  function getSettingsAddress() external view returns (address settingsAddress);\\n  function getManagersAddress() external view returns (address managersAddress);\\n\\n  function getFeesForDeposit(uint256 assetAmount) external view returns (uint256 protocolFee);\\n  function baseParticleMass(address contractAddress, uint256 tokenId, string calldata walletManagerId, address assetToken) external returns (uint256);\\n  function currentParticleCharge(address contractAddress, uint256 tokenId, string calldata walletManagerId, address assetToken) external returns (uint256);\\n  function currentParticleKinetics(address contractAddress, uint256 tokenId, string calldata walletManagerId, address assetToken) external returns (uint256);\\n  function currentParticleCovalentBonds(address contractAddress, uint256 tokenId, string calldata basketManagerId) external view returns (uint256);\\n\\n  /***********************************|\\n  |        Particle Mechanics         |\\n  |__________________________________*/\\n\\n  function energizeParticle(\\n      address contractAddress,\\n      uint256 tokenId,\\n      string calldata walletManagerId,\\n      address assetToken,\\n      uint256 assetAmount,\\n      address referrer\\n  ) external returns (uint256 yieldTokensAmount);\\n\\n  function dischargeParticle(\\n      address receiver,\\n      address contractAddress,\\n      uint256 tokenId,\\n      string calldata walletManagerId,\\n      address assetToken\\n  ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n  function dischargeParticleAmount(\\n      address receiver,\\n      address contractAddress,\\n      uint256 tokenId,\\n      string calldata walletManagerId,\\n      address assetToken,\\n      uint256 assetAmount\\n  ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n  function dischargeParticleForCreator(\\n      address receiver,\\n      address contractAddress,\\n      uint256 tokenId,\\n      string calldata walletManagerId,\\n      address assetToken,\\n      uint256 assetAmount\\n  ) external returns (uint256 receiverAmount);\\n\\n  function releaseParticle(\\n      address receiver,\\n      address contractAddress,\\n      uint256 tokenId,\\n      string calldata walletManagerId,\\n      address assetToken\\n  ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n  function releaseParticleAmount(\\n    address receiver,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata walletManagerId,\\n    address assetToken,\\n    uint256 assetAmount\\n  ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n  function covalentBond(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata basketManagerId,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  ) external returns (bool success);\\n\\n  function breakCovalentBond(\\n    address receiver,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata basketManagerId,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  ) external returns (bool success);\\n\\n  /***********************************|\\n  |          Particle Events          |\\n  |__________________________________*/\\n\\n  event Initialized(address indexed initiator);\\n  event ControllerSet(address indexed controllerAddress, string controllerId);\\n  event DepositFeeSet(uint256 depositFee);\\n  event ProtocolFeesCollected(address indexed assetToken, uint256 depositAmount, uint256 feesCollected);\\n}\\n\",\"keccak256\":\"0x37104c629e40193ddc8677af8a632adf53754e7915f055a5a14861cd9b417729\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IERC721Chargeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IERC721Chargeable.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface IERC721Chargeable is IERC165Upgradeable {\\n    function owner() external view returns (address);\\n    function creatorOf(uint256 tokenId) external view returns (address);\\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address tokenOwner, address operator) external view returns (bool);\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x459e57b2d35c7cd78e6c3d47eb9f3e981529a18c89e2c318b10fe369c479c737\",\"license\":\"MIT\"},\"contracts/v1/interfaces/ILepton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ILepton.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Charged Particles Lepton Interface\\n * @dev ...\\n */\\ninterface ILepton {\\n\\n  struct Classification {\\n    string tokenUri;\\n    uint256 price;\\n    uint128 _upperBounds;\\n    uint32 supply;\\n    uint32 multiplier;\\n    uint32 bonus;\\n  }\\n\\n  function mintLepton() external payable returns (uint256 newTokenId);\\n  function batchMintLepton(uint256 count) external payable;\\n  function getNextType() external view returns (uint256);\\n  function getNextPrice() external view returns (uint256);\\n  function getMultiplier(uint256 tokenId) external view returns (uint256);\\n  function getBonus(uint256 tokenId) external view returns (uint256);\\n\\n\\n  event MaxMintPerTxSet(uint256 maxAmount);\\n  event LeptonTypeAdded(string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonTypeUpdated(uint256 leptonIndex, string tokenUri, uint256 price, uint32 supply, uint32 multiplier, uint32 bonus, uint256 upperBounds);\\n  event LeptonMinted(address indexed receiver, uint256 indexed tokenId, uint256 price, uint32 multiplier);\\n  event LeptonBatchMinted(address indexed receiver, uint256 indexed tokenId, uint256 count, uint256 price, uint32 multiplier);\\n  event PausedStateSet(bool isPaused);\\n}\\n\",\"keccak256\":\"0x4903085427fa5dbee690fe79854fba60afaf21189957406ade55f6fc12556a01\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IRewardNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IRewardNft.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Charged Particles Reward-NFT Interface\\n * @dev ...\\n */\\ninterface IRewardNft {\\n  function getMultiplier(uint256 tokenId) external view returns (uint256);\\n  function getBonus(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x51a5666003af460a55356974a286dde959c5f166104c75b4d563e8294a90b07a\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IRewardProgram.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IRewardProgram.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRewardProgram {\\n  /* admin events */\\n  event RewardProgramFunded(uint256 amount);\\n  event RewardProgramOutOfFunds();\\n\\n  /* user events */\\n  event RewardsClaimed(address indexed contractAddress, uint256 tokenId, address indexed receiver, uint256 rewarded, uint256 remaining);\\n\\n  event AssetRegistered(address indexed contractAddress, uint256 tokenId, string walletManagerId, uint256 principalAmount);\\n  event AssetDeposit(address indexed contractAddress, uint256 tokenId, string walletManagerId, uint256 principalAmount);\\n  event AssetRelease(address indexed contractAddress, uint256 tokenId, uint256 interestAmount);\\n\\n  /* data types */\\n  struct ProgramRewardData {\\n    address stakingToken;\\n    address rewardToken;\\n    uint256 baseMultiplier; // Basis Points\\n  }\\n\\n  struct AssetStake {\\n    uint256 start;\\n    uint256 claimableRewards;\\n    string walletManagerId;\\n  }\\n\\n  function initialize(address stakingToken, address rewardToken, uint256 baseMultiplier, address chargedManagers, address universe, address owner) external;\\n\\n  /* user functions */\\n  function getProgramData() external view returns (ProgramRewardData memory programData);\\n  function getAssetStake(uint256 uuid) external view returns (AssetStake memory);\\n  function getFundBalance() external view returns (uint256);\\n  function calculateRewardsEarned(uint256 parentNftUuid, uint256 interestAmount) external view returns (uint256);\\n  function getClaimableRewards(address contractAddress, uint256 tokenId) external view returns (uint256);\\n\\n  function registerExistingDeposits(address contractAddress, uint256 tokenId, string calldata walletManagerId) external;\\n  function registerAssetDeposit(address contractAddress, uint256 tokenId, string calldata walletManagerId, uint256 principalAmount) external;\\n  function registerAssetRelease(address contractAddress, uint256 tokenId, uint256 interestAmount) external returns (uint256 rewards);\\n}\",\"keccak256\":\"0xe0f4076a4b001856c54cb8a63decedc81ca34c71708f8cbe9b3a26603dc9c050\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IUniverse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IUniverse.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Universal Controller interface\\n * @dev ...\\n */\\ninterface IUniverse {\\n\\n  event ChargedParticlesSet(address indexed chargedParticles);\\n  event PhotonSet(address indexed photonToken, uint256 maxSupply);\\n  event ProtonTokenSet(address indexed protonToken);\\n  event LeptonTokenSet(address indexed leptonToken);\\n  event QuarkTokenSet(address indexed quarkToken);\\n  event BosonTokenSet(address indexed bosonToken);\\n  event EsaMultiplierSet(address indexed assetToken, uint256 multiplier);\\n  event ElectrostaticAttraction(address indexed account, address photonSource, uint256 energy, uint256 multiplier);\\n  event ElectrostaticDischarge(address indexed account, address photonSource, uint256 energy);\\n\\n  function onEnergize(\\n    address sender,\\n    address referrer,\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address assetToken,\\n    uint256 assetEnergy\\n  ) external;\\n\\n  function onDischarge(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address assetToken,\\n    uint256 creatorEnergy,\\n    uint256 receiverEnergy\\n  ) external;\\n\\n  function onDischargeForCreator(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address creator,\\n    address assetToken,\\n    uint256 receiverEnergy\\n  ) external;\\n\\n  function onRelease(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address assetToken,\\n    uint256 principalEnergy,\\n    uint256 creatorEnergy,\\n    uint256 receiverEnergy\\n  ) external;\\n\\n  function onCovalentBond(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  ) external;\\n\\n  function onCovalentBreak(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string calldata managerId,\\n    address nftTokenAddress,\\n    uint256 nftTokenId,\\n    uint256 nftTokenAmount\\n  ) external;\\n\\n  function onProtonSale(\\n    address contractAddress,\\n    uint256 tokenId,\\n    address oldOwner,\\n    address newOwner,\\n    uint256 salePrice,\\n    address creator,\\n    uint256 creatorRoyalties\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6cebb97ce4d32c61afc746e4a6538eb605bb01276dfa66fa4bd6f63362bdc9ef\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IUniverseRP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IUniverseRP.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniverse.sol\\\";\\n\\n/**\\n * @title Universal Controller interface for Rewards Program\\n * @dev ...\\n */\\ninterface IUniverseRP is IUniverse {\\n  event RewardProgramSet(address indexed assetToken, address indexed rewardProgram);\\n  event RewardProgramRemoved(address indexed assetToken);\\n  event NftDeposit(address indexed contractAddress, uint256 tokenId, address indexed nftTokenAddress, uint256 nftTokenId);\\n  event NftRelease(address indexed contractAddress, uint256 tokenId, address indexed nftTokenAddress, uint256 nftTokenId);\\n\\n  struct NftStake {\\n    uint256 multiplier; // in Basis Points\\n    uint256 depositBlockNumber;\\n    uint256 releaseBlockNumber;\\n  }\\n\\n  function getRewardProgram(address asset) external view returns (address);\\n  function getNftStake(uint256 uuid) external view returns (NftStake memory);\\n}\\n\",\"keccak256\":\"0xd9c5a996bbb7f2a27bb85dde52587f7368c7b6512fc1064821a3975acdf4b7db\",\"license\":\"MIT\"},\"contracts/v1/lib/BlackholePrevention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\\n *  the Owner/DAO to pull them out on behalf of a user\\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\\n */\\ncontract BlackholePrevention {\\n  using Address for address payable;\\n  using SafeERC20 for IERC20;\\n\\n  event WithdrawStuckEther(address indexed receiver, uint256 amount);\\n  event WithdrawStuckERC20(address indexed receiver, address indexed tokenAddress, uint256 amount);\\n  event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\\n  event WithdrawStuckERC1155(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n\\n  function _withdrawEther(address payable receiver, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (address(this).balance >= amount) {\\n      receiver.sendValue(amount);\\n      emit WithdrawStuckEther(receiver, amount);\\n    }\\n  }\\n\\n  function _withdrawERC20(address payable receiver, address tokenAddress, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\\n      IERC20(tokenAddress).safeTransfer(receiver, amount);\\n      emit WithdrawStuckERC20(receiver, tokenAddress, amount);\\n    }\\n  }\\n\\n  function _withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\\n      IERC721(tokenAddress).transferFrom(address(this), receiver, tokenId);\\n      emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\\n    }\\n  }\\n\\n  function _withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) internal virtual {\\n    require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n    if (IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount) {\\n      IERC1155(tokenAddress).safeTransferFrom(address(this), receiver, tokenId, amount, \\\"\\\");\\n      emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a664c8a1c1d7fb32ade2c11f75756b1fdb4c489daa32c1d58e6b867ea2ba8d6\",\"license\":\"MIT\"},\"contracts/v1/lib/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// TokenInfo.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IERC721Chargeable.sol\\\";\\n\\nlibrary TokenInfo {\\n  function getTokenUUID(address contractAddress, uint256 tokenId) internal pure virtual returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(contractAddress, tokenId)));\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  function getTokenOwner(address contractAddress, uint256 tokenId) internal view virtual returns (address) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    return tokenInterface.ownerOf(tokenId);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  function getTokenCreator(address contractAddress, uint256 tokenId) internal view virtual returns (address) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    return tokenInterface.creatorOf(tokenId);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Owner of an External NFT contract\\n  /// @param contractAddress  The Address to the Contract of the NFT to check\\n  /// @param account          The Address of the Account to check\\n  /// @return True if the account owns the contract\\n  function isContractOwner(address contractAddress, address account) internal view virtual returns (bool) {\\n    address contractOwner = IERC721Chargeable(contractAddress).owner();\\n    return contractOwner != address(0x0) && contractOwner == account;\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Creator of a Proton-based NFT\\n  /// @param contractAddress  The Address to the Contract of the Proton-based NFT to check\\n  /// @param tokenId          The Token ID of the Proton-based NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the creator of the Proton-based NFT\\n  function isTokenCreator(address contractAddress, uint256 tokenId, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenCreator = tokenInterface.creatorOf(tokenId);\\n    return (sender == tokenCreator);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Creator of a Proton-based NFT or the Contract itself\\n  /// @param contractAddress  The Address to the Contract of the Proton-based NFT to check\\n  /// @param tokenId          The Token ID of the Proton-based NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the creator of the Proton-based NFT or the Contract itself\\n  function isTokenContractOrCreator(address contractAddress, uint256 tokenId, address creator, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenCreator = tokenInterface.creatorOf(tokenId);\\n    if (sender == contractAddress && creator == tokenCreator) { return true; }\\n    return (sender == tokenCreator);\\n  }\\n\\n  /// @dev DEPRECATED; Prefer TokenInfoProxy\\n  /// @dev Checks if an account is the Owner or Operator of an External NFT\\n  /// @param contractAddress  The Address to the Contract of the External NFT to check\\n  /// @param tokenId          The Token ID of the External NFT to check\\n  /// @param sender           The Address of the Account to check\\n  /// @return True if the account is the Owner or Operator of the External NFT\\n  function isErc721OwnerOrOperator(address contractAddress, uint256 tokenId, address sender) internal view virtual returns (bool) {\\n    IERC721Chargeable tokenInterface = IERC721Chargeable(contractAddress);\\n    address tokenOwner = tokenInterface.ownerOf(tokenId);\\n    return (sender == tokenOwner || tokenInterface.isApprovedForAll(tokenOwner, sender));\\n  }\\n\\n  /**\\n    * @dev Returns true if `account` is a contract.\\n    * @dev Taken from OpenZeppelin library\\n    *\\n    * [IMPORTANT]\\n    * ====\\n    * It is unsafe to assume that an address for which this function returns\\n    * false is an externally-owned account (EOA) and not a contract.\\n    *\\n    * Among others, `isContract` will return false for the following\\n    * types of addresses:\\n    *\\n    *  - an externally-owned account\\n    *  - a contract in construction\\n    *  - an address where a contract will be created\\n    *  - an address where a contract lived, but was destroyed\\n    * ====\\n    */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { codehash := extcodehash(account) }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n    * `recipient`, forwarding all available gas and reverting on errors.\\n    * @dev Taken from OpenZeppelin library\\n    *\\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n    * imposed by `transfer`, making them unable to receive funds via\\n    * `transfer`. {sendValue} removes this limitation.\\n    *\\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n    *\\n    * IMPORTANT: because control is transferred to `recipient`, care must be\\n    * taken to not create reentrancy vulnerabilities. Consider using\\n    * {ReentrancyGuard} or the\\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n    */\\n  function sendValue(address payable recipient, uint256 amount, uint256 gasLimit) internal {\\n    require(address(this).balance >= amount, \\\"TokenInfo: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = (gasLimit > 0)\\n      ? recipient.call{ value: amount, gas: gasLimit }(\\\"\\\")\\n      : recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"TokenInfo: unable to send value, recipient may have reverted\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xbc78c6173db068d95084288246642402d0f4af399e1eb754182cae2d9173af5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061270a806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063b9e09b4b1161007c578063b9e09b4b1461028e578063bbf1da84146102a1578063bea38be0146102a9578063c5d1d706146102bc578063f2fde38b146102cf578063fbf5ca14146102e25761014d565b80638da5cb5b14610227578063945233e21461022f57806395469dfc146102425780639a87c0de14610255578063a0edb48b14610268578063aa29542d1461027b5761014d565b8063522f681511610115578063522f6815146101be5780636e5559fd146101d1578063715018a6146101e45780638129fc1c146101ec578063836c478d146101f45780638b9309b2146102145761014d565b80631593dee1146101525780632bdbb77f1461016757806330219ef41461017a5780634025feb21461019857806341db85d6146101ab575b600080fd5b610165610160366004611d6c565b6102f5565b005b610165610175366004611ffc565b61034d565b61018261038d565b60405161018f919061219b565b60405180910390f35b6101656101a6366004611d6c565b61039c565b6101656101b9366004611ffc565b6103e6565b6101656101cc366004611df1565b6104ca565b6101656101df366004611d34565b610517565b6101656105e3565b61016561066c565b61020761020236600461212a565b6106f7565b60405161018f919061265b565b610165610222366004611ef4565b610384565b610182610738565b61016561023d366004611d34565b610747565b610165610250366004611e1c565b6107d5565b610165610263366004611d34565b6108d4565b610165610276366004611dac565b610978565b610165610289366004611f6e565b6109c9565b61016561029c366004611e54565b610a9c565b610182610b53565b6101656102b7366004611ffc565b610b62565b6101826102ca366004611d34565b610b99565b6101656102dd366004611d34565b610baa565b6101656102f0366004612080565b610c6b565b6102fd610d59565b6001600160a01b031661030e610738565b6001600160a01b03161461033d5760405162461bcd60e51b815260040161033490612582565b60405180910390fd5b610348838383610d5d565b505050565b6065546001600160a01b031633146103775760405162461bcd60e51b8152600401610334906125b7565b6103848787858585610e6a565b50505050505050565b6065546001600160a01b031681565b6103a4610d59565b6001600160a01b03166103b5610738565b6001600160a01b0316146103db5760405162461bcd60e51b815260040161033490612582565b610348838383610ffd565b6065546001600160a01b031633146104105760405162461bcd60e51b8152600401610334906125b7565b600061041b84611158565b90506001600160a01b038116156104c05760006104388385611176565b604051631434318f60e21b81529091506001600160a01b038316906350d0c63c9061046b908c908c908690600401612275565b602060405180830381600087803b15801561048557600080fd5b505af1158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190612142565b50505b5050505050505050565b6104d2610d59565b6001600160a01b03166104e3610738565b6001600160a01b0316146105095760405162461bcd60e51b815260040161033490612582565b61051382826111a2565b5050565b61051f610d59565b6001600160a01b0316610530610738565b6001600160a01b0316146105565760405162461bcd60e51b815260040161033490612582565b806001600160a01b0381161580159061057c575061057c816001600160a01b0316611226565b6105985760405162461bcd60e51b815260040161033490612397565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f5ce0e6b7fd36339ee97339831b6c72694ecee88c62aab49919d9cabe0a732e4190600090a25050565b6105eb610d59565b6001600160a01b03166105fc610738565b6001600160a01b0316146106225760405162461bcd60e51b815260040161033490612582565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b600054610100900460ff16806106855750610685611262565b80610693575060005460ff16155b6106af5760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156106da576000805460ff1961ff0019909116610100171660011790555b6106e2611273565b80156106f4576000805461ff00191690555b50565b6106ff611ccc565b50600090815260696020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6033546001600160a01b031690565b61074f610d59565b6001600160a01b0316610760610738565b6001600160a01b0316146107865760405162461bcd60e51b815260040161033490612582565b6001600160a01b03811660008181526067602052604080822080546001600160a01b0319169055517f87e1027e3dc61d1977f39f0dfe911b66a943946b4ceb39210dee01495621de529190a250565b6107dd610d59565b6001600160a01b03166107ee610738565b6001600160a01b0316146108145760405162461bcd60e51b815260040161033490612582565b816001600160a01b0381161580159061083a575061083a816001600160a01b0316611226565b6108565760405162461bcd60e51b815260040161033490612397565b6001600160a01b03821661087c5760405162461bcd60e51b81526004016103349061230b565b6001600160a01b0382811660008181526067602052604080822080546001600160a01b0319169488169485179055517f3b76c6366ef8a1f8d2dbb75e4be27be1e0749716fff3e6bc327da9c6158deada9190a3505050565b6108dc610d59565b6001600160a01b03166108ed610738565b6001600160a01b0316146109135760405162461bcd60e51b815260040161033490612582565b806001600160a01b038116158015906109395750610939816001600160a01b0316611226565b6109555760405162461bcd60e51b815260040161033490612397565b50606680546001600160a01b0319166001600160a01b0392909216919091179055565b610980610d59565b6001600160a01b0316610991610738565b6001600160a01b0316146109b75760405162461bcd60e51b815260040161033490612582565b6109c3848484846112f1565b50505050565b6065546001600160a01b031633146109f35760405162461bcd60e51b8152600401610334906125b7565b60006109fe83611158565b90506001600160a01b038116156104c057604051631434318f60e21b81526001600160a01b038216906350d0c63c90610a3f908b908b908790600401612275565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190612142565b505050505050505050565b6065546001600160a01b03163314610ac65760405162461bcd60e51b8152600401610334906125b7565b6000610ad183611158565b90506001600160a01b03811615610a91576040516323632fb160e11b81526001600160a01b038216906346c65f6290610b16908a908a908a908a908990600401612224565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b50505050505050505050505050565b6066546001600160a01b031681565b6065546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401610334906125b7565b6103848787858585611450565b6000610ba482611158565b92915050565b610bb2610d59565b6001600160a01b0316610bc3610738565b6001600160a01b031614610be95760405162461bcd60e51b815260040161033490612582565b6001600160a01b038116610c0f5760405162461bcd60e51b81526004016103349061232e565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314610c955760405162461bcd60e51b8152600401610334906125b7565b6000610ca085611158565b90506001600160a01b03811615610a91576000610cc784610cc18588611541565b90611176565b604051631434318f60e21b81529091506001600160a01b038316906350d0c63c90610cfa908d908d908690600401612275565b602060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4c9190612142565b5050505050505050505050565b3390565b6001600160a01b038316610d835760405162461bcd60e51b815260040161033490612374565b6040516370a0823160e01b815281906001600160a01b038416906370a0823190610db190309060040161219b565b60206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612142565b1061034857610e1a6001600160a01b0383168483611569565b816001600160a01b0316836001600160a01b03167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b83604051610e5d919061267c565b60405180910390a3505050565b6066546001600160a01b03848116911614610e8457610ff6565b6000610e996001600160a01b038716866115bf565b90506000610ea785856115f3565b9050600081118015610ece57506000828152606860205260409020610ecc90826116d5565b155b15610fa6576000828152606860205260409020610eeb90826116e1565b506000610ef7836116ed565b600084815260696020526040902060010154909150610f5157604080516060810182528281524360208083019182526000838501818152888252606990925293909320915182555160018201559051600290910155610fa4565b60008381526069602052604090206001810154908290554303610f90610f7882600261176d565b60008681526069602052604090206001015490611176565b600085815260696020526040902060010155505b505b846001600160a01b0316876001600160a01b03167f186ebbe503be539e070ca73b33a78f4266d96003e62b888dc31f88a39ddc9c878887604051610feb929190612685565b60405180910390a350505b5050505050565b6001600160a01b0383166110235760405162461bcd60e51b815260040161033490612374565b6040516331a9108f60e11b815230906001600160a01b03841690636352211e9061105190859060040161267c565b60206040518083038186803b15801561106957600080fd5b505afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a19190611d50565b6001600160a01b03161415610348576040516323b872dd60e01b81526001600160a01b038316906323b872dd906110e0903090879086906004016121af565b600060405180830381600087803b1580156110fa57600080fd5b505af115801561110e573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a4505050565b6001600160a01b039081166000908152606760205260409020541690565b60008282018381101561119b5760405162461bcd60e51b8152600401610334906123ba565b9392505050565b6001600160a01b0382166111c85760405162461bcd60e51b815260040161033490612374565b804710610513576111e26001600160a01b0383168261179f565b816001600160a01b03167eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd8260405161121a919061267c565b60405180910390a25050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061125a57508115155b949350505050565b600061126d3061183b565b15905090565b600054610100900460ff168061128c575061128c611262565b8061129a575060005460ff16155b6112b65760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156112e1576000805460ff1961ff0019909116610100171660011790555b6112e9611841565b6106e26118c2565b6001600160a01b0384166113175760405162461bcd60e51b815260040161033490612374565b604051627eeac760e11b815281906001600160a01b0385169062fdd58e90611345903090879060040161220b565b60206040518083038186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190612142565b106109c357604051637921219560e11b81526001600160a01b0384169063f242432a906113cc9030908890879087906004016121d3565b600060405180830381600087803b1580156113e657600080fd5b505af11580156113fa573d6000803e3d6000fd5b5050505081836001600160a01b0316856001600160a01b03167f620337bf89eea2b9ae2657beead83b5fa620452817118348aff96e201d52598b84604051611442919061267c565b60405180910390a450505050565b6066546001600160a01b0384811691161461146a57610ff6565b600061147f6001600160a01b038716866115bf565b600081815260696020526040812091925061149a86866115f3565b60008481526068602052604090209091506114b5908261199c565b5060008381526068602052604081206114cd906119a8565b11156114e3576114dc836116ed565b82556114ea565b4360028301555b856001600160a01b0316886001600160a01b03167ff3cfcfc091fdd683cf6c013de9806af93f3af27b256a57cb776331291cef4085898860405161152f929190612685565b60405180910390a35050505050505050565b6000828211156115635760405162461bcd60e51b8152600401610334906123f1565b50900390565b6103488363a9059cbb60e01b848460405160240161158892919061220b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119b3565b600082826040516020016115d492919061215a565b60408051601f1981840301815291905280516020909101209392505050565b60008063adf8252d60e01b905060006060856001600160a01b03168386604051602401611620919061267c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161165e919061217c565b6000604051808303816000865af19150503d806000811461169b576040519150601f19603f3d011682016040523d82523d6000602084013e6116a0565b606091505b509150915081156116c957808060200190518101906116bf9190612142565b9350505050610ba4565b60009350505050610ba4565b600061119b8383611a42565b600061119b8383611a5a565b60008181526068602052604081208190611706906119a8565b905060006032815b83811015611743576000868152606860205260409020611739906117329083611aa4565b8490611176565b925060010161170e565b6001841115611763576117606117598386611ab0565b8490611541565b92505b5090949350505050565b600080821161178e5760405162461bcd60e51b8152600401610334906124bc565b81838161179757fe5b049392505050565b804710156117bf5760405162461bcd60e51b815260040161033490612485565b6000826001600160a01b0316826040516117d890612198565b60006040518083038185875af1925050503d8060008114611815576040519150601f19603f3d011682016040523d82523d6000602084013e61181a565b606091505b50509050806103485760405162461bcd60e51b815260040161033490612428565b3b151590565b600054610100900460ff168061185a575061185a611262565b80611868575060005460ff16155b6118845760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156106e2576000805460ff1961ff00199091166101001716600117905580156106f4576000805461ff001916905550565b600054610100900460ff16806118db57506118db611262565b806118e9575060005460ff16155b6119055760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff16158015611930576000805460ff1961ff0019909116610100171660011790555b600061193a610d59565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156106f4576000805461ff001916905550565b600061119b8383611aea565b6000610ba482611bb0565b6060611a08826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bb49092919063ffffffff16565b8051909150156103485780806020019051810190611a26919061210a565b6103485760405162461bcd60e51b815260040161033490612611565b60009081526001919091016020526040902054151590565b6000611a668383611a42565b611a9c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ba4565b506000610ba4565b600061119b8383611bc3565b600082611abf57506000610ba4565b82820282848281611acc57fe5b041461119b5760405162461bcd60e51b815260040161033490612541565b60008181526001830160205260408120548015611ba65783546000198083019190810190600090879083908110611b1d57fe5b9060005260206000200154905080876000018481548110611b3a57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611b6a57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ba4565b6000915050610ba4565b5490565b606061125a8484600085611c08565b81546000908210611be65760405162461bcd60e51b8152600401610334906122c9565b826000018281548110611bf557fe5b9060005260206000200154905092915050565b6060611c138561183b565b611c2f5760405162461bcd60e51b8152600401610334906125da565b60006060866001600160a01b03168587604051611c4c919061217c565b60006040518083038185875af1925050503d8060008114611c89576040519150601f19603f3d011682016040523d82523d6000602084013e611c8e565b606091505b50915091508115611ca257915061125a9050565b805115611cb25780518082602001fd5b8360405162461bcd60e51b81526004016103349190612296565b60405180606001604052806000815260200160008152602001600081525090565b60008083601f840112611cfe578182fd5b50813567ffffffffffffffff811115611d15578182fd5b602083019150836020828501011115611d2d57600080fd5b9250929050565b600060208284031215611d45578081fd5b813561119b816126bf565b600060208284031215611d61578081fd5b815161119b816126bf565b600080600060608486031215611d80578182fd5b8335611d8b816126bf565b92506020840135611d9b816126bf565b929592945050506040919091013590565b60008060008060808587031215611dc1578081fd5b8435611dcc816126bf565b93506020850135611ddc816126bf565b93969395505050506040820135916060013590565b60008060408385031215611e03578182fd5b8235611e0e816126bf565b946020939093013593505050565b60008060408385031215611e2e578182fd5b8235611e39816126bf565b91506020830135611e49816126bf565b809150509250929050565b60008060008060008060008060e0898b031215611e6f578384fd5b8835611e7a816126bf565b97506020890135611e8a816126bf565b96506040890135611e9a816126bf565b955060608901359450608089013567ffffffffffffffff811115611ebc578485fd5b611ec88b828c01611ced565b90955093505060a0890135611edc816126bf565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a031215611f0e578283fd5b8735611f19816126bf565b9650602088013595506040880135611f30816126bf565b94506060880135611f40816126bf565b93506080880135925060a0880135611f57816126bf565b8092505060c0880135905092959891949750929550565b600080600080600080600060c0888a031215611f88578283fd5b8735611f93816126bf565b965060208801359550604088013567ffffffffffffffff811115611fb5578384fd5b611fc18a828b01611ced565b9096509450506060880135611fd5816126bf565b92506080880135611fe5816126bf565b8092505060a0880135905092959891949750929550565b600080600080600080600060c0888a031215612016578081fd5b8735612021816126bf565b965060208801359550604088013567ffffffffffffffff811115612043578182fd5b61204f8a828b01611ced565b9096509450506060880135612063816126bf565b969995985093969295946080840135945060a09093013592915050565b60008060008060008060008060e0898b03121561209b578182fd5b88356120a6816126bf565b975060208901359650604089013567ffffffffffffffff8111156120c8578283fd5b6120d48b828c01611ced565b90975095505060608901356120e8816126bf565b979a96995094979396956080850135955060a08501359460c001359350915050565b60006020828403121561211b578081fd5b8151801515811461119b578182fd5b60006020828403121561213b578081fd5b5035919050565b600060208284031215612153578081fd5b5051919050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6000825161218e818460208701612693565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03861681526020810185905260806040820181905281018390526000838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825282518060208401526122b5816040850160208701612693565b601f01601f19169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260099082015268554e493a452d34303360b81b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600990820152684248503a452d34303360b81b604082015260600190565b602080825260099082015268554e493a452d34313760b81b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600990820152680aa9c92748a5a6260760bb1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b918252602082015260400190565b60005b838110156126ae578181015183820152602001612696565b838111156109c35750506000910152565b6001600160a01b03811681146106f457600080fdfea264697066735822122055c84894697dd3e92642a98fce78fc85de39452936a89059494ec186a3b80f2d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063b9e09b4b1161007c578063b9e09b4b1461028e578063bbf1da84146102a1578063bea38be0146102a9578063c5d1d706146102bc578063f2fde38b146102cf578063fbf5ca14146102e25761014d565b80638da5cb5b14610227578063945233e21461022f57806395469dfc146102425780639a87c0de14610255578063a0edb48b14610268578063aa29542d1461027b5761014d565b8063522f681511610115578063522f6815146101be5780636e5559fd146101d1578063715018a6146101e45780638129fc1c146101ec578063836c478d146101f45780638b9309b2146102145761014d565b80631593dee1146101525780632bdbb77f1461016757806330219ef41461017a5780634025feb21461019857806341db85d6146101ab575b600080fd5b610165610160366004611d6c565b6102f5565b005b610165610175366004611ffc565b61034d565b61018261038d565b60405161018f919061219b565b60405180910390f35b6101656101a6366004611d6c565b61039c565b6101656101b9366004611ffc565b6103e6565b6101656101cc366004611df1565b6104ca565b6101656101df366004611d34565b610517565b6101656105e3565b61016561066c565b61020761020236600461212a565b6106f7565b60405161018f919061265b565b610165610222366004611ef4565b610384565b610182610738565b61016561023d366004611d34565b610747565b610165610250366004611e1c565b6107d5565b610165610263366004611d34565b6108d4565b610165610276366004611dac565b610978565b610165610289366004611f6e565b6109c9565b61016561029c366004611e54565b610a9c565b610182610b53565b6101656102b7366004611ffc565b610b62565b6101826102ca366004611d34565b610b99565b6101656102dd366004611d34565b610baa565b6101656102f0366004612080565b610c6b565b6102fd610d59565b6001600160a01b031661030e610738565b6001600160a01b03161461033d5760405162461bcd60e51b815260040161033490612582565b60405180910390fd5b610348838383610d5d565b505050565b6065546001600160a01b031633146103775760405162461bcd60e51b8152600401610334906125b7565b6103848787858585610e6a565b50505050505050565b6065546001600160a01b031681565b6103a4610d59565b6001600160a01b03166103b5610738565b6001600160a01b0316146103db5760405162461bcd60e51b815260040161033490612582565b610348838383610ffd565b6065546001600160a01b031633146104105760405162461bcd60e51b8152600401610334906125b7565b600061041b84611158565b90506001600160a01b038116156104c05760006104388385611176565b604051631434318f60e21b81529091506001600160a01b038316906350d0c63c9061046b908c908c908690600401612275565b602060405180830381600087803b15801561048557600080fd5b505af1158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190612142565b50505b5050505050505050565b6104d2610d59565b6001600160a01b03166104e3610738565b6001600160a01b0316146105095760405162461bcd60e51b815260040161033490612582565b61051382826111a2565b5050565b61051f610d59565b6001600160a01b0316610530610738565b6001600160a01b0316146105565760405162461bcd60e51b815260040161033490612582565b806001600160a01b0381161580159061057c575061057c816001600160a01b0316611226565b6105985760405162461bcd60e51b815260040161033490612397565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f5ce0e6b7fd36339ee97339831b6c72694ecee88c62aab49919d9cabe0a732e4190600090a25050565b6105eb610d59565b6001600160a01b03166105fc610738565b6001600160a01b0316146106225760405162461bcd60e51b815260040161033490612582565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b600054610100900460ff16806106855750610685611262565b80610693575060005460ff16155b6106af5760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156106da576000805460ff1961ff0019909116610100171660011790555b6106e2611273565b80156106f4576000805461ff00191690555b50565b6106ff611ccc565b50600090815260696020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6033546001600160a01b031690565b61074f610d59565b6001600160a01b0316610760610738565b6001600160a01b0316146107865760405162461bcd60e51b815260040161033490612582565b6001600160a01b03811660008181526067602052604080822080546001600160a01b0319169055517f87e1027e3dc61d1977f39f0dfe911b66a943946b4ceb39210dee01495621de529190a250565b6107dd610d59565b6001600160a01b03166107ee610738565b6001600160a01b0316146108145760405162461bcd60e51b815260040161033490612582565b816001600160a01b0381161580159061083a575061083a816001600160a01b0316611226565b6108565760405162461bcd60e51b815260040161033490612397565b6001600160a01b03821661087c5760405162461bcd60e51b81526004016103349061230b565b6001600160a01b0382811660008181526067602052604080822080546001600160a01b0319169488169485179055517f3b76c6366ef8a1f8d2dbb75e4be27be1e0749716fff3e6bc327da9c6158deada9190a3505050565b6108dc610d59565b6001600160a01b03166108ed610738565b6001600160a01b0316146109135760405162461bcd60e51b815260040161033490612582565b806001600160a01b038116158015906109395750610939816001600160a01b0316611226565b6109555760405162461bcd60e51b815260040161033490612397565b50606680546001600160a01b0319166001600160a01b0392909216919091179055565b610980610d59565b6001600160a01b0316610991610738565b6001600160a01b0316146109b75760405162461bcd60e51b815260040161033490612582565b6109c3848484846112f1565b50505050565b6065546001600160a01b031633146109f35760405162461bcd60e51b8152600401610334906125b7565b60006109fe83611158565b90506001600160a01b038116156104c057604051631434318f60e21b81526001600160a01b038216906350d0c63c90610a3f908b908b908790600401612275565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190612142565b505050505050505050565b6065546001600160a01b03163314610ac65760405162461bcd60e51b8152600401610334906125b7565b6000610ad183611158565b90506001600160a01b03811615610a91576040516323632fb160e11b81526001600160a01b038216906346c65f6290610b16908a908a908a908a908990600401612224565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b50505050505050505050505050565b6066546001600160a01b031681565b6065546001600160a01b03163314610b8c5760405162461bcd60e51b8152600401610334906125b7565b6103848787858585611450565b6000610ba482611158565b92915050565b610bb2610d59565b6001600160a01b0316610bc3610738565b6001600160a01b031614610be95760405162461bcd60e51b815260040161033490612582565b6001600160a01b038116610c0f5760405162461bcd60e51b81526004016103349061232e565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314610c955760405162461bcd60e51b8152600401610334906125b7565b6000610ca085611158565b90506001600160a01b03811615610a91576000610cc784610cc18588611541565b90611176565b604051631434318f60e21b81529091506001600160a01b038316906350d0c63c90610cfa908d908d908690600401612275565b602060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4c9190612142565b5050505050505050505050565b3390565b6001600160a01b038316610d835760405162461bcd60e51b815260040161033490612374565b6040516370a0823160e01b815281906001600160a01b038416906370a0823190610db190309060040161219b565b60206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612142565b1061034857610e1a6001600160a01b0383168483611569565b816001600160a01b0316836001600160a01b03167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b83604051610e5d919061267c565b60405180910390a3505050565b6066546001600160a01b03848116911614610e8457610ff6565b6000610e996001600160a01b038716866115bf565b90506000610ea785856115f3565b9050600081118015610ece57506000828152606860205260409020610ecc90826116d5565b155b15610fa6576000828152606860205260409020610eeb90826116e1565b506000610ef7836116ed565b600084815260696020526040902060010154909150610f5157604080516060810182528281524360208083019182526000838501818152888252606990925293909320915182555160018201559051600290910155610fa4565b60008381526069602052604090206001810154908290554303610f90610f7882600261176d565b60008681526069602052604090206001015490611176565b600085815260696020526040902060010155505b505b846001600160a01b0316876001600160a01b03167f186ebbe503be539e070ca73b33a78f4266d96003e62b888dc31f88a39ddc9c878887604051610feb929190612685565b60405180910390a350505b5050505050565b6001600160a01b0383166110235760405162461bcd60e51b815260040161033490612374565b6040516331a9108f60e11b815230906001600160a01b03841690636352211e9061105190859060040161267c565b60206040518083038186803b15801561106957600080fd5b505afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a19190611d50565b6001600160a01b03161415610348576040516323b872dd60e01b81526001600160a01b038316906323b872dd906110e0903090879086906004016121af565b600060405180830381600087803b1580156110fa57600080fd5b505af115801561110e573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a4505050565b6001600160a01b039081166000908152606760205260409020541690565b60008282018381101561119b5760405162461bcd60e51b8152600401610334906123ba565b9392505050565b6001600160a01b0382166111c85760405162461bcd60e51b815260040161033490612374565b804710610513576111e26001600160a01b0383168261179f565b816001600160a01b03167eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd8260405161121a919061267c565b60405180910390a25050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061125a57508115155b949350505050565b600061126d3061183b565b15905090565b600054610100900460ff168061128c575061128c611262565b8061129a575060005460ff16155b6112b65760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156112e1576000805460ff1961ff0019909116610100171660011790555b6112e9611841565b6106e26118c2565b6001600160a01b0384166113175760405162461bcd60e51b815260040161033490612374565b604051627eeac760e11b815281906001600160a01b0385169062fdd58e90611345903090879060040161220b565b60206040518083038186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190612142565b106109c357604051637921219560e11b81526001600160a01b0384169063f242432a906113cc9030908890879087906004016121d3565b600060405180830381600087803b1580156113e657600080fd5b505af11580156113fa573d6000803e3d6000fd5b5050505081836001600160a01b0316856001600160a01b03167f620337bf89eea2b9ae2657beead83b5fa620452817118348aff96e201d52598b84604051611442919061267c565b60405180910390a450505050565b6066546001600160a01b0384811691161461146a57610ff6565b600061147f6001600160a01b038716866115bf565b600081815260696020526040812091925061149a86866115f3565b60008481526068602052604090209091506114b5908261199c565b5060008381526068602052604081206114cd906119a8565b11156114e3576114dc836116ed565b82556114ea565b4360028301555b856001600160a01b0316886001600160a01b03167ff3cfcfc091fdd683cf6c013de9806af93f3af27b256a57cb776331291cef4085898860405161152f929190612685565b60405180910390a35050505050505050565b6000828211156115635760405162461bcd60e51b8152600401610334906123f1565b50900390565b6103488363a9059cbb60e01b848460405160240161158892919061220b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119b3565b600082826040516020016115d492919061215a565b60408051601f1981840301815291905280516020909101209392505050565b60008063adf8252d60e01b905060006060856001600160a01b03168386604051602401611620919061267c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161165e919061217c565b6000604051808303816000865af19150503d806000811461169b576040519150601f19603f3d011682016040523d82523d6000602084013e6116a0565b606091505b509150915081156116c957808060200190518101906116bf9190612142565b9350505050610ba4565b60009350505050610ba4565b600061119b8383611a42565b600061119b8383611a5a565b60008181526068602052604081208190611706906119a8565b905060006032815b83811015611743576000868152606860205260409020611739906117329083611aa4565b8490611176565b925060010161170e565b6001841115611763576117606117598386611ab0565b8490611541565b92505b5090949350505050565b600080821161178e5760405162461bcd60e51b8152600401610334906124bc565b81838161179757fe5b049392505050565b804710156117bf5760405162461bcd60e51b815260040161033490612485565b6000826001600160a01b0316826040516117d890612198565b60006040518083038185875af1925050503d8060008114611815576040519150601f19603f3d011682016040523d82523d6000602084013e61181a565b606091505b50509050806103485760405162461bcd60e51b815260040161033490612428565b3b151590565b600054610100900460ff168061185a575061185a611262565b80611868575060005460ff16155b6118845760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff161580156106e2576000805460ff1961ff00199091166101001716600117905580156106f4576000805461ff001916905550565b600054610100900460ff16806118db57506118db611262565b806118e9575060005460ff16155b6119055760405162461bcd60e51b8152600401610334906124f3565b600054610100900460ff16158015611930576000805460ff1961ff0019909116610100171660011790555b600061193a610d59565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156106f4576000805461ff001916905550565b600061119b8383611aea565b6000610ba482611bb0565b6060611a08826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bb49092919063ffffffff16565b8051909150156103485780806020019051810190611a26919061210a565b6103485760405162461bcd60e51b815260040161033490612611565b60009081526001919091016020526040902054151590565b6000611a668383611a42565b611a9c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ba4565b506000610ba4565b600061119b8383611bc3565b600082611abf57506000610ba4565b82820282848281611acc57fe5b041461119b5760405162461bcd60e51b815260040161033490612541565b60008181526001830160205260408120548015611ba65783546000198083019190810190600090879083908110611b1d57fe5b9060005260206000200154905080876000018481548110611b3a57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611b6a57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ba4565b6000915050610ba4565b5490565b606061125a8484600085611c08565b81546000908210611be65760405162461bcd60e51b8152600401610334906122c9565b826000018281548110611bf557fe5b9060005260206000200154905092915050565b6060611c138561183b565b611c2f5760405162461bcd60e51b8152600401610334906125da565b60006060866001600160a01b03168587604051611c4c919061217c565b60006040518083038185875af1925050503d8060008114611c89576040519150601f19603f3d011682016040523d82523d6000602084013e611c8e565b606091505b50915091508115611ca257915061125a9050565b805115611cb25780518082602001fd5b8360405162461bcd60e51b81526004016103349190612296565b60405180606001604052806000815260200160008152602001600081525090565b60008083601f840112611cfe578182fd5b50813567ffffffffffffffff811115611d15578182fd5b602083019150836020828501011115611d2d57600080fd5b9250929050565b600060208284031215611d45578081fd5b813561119b816126bf565b600060208284031215611d61578081fd5b815161119b816126bf565b600080600060608486031215611d80578182fd5b8335611d8b816126bf565b92506020840135611d9b816126bf565b929592945050506040919091013590565b60008060008060808587031215611dc1578081fd5b8435611dcc816126bf565b93506020850135611ddc816126bf565b93969395505050506040820135916060013590565b60008060408385031215611e03578182fd5b8235611e0e816126bf565b946020939093013593505050565b60008060408385031215611e2e578182fd5b8235611e39816126bf565b91506020830135611e49816126bf565b809150509250929050565b60008060008060008060008060e0898b031215611e6f578384fd5b8835611e7a816126bf565b97506020890135611e8a816126bf565b96506040890135611e9a816126bf565b955060608901359450608089013567ffffffffffffffff811115611ebc578485fd5b611ec88b828c01611ced565b90955093505060a0890135611edc816126bf565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a031215611f0e578283fd5b8735611f19816126bf565b9650602088013595506040880135611f30816126bf565b94506060880135611f40816126bf565b93506080880135925060a0880135611f57816126bf565b8092505060c0880135905092959891949750929550565b600080600080600080600060c0888a031215611f88578283fd5b8735611f93816126bf565b965060208801359550604088013567ffffffffffffffff811115611fb5578384fd5b611fc18a828b01611ced565b9096509450506060880135611fd5816126bf565b92506080880135611fe5816126bf565b8092505060a0880135905092959891949750929550565b600080600080600080600060c0888a031215612016578081fd5b8735612021816126bf565b965060208801359550604088013567ffffffffffffffff811115612043578182fd5b61204f8a828b01611ced565b9096509450506060880135612063816126bf565b969995985093969295946080840135945060a09093013592915050565b60008060008060008060008060e0898b03121561209b578182fd5b88356120a6816126bf565b975060208901359650604089013567ffffffffffffffff8111156120c8578283fd5b6120d48b828c01611ced565b90975095505060608901356120e8816126bf565b979a96995094979396956080850135955060a08501359460c001359350915050565b60006020828403121561211b578081fd5b8151801515811461119b578182fd5b60006020828403121561213b578081fd5b5035919050565b600060208284031215612153578081fd5b5051919050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6000825161218e818460208701612693565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03861681526020810185905260806040820181905281018390526000838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825282518060208401526122b5816040850160208701612693565b601f01601f19169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260099082015268554e493a452d34303360b81b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600990820152684248503a452d34303360b81b604082015260600190565b602080825260099082015268554e493a452d34313760b81b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600990820152680aa9c92748a5a6260760bb1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b918252602082015260400190565b60005b838110156126ae578181015183820152602001612696565b838111156109c35750506000910152565b6001600160a01b03811681146106f457600080fdfea264697066735822122055c84894697dd3e92642a98fce78fc85de39452936a89059494ec186a3b80f2d64736f6c634300060c0033",
  "devdoc": {
    "details": "Upgradeable Contract",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Charged Particles Universe Contract with Rewards Program",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 680,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 683,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3177,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 111,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 230,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16752,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_chargedParticles",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 16754,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_multiplierNft",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 16758,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_assetRewardPrograms",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 16762,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_multiplierNftsSet",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_struct(UintSet)8991_storage)"
      },
      {
        "astId": 16766,
        "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
        "label": "_nftStake",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(NftStake)29442_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(NftStake)29442_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IUniverseRP.NftStake)",
        "numberOfBytes": "32",
        "value": "t_struct(NftStake)29442_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)8991_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)8991_storage"
      },
      "t_struct(NftStake)29442_storage": {
        "encoding": "inplace",
        "label": "struct IUniverseRP.NftStake",
        "members": [
          {
            "astId": 29437,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "multiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29439,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "depositBlockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 29441,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "releaseBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)8702_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8697,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8701,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)8991_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 8990,
            "contract": "contracts/v1/UniverseRP.sol:UniverseRP",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8702_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}